
tia-testl476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b290  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013720  0800b420  0800b420  0000c420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eb40  0801eb40  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0801eb40  0801eb40  0001fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eb48  0801eb48  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eb48  0801eb48  0001fb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801eb4c  0801eb4c  0001fb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801eb50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009588  20000060  0801ebb0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200095e8  0801ebb0  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018637  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003190  00000000  00000000  000386c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001005  00000000  00000000  0003cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ca  00000000  00000000  0003ddb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019026  00000000  00000000  0006717f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108adf  00000000  00000000  000801a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00188c84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b0  00000000  00000000  00188d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037c6  00000000  00000000  0018f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00192a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b408 	.word	0x0800b408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800b408 	.word	0x0800b408

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2iz>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d215      	bcs.n	8000c22 <__aeabi_d2iz+0x36>
 8000bf6:	d511      	bpl.n	8000c1c <__aeabi_d2iz+0x30>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d912      	bls.n	8000c28 <__aeabi_d2iz+0x3c>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d105      	bne.n	8000c34 <__aeabi_d2iz+0x48>
 8000c28:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_frsub>:
 8000c7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c80:	e002      	b.n	8000c88 <__addsf3>
 8000c82:	bf00      	nop

08000c84 <__aeabi_fsub>:
 8000c84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c88 <__addsf3>:
 8000c88:	0042      	lsls	r2, r0, #1
 8000c8a:	bf1f      	itttt	ne
 8000c8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c90:	ea92 0f03 	teqne	r2, r3
 8000c94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9c:	d06a      	beq.n	8000d74 <__addsf3+0xec>
 8000c9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ca2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ca6:	bfc1      	itttt	gt
 8000ca8:	18d2      	addgt	r2, r2, r3
 8000caa:	4041      	eorgt	r1, r0
 8000cac:	4048      	eorgt	r0, r1
 8000cae:	4041      	eorgt	r1, r0
 8000cb0:	bfb8      	it	lt
 8000cb2:	425b      	neglt	r3, r3
 8000cb4:	2b19      	cmp	r3, #25
 8000cb6:	bf88      	it	hi
 8000cb8:	4770      	bxhi	lr
 8000cba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cc6:	bf18      	it	ne
 8000cc8:	4240      	negne	r0, r0
 8000cca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cd6:	bf18      	it	ne
 8000cd8:	4249      	negne	r1, r1
 8000cda:	ea92 0f03 	teq	r2, r3
 8000cde:	d03f      	beq.n	8000d60 <__addsf3+0xd8>
 8000ce0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce8:	eb10 000c 	adds.w	r0, r0, ip
 8000cec:	f1c3 0320 	rsb	r3, r3, #32
 8000cf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cf8:	d502      	bpl.n	8000d00 <__addsf3+0x78>
 8000cfa:	4249      	negs	r1, r1
 8000cfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d04:	d313      	bcc.n	8000d2e <__addsf3+0xa6>
 8000d06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d0a:	d306      	bcc.n	8000d1a <__addsf3+0x92>
 8000d0c:	0840      	lsrs	r0, r0, #1
 8000d0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d12:	f102 0201 	add.w	r2, r2, #1
 8000d16:	2afe      	cmp	r2, #254	@ 0xfe
 8000d18:	d251      	bcs.n	8000dbe <__addsf3+0x136>
 8000d1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d22:	bf08      	it	eq
 8000d24:	f020 0001 	biceq.w	r0, r0, #1
 8000d28:	ea40 0003 	orr.w	r0, r0, r3
 8000d2c:	4770      	bx	lr
 8000d2e:	0049      	lsls	r1, r1, #1
 8000d30:	eb40 0000 	adc.w	r0, r0, r0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	bf28      	it	cs
 8000d38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d3c:	d2ed      	bcs.n	8000d1a <__addsf3+0x92>
 8000d3e:	fab0 fc80 	clz	ip, r0
 8000d42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d46:	ebb2 020c 	subs.w	r2, r2, ip
 8000d4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d4e:	bfaa      	itet	ge
 8000d50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d54:	4252      	neglt	r2, r2
 8000d56:	4318      	orrge	r0, r3
 8000d58:	bfbc      	itt	lt
 8000d5a:	40d0      	lsrlt	r0, r2
 8000d5c:	4318      	orrlt	r0, r3
 8000d5e:	4770      	bx	lr
 8000d60:	f092 0f00 	teq	r2, #0
 8000d64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d68:	bf06      	itte	eq
 8000d6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d6e:	3201      	addeq	r2, #1
 8000d70:	3b01      	subne	r3, #1
 8000d72:	e7b5      	b.n	8000ce0 <__addsf3+0x58>
 8000d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d7c:	bf18      	it	ne
 8000d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d82:	d021      	beq.n	8000dc8 <__addsf3+0x140>
 8000d84:	ea92 0f03 	teq	r2, r3
 8000d88:	d004      	beq.n	8000d94 <__addsf3+0x10c>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	bf08      	it	eq
 8000d90:	4608      	moveq	r0, r1
 8000d92:	4770      	bx	lr
 8000d94:	ea90 0f01 	teq	r0, r1
 8000d98:	bf1c      	itt	ne
 8000d9a:	2000      	movne	r0, #0
 8000d9c:	4770      	bxne	lr
 8000d9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000da2:	d104      	bne.n	8000dae <__addsf3+0x126>
 8000da4:	0040      	lsls	r0, r0, #1
 8000da6:	bf28      	it	cs
 8000da8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dac:	4770      	bx	lr
 8000dae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000db2:	bf3c      	itt	cc
 8000db4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000db8:	4770      	bxcc	lr
 8000dba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc6:	4770      	bx	lr
 8000dc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dcc:	bf16      	itet	ne
 8000dce:	4608      	movne	r0, r1
 8000dd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd4:	4601      	movne	r1, r0
 8000dd6:	0242      	lsls	r2, r0, #9
 8000dd8:	bf06      	itte	eq
 8000dda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dde:	ea90 0f01 	teqeq	r0, r1
 8000de2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_ui2f>:
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e004      	b.n	8000df8 <__aeabi_i2f+0x8>
 8000dee:	bf00      	nop

08000df0 <__aeabi_i2f>:
 8000df0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000df4:	bf48      	it	mi
 8000df6:	4240      	negmi	r0, r0
 8000df8:	ea5f 0c00 	movs.w	ip, r0
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e04:	4601      	mov	r1, r0
 8000e06:	f04f 0000 	mov.w	r0, #0
 8000e0a:	e01c      	b.n	8000e46 <__aeabi_l2f+0x2a>

08000e0c <__aeabi_ul2f>:
 8000e0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e00a      	b.n	8000e30 <__aeabi_l2f+0x14>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_l2f>:
 8000e1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000e20:	bf08      	it	eq
 8000e22:	4770      	bxeq	lr
 8000e24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e28:	d502      	bpl.n	8000e30 <__aeabi_l2f+0x14>
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e30:	ea5f 0c01 	movs.w	ip, r1
 8000e34:	bf02      	ittt	eq
 8000e36:	4684      	moveq	ip, r0
 8000e38:	4601      	moveq	r1, r0
 8000e3a:	2000      	moveq	r0, #0
 8000e3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e40:	bf08      	it	eq
 8000e42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e4a:	fabc f28c 	clz	r2, ip
 8000e4e:	3a08      	subs	r2, #8
 8000e50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e54:	db10      	blt.n	8000e78 <__aeabi_l2f+0x5c>
 8000e56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	f020 0001 	biceq.w	r0, r0, #1
 8000e76:	4770      	bx	lr
 8000e78:	f102 0220 	add.w	r2, r2, #32
 8000e7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e80:	f1c2 0220 	rsb	r2, r2, #32
 8000e84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e88:	fa21 f202 	lsr.w	r2, r1, r2
 8000e8c:	eb43 0002 	adc.w	r0, r3, r2
 8000e90:	bf08      	it	eq
 8000e92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fmul>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d06f      	beq.n	8000f90 <__aeabi_fmul+0xf8>
 8000eb0:	441a      	add	r2, r3
 8000eb2:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb6:	0240      	lsls	r0, r0, #9
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ebe:	d01e      	beq.n	8000efe <__aeabi_fmul+0x66>
 8000ec0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ec4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ec8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ecc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ed8:	bf3e      	ittt	cc
 8000eda:	0049      	lslcc	r1, r1, #1
 8000edc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	ea40 0001 	orr.w	r0, r0, r1
 8000ee6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eea:	2afd      	cmp	r2, #253	@ 0xfd
 8000eec:	d81d      	bhi.n	8000f2a <__aeabi_fmul+0x92>
 8000eee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ef2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef6:	bf08      	it	eq
 8000ef8:	f020 0001 	biceq.w	r0, r0, #1
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f06:	bf08      	it	eq
 8000f08:	0249      	lsleq	r1, r1, #9
 8000f0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000f12:	3a7f      	subs	r2, #127	@ 0x7f
 8000f14:	bfc2      	ittt	gt
 8000f16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1e:	4770      	bxgt	lr
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	dc5d      	bgt.n	8000fe8 <__aeabi_fmul+0x150>
 8000f2c:	f112 0f19 	cmn.w	r2, #25
 8000f30:	bfdc      	itt	le
 8000f32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f36:	4770      	bxle	lr
 8000f38:	f1c2 0200 	rsb	r2, r2, #0
 8000f3c:	0041      	lsls	r1, r0, #1
 8000f3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f42:	f1c2 0220 	rsb	r2, r2, #32
 8000f46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f4e:	f140 0000 	adc.w	r0, r0, #0
 8000f52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f56:	bf08      	it	eq
 8000f58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f5c:	4770      	bx	lr
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fmul+0xce>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fmul+0xe6>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e78f      	b.n	8000eb0 <__aeabi_fmul+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	bf18      	it	ne
 8000f9a:	ea93 0f0c 	teqne	r3, ip
 8000f9e:	d00a      	beq.n	8000fb6 <__aeabi_fmul+0x11e>
 8000fa0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa4:	bf18      	it	ne
 8000fa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000faa:	d1d8      	bne.n	8000f5e <__aeabi_fmul+0xc6>
 8000fac:	ea80 0001 	eor.w	r0, r0, r1
 8000fb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb4:	4770      	bx	lr
 8000fb6:	f090 0f00 	teq	r0, #0
 8000fba:	bf17      	itett	ne
 8000fbc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fc0:	4608      	moveq	r0, r1
 8000fc2:	f091 0f00 	teqne	r1, #0
 8000fc6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000fca:	d014      	beq.n	8000ff6 <__aeabi_fmul+0x15e>
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_fmul+0x13e>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d10f      	bne.n	8000ff6 <__aeabi_fmul+0x15e>
 8000fd6:	ea93 0f0c 	teq	r3, ip
 8000fda:	d103      	bne.n	8000fe4 <__aeabi_fmul+0x14c>
 8000fdc:	024b      	lsls	r3, r1, #9
 8000fde:	bf18      	it	ne
 8000fe0:	4608      	movne	r0, r1
 8000fe2:	d108      	bne.n	8000ff6 <__aeabi_fmul+0x15e>
 8000fe4:	ea80 0001 	eor.w	r0, r0, r1
 8000fe8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ff0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ff4:	4770      	bx	lr
 8000ff6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ffa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ffe:	4770      	bx	lr

08001000 <__aeabi_fdiv>:
 8001000:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8001004:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001008:	bf1e      	ittt	ne
 800100a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800100e:	ea92 0f0c 	teqne	r2, ip
 8001012:	ea93 0f0c 	teqne	r3, ip
 8001016:	d069      	beq.n	80010ec <__aeabi_fdiv+0xec>
 8001018:	eba2 0203 	sub.w	r2, r2, r3
 800101c:	ea80 0c01 	eor.w	ip, r0, r1
 8001020:	0249      	lsls	r1, r1, #9
 8001022:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001026:	d037      	beq.n	8001098 <__aeabi_fdiv+0x98>
 8001028:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800102c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001030:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001034:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001038:	428b      	cmp	r3, r1
 800103a:	bf38      	it	cc
 800103c:	005b      	lslcc	r3, r3, #1
 800103e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001042:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001046:	428b      	cmp	r3, r1
 8001048:	bf24      	itt	cs
 800104a:	1a5b      	subcs	r3, r3, r1
 800104c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001050:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001054:	bf24      	itt	cs
 8001056:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800105a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800105e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001062:	bf24      	itt	cs
 8001064:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001068:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800106c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001070:	bf24      	itt	cs
 8001072:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001076:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	bf18      	it	ne
 800107e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001082:	d1e0      	bne.n	8001046 <__aeabi_fdiv+0x46>
 8001084:	2afd      	cmp	r2, #253	@ 0xfd
 8001086:	f63f af50 	bhi.w	8000f2a <__aeabi_fmul+0x92>
 800108a:	428b      	cmp	r3, r1
 800108c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001090:	bf08      	it	eq
 8001092:	f020 0001 	biceq.w	r0, r0, #1
 8001096:	4770      	bx	lr
 8001098:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800109c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80010a0:	327f      	adds	r2, #127	@ 0x7f
 80010a2:	bfc2      	ittt	gt
 80010a4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80010a8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80010ac:	4770      	bxgt	lr
 80010ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	3a01      	subs	r2, #1
 80010b8:	e737      	b.n	8000f2a <__aeabi_fmul+0x92>
 80010ba:	f092 0f00 	teq	r2, #0
 80010be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010c2:	bf02      	ittt	eq
 80010c4:	0040      	lsleq	r0, r0, #1
 80010c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010ca:	3a01      	subeq	r2, #1
 80010cc:	d0f9      	beq.n	80010c2 <__aeabi_fdiv+0xc2>
 80010ce:	ea40 000c 	orr.w	r0, r0, ip
 80010d2:	f093 0f00 	teq	r3, #0
 80010d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010da:	bf02      	ittt	eq
 80010dc:	0049      	lsleq	r1, r1, #1
 80010de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010e2:	3b01      	subeq	r3, #1
 80010e4:	d0f9      	beq.n	80010da <__aeabi_fdiv+0xda>
 80010e6:	ea41 010c 	orr.w	r1, r1, ip
 80010ea:	e795      	b.n	8001018 <__aeabi_fdiv+0x18>
 80010ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010f0:	ea92 0f0c 	teq	r2, ip
 80010f4:	d108      	bne.n	8001108 <__aeabi_fdiv+0x108>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	f47f af7d 	bne.w	8000ff6 <__aeabi_fmul+0x15e>
 80010fc:	ea93 0f0c 	teq	r3, ip
 8001100:	f47f af70 	bne.w	8000fe4 <__aeabi_fmul+0x14c>
 8001104:	4608      	mov	r0, r1
 8001106:	e776      	b.n	8000ff6 <__aeabi_fmul+0x15e>
 8001108:	ea93 0f0c 	teq	r3, ip
 800110c:	d104      	bne.n	8001118 <__aeabi_fdiv+0x118>
 800110e:	024b      	lsls	r3, r1, #9
 8001110:	f43f af4c 	beq.w	8000fac <__aeabi_fmul+0x114>
 8001114:	4608      	mov	r0, r1
 8001116:	e76e      	b.n	8000ff6 <__aeabi_fmul+0x15e>
 8001118:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800111c:	bf18      	it	ne
 800111e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001122:	d1ca      	bne.n	80010ba <__aeabi_fdiv+0xba>
 8001124:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001128:	f47f af5c 	bne.w	8000fe4 <__aeabi_fmul+0x14c>
 800112c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001130:	f47f af3c 	bne.w	8000fac <__aeabi_fmul+0x114>
 8001134:	e75f      	b.n	8000ff6 <__aeabi_fmul+0x15e>
 8001136:	bf00      	nop

08001138 <__aeabi_uldivmod>:
 8001138:	b953      	cbnz	r3, 8001150 <__aeabi_uldivmod+0x18>
 800113a:	b94a      	cbnz	r2, 8001150 <__aeabi_uldivmod+0x18>
 800113c:	2900      	cmp	r1, #0
 800113e:	bf08      	it	eq
 8001140:	2800      	cmpeq	r0, #0
 8001142:	bf1c      	itt	ne
 8001144:	f04f 31ff 	movne.w	r1, #4294967295
 8001148:	f04f 30ff 	movne.w	r0, #4294967295
 800114c:	f000 b96a 	b.w	8001424 <__aeabi_idiv0>
 8001150:	f1ad 0c08 	sub.w	ip, sp, #8
 8001154:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001158:	f000 f806 	bl	8001168 <__udivmoddi4>
 800115c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001164:	b004      	add	sp, #16
 8001166:	4770      	bx	lr

08001168 <__udivmoddi4>:
 8001168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800116c:	9d08      	ldr	r5, [sp, #32]
 800116e:	460c      	mov	r4, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d14e      	bne.n	8001212 <__udivmoddi4+0xaa>
 8001174:	4694      	mov	ip, r2
 8001176:	458c      	cmp	ip, r1
 8001178:	4686      	mov	lr, r0
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	d962      	bls.n	8001246 <__udivmoddi4+0xde>
 8001180:	b14a      	cbz	r2, 8001196 <__udivmoddi4+0x2e>
 8001182:	f1c2 0320 	rsb	r3, r2, #32
 8001186:	4091      	lsls	r1, r2
 8001188:	fa20 f303 	lsr.w	r3, r0, r3
 800118c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001190:	4319      	orrs	r1, r3
 8001192:	fa00 fe02 	lsl.w	lr, r0, r2
 8001196:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800119a:	fa1f f68c 	uxth.w	r6, ip
 800119e:	fbb1 f4f7 	udiv	r4, r1, r7
 80011a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011a6:	fb07 1114 	mls	r1, r7, r4, r1
 80011aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ae:	fb04 f106 	mul.w	r1, r4, r6
 80011b2:	4299      	cmp	r1, r3
 80011b4:	d90a      	bls.n	80011cc <__udivmoddi4+0x64>
 80011b6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80011be:	f080 8112 	bcs.w	80013e6 <__udivmoddi4+0x27e>
 80011c2:	4299      	cmp	r1, r3
 80011c4:	f240 810f 	bls.w	80013e6 <__udivmoddi4+0x27e>
 80011c8:	3c02      	subs	r4, #2
 80011ca:	4463      	add	r3, ip
 80011cc:	1a59      	subs	r1, r3, r1
 80011ce:	fa1f f38e 	uxth.w	r3, lr
 80011d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011d6:	fb07 1110 	mls	r1, r7, r0, r1
 80011da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011de:	fb00 f606 	mul.w	r6, r0, r6
 80011e2:	429e      	cmp	r6, r3
 80011e4:	d90a      	bls.n	80011fc <__udivmoddi4+0x94>
 80011e6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80011ee:	f080 80fc 	bcs.w	80013ea <__udivmoddi4+0x282>
 80011f2:	429e      	cmp	r6, r3
 80011f4:	f240 80f9 	bls.w	80013ea <__udivmoddi4+0x282>
 80011f8:	4463      	add	r3, ip
 80011fa:	3802      	subs	r0, #2
 80011fc:	1b9b      	subs	r3, r3, r6
 80011fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001202:	2100      	movs	r1, #0
 8001204:	b11d      	cbz	r5, 800120e <__udivmoddi4+0xa6>
 8001206:	40d3      	lsrs	r3, r2
 8001208:	2200      	movs	r2, #0
 800120a:	e9c5 3200 	strd	r3, r2, [r5]
 800120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001212:	428b      	cmp	r3, r1
 8001214:	d905      	bls.n	8001222 <__udivmoddi4+0xba>
 8001216:	b10d      	cbz	r5, 800121c <__udivmoddi4+0xb4>
 8001218:	e9c5 0100 	strd	r0, r1, [r5]
 800121c:	2100      	movs	r1, #0
 800121e:	4608      	mov	r0, r1
 8001220:	e7f5      	b.n	800120e <__udivmoddi4+0xa6>
 8001222:	fab3 f183 	clz	r1, r3
 8001226:	2900      	cmp	r1, #0
 8001228:	d146      	bne.n	80012b8 <__udivmoddi4+0x150>
 800122a:	42a3      	cmp	r3, r4
 800122c:	d302      	bcc.n	8001234 <__udivmoddi4+0xcc>
 800122e:	4290      	cmp	r0, r2
 8001230:	f0c0 80f0 	bcc.w	8001414 <__udivmoddi4+0x2ac>
 8001234:	1a86      	subs	r6, r0, r2
 8001236:	eb64 0303 	sbc.w	r3, r4, r3
 800123a:	2001      	movs	r0, #1
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e6      	beq.n	800120e <__udivmoddi4+0xa6>
 8001240:	e9c5 6300 	strd	r6, r3, [r5]
 8001244:	e7e3      	b.n	800120e <__udivmoddi4+0xa6>
 8001246:	2a00      	cmp	r2, #0
 8001248:	f040 8090 	bne.w	800136c <__udivmoddi4+0x204>
 800124c:	eba1 040c 	sub.w	r4, r1, ip
 8001250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001254:	fa1f f78c 	uxth.w	r7, ip
 8001258:	2101      	movs	r1, #1
 800125a:	fbb4 f6f8 	udiv	r6, r4, r8
 800125e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001262:	fb08 4416 	mls	r4, r8, r6, r4
 8001266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800126a:	fb07 f006 	mul.w	r0, r7, r6
 800126e:	4298      	cmp	r0, r3
 8001270:	d908      	bls.n	8001284 <__udivmoddi4+0x11c>
 8001272:	eb1c 0303 	adds.w	r3, ip, r3
 8001276:	f106 34ff 	add.w	r4, r6, #4294967295
 800127a:	d202      	bcs.n	8001282 <__udivmoddi4+0x11a>
 800127c:	4298      	cmp	r0, r3
 800127e:	f200 80cd 	bhi.w	800141c <__udivmoddi4+0x2b4>
 8001282:	4626      	mov	r6, r4
 8001284:	1a1c      	subs	r4, r3, r0
 8001286:	fa1f f38e 	uxth.w	r3, lr
 800128a:	fbb4 f0f8 	udiv	r0, r4, r8
 800128e:	fb08 4410 	mls	r4, r8, r0, r4
 8001292:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001296:	fb00 f707 	mul.w	r7, r0, r7
 800129a:	429f      	cmp	r7, r3
 800129c:	d908      	bls.n	80012b0 <__udivmoddi4+0x148>
 800129e:	eb1c 0303 	adds.w	r3, ip, r3
 80012a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012a6:	d202      	bcs.n	80012ae <__udivmoddi4+0x146>
 80012a8:	429f      	cmp	r7, r3
 80012aa:	f200 80b0 	bhi.w	800140e <__udivmoddi4+0x2a6>
 80012ae:	4620      	mov	r0, r4
 80012b0:	1bdb      	subs	r3, r3, r7
 80012b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012b6:	e7a5      	b.n	8001204 <__udivmoddi4+0x9c>
 80012b8:	f1c1 0620 	rsb	r6, r1, #32
 80012bc:	408b      	lsls	r3, r1
 80012be:	fa22 f706 	lsr.w	r7, r2, r6
 80012c2:	431f      	orrs	r7, r3
 80012c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80012c8:	fa04 f301 	lsl.w	r3, r4, r1
 80012cc:	ea43 030c 	orr.w	r3, r3, ip
 80012d0:	40f4      	lsrs	r4, r6
 80012d2:	fa00 f801 	lsl.w	r8, r0, r1
 80012d6:	0c38      	lsrs	r0, r7, #16
 80012d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012dc:	fbb4 fef0 	udiv	lr, r4, r0
 80012e0:	fa1f fc87 	uxth.w	ip, r7
 80012e4:	fb00 441e 	mls	r4, r0, lr, r4
 80012e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012ec:	fb0e f90c 	mul.w	r9, lr, ip
 80012f0:	45a1      	cmp	r9, r4
 80012f2:	fa02 f201 	lsl.w	r2, r2, r1
 80012f6:	d90a      	bls.n	800130e <__udivmoddi4+0x1a6>
 80012f8:	193c      	adds	r4, r7, r4
 80012fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80012fe:	f080 8084 	bcs.w	800140a <__udivmoddi4+0x2a2>
 8001302:	45a1      	cmp	r9, r4
 8001304:	f240 8081 	bls.w	800140a <__udivmoddi4+0x2a2>
 8001308:	f1ae 0e02 	sub.w	lr, lr, #2
 800130c:	443c      	add	r4, r7
 800130e:	eba4 0409 	sub.w	r4, r4, r9
 8001312:	fa1f f983 	uxth.w	r9, r3
 8001316:	fbb4 f3f0 	udiv	r3, r4, r0
 800131a:	fb00 4413 	mls	r4, r0, r3, r4
 800131e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001322:	fb03 fc0c 	mul.w	ip, r3, ip
 8001326:	45a4      	cmp	ip, r4
 8001328:	d907      	bls.n	800133a <__udivmoddi4+0x1d2>
 800132a:	193c      	adds	r4, r7, r4
 800132c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001330:	d267      	bcs.n	8001402 <__udivmoddi4+0x29a>
 8001332:	45a4      	cmp	ip, r4
 8001334:	d965      	bls.n	8001402 <__udivmoddi4+0x29a>
 8001336:	3b02      	subs	r3, #2
 8001338:	443c      	add	r4, r7
 800133a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800133e:	fba0 9302 	umull	r9, r3, r0, r2
 8001342:	eba4 040c 	sub.w	r4, r4, ip
 8001346:	429c      	cmp	r4, r3
 8001348:	46ce      	mov	lr, r9
 800134a:	469c      	mov	ip, r3
 800134c:	d351      	bcc.n	80013f2 <__udivmoddi4+0x28a>
 800134e:	d04e      	beq.n	80013ee <__udivmoddi4+0x286>
 8001350:	b155      	cbz	r5, 8001368 <__udivmoddi4+0x200>
 8001352:	ebb8 030e 	subs.w	r3, r8, lr
 8001356:	eb64 040c 	sbc.w	r4, r4, ip
 800135a:	fa04 f606 	lsl.w	r6, r4, r6
 800135e:	40cb      	lsrs	r3, r1
 8001360:	431e      	orrs	r6, r3
 8001362:	40cc      	lsrs	r4, r1
 8001364:	e9c5 6400 	strd	r6, r4, [r5]
 8001368:	2100      	movs	r1, #0
 800136a:	e750      	b.n	800120e <__udivmoddi4+0xa6>
 800136c:	f1c2 0320 	rsb	r3, r2, #32
 8001370:	fa20 f103 	lsr.w	r1, r0, r3
 8001374:	fa0c fc02 	lsl.w	ip, ip, r2
 8001378:	fa24 f303 	lsr.w	r3, r4, r3
 800137c:	4094      	lsls	r4, r2
 800137e:	430c      	orrs	r4, r1
 8001380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001384:	fa00 fe02 	lsl.w	lr, r0, r2
 8001388:	fa1f f78c 	uxth.w	r7, ip
 800138c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001390:	fb08 3110 	mls	r1, r8, r0, r3
 8001394:	0c23      	lsrs	r3, r4, #16
 8001396:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800139a:	fb00 f107 	mul.w	r1, r0, r7
 800139e:	4299      	cmp	r1, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x24c>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013aa:	d22c      	bcs.n	8001406 <__udivmoddi4+0x29e>
 80013ac:	4299      	cmp	r1, r3
 80013ae:	d92a      	bls.n	8001406 <__udivmoddi4+0x29e>
 80013b0:	3802      	subs	r0, #2
 80013b2:	4463      	add	r3, ip
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	b2a4      	uxth	r4, r4
 80013b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80013bc:	fb08 3311 	mls	r3, r8, r1, r3
 80013c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013c4:	fb01 f307 	mul.w	r3, r1, r7
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d908      	bls.n	80013de <__udivmoddi4+0x276>
 80013cc:	eb1c 0404 	adds.w	r4, ip, r4
 80013d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013d4:	d213      	bcs.n	80013fe <__udivmoddi4+0x296>
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	d911      	bls.n	80013fe <__udivmoddi4+0x296>
 80013da:	3902      	subs	r1, #2
 80013dc:	4464      	add	r4, ip
 80013de:	1ae4      	subs	r4, r4, r3
 80013e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013e4:	e739      	b.n	800125a <__udivmoddi4+0xf2>
 80013e6:	4604      	mov	r4, r0
 80013e8:	e6f0      	b.n	80011cc <__udivmoddi4+0x64>
 80013ea:	4608      	mov	r0, r1
 80013ec:	e706      	b.n	80011fc <__udivmoddi4+0x94>
 80013ee:	45c8      	cmp	r8, r9
 80013f0:	d2ae      	bcs.n	8001350 <__udivmoddi4+0x1e8>
 80013f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80013f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80013fa:	3801      	subs	r0, #1
 80013fc:	e7a8      	b.n	8001350 <__udivmoddi4+0x1e8>
 80013fe:	4631      	mov	r1, r6
 8001400:	e7ed      	b.n	80013de <__udivmoddi4+0x276>
 8001402:	4603      	mov	r3, r0
 8001404:	e799      	b.n	800133a <__udivmoddi4+0x1d2>
 8001406:	4630      	mov	r0, r6
 8001408:	e7d4      	b.n	80013b4 <__udivmoddi4+0x24c>
 800140a:	46d6      	mov	lr, sl
 800140c:	e77f      	b.n	800130e <__udivmoddi4+0x1a6>
 800140e:	4463      	add	r3, ip
 8001410:	3802      	subs	r0, #2
 8001412:	e74d      	b.n	80012b0 <__udivmoddi4+0x148>
 8001414:	4606      	mov	r6, r0
 8001416:	4623      	mov	r3, r4
 8001418:	4608      	mov	r0, r1
 800141a:	e70f      	b.n	800123c <__udivmoddi4+0xd4>
 800141c:	3e02      	subs	r6, #2
 800141e:	4463      	add	r3, ip
 8001420:	e730      	b.n	8001284 <__udivmoddi4+0x11c>
 8001422:	bf00      	nop

08001424 <__aeabi_idiv0>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <calcsin>:

  return phase_rad;  // Return the phase angle in radians
}

void calcsin ()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e046      	b.n	80014c2 <calcsin+0x9a>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2))/5+200;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f8d3 	bl	80005e4 <__aeabi_i2d>
 800143e:	a32c      	add	r3, pc, #176	@ (adr r3, 80014f0 <calcsin+0xc8>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff f938 	bl	80006b8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <calcsin+0xb0>)
 8001456:	f7ff fa59 	bl	800090c <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f008 fe31 	bl	800a0c8 <sin>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <calcsin+0xb4>)
 800146c:	f7fe ff6e 	bl	800034c <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <calcsin+0xb8>)
 800147e:	f7ff f91b 	bl	80006b8 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <calcsin+0xbc>)
 8001490:	f7ff fa3c 	bl	800090c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <calcsin+0xc0>)
 80014a2:	f7fe ff53 	bl	800034c <__adddf3>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fbc5 	bl	8000c3c <__aeabi_d2uiz>
 80014b2:	4602      	mov	r2, r0
 80014b4:	490d      	ldr	r1, [pc, #52]	@ (80014ec <calcsin+0xc4>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b63      	cmp	r3, #99	@ 0x63
 80014c6:	ddb5      	ble.n	8001434 <calcsin+0xc>
	}
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	40590000 	.word	0x40590000
 80014dc:	3ff00000 	.word	0x3ff00000
 80014e0:	40a00000 	.word	0x40a00000
 80014e4:	40140000 	.word	0x40140000
 80014e8:	40690000 	.word	0x40690000
 80014ec:	200002a4 	.word	0x200002a4
 80014f0:	4d12d84a 	.word	0x4d12d84a
 80014f4:	400921fb 	.word	0x400921fb

080014f8 <calchanning>:

void calchanning(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e03e      	b.n	8001582 <calchanning+0x8a>
	        hanning_array[i] = (int)(0.5 * (1 - cos(2 * M_PI * i / (FFT_BUFFER_SIZE - 1))) * 4096);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff f86d 	bl	80005e4 <__aeabi_i2d>
 800150a:	a327      	add	r3, pc, #156	@ (adr r3, 80015a8 <calchanning+0xb0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f8d2 	bl	80006b8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a324      	add	r3, pc, #144	@ (adr r3, 80015b0 <calchanning+0xb8>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f9f3 	bl	800090c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f008 fd81 	bl	800a034 <cos>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	f04f 0000 	mov.w	r0, #0
 800153a:	4917      	ldr	r1, [pc, #92]	@ (8001598 <calchanning+0xa0>)
 800153c:	f7fe ff04 	bl	8000348 <__aeabi_dsub>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <calchanning+0xa4>)
 800154e:	f7ff f8b3 	bl	80006b8 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <calchanning+0xa8>)
 8001560:	f7ff f8aa 	bl	80006b8 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb3e 	bl	8000bec <__aeabi_d2iz>
 8001570:	4603      	mov	r3, r0
 8001572:	b299      	uxth	r1, r3
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <calchanning+0xac>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001588:	dbbc      	blt.n	8001504 <calchanning+0xc>
	    }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	f3af 8000 	nop.w
 8001598:	3ff00000 	.word	0x3ff00000
 800159c:	3fe00000 	.word	0x3fe00000
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	20000434 	.word	0x20000434
 80015a8:	54442d18 	.word	0x54442d18
 80015ac:	401921fb 	.word	0x401921fb
 80015b0:	00000000 	.word	0x00000000
 80015b4:	409ffc00 	.word	0x409ffc00

080015b8 <sgn>:
    } while (fabs(term) > TOLERANCE);

    return sum;
}

int sgn(float x) {
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    if(x>=0){
 80015c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	db01      	blt.n	80015d2 <sgn+0x1a>
    	return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e001      	b.n	80015d6 <sgn+0x1e>
    }
    else{
    	return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <Read_ADC+0x20>)
 80015ea:	f001 fc11 	bl	8002e10 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015ee:	f04f 31ff 	mov.w	r1, #4294967295
 80015f2:	4804      	ldr	r0, [pc, #16]	@ (8001604 <Read_ADC+0x20>)
 80015f4:	f001 fcfa 	bl	8002fec <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <Read_ADC+0x20>)
 80015fa:	f001 fe8b 	bl	8003314 <HAL_ADC_GetValue>
 80015fe:	4603      	mov	r3, r0
}
 8001600:	4618      	mov	r0, r3
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000007c 	.word	0x2000007c

08001608 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e017      	b.n	8001646 <HAL_ADC_ConvHalfCpltCallback+0x3e>
fftBufIn1[i] = (float)(ADC_val[i]*hanning_array[i]);
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161e:	4619      	mov	r1, r3
 8001620:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001634:	4a0b      	ldr	r2, [pc, #44]	@ (8001664 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800164c:	dbe3      	blt.n	8001616 <HAL_ADC_ConvHalfCpltCallback+0xe>
  }
  //sprintf(data, "half buffer\r\n\n ");
  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
  Calc_FFT(fftBufIn1);
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001650:	f000 f83a 	bl	80016c8 <Calc_FFT>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000144c 	.word	0x2000144c
 8001660:	20000434 	.word	0x20000434
 8001664:	2000344c 	.word	0x2000344c

08001668 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e017      	b.n	80016a6 <HAL_ADC_ConvCpltCallback+0x3e>
fftBufIn2[i] = (float)(ADC_val[i]*hanning_array[i]);
 8001676:	4a11      	ldr	r2, [pc, #68]	@ (80016bc <HAL_ADC_ConvCpltCallback+0x54>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167e:	4619      	mov	r1, r3
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	edc3 7a00 	vstr	s15, [r3]
for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ac:	dbe3      	blt.n	8001676 <HAL_ADC_ConvCpltCallback+0xe>
  }
  //sprintf(data, "full buffer\r\n\n " );
  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
  Calc_FFT(fftBufIn2);
 80016ae:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_ADC_ConvCpltCallback+0x5c>)
 80016b0:	f000 f80a 	bl	80016c8 <Calc_FFT>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000144c 	.word	0x2000144c
 80016c0:	20000434 	.word	0x20000434
 80016c4:	2000544c 	.word	0x2000544c

080016c8 <Calc_FFT>:





void Calc_FFT(float *fftBufIn ){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08e      	sub	sp, #56	@ 0x38
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

arm_rfft_fast_f32(&fftHandler, fftBufIn, &fftBufOut,0);
 80016d0:	2300      	movs	r3, #0
 80016d2:	4a68      	ldr	r2, [pc, #416]	@ (8001874 <Calc_FFT+0x1ac>)
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4868      	ldr	r0, [pc, #416]	@ (8001878 <Calc_FFT+0x1b0>)
 80016d8:	f006 fc98 	bl	800800c <arm_rfft_fast_f32>

float phase_1khz = 0.0f, phase_2khz = 0.0f;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
//calc freqmagnitude for 1,2,3khz
float phase_shift_diff = 0.0;
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	637b      	str	r3, [r7, #52]	@ 0x34
float dacval = 0.0f;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 80016f4:	4b61      	ldr	r3, [pc, #388]	@ (800187c <Calc_FFT+0x1b4>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80016fa:	e054      	b.n	80017a6 <Calc_FFT+0xde>
      float real = fftBufOut[2*i ];
 80016fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4a5c      	ldr	r2, [pc, #368]	@ (8001874 <Calc_FFT+0x1ac>)
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	617b      	str	r3, [r7, #20]
      float imag = fftBufOut[(2*i) + 1];
 800170a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	3301      	adds	r3, #1
 8001710:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <Calc_FFT+0x1ac>)
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	613b      	str	r3, [r7, #16]
      float curVal = sqrtf((real * real) + (imag * imag));
 800171a:	edd7 7a05 	vldr	s15, [r7, #20]
 800171e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	ee17 0a90 	vmov	r0, s15
 8001732:	f008 fd11 	bl	800a158 <sqrtf>
 8001736:	60f8      	str	r0, [r7, #12]
      float phase = atan2f(imag, real);
 8001738:	6979      	ldr	r1, [r7, #20]
 800173a:	6938      	ldr	r0, [r7, #16]
 800173c:	f008 fd0a 	bl	800a154 <atan2f>
 8001740:	60b8      	str	r0, [r7, #8]
      if (i == sample_count_1khz) {
 8001742:	4b4e      	ldr	r3, [pc, #312]	@ (800187c <Calc_FFT+0x1b4>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174a:	4293      	cmp	r3, r2
 800174c:	d102      	bne.n	8001754 <Calc_FFT+0x8c>
          phase_1khz = phase;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
 8001752:	e009      	b.n	8001768 <Calc_FFT+0xa0>
      } else if (i == sample_count_1khz * 2) {
 8001754:	4b49      	ldr	r3, [pc, #292]	@ (800187c <Calc_FFT+0x1b4>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800175c:	429a      	cmp	r2, r3
 800175e:	d103      	bne.n	8001768 <Calc_FFT+0xa0>
          phase_2khz = phase;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	623b      	str	r3, [r7, #32]
          phase_shift_diff = phase_2khz;
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	637b      	str	r3, [r7, #52]	@ 0x34
          //dacval= getPhaseAngle(HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2));


      }

  freq_mag[i/sample_count_1khz-1]+=((uint32_t)curVal)/1000;
 8001768:	4b44      	ldr	r3, [pc, #272]	@ (800187c <Calc_FFT+0x1b4>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001770:	fb93 f3f2 	sdiv	r3, r3, r2
 8001774:	1e5a      	subs	r2, r3, #1
 8001776:	4942      	ldr	r1, [pc, #264]	@ (8001880 <Calc_FFT+0x1b8>)
 8001778:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800177c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001784:	ee17 0a90 	vmov	r0, s15
 8001788:	4a3e      	ldr	r2, [pc, #248]	@ (8001884 <Calc_FFT+0x1bc>)
 800178a:	fba2 0200 	umull	r0, r2, r2, r0
 800178e:	0992      	lsrs	r2, r2, #6
 8001790:	3b01      	subs	r3, #1
 8001792:	440a      	add	r2, r1
 8001794:	493a      	ldr	r1, [pc, #232]	@ (8001880 <Calc_FFT+0x1b8>)
 8001796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 800179a:	4b38      	ldr	r3, [pc, #224]	@ (800187c <Calc_FFT+0x1b4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017a2:	4413      	add	r3, r2
 80017a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <Calc_FFT+0x1b4>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dda1      	ble.n	80016fc <Calc_FFT+0x34>
}
//sprintf(data, "%d ", (int16_t)(phase_2khz*1000));
//HAL_UART_Transmit(&huart2, data, strlen(data), 100);


  avgPhaseShift += phase_shift_diff;
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <Calc_FFT+0x1c0>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <Calc_FFT+0x1c0>)
 80017c8:	edc3 7a00 	vstr	s15, [r3]
  fft_count++;
 80017cc:	4b2f      	ldr	r3, [pc, #188]	@ (800188c <Calc_FFT+0x1c4>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b2d      	ldr	r3, [pc, #180]	@ (800188c <Calc_FFT+0x1c4>)
 80017d6:	801a      	strh	r2, [r3, #0]


  uint32_t avgTemp = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 80017dc:	2304      	movs	r3, #4
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017e0:	e034      	b.n	800184c <Calc_FFT+0x184>
    float curVal = sqrtf((fftBufOut[i]*fftBufOut[i])+ (fftBufOut[i+1]*fftBufOut[i+1]));
 80017e2:	4a24      	ldr	r2, [pc, #144]	@ (8001874 <Calc_FFT+0x1ac>)
 80017e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <Calc_FFT+0x1ac>)
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001800:	3301      	adds	r3, #1
 8001802:	4a1c      	ldr	r2, [pc, #112]	@ (8001874 <Calc_FFT+0x1ac>)
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	edd3 6a00 	vldr	s13, [r3]
 800180c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180e:	3301      	adds	r3, #1
 8001810:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <Calc_FFT+0x1ac>)
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001822:	ee17 0a90 	vmov	r0, s15
 8001826:	f008 fc97 	bl	800a158 <sqrtf>
 800182a:	61b8      	str	r0, [r7, #24]
    avgTemp += ((uint32_t)curVal)/1000;  // Convert float to
 800182c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001834:	ee17 2a90 	vmov	r2, s15
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <Calc_FFT+0x1bc>)
 800183a:	fba3 2302 	umull	r2, r3, r3, r2
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001842:	4413      	add	r3, r2
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 8001846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001848:	3302      	adds	r3, #2
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800184c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001852:	dbc6      	blt.n	80017e2 <Calc_FFT+0x11a>



  }
  avg += ((uint32_t)avgTemp/((FFT_BUFFER_SIZE / 2)-2));
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	085b      	lsrs	r3, r3, #1
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <Calc_FFT+0x1c8>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0a1a      	lsrs	r2, r3, #8
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <Calc_FFT+0x1cc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4413      	add	r3, r2
 8001866:	4a0b      	ldr	r2, [pc, #44]	@ (8001894 <Calc_FFT+0x1cc>)
 8001868:	6013      	str	r3, [r2, #0]





}
 800186a:	bf00      	nop
 800186c:	3738      	adds	r7, #56	@ 0x38
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000744c 	.word	0x2000744c
 8001878:	20001434 	.word	0x20001434
 800187c:	20000000 	.word	0x20000000
 8001880:	20009484 	.word	0x20009484
 8001884:	10624dd3 	.word	0x10624dd3
 8001888:	20009490 	.word	0x20009490
 800188c:	2000947e 	.word	0x2000947e
 8001890:	80402011 	.word	0x80402011
 8001894:	20009480 	.word	0x20009480

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 800189e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a0:	f000 fe82 	bl	80025a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f944 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f000 fb2a 	bl	8001f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f000 fb02 	bl	8001eb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80018b0:	f000 f990 	bl	8001bd4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80018b4:	f000 fa06 	bl	8001cc4 <MX_DAC1_Init>
  MX_TIM6_Init();
 80018b8:	f000 fa96 	bl	8001de8 <MX_TIM6_Init>
  MX_TIM1_Init();
 80018bc:	f000 fa40 	bl	8001d40 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80018c0:	f000 fac8 	bl	8001e54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //start sweep for mzm bias and calculate bias on midpoint between min and max output current
#define STEP_SIZE_BIAS_SWEEP 16
  uint32_t adc_val[128]={0};
 80018c4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018c8:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80018cc:	4618      	mov	r0, r3
 80018ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018d2:	461a      	mov	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	f007 ff2d 	bl	8009734 <memset>
  uint16_t dac_val[128]={0};
 80018da:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80018de:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80018e2:	4618      	mov	r0, r3
 80018e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018e8:	461a      	mov	r2, r3
 80018ea:	2100      	movs	r1, #0
 80018ec:	f007 ff22 	bl	8009734 <memset>
  uint16_t index_adc_val_smallest=0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8a7 3326 	strh.w	r3, [r7, #806]	@ 0x326
  uint16_t index_adc_val_highest=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8a7 3324 	strh.w	r3, [r7, #804]	@ 0x324
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80018fc:	2100      	movs	r1, #0
 80018fe:	487c      	ldr	r0, [pc, #496]	@ (8001af0 <main+0x258>)
 8001900:	f003 f833 	bl	800496a <HAL_DAC_Start>
  Read_ADC();
 8001904:	f7ff fe6e 	bl	80015e4 <Read_ADC>
	  }
	  dac_val[i/STEP_SIZE_BIAS_SWEEP] = i;
	  HAL_Delay(10);
  }
  //set dac to midpoint   */
  uint16_t midpoint_dac_val = dac_val[(index_adc_val_highest + index_adc_val_smallest) / 2];
 8001908:	f8b7 2324 	ldrh.w	r2, [r7, #804]	@ 0x324
 800190c:	f8b7 3326 	ldrh.w	r3, [r7, #806]	@ 0x326
 8001910:	4413      	add	r3, r2
 8001912:	0fda      	lsrs	r2, r3, #31
 8001914:	4413      	add	r3, r2
 8001916:	105b      	asrs	r3, r3, #1
 8001918:	461a      	mov	r2, r3
 800191a:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 800191e:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001922:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001926:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e

  midpoint_dac_val = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val  );
 8001930:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	486d      	ldr	r0, [pc, #436]	@ (8001af0 <main+0x258>)
 800193a:	f003 f92f 	bl	8004b9c <HAL_DAC_SetValue>
  sprintf(data, "bias set as:%d\r\n\n ",midpoint_dac_val);
 800193e:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001942:	461a      	mov	r2, r3
 8001944:	496b      	ldr	r1, [pc, #428]	@ (8001af4 <main+0x25c>)
 8001946:	486c      	ldr	r0, [pc, #432]	@ (8001af8 <main+0x260>)
 8001948:	f007 fed4 	bl	80096f4 <siprintf>
  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 800194c:	486a      	ldr	r0, [pc, #424]	@ (8001af8 <main+0x260>)
 800194e:	f7fe fc9f 	bl	8000290 <strlen>
 8001952:	4603      	mov	r3, r0
 8001954:	b29a      	uxth	r2, r3
 8001956:	2364      	movs	r3, #100	@ 0x64
 8001958:	4967      	ldr	r1, [pc, #412]	@ (8001af8 <main+0x260>)
 800195a:	4868      	ldr	r0, [pc, #416]	@ (8001afc <main+0x264>)
 800195c:	f005 fd74 	bl	8007448 <HAL_UART_Transmit>


  //reset the adc
  HAL_ADC_Stop(&hadc1);
 8001960:	4867      	ldr	r0, [pc, #412]	@ (8001b00 <main+0x268>)
 8001962:	f001 fb0f 	bl	8002f84 <HAL_ADC_Stop>
  //ADC_Disable(&hadc1);
  MX_ADC1_Init2();
 8001966:	f000 fb1d 	bl	8001fa4 <MX_ADC1_Init2>

  HAL_TIM_Base_Start(&htim6);
 800196a:	4866      	ldr	r0, [pc, #408]	@ (8001b04 <main+0x26c>)
 800196c:	f005 fa24 	bl	8006db8 <HAL_TIM_Base_Start>
  calcsin();
 8001970:	f7ff fd5a 	bl	8001428 <calcsin>
  calchanning();
 8001974:	f7ff fdc0 	bl	80014f8 <calchanning>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001978:	217f      	movs	r1, #127	@ 0x7f
 800197a:	4861      	ldr	r0, [pc, #388]	@ (8001b00 <main+0x268>)
 800197c:	f002 fd80 	bl	8004480 <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, sine_val, 100, DAC_ALIGN_12B_R);
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2364      	movs	r3, #100	@ 0x64
 8001986:	4a60      	ldr	r2, [pc, #384]	@ (8001b08 <main+0x270>)
 8001988:	2110      	movs	r1, #16
 800198a:	4859      	ldr	r0, [pc, #356]	@ (8001af0 <main+0x258>)
 800198c:	f003 f83a 	bl	8004a04 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_val,FFT_BUFFER_SIZE*2);
 8001990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001994:	495d      	ldr	r1, [pc, #372]	@ (8001b0c <main+0x274>)
 8001996:	485a      	ldr	r0, [pc, #360]	@ (8001b00 <main+0x268>)
 8001998:	f001 fc00 	bl	800319c <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fftHandler,FFT_BUFFER_SIZE);
 800199c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019a0:	485b      	ldr	r0, [pc, #364]	@ (8001b10 <main+0x278>)
 80019a2:	f006 faaf 	bl	8007f04 <arm_rfft_fast_init_f32>
  HAL_TIM_Base_Start(&htim1);
 80019a6:	485b      	ldr	r0, [pc, #364]	@ (8001b14 <main+0x27c>)
 80019a8:	f005 fa06 	bl	8006db8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dac_val_tone_bias[3]={0};
 80019ac:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80019b0:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	809a      	strh	r2, [r3, #4]
  uint32_t adc_val_tone_bias[3]={0};
 80019ba:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80019be:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	6053      	str	r3, [r2, #4]
 80019ca:	6093      	str	r3, [r2, #8]
  int16_t sweep_count = -1;
 80019cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019d0:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
  uint16_t prev_bias = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8a7 3320 	strh.w	r3, [r7, #800]	@ 0x320
  while (1)
  {

	  //for(int sweep = midpoint_dac_val-STEP_SIZE_BIAS_SWEEP; i<midpoint_dac_val+STEP_SIZE_BIAS_SWEEP; i+=STEP_SIZE_BIAS_SWEEP)
	  //sweep through best known value of bias, one below and one above
	  if(fft_count>=FFT_AVRAGE_COUNT){
 80019da:	4b4f      	ldr	r3, [pc, #316]	@ (8001b18 <main+0x280>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b09      	cmp	r3, #9
 80019e0:	d9fb      	bls.n	80019da <main+0x142>
		  float phaseShift = avgPhaseShift/ fft_count;
 80019e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <main+0x284>)
 80019e4:	edd3 6a00 	vldr	s13, [r3]
 80019e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <main+0x280>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f8:	edc7 7ac7 	vstr	s15, [r7, #796]	@ 0x31c

  		  //sprintf(data, "2khz: %d,1khz: %d \r\n\n", (int16_t)(avgPhase2*1000),(int16_t)(avgPhase1*1000));
  		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);

		  fft_count=0;
 80019fc:	4b46      	ldr	r3, [pc, #280]	@ (8001b18 <main+0x280>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	801a      	strh	r2, [r3, #0]
		  sprintf(data, "dac: %d 1khz: %d 2khz: %d 3khz: %d\r\n ",midpoint_dac_val,freq_mag[0], freq_mag[1] ,freq_mag[2]);
 8001a02:	f8b7 132e 	ldrh.w	r1, [r7, #814]	@ 0x32e
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <main+0x288>)
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	4b45      	ldr	r3, [pc, #276]	@ (8001b20 <main+0x288>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4a44      	ldr	r2, [pc, #272]	@ (8001b20 <main+0x288>)
 8001a10:	6892      	ldr	r2, [r2, #8]
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	4942      	ldr	r1, [pc, #264]	@ (8001b24 <main+0x28c>)
 8001a1c:	4836      	ldr	r0, [pc, #216]	@ (8001af8 <main+0x260>)
 8001a1e:	f007 fe69 	bl	80096f4 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001a22:	4835      	ldr	r0, [pc, #212]	@ (8001af8 <main+0x260>)
 8001a24:	f7fe fc34 	bl	8000290 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2364      	movs	r3, #100	@ 0x64
 8001a2e:	4932      	ldr	r1, [pc, #200]	@ (8001af8 <main+0x260>)
 8001a30:	4832      	ldr	r0, [pc, #200]	@ (8001afc <main+0x264>)
 8001a32:	f005 fd09 	bl	8007448 <HAL_UART_Transmit>
		    if (phaseShift> PI) {
 8001a36:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001a3a:	f7fe fde5 	bl	8000608 <__aeabi_f2d>
 8001a3e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001ae8 <main+0x250>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7ff f8c8 	bl	8000bd8 <__aeabi_dcmpgt>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <main+0x1be>
		    	//phaseShift -= 2 * PI;
		    } else if (phaseShift < PI) {
 8001a4e:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001a52:	f7fe fdd9 	bl	8000608 <__aeabi_f2d>
		  //float correction =(Vpi/PI*arccot(((float)freq_mag[1]*bessel_jn(1,((Vac*PI)/Vpi)))/((float)freq_mag[0]*bessel_jn(2,((Vac*PI)/Vpi))))*sgn(phaseShift));//-(Vpi/2);
		  //midpoint_dac_val = midpoint_dac_val - (int16_t)((correction/13.724)*4096);
		  //fixed offset
			  //sprintf(data, "avg: %d\r\n\n ",avg);
			  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  if(freq_mag[1]> 0){
 8001a56:	4b32      	ldr	r3, [pc, #200]	@ (8001b20 <main+0x288>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01c      	beq.n	8001a98 <main+0x200>
			  float correction2 =5*sgn(avgPhase2);
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <main+0x290>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fda8 	bl	80015b8 <sgn>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	edc7 7ac6 	vstr	s15, [r7, #792]	@ 0x318
			  midpoint_dac_val= midpoint_dac_val+2;
 8001a7c:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001a80:	3302      	adds	r3, #2
 8001a82:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
			  if(midpoint_dac_val>3700){
 8001a86:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001a8a:	f640 6274 	movw	r2, #3700	@ 0xe74
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d902      	bls.n	8001a98 <main+0x200>
				  midpoint_dac_val = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
			  }
			  //sprintf(data, "correction: %d\r\n\n ",(int16_t)(correction2));
			  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  }
		  avg = 0;
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <main+0x294>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
		  //sprintf(data, "new dac val: %d\r\n\n ",midpoint_dac_val);
		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val);
 8001a9e:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <main+0x258>)
 8001aa8:	f003 f878 	bl	8004b9c <HAL_DAC_SetValue>

	  		fft_count=0;
 8001aac:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <main+0x280>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
	  		avgPhaseShift = 0;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <main+0x284>)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
			  for(int i =0;i<=2;i++){
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001ac0:	e00a      	b.n	8001ad8 <main+0x240>
				  freq_mag[i]=0;
 8001ac2:	4a17      	ldr	r2, [pc, #92]	@ (8001b20 <main+0x288>)
 8001ac4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i =0;i<=2;i++){
 8001ace:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001ad8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	ddf0      	ble.n	8001ac2 <main+0x22a>
			  }
			  fft_count=0;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <main+0x280>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001ae6:	e778      	b.n	80019da <main+0x142>
 8001ae8:	4d12d84a 	.word	0x4d12d84a
 8001aec:	400921fb 	.word	0x400921fb
 8001af0:	20000128 	.word	0x20000128
 8001af4:	0800b420 	.word	0x0800b420
 8001af8:	2000944c 	.word	0x2000944c
 8001afc:	2000021c 	.word	0x2000021c
 8001b00:	2000007c 	.word	0x2000007c
 8001b04:	200001d0 	.word	0x200001d0
 8001b08:	200002a4 	.word	0x200002a4
 8001b0c:	2000144c 	.word	0x2000144c
 8001b10:	20001434 	.word	0x20001434
 8001b14:	20000184 	.word	0x20000184
 8001b18:	2000947e 	.word	0x2000947e
 8001b1c:	20009490 	.word	0x20009490
 8001b20:	20009484 	.word	0x20009484
 8001b24:	0800b434 	.word	0x0800b434
 8001b28:	20009494 	.word	0x20009494
 8001b2c:	20009480 	.word	0x20009480

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b096      	sub	sp, #88	@ 0x58
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2244      	movs	r2, #68	@ 0x44
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f007 fdf8 	bl	8009734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001b56:	f003 fdc5 	bl	80056e4 <HAL_PWREx_ControlVoltageScaling>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b60:	f000 fa9a 	bl	8002098 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b64:	2310      	movs	r3, #16
 8001b66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b70:	2360      	movs	r3, #96	@ 0x60
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b74:	2302      	movs	r3, #2
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001b80:	2320      	movs	r3, #32
 8001b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b84:	2307      	movs	r3, #7
 8001b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fdfb 	bl	8005790 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ba0:	f000 fa7a 	bl	8002098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2103      	movs	r1, #3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 f9c3 	bl	8005f48 <HAL_RCC_ClockConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001bc8:	f000 fa66 	bl	8002098 <Error_Handler>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3758      	adds	r7, #88	@ 0x58
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	@ 0x28
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
 8001bf4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bf6:	4b30      	ldr	r3, [pc, #192]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001bf8:	4a30      	ldr	r2, [pc, #192]	@ (8001cbc <MX_ADC1_Init+0xe8>)
 8001bfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001bfe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c04:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c10:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c22:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c36:	4b20      	ldr	r3, [pc, #128]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c58:	4817      	ldr	r0, [pc, #92]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c5a:	f000 ff89 	bl	8002b70 <HAL_ADC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001c64:	f000 fa18 	bl	8002098 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4811      	ldr	r0, [pc, #68]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001c74:	f002 fc96 	bl	80045a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001c7e:	f000 fa0b 	bl	8002098 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_ADC1_Init+0xec>)
 8001c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c86:	2306      	movs	r3, #6
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c8e:	237f      	movs	r3, #127	@ 0x7f
 8001c90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c92:	2304      	movs	r3, #4
 8001c94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	@ (8001cb8 <MX_ADC1_Init+0xe4>)
 8001ca0:	f001 fd74 	bl	800378c <HAL_ADC_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001caa:	f000 f9f5 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000007c 	.word	0x2000007c
 8001cbc:	50040000 	.word	0x50040000
 8001cc0:	14f00020 	.word	0x14f00020

08001cc4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2224      	movs	r2, #36	@ 0x24
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 fd2f 	bl	8009734 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <MX_DAC1_Init+0x74>)
 8001cd8:	4a18      	ldr	r2, [pc, #96]	@ (8001d3c <MX_DAC1_Init+0x78>)
 8001cda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001cdc:	4816      	ldr	r0, [pc, #88]	@ (8001d38 <MX_DAC1_Init+0x74>)
 8001cde:	f002 fe22 	bl	8004926 <HAL_DAC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001ce8:	f000 f9d6 	bl	8002098 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <MX_DAC1_Init+0x74>)
 8001d08:	f002 ff8b 	bl	8004c22 <HAL_DAC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d12:	f000 f9c1 	bl	8002098 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001d16:	2304      	movs	r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_DAC1_Init+0x74>)
 8001d22:	f002 ff7e 	bl	8004c22 <HAL_DAC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001d2c:	f000 f9b4 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	@ 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000128 	.word	0x20000128
 8001d3c:	40007400 	.word	0x40007400

08001d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d60:	4a20      	ldr	r2, [pc, #128]	@ (8001de4 <MX_TIM1_Init+0xa4>)
 8001d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 624;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d66:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001d6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001d72:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d74:	2209      	movs	r2, #9
 8001d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d8a:	4815      	ldr	r0, [pc, #84]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001d8c:	f004 ffbc 	bl	8006d08 <HAL_TIM_Base_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d96:	f000 f97f 	bl	8002098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	480e      	ldr	r0, [pc, #56]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001da8:	f005 f86e 	bl	8006e88 <HAL_TIM_ConfigClockSource>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001db2:	f000 f971 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001db6:	2320      	movs	r3, #32
 8001db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001dba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001dbe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_TIM1_Init+0xa0>)
 8001dca:	f005 fa67 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001dd4:	f000 f960 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000184 	.word	0x20000184
 8001de4:	40012c00 	.word	0x40012c00

08001de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <MX_TIM6_Init+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e00:	223f      	movs	r2, #63	@ 0x3f
 8001e02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e16:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e18:	f004 ff76 	bl	8006d08 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001e22:	f000 f939 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e26:	2320      	movs	r3, #32
 8001e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <MX_TIM6_Init+0x64>)
 8001e34:	f005 fa32 	bl	800729c <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e3e:	f000 f92b 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200001d0 	.word	0x200001d0
 8001e50:	40001000 	.word	0x40001000

08001e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <MX_USART2_UART_Init+0x5c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e98:	f005 fa88 	bl	80073ac <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f000 f8f9 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000021c 	.word	0x2000021c
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_DMA_Init+0x48>)
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <MX_DMA_Init+0x48>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <MX_DMA_Init+0x48>)
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	200b      	movs	r0, #11
 8001ed8:	f002 fcef 	bl	80048ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001edc:	200b      	movs	r0, #11
 8001ede:	f002 fd08 	bl	80048f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	200e      	movs	r0, #14
 8001ee8:	f002 fce7 	bl	80048ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001eec:	200e      	movs	r0, #14
 8001eee:	f002 fd00 	bl	80048f2 <HAL_NVIC_EnableIRQ>

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a1a      	ldr	r2, [pc, #104]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a14      	ldr	r2, [pc, #80]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	4a0e      	ldr	r2, [pc, #56]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <MX_GPIO_Init+0x9c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <MX_GPIO_Init+0xa0>)
 8001f8e:	f003 f9f1 	bl	8005374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	@ 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	48000800 	.word	0x48000800

08001fa4 <MX_ADC1_Init2>:

/* USER CODE BEGIN 4 */
void MX_ADC1_Init2(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fc6:	4b31      	ldr	r3, [pc, #196]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fc8:	4a31      	ldr	r2, [pc, #196]	@ (8002090 <MX_ADC1_Init2+0xec>)
 8001fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fda:	4b2c      	ldr	r3, [pc, #176]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fe6:	4b29      	ldr	r3, [pc, #164]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fec:	4b27      	ldr	r3, [pc, #156]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ff8:	4b24      	ldr	r3, [pc, #144]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002006:	4b21      	ldr	r3, [pc, #132]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002008:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800200e:	4b1f      	ldr	r3, [pc, #124]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002020:	2200      	movs	r2, #0
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800202c:	4817      	ldr	r0, [pc, #92]	@ (800208c <MX_ADC1_Init2+0xe8>)
 800202e:	f000 fd9f 	bl	8002b70 <HAL_ADC_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init2+0x98>
  {
    Error_Handler();
 8002038:	f000 f82e 	bl	8002098 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4811      	ldr	r0, [pc, #68]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002048:	f002 faac 	bl	80045a4 <HAL_ADCEx_MultiModeConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init2+0xb2>
  {
    Error_Handler();
 8002052:	f000 f821 	bl	8002098 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002056:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MX_ADC1_Init2+0xf0>)
 8002058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800205a:	2306      	movs	r3, #6
 800205c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002062:	237f      	movs	r3, #127	@ 0x7f
 8002064:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002066:	2304      	movs	r3, #4
 8002068:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4806      	ldr	r0, [pc, #24]	@ (800208c <MX_ADC1_Init2+0xe8>)
 8002074:	f001 fb8a 	bl	800378c <HAL_ADC_ConfigChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_ADC1_Init2+0xde>
  {
    Error_Handler();
 800207e:	f000 f80b 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	@ 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000007c 	.word	0x2000007c
 8002090:	50040000 	.word	0x50040000
 8002094:	14f00020 	.word	0x14f00020

08002098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <Error_Handler+0x8>

080020a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_MspInit+0x44>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_MspInit+0x44>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ac      	sub	sp, #176	@ 0xb0
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2288      	movs	r2, #136	@ 0x88
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f007 fb11 	bl	8009734 <memset>
  if(hadc->Instance==ADC1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a41      	ldr	r2, [pc, #260]	@ (800221c <HAL_ADC_MspInit+0x130>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d17a      	bne.n	8002212 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800211c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002120:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002122:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002132:	2310      	movs	r3, #16
 8002134:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002136:	2307      	movs	r3, #7
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800213a:	2302      	movs	r3, #2
 800213c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 800213e:	2308      	movs	r3, #8
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002146:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4618      	mov	r0, r3
 800214e:	f004 f91f 	bl	8006390 <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002158:	f7ff ff9e 	bl	8002098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002160:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 8002162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002168:	4b2d      	ldr	r3, [pc, #180]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b2a      	ldr	r3, [pc, #168]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002178:	4a29      	ldr	r2, [pc, #164]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002180:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <HAL_ADC_MspInit+0x134>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218c:	2301      	movs	r3, #1
 800218e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002192:	230b      	movs	r3, #11
 8002194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a8:	f003 f8e4 	bl	8005374 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <HAL_ADC_MspInit+0x13c>)
 80021b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021c4:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021c6:	2280      	movs	r2, #128	@ 0x80
 80021c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021d2:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021da:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021dc:	2220      	movs	r2, #32
 80021de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021e6:	480f      	ldr	r0, [pc, #60]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021e8:	f002 fecc 	bl	8004f84 <HAL_DMA_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80021f2:	f7ff ff51 	bl	8002098 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021fc:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_ADC_MspInit+0x138>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2012      	movs	r0, #18
 8002208:	f002 fb57 	bl	80048ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800220c:	2012      	movs	r0, #18
 800220e:	f002 fb70 	bl	80048f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002212:	bf00      	nop
 8002214:	37b0      	adds	r7, #176	@ 0xb0
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	50040000 	.word	0x50040000
 8002220:	40021000 	.word	0x40021000
 8002224:	200000e0 	.word	0x200000e0
 8002228:	40020008 	.word	0x40020008

0800222c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	@ 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a2b      	ldr	r2, [pc, #172]	@ (80022f8 <HAL_DAC_MspInit+0xcc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d14f      	bne.n	80022ee <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	4a2a      	ldr	r2, [pc, #168]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 8002254:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002258:	6593      	str	r3, [r2, #88]	@ 0x58
 800225a:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800225e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	4a24      	ldr	r2, [pc, #144]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002272:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_DAC_MspInit+0xd0>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800227e:	2330      	movs	r3, #48	@ 0x30
 8002280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002282:	2303      	movs	r3, #3
 8002284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4619      	mov	r1, r3
 8002290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002294:	f003 f86e 	bl	8005374 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 800229a:	4a1a      	ldr	r2, [pc, #104]	@ (8002304 <HAL_DAC_MspInit+0xd8>)
 800229c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022a0:	2205      	movs	r2, #5
 80022a2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022a6:	2210      	movs	r2, #16
 80022a8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80022b0:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022bc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022c4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022c8:	2220      	movs	r2, #32
 80022ca:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80022d2:	480b      	ldr	r0, [pc, #44]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022d4:	f002 fe56 	bl	8004f84 <HAL_DMA_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80022de:	f7ff fedb 	bl	8002098 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a06      	ldr	r2, [pc, #24]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <HAL_DAC_MspInit+0xd4>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	@ 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40007400 	.word	0x40007400
 80022fc:	40021000 	.word	0x40021000
 8002300:	2000013c 	.word	0x2000013c
 8002304:	40020044 	.word	0x40020044

08002308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a13      	ldr	r2, [pc, #76]	@ (8002364 <HAL_TIM_Base_MspInit+0x5c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10c      	bne.n	8002334 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231a:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	4a12      	ldr	r2, [pc, #72]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 8002320:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002324:	6613      	str	r3, [r2, #96]	@ 0x60
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002332:	e010      	b.n	8002356 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0c      	ldr	r2, [pc, #48]	@ (800236c <HAL_TIM_Base_MspInit+0x64>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10b      	bne.n	8002356 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	6593      	str	r3, [r2, #88]	@ 0x58
 800234a:	4b07      	ldr	r3, [pc, #28]	@ (8002368 <HAL_TIM_Base_MspInit+0x60>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40001000 	.word	0x40001000

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b0ac      	sub	sp, #176	@ 0xb0
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2288      	movs	r2, #136	@ 0x88
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f007 f9cf 	bl	8009734 <memset>
  if(huart->Instance==USART2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_UART_MspInit+0xb0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d13b      	bne.n	8002418 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023a0:	2302      	movs	r3, #2
 80023a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 ffef 	bl	8006390 <HAL_RCCEx_PeriphCLKConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023b8:	f7ff fe6e 	bl	8002098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_UART_MspInit+0xb4>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023ec:	230c      	movs	r3, #12
 80023ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800240e:	4619      	mov	r1, r3
 8002410:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002414:	f002 ffae 	bl	8005374 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002418:	bf00      	nop
 800241a:	37b0      	adds	r7, #176	@ 0xb0
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40004400 	.word	0x40004400
 8002424:	40021000 	.word	0x40021000

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800242c:	bf00      	nop
 800242e:	e7fd      	b.n	800242c <NMI_Handler+0x4>

08002430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <MemManage_Handler+0x4>

08002440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <BusFault_Handler+0x4>

08002448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <UsageFault_Handler+0x4>

08002450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247e:	f000 f8ef 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800248c:	4802      	ldr	r0, [pc, #8]	@ (8002498 <DMA1_Channel1_IRQHandler+0x10>)
 800248e:	f002 fe91 	bl	80051b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200000e0 	.word	0x200000e0

0800249c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80024a0:	4802      	ldr	r0, [pc, #8]	@ (80024ac <DMA1_Channel4_IRQHandler+0x10>)
 80024a2:	f002 fe87 	bl	80051b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000013c 	.word	0x2000013c

080024b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024b4:	4802      	ldr	r0, [pc, #8]	@ (80024c0 <ADC1_2_IRQHandler+0x10>)
 80024b6:	f000 ff3b 	bl	8003330 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000007c 	.word	0x2000007c

080024c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024cc:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <_sbrk+0x5c>)
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <_sbrk+0x60>)
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <_sbrk+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <_sbrk+0x64>)
 80024e2:	4a12      	ldr	r2, [pc, #72]	@ (800252c <_sbrk+0x68>)
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024e6:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d207      	bcs.n	8002504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024f4:	f007 f926 	bl	8009744 <__errno>
 80024f8:	4603      	mov	r3, r0
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a05      	ldr	r2, [pc, #20]	@ (8002528 <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20018000 	.word	0x20018000
 8002524:	00000400 	.word	0x00000400
 8002528:	20009498 	.word	0x20009498
 800252c:	200095e8 	.word	0x200095e8

08002530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <SystemInit+0x20>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <SystemInit+0x20>)
 800253c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800258c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002558:	f7ff ffea 	bl	8002530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800255c:	480c      	ldr	r0, [pc, #48]	@ (8002590 <LoopForever+0x6>)
  ldr r1, =_edata
 800255e:	490d      	ldr	r1, [pc, #52]	@ (8002594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002560:	4a0d      	ldr	r2, [pc, #52]	@ (8002598 <LoopForever+0xe>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002564:	e002      	b.n	800256c <LoopCopyDataInit>

08002566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800256a:	3304      	adds	r3, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800256c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002570:	d3f9      	bcc.n	8002566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002572:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002574:	4c0a      	ldr	r4, [pc, #40]	@ (80025a0 <LoopForever+0x16>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002578:	e001      	b.n	800257e <LoopFillZerobss>

0800257a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800257a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800257c:	3204      	adds	r2, #4

0800257e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002580:	d3fb      	bcc.n	800257a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002582:	f007 f8e5 	bl	8009750 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002586:	f7ff f987 	bl	8001898 <main>

0800258a <LoopForever>:

LoopForever:
    b LoopForever
 800258a:	e7fe      	b.n	800258a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800258c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002598:	0801eb50 	.word	0x0801eb50
  ldr r2, =_sbss
 800259c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80025a0:	200095e8 	.word	0x200095e8

080025a4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <ADC3_IRQHandler>
	...

080025a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_Init+0x3c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0b      	ldr	r2, [pc, #44]	@ (80025e4 <HAL_Init+0x3c>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025be:	2003      	movs	r0, #3
 80025c0:	f002 f970 	bl	80048a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c4:	2000      	movs	r0, #0
 80025c6:	f000 f80f 	bl	80025e8 <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	e001      	b.n	80025da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d6:	f7ff fd65 	bl	80020a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025da:	79fb      	ldrb	r3, [r7, #7]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40022000 	.word	0x40022000

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_InitTick+0x6c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_InitTick+0x70>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <HAL_InitTick+0x6c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f002 f97b 	bl	800490e <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d809      	bhi.n	8002638 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f002 f945 	bl	80048ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002630:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <HAL_InitTick+0x74>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e007      	b.n	8002648 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e004      	b.n	8002648 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e001      	b.n	8002648 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	2000000c 	.word	0x2000000c
 8002658:	20000004 	.word	0x20000004
 800265c:	20000008 	.word	0x20000008

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000000c 	.word	0x2000000c
 8002684:	2000949c 	.word	0x2000949c

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	2000949c 	.word	0x2000949c

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_Delay+0x44>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000000c 	.word	0x2000000c

080026e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3360      	adds	r3, #96	@ 0x60
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <LL_ADC_SetOffset+0x44>)
 8002772:	4013      	ands	r3, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	4313      	orrs	r3, r2
 8002780:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	03fff000 	.word	0x03fff000

08002798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3360      	adds	r3, #96	@ 0x60
 80027a6:	461a      	mov	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3360      	adds	r3, #96	@ 0x60
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3330      	adds	r3, #48	@ 0x30
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	4413      	add	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	211f      	movs	r1, #31
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 011f 	and.w	r1, r3, #31
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	431a      	orrs	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800286c:	bf00      	nop
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002884:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800289e:	b480      	push	{r7}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3314      	adds	r3, #20
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0e5b      	lsrs	r3, r3, #25
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	0d1b      	lsrs	r3, r3, #20
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2107      	movs	r1, #7
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	401a      	ands	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0d1b      	lsrs	r3, r3, #20
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	431a      	orrs	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0318 	and.w	r3, r3, #24
 8002916:	4908      	ldr	r1, [pc, #32]	@ (8002938 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002918:	40d9      	lsrs	r1, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	400b      	ands	r3, r1
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	431a      	orrs	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	0007ffff 	.word	0x0007ffff

0800293c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 031f 	and.w	r3, r3, #31
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002984:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ac:	d101      	bne.n	80029b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029fc:	d101      	bne.n	8002a02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4c:	f043 0202 	orr.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <LL_ADC_IsEnabled+0x18>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_ADC_IsEnabled+0x1a>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d101      	bne.n	8002a9e <LL_ADC_IsDisableOngoing+0x18>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_ADC_IsDisableOngoing+0x1a>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae8:	f043 0210 	orr.w	r2, r3, #16
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d101      	bne.n	8002b14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e130      	b.n	8002dec <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff faa7 	bl	80020ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fef1 	bl	8002998 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fed7 	bl	8002974 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff0c 	bl	80029e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d115      	bne.n	8002c02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fef0 	bl	80029c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be0:	4b84      	ldr	r3, [pc, #528]	@ (8002df4 <HAL_ADC_Init+0x284>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	4a84      	ldr	r2, [pc, #528]	@ (8002df8 <HAL_ADC_Init+0x288>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff feee 	bl	80029e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff62 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 8002c38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80c9 	bne.w	8002dda <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 80c5 	bne.w	8002dda <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c58:	f043 0202 	orr.w	r2, r3, #2
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fefb 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d115      	bne.n	8002c9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c70:	4862      	ldr	r0, [pc, #392]	@ (8002dfc <HAL_ADC_Init+0x28c>)
 8002c72:	f7ff fef5 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c76:	4604      	mov	r4, r0
 8002c78:	4861      	ldr	r0, [pc, #388]	@ (8002e00 <HAL_ADC_Init+0x290>)
 8002c7a:	f7ff fef1 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	431c      	orrs	r4, r3
 8002c82:	4860      	ldr	r0, [pc, #384]	@ (8002e04 <HAL_ADC_Init+0x294>)
 8002c84:	f7ff feec 	bl	8002a60 <LL_ADC_IsEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4323      	orrs	r3, r4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4619      	mov	r1, r3
 8002c96:	485c      	ldr	r0, [pc, #368]	@ (8002e08 <HAL_ADC_Init+0x298>)
 8002c98:	f7ff fd26 	bl	80026e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e5b      	ldrb	r3, [r3, #25]
 8002ca0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	045b      	lsls	r3, r3, #17
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b44      	ldr	r3, [pc, #272]	@ (8002e0c <HAL_ADC_Init+0x29c>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	69b9      	ldr	r1, [r7, #24]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff1c 	bl	8002b4a <LL_ADC_INJ_IsConversionOngoing>
 8002d12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d13d      	bne.n	8002d96 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d13a      	bne.n	8002d96 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d24:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d2c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d3c:	f023 0302 	bic.w	r3, r3, #2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	69b9      	ldr	r1, [r7, #24]
 8002d46:	430b      	orrs	r3, r1
 8002d48:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d118      	bne.n	8002d86 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d5e:	f023 0304 	bic.w	r3, r3, #4
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d70:	4311      	orrs	r1, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d76:	430a      	orrs	r2, r1
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
 8002d84:	e007      	b.n	8002d96 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d10c      	bne.n	8002db8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	f023 010f 	bic.w	r1, r3, #15
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002db6:	e007      	b.n	8002dc8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 020f 	bic.w	r2, r2, #15
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	f023 0303 	bic.w	r3, r3, #3
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002dd8:	e007      	b.n	8002dea <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3724      	adds	r7, #36	@ 0x24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	20000004 	.word	0x20000004
 8002df8:	053e2d63 	.word	0x053e2d63
 8002dfc:	50040000 	.word	0x50040000
 8002e00:	50040100 	.word	0x50040100
 8002e04:	50040200 	.word	0x50040200
 8002e08:	50040300 	.word	0x50040300
 8002e0c:	fff0c007 	.word	0xfff0c007

08002e10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e18:	4857      	ldr	r0, [pc, #348]	@ (8002f78 <HAL_ADC_Start+0x168>)
 8002e1a:	f7ff fd8f 	bl	800293c <LL_ADC_GetMultimode>
 8002e1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fe69 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 809c 	bne.w	8002f6a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_Start+0x30>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e097      	b.n	8002f70 <HAL_ADC_Start+0x160>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f001 f94d 	bl	80040e8 <ADC_Enable>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8083 	bne.w	8002f60 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a42      	ldr	r2, [pc, #264]	@ (8002f7c <HAL_ADC_Start+0x16c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d002      	beq.n	8002e7e <HAL_ADC_Start+0x6e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	e000      	b.n	8002e80 <HAL_ADC_Start+0x70>
 8002e7e:	4b40      	ldr	r3, [pc, #256]	@ (8002f80 <HAL_ADC_Start+0x170>)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d002      	beq.n	8002e8e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f023 0206 	bic.w	r2, r3, #6
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	221c      	movs	r2, #28
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f7c <HAL_ADC_Start+0x16c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d002      	beq.n	8002edc <HAL_ADC_Start+0xcc>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e000      	b.n	8002ede <HAL_ADC_Start+0xce>
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <HAL_ADC_Start+0x170>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d008      	beq.n	8002ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d002      	beq.n	8002ef8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d114      	bne.n	8002f22 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fdc6 	bl	8002aac <LL_ADC_REG_StartConversion>
 8002f20:	e025      	b.n	8002f6e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a12      	ldr	r2, [pc, #72]	@ (8002f7c <HAL_ADC_Start+0x16c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start+0x12e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_Start+0x130>
 8002f3e:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <HAL_ADC_Start+0x170>)
 8002f40:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00f      	beq.n	8002f6e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f5e:	e006      	b.n	8002f6e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f68:	e001      	b.n	8002f6e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	50040300 	.word	0x50040300
 8002f7c:	50040100 	.word	0x50040100
 8002f80:	50040000 	.word	0x50040000

08002f84 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Stop+0x16>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e023      	b.n	8002fe2 <HAL_ADC_Stop+0x5e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fa2:	2103      	movs	r1, #3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 ffe3 	bl	8003f70 <ADC_ConversionStop>
 8002faa:	4603      	mov	r3, r0
 8002fac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 f91d 	bl	80041f4 <ADC_Disable>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff6:	4866      	ldr	r0, [pc, #408]	@ (8003190 <HAL_ADC_PollForConversion+0x1a4>)
 8002ff8:	f7ff fca0 	bl	800293c <LL_ADC_GetMultimode>
 8002ffc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d102      	bne.n	800300c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003006:	2308      	movs	r3, #8
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e02a      	b.n	8003062 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d002      	beq.n	800301e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b09      	cmp	r3, #9
 800301c:	d111      	bne.n	8003042 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0a4      	b.n	8003186 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800303c:	2304      	movs	r3, #4
 800303e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003040:	e00f      	b.n	8003062 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003042:	4853      	ldr	r0, [pc, #332]	@ (8003190 <HAL_ADC_PollForConversion+0x1a4>)
 8003044:	f7ff fc88 	bl	8002958 <LL_ADC_GetMultiDMATransfer>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e093      	b.n	8003186 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800305e:	2304      	movs	r3, #4
 8003060:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003062:	f7ff fb11 	bl	8002688 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003068:	e021      	b.n	80030ae <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d01d      	beq.n	80030ae <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003072:	f7ff fb09 	bl	8002688 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <HAL_ADC_PollForConversion+0x9c>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d112      	bne.n	80030ae <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e06b      	b.n	8003186 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0d6      	beq.n	800306a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fb94 	bl	80027fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01c      	beq.n	8003112 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e5b      	ldrb	r3, [r3, #25]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d118      	bne.n	8003112 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d111      	bne.n	8003112 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_ADC_PollForConversion+0x1a8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d002      	beq.n	8003122 <HAL_ADC_PollForConversion+0x136>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e000      	b.n	8003124 <HAL_ADC_PollForConversion+0x138>
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <HAL_ADC_PollForConversion+0x1ac>)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4293      	cmp	r3, r2
 800312a:	d008      	beq.n	800313e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d002      	beq.n	800313e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d104      	bne.n	8003148 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e00c      	b.n	8003162 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <HAL_ADC_PollForConversion+0x1a8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d002      	beq.n	8003158 <HAL_ADC_PollForConversion+0x16c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e000      	b.n	800315a <HAL_ADC_PollForConversion+0x16e>
 8003158:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <HAL_ADC_PollForConversion+0x1ac>)
 800315a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b08      	cmp	r3, #8
 8003166:	d104      	bne.n	8003172 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2208      	movs	r2, #8
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e008      	b.n	8003184 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d103      	bne.n	8003184 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	220c      	movs	r2, #12
 8003182:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	50040300 	.word	0x50040300
 8003194:	50040100 	.word	0x50040100
 8003198:	50040000 	.word	0x50040000

0800319c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031a8:	4853      	ldr	r0, [pc, #332]	@ (80032f8 <HAL_ADC_Start_DMA+0x15c>)
 80031aa:	f7ff fbc7 	bl	800293c <LL_ADC_GetMultimode>
 80031ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fca1 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 8093 	bne.w	80032e8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_ADC_Start_DMA+0x34>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e08e      	b.n	80032ee <HAL_ADC_Start_DMA+0x152>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a47      	ldr	r2, [pc, #284]	@ (80032fc <HAL_ADC_Start_DMA+0x160>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d008      	beq.n	80031f4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d002      	beq.n	80031f4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d172      	bne.n	80032da <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 ff77 	bl	80040e8 <ADC_Enable>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d165      	bne.n	80032d0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a38      	ldr	r2, [pc, #224]	@ (8003300 <HAL_ADC_Start_DMA+0x164>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d002      	beq.n	8003228 <HAL_ADC_Start_DMA+0x8c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	e000      	b.n	800322a <HAL_ADC_Start_DMA+0x8e>
 8003228:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <HAL_ADC_Start_DMA+0x168>)
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	4293      	cmp	r3, r2
 8003230:	d002      	beq.n	8003238 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003254:	f023 0206 	bic.w	r2, r3, #6
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	659a      	str	r2, [r3, #88]	@ 0x58
 800325c:	e002      	b.n	8003264 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <HAL_ADC_Start_DMA+0x16c>)
 800326a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003270:	4a26      	ldr	r2, [pc, #152]	@ (800330c <HAL_ADC_Start_DMA+0x170>)
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <HAL_ADC_Start_DMA+0x174>)
 800327a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	221c      	movs	r2, #28
 8003282:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0210 	orr.w	r2, r2, #16
 800329a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3340      	adds	r3, #64	@ 0x40
 80032b6:	4619      	mov	r1, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f001 ff1a 	bl	80050f4 <HAL_DMA_Start_IT>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fbef 	bl	8002aac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032ce:	e00d      	b.n	80032ec <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80032d8:	e008      	b.n	80032ec <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80032e6:	e001      	b.n	80032ec <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
 80032ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	50040300 	.word	0x50040300
 80032fc:	50040200 	.word	0x50040200
 8003300:	50040100 	.word	0x50040100
 8003304:	50040000 	.word	0x50040000
 8003308:	080042b3 	.word	0x080042b3
 800330c:	0800438b 	.word	0x0800438b
 8003310:	080043a7 	.word	0x080043a7

08003314 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	@ 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800334c:	4882      	ldr	r0, [pc, #520]	@ (8003558 <HAL_ADC_IRQHandler+0x228>)
 800334e:	f7ff faf5 	bl	800293c <LL_ADC_GetMultimode>
 8003352:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d017      	beq.n	800338e <HAL_ADC_IRQHandler+0x5e>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f001 f905 	bl	8004590 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_IRQHandler+0x72>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10a      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8083 	beq.w	80034b4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07d      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fa10 	bl	80027fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d062      	beq.n	80034a6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5d      	ldr	r2, [pc, #372]	@ (800355c <HAL_ADC_IRQHandler+0x22c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d002      	beq.n	80033f0 <HAL_ADC_IRQHandler+0xc0>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e000      	b.n	80033f2 <HAL_ADC_IRQHandler+0xc2>
 80033f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003560 <HAL_ADC_IRQHandler+0x230>)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d008      	beq.n	800340c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d002      	beq.n	800340c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b09      	cmp	r3, #9
 800340a:	d104      	bne.n	8003416 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	e00c      	b.n	8003430 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a50      	ldr	r2, [pc, #320]	@ (800355c <HAL_ADC_IRQHandler+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d002      	beq.n	8003426 <HAL_ADC_IRQHandler+0xf6>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e000      	b.n	8003428 <HAL_ADC_IRQHandler+0xf8>
 8003426:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <HAL_ADC_IRQHandler+0x230>)
 8003428:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d135      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d12e      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fb55 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d11a      	bne.n	800348e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 020c 	bic.w	r2, r2, #12
 8003466:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d112      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54
 800348c:	e00b      	b.n	80034a6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe f8de 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	220c      	movs	r2, #12
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_IRQHandler+0x198>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 809f 	beq.w	8003612 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8099 	beq.w	8003612 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f9bb 	bl	8002878 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003502:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f976 	bl	80027fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800350e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a11      	ldr	r2, [pc, #68]	@ (800355c <HAL_ADC_IRQHandler+0x22c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d002      	beq.n	8003520 <HAL_ADC_IRQHandler+0x1f0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	e000      	b.n	8003522 <HAL_ADC_IRQHandler+0x1f2>
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_ADC_IRQHandler+0x230>)
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	4293      	cmp	r3, r2
 8003528:	d008      	beq.n	800353c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2b06      	cmp	r3, #6
 8003534:	d002      	beq.n	800353c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b07      	cmp	r3, #7
 800353a:	d104      	bne.n	8003546 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	e013      	b.n	800356e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a04      	ldr	r2, [pc, #16]	@ (800355c <HAL_ADC_IRQHandler+0x22c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_ADC_IRQHandler+0x234>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	e007      	b.n	8003566 <HAL_ADC_IRQHandler+0x236>
 8003556:	bf00      	nop
 8003558:	50040300 	.word	0x50040300
 800355c:	50040100 	.word	0x50040100
 8003560:	50040000 	.word	0x50040000
 8003564:	4b7d      	ldr	r3, [pc, #500]	@ (800375c <HAL_ADC_IRQHandler+0x42c>)
 8003566:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d047      	beq.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_ADC_IRQHandler+0x25e>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d03f      	beq.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	d13a      	bne.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d133      	bne.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d12e      	bne.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff facd 	bl	8002b4a <LL_ADC_INJ_IsConversionOngoing>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11a      	bne.n	80035ec <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d112      	bne.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80035ea:	e00b      	b.n	8003604 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 ff9b 	bl	8004540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2260      	movs	r2, #96	@ 0x60
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_ADC_IRQHandler+0x310>
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f896 	bl	8003764 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2280      	movs	r2, #128	@ 0x80
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <HAL_ADC_IRQHandler+0x340>
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 ff81 	bl	8004568 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d012      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x370>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 ff73 	bl	800457c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_ADC_IRQHandler+0x3e8>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d031      	beq.n	8003718 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c0:	e014      	b.n	80036ec <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036c8:	4825      	ldr	r0, [pc, #148]	@ (8003760 <HAL_ADC_IRQHandler+0x430>)
 80036ca:	f7ff f945 	bl	8002958 <LL_ADC_GetMultiDMATransfer>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036d4:	2301      	movs	r3, #1
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d8:	e008      	b.n	80036ec <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80036e8:	2301      	movs	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10e      	bne.n	8003710 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f834 	bl	8003778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2210      	movs	r2, #16
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <HAL_ADC_IRQHandler+0x424>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003730:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	f043 0208 	orr.w	r2, r3, #8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800374c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 ff00 	bl	8004554 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	@ 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	50040000 	.word	0x50040000
 8003760:	50040300 	.word	0x50040300

08003764 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b0b6      	sub	sp, #216	@ 0xd8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800379c:	2300      	movs	r3, #0
 800379e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x22>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e3c9      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x7b6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff f99e 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 83aa 	bne.w	8003f1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d824      	bhi.n	8003822 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	3b02      	subs	r3, #2
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d81b      	bhi.n	800381a <HAL_ADC_ConfigChannel+0x8e>
 80037e2:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <HAL_ADC_ConfigChannel+0x5c>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003801 	.word	0x08003801
 80037f0:	08003809 	.word	0x08003809
 80037f4:	08003811 	.word	0x08003811
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80037f8:	230c      	movs	r3, #12
 80037fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80037fe:	e010      	b.n	8003822 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003800:	2312      	movs	r3, #18
 8003802:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003806:	e00c      	b.n	8003822 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003808:	2318      	movs	r3, #24
 800380a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800380e:	e008      	b.n	8003822 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003810:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003818:	e003      	b.n	8003822 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800381a:	2306      	movs	r3, #6
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003820:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003830:	f7fe fff6 	bl	8002820 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f95f 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 800383e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f97f 	bl	8002b4a <LL_ADC_INJ_IsConversionOngoing>
 800384c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003850:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 81a4 	bne.w	8003ba2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800385a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800385e:	2b00      	cmp	r3, #0
 8003860:	f040 819f 	bne.w	8003ba2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	461a      	mov	r2, r3
 8003872:	f7ff f814 	bl	800289e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d00a      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6919      	ldr	r1, [r3, #16]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038a8:	f7fe ff52 	bl	8002750 <LL_ADC_SetOffset>
 80038ac:	e179      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe ff6f 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_ADC_ConfigChannel+0x14e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe ff64 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	e01e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x18c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe ff59 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038f0:	fa93 f3a3 	rbit	r3, r3
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003900:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003908:	2320      	movs	r3, #32
 800390a:	e004      	b.n	8003916 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800390c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x1a4>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	e018      	b.n	8003962 <HAL_ADC_ConfigChannel+0x1d6>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800393c:	fa93 f3a3 	rbit	r3, r3
 8003940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800394c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e004      	b.n	8003962 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003958:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003962:	429a      	cmp	r2, r3
 8003964:	d106      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ff28 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe ff0c 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x214>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe ff01 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	0e9b      	lsrs	r3, r3, #26
 800399a:	f003 021f 	and.w	r2, r3, #31
 800399e:	e01e      	b.n	80039de <HAL_ADC_ConfigChannel+0x252>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe fef6 	bl	8002798 <LL_ADC_GetOffsetChannel>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80039be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80039c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80039ce:	2320      	movs	r3, #32
 80039d0:	e004      	b.n	80039dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80039d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x26a>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	e018      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x29c>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003a12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e004      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d106      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fec5 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2102      	movs	r1, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fea9 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x2da>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2102      	movs	r1, #2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fe9e 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	e01e      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x318>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fe93 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e004      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x330>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	e014      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x35a>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003aca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	e004      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d106      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2102      	movs	r1, #2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fe fe66 	bl	80027c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2103      	movs	r1, #3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fe4a 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x398>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2103      	movs	r1, #3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fe3f 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	f003 021f 	and.w	r2, r3, #31
 8003b22:	e017      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x3c8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2103      	movs	r1, #3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fe34 	bl	8002798 <LL_ADC_GetOffsetChannel>
 8003b30:	4603      	mov	r3, r0
 8003b32:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x3e0>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0e9b      	lsrs	r3, r3, #26
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	e011      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x404>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003b84:	2320      	movs	r3, #32
 8003b86:	e003      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003b88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d106      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2103      	movs	r1, #3
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fe11 	bl	80027c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe ff5a 	bl	8002a60 <LL_ADC_IsEnabled>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 8140 	bne.w	8003e34 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f7fe fe97 	bl	80028f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	4a8f      	ldr	r2, [pc, #572]	@ (8003e08 <HAL_ADC_ConfigChannel+0x67c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f040 8131 	bne.w	8003e34 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10b      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x46e>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	bf94      	ite	ls
 8003bf2:	2301      	movls	r3, #1
 8003bf4:	2300      	movhi	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	e019      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x4a2>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c02:	fa93 f3a3 	rbit	r3, r3
 8003c06:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c18:	fab3 f383 	clz	r3, r3
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2b09      	cmp	r3, #9
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d079      	beq.n	8003d26 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x4c2>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0e9b      	lsrs	r3, r3, #26
 8003c44:	3301      	adds	r3, #1
 8003c46:	069b      	lsls	r3, r3, #26
 8003c48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c4c:	e015      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x4ee>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c5e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_ADC_ConfigChannel+0x50e>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0e9b      	lsrs	r3, r3, #26
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	2101      	movs	r1, #1
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	e017      	b.n	8003cca <HAL_ADC_ConfigChannel+0x53e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003caa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	e003      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x564>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 021f 	and.w	r2, r3, #31
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	051b      	lsls	r3, r3, #20
 8003cee:	e018      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x596>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	fa93 f3a3 	rbit	r3, r3
 8003cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003d08:	2320      	movs	r3, #32
 8003d0a:	e003      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	3301      	adds	r3, #1
 8003d16:	f003 021f 	and.w	r2, r3, #31
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d22:	430b      	orrs	r3, r1
 8003d24:	e081      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x5b6>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	0e9b      	lsrs	r3, r3, #26
 8003d38:	3301      	adds	r3, #1
 8003d3a:	069b      	lsls	r3, r3, #26
 8003d3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d40:	e015      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x5e2>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e003      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	069b      	lsls	r3, r3, #26
 8003d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x602>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	3301      	adds	r3, #1
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2101      	movs	r1, #1
 8003d88:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8c:	e017      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x632>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	61bb      	str	r3, [r7, #24]
  return result;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003da6:	2320      	movs	r3, #32
 8003da8:	e003      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	ea42 0103 	orr.w	r1, r2, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10d      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x65e>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0e9b      	lsrs	r3, r3, #26
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	3b1e      	subs	r3, #30
 8003de2:	051b      	lsls	r3, r3, #20
 8003de4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003de8:	e01e      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x69c>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	60fb      	str	r3, [r7, #12]
  return result;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e006      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x688>
 8003e06:	bf00      	nop
 8003e08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f003 021f 	and.w	r2, r3, #31
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	3b1e      	subs	r3, #30
 8003e22:	051b      	lsls	r3, r3, #20
 8003e24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f7fe fd35 	bl	800289e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b44      	ldr	r3, [pc, #272]	@ (8003f4c <HAL_ADC_ConfigChannel+0x7c0>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d07a      	beq.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e40:	4843      	ldr	r0, [pc, #268]	@ (8003f50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e42:	f7fe fc77 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 8003e46:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d12c      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d126      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a3c      	ldr	r2, [pc, #240]	@ (8003f58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <HAL_ADC_ConfigChannel+0x6e8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f5c <HAL_ADC_ConfigChannel+0x7d0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d15d      	bne.n	8003f30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4834      	ldr	r0, [pc, #208]	@ (8003f50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e80:	f7fe fc45 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	099b      	lsrs	r3, r3, #6
 8003e8a:	4a36      	ldr	r2, [pc, #216]	@ (8003f64 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003e9e:	e002      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f9      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eac:	e040      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003f68 <HAL_ADC_ConfigChannel+0x7dc>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d118      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d112      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	@ (8003f58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_ADC_ConfigChannel+0x74c>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <HAL_ADC_ConfigChannel+0x7d0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d12d      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003edc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	481b      	ldr	r0, [pc, #108]	@ (8003f50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ee4:	f7fe fc13 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ee8:	e024      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <HAL_ADC_ConfigChannel+0x7e0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d120      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ef8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d11a      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f12:	4619      	mov	r1, r3
 8003f14:	480e      	ldr	r0, [pc, #56]	@ (8003f50 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f16:	f7fe fbfa 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
 8003f1a:	e00c      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f2e:	e002      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	37d8      	adds	r7, #216	@ 0xd8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	80080000 	.word	0x80080000
 8003f50:	50040300 	.word	0x50040300
 8003f54:	c7520000 	.word	0xc7520000
 8003f58:	50040000 	.word	0x50040000
 8003f5c:	50040200 	.word	0x50040200
 8003f60:	20000004 	.word	0x20000004
 8003f64:	053e2d63 	.word	0x053e2d63
 8003f68:	cb840000 	.word	0xcb840000
 8003f6c:	80000001 	.word	0x80000001

08003f70 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe fdb8 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 8003f8c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fdd9 	bl	8002b4a <LL_ADC_INJ_IsConversionOngoing>
 8003f98:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8098 	beq.w	80040d8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02a      	beq.n	800400c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e5b      	ldrb	r3, [r3, #25]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d126      	bne.n	800400c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e1b      	ldrb	r3, [r3, #24]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d122      	bne.n	800400c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fca:	e014      	b.n	8003ff6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4a45      	ldr	r2, [pc, #276]	@ (80040e4 <ADC_ConversionStop+0x174>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d90d      	bls.n	8003ff0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f043 0210 	orr.w	r2, r3, #16
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe4:	f043 0201 	orr.w	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e074      	b.n	80040da <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	d1e3      	bne.n	8003fcc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d014      	beq.n	800403c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fd70 	bl	8002afc <LL_ADC_REG_IsConversionOngoing>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fd2d 	bl	8002a86 <LL_ADC_IsDisableOngoing>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fd4c 	bl	8002ad4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d014      	beq.n	800406c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fd7f 	bl	8002b4a <LL_ADC_INJ_IsConversionOngoing>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fd15 	bl	8002a86 <LL_ADC_IsDisableOngoing>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fd5b 	bl	8002b22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d005      	beq.n	800407e <ADC_ConversionStop+0x10e>
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d105      	bne.n	8004084 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004078:	230c      	movs	r3, #12
 800407a:	617b      	str	r3, [r7, #20]
        break;
 800407c:	e005      	b.n	800408a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800407e:	2308      	movs	r3, #8
 8004080:	617b      	str	r3, [r7, #20]
        break;
 8004082:	e002      	b.n	800408a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004084:	2304      	movs	r3, #4
 8004086:	617b      	str	r3, [r7, #20]
        break;
 8004088:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800408a:	f7fe fafd 	bl	8002688 <HAL_GetTick>
 800408e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004090:	e01b      	b.n	80040ca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004092:	f7fe faf9 	bl	8002688 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b05      	cmp	r3, #5
 800409e:	d914      	bls.n	80040ca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e007      	b.n	80040da <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1dc      	bne.n	8004092 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	a33fffff 	.word	0xa33fffff

080040e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fcb1 	bl	8002a60 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d169      	bne.n	80041d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	4b36      	ldr	r3, [pc, #216]	@ (80041e4 <ADC_Enable+0xfc>)
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	f043 0210 	orr.w	r2, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e055      	b.n	80041da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fc6c 	bl	8002a10 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004138:	482b      	ldr	r0, [pc, #172]	@ (80041e8 <ADC_Enable+0x100>)
 800413a:	f7fe fafb 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 800413e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004144:	2b00      	cmp	r3, #0
 8004146:	d013      	beq.n	8004170 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004148:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <ADC_Enable+0x104>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	4a28      	ldr	r2, [pc, #160]	@ (80041f0 <ADC_Enable+0x108>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	099b      	lsrs	r3, r3, #6
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004162:	e002      	b.n	800416a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3b01      	subs	r3, #1
 8004168:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f9      	bne.n	8004164 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004170:	f7fe fa8a 	bl	8002688 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004176:	e028      	b.n	80041ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fc6f 	bl	8002a60 <LL_ADC_IsEnabled>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fc3f 	bl	8002a10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004192:	f7fe fa79 	bl	8002688 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d914      	bls.n	80041ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d00d      	beq.n	80041ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b2:	f043 0210 	orr.w	r2, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041be:	f043 0201 	orr.w	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e007      	b.n	80041da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d1cf      	bne.n	8004178 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	8000003f 	.word	0x8000003f
 80041e8:	50040300 	.word	0x50040300
 80041ec:	20000004 	.word	0x20000004
 80041f0:	053e2d63 	.word	0x053e2d63

080041f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fc40 	bl	8002a86 <LL_ADC_IsDisableOngoing>
 8004206:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fc27 	bl	8002a60 <LL_ADC_IsEnabled>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d047      	beq.n	80042a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d144      	bne.n	80042a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 030d 	and.w	r3, r3, #13
 8004228:	2b01      	cmp	r3, #1
 800422a:	d10c      	bne.n	8004246 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fc01 	bl	8002a38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2203      	movs	r2, #3
 800423c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800423e:	f7fe fa23 	bl	8002688 <HAL_GetTick>
 8004242:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004244:	e029      	b.n	800429a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	f043 0210 	orr.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e023      	b.n	80042aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004262:	f7fe fa11 	bl	8002688 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d914      	bls.n	800429a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f043 0210 	orr.w	r2, r3, #16
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	f043 0201 	orr.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e007      	b.n	80042aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1dc      	bne.n	8004262 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d14b      	bne.n	8004364 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d021      	beq.n	800432a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fa85 	bl	80027fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d032      	beq.n	800435c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d12b      	bne.n	800435c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d11f      	bne.n	800435c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	655a      	str	r2, [r3, #84]	@ 0x54
 8004328:	e018      	b.n	800435c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f043 0201 	orr.w	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fd f983 	bl	8001668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004362:	e00e      	b.n	8004382 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff fa01 	bl	8003778 <HAL_ADC_ErrorCallback>
}
 8004376:	e004      	b.n	8004382 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b084      	sub	sp, #16
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7fd f935 	bl	8001608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	f043 0204 	orr.w	r2, r3, #4
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff f9d3 	bl	8003778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <LL_ADC_IsEnabled>:
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <LL_ADC_IsEnabled+0x18>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <LL_ADC_IsEnabled+0x1a>
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_ADC_StartCalibration>:
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004412:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800441c:	4313      	orrs	r3, r2
 800441e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_ADC_IsCalibrationOnGoing>:
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004446:	d101      	bne.n	800444c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <LL_ADC_REG_IsConversionOngoing>:
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d101      	bne.n	8004472 <LL_ADC_REG_IsConversionOngoing+0x18>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_ADCEx_Calibration_Start+0x1c>
 8004498:	2302      	movs	r3, #2
 800449a:	e04d      	b.n	8004538 <HAL_ADCEx_Calibration_Start+0xb8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fea5 	bl	80041f4 <ADC_Disable>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d136      	bne.n	8004522 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044bc:	f023 0302 	bic.w	r3, r3, #2
 80044c0:	f043 0202 	orr.w	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff96 	bl	8004400 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044d4:	e014      	b.n	8004500 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3301      	adds	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80044e2:	d30d      	bcc.n	8004500 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e8:	f023 0312 	bic.w	r3, r3, #18
 80044ec:	f043 0210 	orr.w	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e01b      	b.n	8004538 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff94 	bl	8004432 <LL_ADC_IsCalibrationOnGoing>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e2      	bne.n	80044d6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	f023 0303 	bic.w	r3, r3, #3
 8004518:	f043 0201 	orr.w	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004520:	e005      	b.n	800452e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b09f      	sub	sp, #124	@ 0x7c
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045be:	2302      	movs	r3, #2
 80045c0:	e093      	b.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80045ca:	2300      	movs	r3, #0
 80045cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80045ce:	2300      	movs	r3, #0
 80045d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a47      	ldr	r2, [pc, #284]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d102      	bne.n	80045e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045dc:	4b46      	ldr	r3, [pc, #280]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	e001      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e072      	b.n	80046ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff27 	bl	800445a <LL_ADC_REG_IsConversionOngoing>
 800460c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ff21 	bl	800445a <LL_ADC_REG_IsConversionOngoing>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d154      	bne.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800461e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004620:	2b00      	cmp	r3, #0
 8004622:	d151      	bne.n	80046c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004624:	4b35      	ldr	r3, [pc, #212]	@ (80046fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004626:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02c      	beq.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004642:	035b      	lsls	r3, r3, #13
 8004644:	430b      	orrs	r3, r1
 8004646:	431a      	orrs	r2, r3
 8004648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800464a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800464c:	4829      	ldr	r0, [pc, #164]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800464e:	f7ff fec4 	bl	80043da <LL_ADC_IsEnabled>
 8004652:	4604      	mov	r4, r0
 8004654:	4828      	ldr	r0, [pc, #160]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004656:	f7ff fec0 	bl	80043da <LL_ADC_IsEnabled>
 800465a:	4603      	mov	r3, r0
 800465c:	431c      	orrs	r4, r3
 800465e:	4828      	ldr	r0, [pc, #160]	@ (8004700 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004660:	f7ff febb 	bl	80043da <LL_ADC_IsEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	4323      	orrs	r3, r4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d137      	bne.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800466c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004674:	f023 030f 	bic.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	6811      	ldr	r1, [r2, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	430a      	orrs	r2, r1
 8004682:	431a      	orrs	r2, r3
 8004684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004686:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004688:	e028      	b.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800468a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004694:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004696:	4817      	ldr	r0, [pc, #92]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004698:	f7ff fe9f 	bl	80043da <LL_ADC_IsEnabled>
 800469c:	4604      	mov	r4, r0
 800469e:	4816      	ldr	r0, [pc, #88]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046a0:	f7ff fe9b 	bl	80043da <LL_ADC_IsEnabled>
 80046a4:	4603      	mov	r3, r0
 80046a6:	431c      	orrs	r4, r3
 80046a8:	4815      	ldr	r0, [pc, #84]	@ (8004700 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80046aa:	f7ff fe96 	bl	80043da <LL_ADC_IsEnabled>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4323      	orrs	r3, r4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d112      	bne.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046be:	f023 030f 	bic.w	r3, r3, #15
 80046c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046c6:	e009      	b.n	80046dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80046da:	e000      	b.n	80046de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80046e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	377c      	adds	r7, #124	@ 0x7c
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd90      	pop	{r4, r7, pc}
 80046f2:	bf00      	nop
 80046f4:	50040000 	.word	0x50040000
 80046f8:	50040100 	.word	0x50040100
 80046fc:	50040300 	.word	0x50040300
 8004700:	50040200 	.word	0x50040200

08004704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004720:	4013      	ands	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800472c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004736:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	60d3      	str	r3, [r2, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <__NVIC_GetPriorityGrouping+0x18>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 0307 	and.w	r3, r3, #7
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db0b      	blt.n	8004792 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4907      	ldr	r1, [pc, #28]	@ (80047a0 <__NVIC_EnableIRQ+0x38>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e100 	.word	0xe000e100

080047a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db0a      	blt.n	80047ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	490c      	ldr	r1, [pc, #48]	@ (80047f0 <__NVIC_SetPriority+0x4c>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047cc:	e00a      	b.n	80047e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4908      	ldr	r1, [pc, #32]	@ (80047f4 <__NVIC_SetPriority+0x50>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3b04      	subs	r3, #4
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	761a      	strb	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000e100 	.word	0xe000e100
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf28      	it	cs
 8004816:	2304      	movcs	r3, #4
 8004818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3304      	adds	r3, #4
 800481e:	2b06      	cmp	r3, #6
 8004820:	d902      	bls.n	8004828 <NVIC_EncodePriority+0x30>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3b03      	subs	r3, #3
 8004826:	e000      	b.n	800482a <NVIC_EncodePriority+0x32>
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	f04f 32ff 	mov.w	r2, #4294967295
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004840:	f04f 31ff 	mov.w	r1, #4294967295
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43d9      	mvns	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	4313      	orrs	r3, r2
         );
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	@ 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004870:	d301      	bcc.n	8004876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004872:	2301      	movs	r3, #1
 8004874:	e00f      	b.n	8004896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <SysTick_Config+0x40>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487e:	210f      	movs	r1, #15
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	f7ff ff8e 	bl	80047a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <SysTick_Config+0x40>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488e:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <SysTick_Config+0x40>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010

080048a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff29 	bl	8004704 <__NVIC_SetPriorityGrouping>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048cc:	f7ff ff3e 	bl	800474c <__NVIC_GetPriorityGrouping>
 80048d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7ff ff8e 	bl	80047f8 <NVIC_EncodePriority>
 80048dc:	4602      	mov	r2, r0
 80048de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff5d 	bl	80047a4 <__NVIC_SetPriority>
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	4603      	mov	r3, r0
 80048fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff31 	bl	8004768 <__NVIC_EnableIRQ>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ffa2 	bl	8004860 <SysTick_Config>
 800491c:	4603      	mov	r3, r0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e014      	b.n	8004962 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	791b      	ldrb	r3, [r3, #4]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d105      	bne.n	800494e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd fc6f 	bl	800222c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	795b      	ldrb	r3, [r3, #5]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DAC_Start+0x16>
 800497c:	2302      	movs	r3, #2
 800497e:	e03b      	b.n	80049f8 <HAL_DAC_Start+0x8e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d118      	bne.n	80049ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	e00f      	b.n	80049ea <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80049d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049d8:	d107      	bne.n	80049ea <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f042 0202 	orr.w	r2, r2, #2
 80049e8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	795b      	ldrb	r3, [r3, #5]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_DAC_Start_DMA+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0ab      	b.n	8004b7a <HAL_DAC_Start_DMA+0x176>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d12f      	bne.n	8004a94 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	@ (8004b84 <HAL_DAC_Start_DMA+0x180>)
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	4a51      	ldr	r2, [pc, #324]	@ (8004b88 <HAL_DAC_Start_DMA+0x184>)
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a50      	ldr	r2, [pc, #320]	@ (8004b8c <HAL_DAC_Start_DMA+0x188>)
 8004a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d013      	beq.n	8004a8a <HAL_DAC_Start_DMA+0x86>
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d845      	bhi.n	8004af4 <HAL_DAC_Start_DMA+0xf0>
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_DAC_Start_DMA+0x72>
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d005      	beq.n	8004a80 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004a74:	e03e      	b.n	8004af4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	613b      	str	r3, [r7, #16]
        break;
 8004a7e:	e03c      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	613b      	str	r3, [r7, #16]
        break;
 8004a88:	e037      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3310      	adds	r3, #16
 8004a90:	613b      	str	r3, [r7, #16]
        break;
 8004a92:	e032      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a3d      	ldr	r2, [pc, #244]	@ (8004b90 <HAL_DAC_Start_DMA+0x18c>)
 8004a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8004b94 <HAL_DAC_Start_DMA+0x190>)
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8004b98 <HAL_DAC_Start_DMA+0x194>)
 8004aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d013      	beq.n	8004aea <HAL_DAC_Start_DMA+0xe6>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d817      	bhi.n	8004af8 <HAL_DAC_Start_DMA+0xf4>
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_DAC_Start_DMA+0xd2>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d005      	beq.n	8004ae0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004ad4:	e010      	b.n	8004af8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3314      	adds	r3, #20
 8004adc:	613b      	str	r3, [r7, #16]
        break;
 8004ade:	e00c      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3318      	adds	r3, #24
 8004ae6:	613b      	str	r3, [r7, #16]
        break;
 8004ae8:	e007      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	331c      	adds	r3, #28
 8004af0:	613b      	str	r3, [r7, #16]
        break;
 8004af2:	e002      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        break;
 8004af4:	bf00      	nop
 8004af6:	e000      	b.n	8004afa <HAL_DAC_Start_DMA+0xf6>
        break;
 8004af8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6898      	ldr	r0, [r3, #8]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	f000 faeb 	bl	80050f4 <HAL_DMA_Start_IT>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]
 8004b22:	e010      	b.n	8004b46 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004b32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68d8      	ldr	r0, [r3, #12]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	f000 fad9 	bl	80050f4 <HAL_DMA_Start_IT>
 8004b42:	4603      	mov	r3, r0
 8004b44:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10c      	bne.n	8004b6c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6819      	ldr	r1, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	e005      	b.n	8004b78 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f043 0204 	orr.w	r2, r3, #4
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08004e71 	.word	0x08004e71
 8004b88:	08004e93 	.word	0x08004e93
 8004b8c:	08004eaf 	.word	0x08004eaf
 8004b90:	08004f19 	.word	0x08004f19
 8004b94:	08004f3b 	.word	0x08004f3b
 8004b98:	08004f57 	.word	0x08004f57

08004b9c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e004      	b.n	8004bd0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3314      	adds	r3, #20
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b088      	sub	sp, #32
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	795b      	ldrb	r3, [r3, #5]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_DAC_ConfigChannel+0x1c>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e114      	b.n	8004e68 <HAL_DAC_ConfigChannel+0x246>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2202      	movs	r2, #2
 8004c48:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	f040 8081 	bne.w	8004d56 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004c54:	f7fd fd18 	bl	8002688 <HAL_GetTick>
 8004c58:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d140      	bne.n	8004ce2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c60:	e018      	b.n	8004c94 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c62:	f7fd fd11 	bl	8002688 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d911      	bls.n	8004c94 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f043 0208 	orr.w	r2, r3, #8
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0e9      	b.n	8004e68 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1df      	bne.n	8004c62 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f7fd fcfc 	bl	80026a0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	6992      	ldr	r2, [r2, #24]
 8004cb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cb2:	e023      	b.n	8004cfc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cb4:	f7fd fce8 	bl	8002688 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d90f      	bls.n	8004ce2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da0a      	bge.n	8004ce2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f043 0208 	orr.w	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2203      	movs	r2, #3
 8004cdc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0c2      	b.n	8004e68 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dbe3      	blt.n	8004cb4 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004cec:	2001      	movs	r0, #1
 8004cee:	f7fd fcd7 	bl	80026a0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	6992      	ldr	r2, [r2, #24]
 8004cfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	ea02 0103 	and.w	r1, r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	69da      	ldr	r2, [r3, #28]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	409a      	lsls	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	21ff      	movs	r1, #255	@ 0xff
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	ea02 0103 	and.w	r1, r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11d      	bne.n	8004d9a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	221f      	movs	r2, #31
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2207      	movs	r2, #7
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f003 0310 	and.w	r3, r3, #16
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6819      	ldr	r1, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	400a      	ands	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0310 	and.w	r3, r3, #16
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	22c0      	movs	r2, #192	@ 0xc0
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	400a      	ands	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f7ff feb1 	bl	8004be6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	711a      	strb	r2, [r3, #4]
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff feaa 	bl	8004bfa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f043 0204 	orr.w	r2, r3, #4
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fea0 	bl	8004c0e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	711a      	strb	r2, [r3, #4]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff ffd8 	bl	8004edc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	711a      	strb	r2, [r3, #4]
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7ff ffd1 	bl	8004ef0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff ffc7 	bl	8004f04 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	711a      	strb	r2, [r3, #4]
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e098      	b.n	80050c8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80050d4 <HAL_DMA_Init+0x150>)
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d80f      	bhi.n	8004fc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80050d8 <HAL_DMA_Init+0x154>)
 8004faa:	4413      	add	r3, r2
 8004fac:	4a4b      	ldr	r2, [pc, #300]	@ (80050dc <HAL_DMA_Init+0x158>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	009a      	lsls	r2, r3, #2
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a48      	ldr	r2, [pc, #288]	@ (80050e0 <HAL_DMA_Init+0x15c>)
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fc0:	e00e      	b.n	8004fe0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b46      	ldr	r3, [pc, #280]	@ (80050e4 <HAL_DMA_Init+0x160>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	4a43      	ldr	r2, [pc, #268]	@ (80050dc <HAL_DMA_Init+0x158>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	009a      	lsls	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a42      	ldr	r2, [pc, #264]	@ (80050e8 <HAL_DMA_Init+0x164>)
 8004fde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800503a:	d039      	beq.n	80050b0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	4a27      	ldr	r2, [pc, #156]	@ (80050e0 <HAL_DMA_Init+0x15c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d11a      	bne.n	800507c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <HAL_DMA_Init+0x168>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	f003 031c 	and.w	r3, r3, #28
 8005052:	210f      	movs	r1, #15
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	43db      	mvns	r3, r3
 800505a:	4924      	ldr	r1, [pc, #144]	@ (80050ec <HAL_DMA_Init+0x168>)
 800505c:	4013      	ands	r3, r2
 800505e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005060:	4b22      	ldr	r3, [pc, #136]	@ (80050ec <HAL_DMA_Init+0x168>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	f003 031c 	and.w	r3, r3, #28
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	491d      	ldr	r1, [pc, #116]	@ (80050ec <HAL_DMA_Init+0x168>)
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
 800507a:	e019      	b.n	80050b0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <HAL_DMA_Init+0x16c>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005084:	f003 031c 	and.w	r3, r3, #28
 8005088:	210f      	movs	r1, #15
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	4917      	ldr	r1, [pc, #92]	@ (80050f0 <HAL_DMA_Init+0x16c>)
 8005092:	4013      	ands	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005096:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_DMA_Init+0x16c>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f003 031c 	and.w	r3, r3, #28
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	4911      	ldr	r1, [pc, #68]	@ (80050f0 <HAL_DMA_Init+0x16c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40020407 	.word	0x40020407
 80050d8:	bffdfff8 	.word	0xbffdfff8
 80050dc:	cccccccd 	.word	0xcccccccd
 80050e0:	40020000 	.word	0x40020000
 80050e4:	bffdfbf8 	.word	0xbffdfbf8
 80050e8:	40020400 	.word	0x40020400
 80050ec:	400200a8 	.word	0x400200a8
 80050f0:	400204a8 	.word	0x400204a8

080050f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_DMA_Start_IT+0x20>
 8005110:	2302      	movs	r3, #2
 8005112:	e04b      	b.n	80051ac <HAL_DMA_Start_IT+0xb8>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d13a      	bne.n	800519e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f8e0 	bl	8005312 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 020e 	orr.w	r2, r2, #14
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e00f      	b.n	800518c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0204 	bic.w	r2, r2, #4
 800517a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 020a 	orr.w	r2, r2, #10
 800518a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e005      	b.n	80051aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
 80051a8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d0:	f003 031c 	and.w	r3, r3, #28
 80051d4:	2204      	movs	r2, #4
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d026      	beq.n	800522e <HAL_DMA_IRQHandler+0x7a>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d021      	beq.n	800522e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0204 	bic.w	r2, r2, #4
 8005206:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	f003 021c 	and.w	r2, r3, #28
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	2104      	movs	r1, #4
 8005216:	fa01 f202 	lsl.w	r2, r1, r2
 800521a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d071      	beq.n	8005308 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800522c:	e06c      	b.n	8005308 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f003 031c 	and.w	r3, r3, #28
 8005236:	2202      	movs	r2, #2
 8005238:	409a      	lsls	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02e      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xec>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d029      	beq.n	80052a0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 020a 	bic.w	r2, r2, #10
 8005268:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f003 021c 	and.w	r2, r3, #28
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	2102      	movs	r1, #2
 8005280:	fa01 f202 	lsl.w	r2, r1, r2
 8005284:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d038      	beq.n	8005308 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800529e:	e033      	b.n	8005308 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a4:	f003 031c 	and.w	r3, r3, #28
 80052a8:	2208      	movs	r2, #8
 80052aa:	409a      	lsls	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02a      	beq.n	800530a <HAL_DMA_IRQHandler+0x156>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d025      	beq.n	800530a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 020e 	bic.w	r2, r2, #14
 80052cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d2:	f003 021c 	and.w	r2, r3, #28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f202 	lsl.w	r2, r1, r2
 80052e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005308:	bf00      	nop
 800530a:	bf00      	nop
}
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
 800531e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005324:	f003 021c 	and.w	r2, r3, #28
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d108      	bne.n	8005356 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005354:	e007      	b.n	8005366 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005382:	e17f      	b.n	8005684 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	2101      	movs	r1, #1
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	4013      	ands	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8171 	beq.w	800567e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d005      	beq.n	80053b4 <HAL_GPIO_Init+0x40>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d130      	bne.n	8005416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	2203      	movs	r2, #3
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ea:	2201      	movs	r2, #1
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	091b      	lsrs	r3, r3, #4
 8005400:	f003 0201 	and.w	r2, r3, #1
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d118      	bne.n	8005454 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005428:	2201      	movs	r2, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	f003 0201 	and.w	r2, r3, #1
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	2b03      	cmp	r3, #3
 800545e:	d017      	beq.n	8005490 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	2203      	movs	r2, #3
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d123      	bne.n	80054e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	08da      	lsrs	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3208      	adds	r2, #8
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	08da      	lsrs	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4013      	ands	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0203 	and.w	r2, r3, #3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80ac 	beq.w	800567e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005526:	4b5f      	ldr	r3, [pc, #380]	@ (80056a4 <HAL_GPIO_Init+0x330>)
 8005528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552a:	4a5e      	ldr	r2, [pc, #376]	@ (80056a4 <HAL_GPIO_Init+0x330>)
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	6613      	str	r3, [r2, #96]	@ 0x60
 8005532:	4b5c      	ldr	r3, [pc, #368]	@ (80056a4 <HAL_GPIO_Init+0x330>)
 8005534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800553e:	4a5a      	ldr	r2, [pc, #360]	@ (80056a8 <HAL_GPIO_Init+0x334>)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	089b      	lsrs	r3, r3, #2
 8005544:	3302      	adds	r3, #2
 8005546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	220f      	movs	r2, #15
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	43db      	mvns	r3, r3
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005568:	d025      	beq.n	80055b6 <HAL_GPIO_Init+0x242>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a4f      	ldr	r2, [pc, #316]	@ (80056ac <HAL_GPIO_Init+0x338>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <HAL_GPIO_Init+0x23e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a4e      	ldr	r2, [pc, #312]	@ (80056b0 <HAL_GPIO_Init+0x33c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d019      	beq.n	80055ae <HAL_GPIO_Init+0x23a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a4d      	ldr	r2, [pc, #308]	@ (80056b4 <HAL_GPIO_Init+0x340>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_GPIO_Init+0x236>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a4c      	ldr	r2, [pc, #304]	@ (80056b8 <HAL_GPIO_Init+0x344>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00d      	beq.n	80055a6 <HAL_GPIO_Init+0x232>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a4b      	ldr	r2, [pc, #300]	@ (80056bc <HAL_GPIO_Init+0x348>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <HAL_GPIO_Init+0x22e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a4a      	ldr	r2, [pc, #296]	@ (80056c0 <HAL_GPIO_Init+0x34c>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_GPIO_Init+0x22a>
 800559a:	2306      	movs	r3, #6
 800559c:	e00c      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 800559e:	2307      	movs	r3, #7
 80055a0:	e00a      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055a2:	2305      	movs	r3, #5
 80055a4:	e008      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055a6:	2304      	movs	r3, #4
 80055a8:	e006      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055aa:	2303      	movs	r3, #3
 80055ac:	e004      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e002      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_GPIO_Init+0x244>
 80055b6:	2300      	movs	r3, #0
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	f002 0203 	and.w	r2, r2, #3
 80055be:	0092      	lsls	r2, r2, #2
 80055c0:	4093      	lsls	r3, r2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80055c8:	4937      	ldr	r1, [pc, #220]	@ (80056a8 <HAL_GPIO_Init+0x334>)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	3302      	adds	r3, #2
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055d6:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	43db      	mvns	r3, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055fa:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005600:	4b30      	ldr	r3, [pc, #192]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	43db      	mvns	r3, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4013      	ands	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005624:	4a27      	ldr	r2, [pc, #156]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800562a:	4b26      	ldr	r3, [pc, #152]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	43db      	mvns	r3, r3
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800564e:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005654:	4b1b      	ldr	r3, [pc, #108]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	43db      	mvns	r3, r3
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005678:	4a12      	ldr	r2, [pc, #72]	@ (80056c4 <HAL_GPIO_Init+0x350>)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	3301      	adds	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	f47f ae78 	bne.w	8005384 <HAL_GPIO_Init+0x10>
  }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40010000 	.word	0x40010000
 80056ac:	48000400 	.word	0x48000400
 80056b0:	48000800 	.word	0x48000800
 80056b4:	48000c00 	.word	0x48000c00
 80056b8:	48001000 	.word	0x48001000
 80056bc:	48001400 	.word	0x48001400
 80056c0:	48001800 	.word	0x48001800
 80056c4:	40010400 	.word	0x40010400

080056c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80056cc:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40007000 	.word	0x40007000

080056e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f2:	d130      	bne.n	8005756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80056f4:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005700:	d038      	beq.n	8005774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005702:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800570a:	4a1e      	ldr	r2, [pc, #120]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800570c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005712:	4b1d      	ldr	r3, [pc, #116]	@ (8005788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2232      	movs	r2, #50	@ 0x32
 8005718:	fb02 f303 	mul.w	r3, r2, r3
 800571c:	4a1b      	ldr	r2, [pc, #108]	@ (800578c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	0c9b      	lsrs	r3, r3, #18
 8005724:	3301      	adds	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005728:	e002      	b.n	8005730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3b01      	subs	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005730:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573c:	d102      	bne.n	8005744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f2      	bne.n	800572a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005744:	4b0f      	ldr	r3, [pc, #60]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005750:	d110      	bne.n	8005774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e00f      	b.n	8005776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005762:	d007      	beq.n	8005774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005764:	4b07      	ldr	r3, [pc, #28]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800576c:	4a05      	ldr	r2, [pc, #20]	@ (8005784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800576e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40007000 	.word	0x40007000
 8005788:	20000004 	.word	0x20000004
 800578c:	431bde83 	.word	0x431bde83

08005790 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b088      	sub	sp, #32
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e3ca      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057a2:	4b97      	ldr	r3, [pc, #604]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ac:	4b94      	ldr	r3, [pc, #592]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80e4 	beq.w	800598c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_RCC_OscConfig+0x4a>
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	f040 808b 	bne.w	80058e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 8087 	bne.w	80058e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057da:	4b89      	ldr	r3, [pc, #548]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_RCC_OscConfig+0x62>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e3a2      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	4b82      	ldr	r3, [pc, #520]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <HAL_RCC_OscConfig+0x7c>
 8005802:	4b7f      	ldr	r3, [pc, #508]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800580a:	e005      	b.n	8005818 <HAL_RCC_OscConfig+0x88>
 800580c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800580e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005818:	4293      	cmp	r3, r2
 800581a:	d223      	bcs.n	8005864 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fd55 	bl	80062d0 <RCC_SetFlashLatencyFromMSIRange>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e383      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005830:	4b73      	ldr	r3, [pc, #460]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a72      	ldr	r2, [pc, #456]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005836:	f043 0308 	orr.w	r3, r3, #8
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	4b70      	ldr	r3, [pc, #448]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	496d      	ldr	r1, [pc, #436]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800584e:	4b6c      	ldr	r3, [pc, #432]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	4968      	ldr	r1, [pc, #416]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
 8005862:	e025      	b.n	80058b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005864:	4b66      	ldr	r3, [pc, #408]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a65      	ldr	r2, [pc, #404]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800586a:	f043 0308 	orr.w	r3, r3, #8
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4b63      	ldr	r3, [pc, #396]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4960      	ldr	r1, [pc, #384]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005882:	4b5f      	ldr	r3, [pc, #380]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	495b      	ldr	r1, [pc, #364]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd15 	bl	80062d0 <RCC_SetFlashLatencyFromMSIRange>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e343      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058b0:	f000 fc4a 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 80058b4:	4602      	mov	r2, r0
 80058b6:	4b52      	ldr	r3, [pc, #328]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	091b      	lsrs	r3, r3, #4
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	4950      	ldr	r1, [pc, #320]	@ (8005a04 <HAL_RCC_OscConfig+0x274>)
 80058c2:	5ccb      	ldrb	r3, [r1, r3]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
 80058cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005a08 <HAL_RCC_OscConfig+0x278>)
 80058ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80058d0:	4b4e      	ldr	r3, [pc, #312]	@ (8005a0c <HAL_RCC_OscConfig+0x27c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fc fe87 	bl	80025e8 <HAL_InitTick>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d052      	beq.n	800598a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	e327      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d032      	beq.n	8005956 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058f0:	4b43      	ldr	r3, [pc, #268]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a42      	ldr	r2, [pc, #264]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058fc:	f7fc fec4 	bl	8002688 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005904:	f7fc fec0 	bl	8002688 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e310      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005916:	4b3a      	ldr	r3, [pc, #232]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f0      	beq.n	8005904 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005922:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a36      	ldr	r2, [pc, #216]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005928:	f043 0308 	orr.w	r3, r3, #8
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4931      	ldr	r1, [pc, #196]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800593c:	4313      	orrs	r3, r2
 800593e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005940:	4b2f      	ldr	r3, [pc, #188]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	492c      	ldr	r1, [pc, #176]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005950:	4313      	orrs	r3, r2
 8005952:	604b      	str	r3, [r1, #4]
 8005954:	e01a      	b.n	800598c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005956:	4b2a      	ldr	r3, [pc, #168]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a29      	ldr	r2, [pc, #164]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005962:	f7fc fe91 	bl	8002688 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800596a:	f7fc fe8d 	bl	8002688 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e2dd      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800597c:	4b20      	ldr	r3, [pc, #128]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x1da>
 8005988:	e000      	b.n	800598c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800598a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d074      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b08      	cmp	r3, #8
 800599c:	d005      	beq.n	80059aa <HAL_RCC_OscConfig+0x21a>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d10e      	bne.n	80059c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d10b      	bne.n	80059c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059aa:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d064      	beq.n	8005a80 <HAL_RCC_OscConfig+0x2f0>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d160      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e2ba      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ca:	d106      	bne.n	80059da <HAL_RCC_OscConfig+0x24a>
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e026      	b.n	8005a28 <HAL_RCC_OscConfig+0x298>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059e2:	d115      	bne.n	8005a10 <HAL_RCC_OscConfig+0x280>
 80059e4:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a05      	ldr	r2, [pc, #20]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	4b03      	ldr	r3, [pc, #12]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a02      	ldr	r2, [pc, #8]	@ (8005a00 <HAL_RCC_OscConfig+0x270>)
 80059f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e014      	b.n	8005a28 <HAL_RCC_OscConfig+0x298>
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000
 8005a04:	0800b45c 	.word	0x0800b45c
 8005a08:	20000004 	.word	0x20000004
 8005a0c:	20000008 	.word	0x20000008
 8005a10:	4ba0      	ldr	r3, [pc, #640]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a9f      	ldr	r2, [pc, #636]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a9c      	ldr	r2, [pc, #624]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d013      	beq.n	8005a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fc fe2a 	bl	8002688 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a38:	f7fc fe26 	bl	8002688 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b64      	cmp	r3, #100	@ 0x64
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e276      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a4a:	4b92      	ldr	r3, [pc, #584]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x2a8>
 8005a56:	e014      	b.n	8005a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fc fe16 	bl	8002688 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fc fe12 	bl	8002688 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	@ 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e262      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a72:	4b88      	ldr	r3, [pc, #544]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x2d0>
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d060      	beq.n	8005b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x310>
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d119      	bne.n	8005ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d116      	bne.n	8005ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x328>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e23f      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab8:	4b76      	ldr	r3, [pc, #472]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	061b      	lsls	r3, r3, #24
 8005ac6:	4973      	ldr	r1, [pc, #460]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005acc:	e040      	b.n	8005b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d023      	beq.n	8005b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6e      	ldr	r2, [pc, #440]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae2:	f7fc fdd1 	bl	8002688 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aea:	f7fc fdcd 	bl	8002688 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e21d      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005afc:	4b65      	ldr	r3, [pc, #404]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b08:	4b62      	ldr	r3, [pc, #392]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	061b      	lsls	r3, r3, #24
 8005b16:	495f      	ldr	r1, [pc, #380]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	604b      	str	r3, [r1, #4]
 8005b1c:	e018      	b.n	8005b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5c      	ldr	r2, [pc, #368]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2a:	f7fc fdad 	bl	8002688 <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b32:	f7fc fda9 	bl	8002688 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e1f9      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b44:	4b53      	ldr	r3, [pc, #332]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1f0      	bne.n	8005b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d03c      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01c      	beq.n	8005b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b64:	4b4b      	ldr	r3, [pc, #300]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fc fd88 	bl	8002688 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b7c:	f7fc fd84 	bl	8002688 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e1d4      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b8e:	4b41      	ldr	r3, [pc, #260]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ef      	beq.n	8005b7c <HAL_RCC_OscConfig+0x3ec>
 8005b9c:	e01b      	b.n	8005bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bae:	f7fc fd6b 	bl	8002688 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bb6:	f7fc fd67 	bl	8002688 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e1b7      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bc8:	4b32      	ldr	r3, [pc, #200]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1ef      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80a6 	beq.w	8005d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005be8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf4:	4b27      	ldr	r3, [pc, #156]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf8:	4a26      	ldr	r2, [pc, #152]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c00:	4b24      	ldr	r3, [pc, #144]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c10:	4b21      	ldr	r3, [pc, #132]	@ (8005c98 <HAL_RCC_OscConfig+0x508>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d118      	bne.n	8005c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c98 <HAL_RCC_OscConfig+0x508>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	@ (8005c98 <HAL_RCC_OscConfig+0x508>)
 8005c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c28:	f7fc fd2e 	bl	8002688 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c30:	f7fc fd2a 	bl	8002688 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e17a      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c42:	4b15      	ldr	r3, [pc, #84]	@ (8005c98 <HAL_RCC_OscConfig+0x508>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d108      	bne.n	8005c68 <HAL_RCC_OscConfig+0x4d8>
 8005c56:	4b0f      	ldr	r3, [pc, #60]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c66:	e029      	b.n	8005cbc <HAL_RCC_OscConfig+0x52c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d115      	bne.n	8005c9c <HAL_RCC_OscConfig+0x50c>
 8005c70:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c76:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c80:	4b04      	ldr	r3, [pc, #16]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	4a03      	ldr	r2, [pc, #12]	@ (8005c94 <HAL_RCC_OscConfig+0x504>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c90:	e014      	b.n	8005cbc <HAL_RCC_OscConfig+0x52c>
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca2:	4a9b      	ldr	r2, [pc, #620]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005cac:	4b98      	ldr	r3, [pc, #608]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb2:	4a97      	ldr	r2, [pc, #604]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d016      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fce0 	bl	8002688 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ccc:	f7fc fcdc 	bl	8002688 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e12a      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0ed      	beq.n	8005ccc <HAL_RCC_OscConfig+0x53c>
 8005cf0:	e015      	b.n	8005d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf2:	f7fc fcc9 	bl	8002688 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cf8:	e00a      	b.n	8005d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfa:	f7fc fcc5 	bl	8002688 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e113      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d10:	4b7f      	ldr	r3, [pc, #508]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ed      	bne.n	8005cfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d105      	bne.n	8005d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d24:	4b7a      	ldr	r3, [pc, #488]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	4a79      	ldr	r2, [pc, #484]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80fe 	beq.w	8005f36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	f040 80d0 	bne.w	8005ee4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d44:	4b72      	ldr	r3, [pc, #456]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f003 0203 	and.w	r2, r3, #3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d130      	bne.n	8005dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	3b01      	subs	r3, #1
 8005d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d127      	bne.n	8005dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d11f      	bne.n	8005dba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d84:	2a07      	cmp	r2, #7
 8005d86:	bf14      	ite	ne
 8005d88:	2201      	movne	r2, #1
 8005d8a:	2200      	moveq	r2, #0
 8005d8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d113      	bne.n	8005dba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	3b01      	subs	r3, #1
 8005db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d06e      	beq.n	8005e98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	d069      	beq.n	8005e94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005dc0:	4b53      	ldr	r3, [pc, #332]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005dcc:	4b50      	ldr	r3, [pc, #320]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0ad      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4b      	ldr	r2, [pc, #300]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005de6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005de8:	f7fc fc4e 	bl	8002688 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df0:	f7fc fc4a 	bl	8002688 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e09a      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e02:	4b43      	ldr	r3, [pc, #268]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e0e:	4b40      	ldr	r3, [pc, #256]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	4b40      	ldr	r3, [pc, #256]	@ (8005f14 <HAL_RCC_OscConfig+0x784>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	4311      	orrs	r1, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e28:	0212      	lsls	r2, r2, #8
 8005e2a:	4311      	orrs	r1, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e30:	0852      	lsrs	r2, r2, #1
 8005e32:	3a01      	subs	r2, #1
 8005e34:	0552      	lsls	r2, r2, #21
 8005e36:	4311      	orrs	r1, r2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e3c:	0852      	lsrs	r2, r2, #1
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	0652      	lsls	r2, r2, #25
 8005e42:	4311      	orrs	r1, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e48:	0912      	lsrs	r2, r2, #4
 8005e4a:	0452      	lsls	r2, r2, #17
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	4930      	ldr	r1, [pc, #192]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e54:	4b2e      	ldr	r3, [pc, #184]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a2d      	ldr	r2, [pc, #180]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e60:	4b2b      	ldr	r3, [pc, #172]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e6c:	f7fc fc0c 	bl	8002688 <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e74:	f7fc fc08 	bl	8002688 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e058      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e86:	4b22      	ldr	r3, [pc, #136]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e92:	e050      	b.n	8005f36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04f      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e98:	4b1d      	ldr	r3, [pc, #116]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d148      	bne.n	8005f36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a19      	ldr	r2, [pc, #100]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb0:	4b17      	ldr	r3, [pc, #92]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ebc:	f7fc fbe4 	bl	8002688 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc fbe0 	bl	8002688 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e030      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x734>
 8005ee2:	e028      	b.n	8005f36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d023      	beq.n	8005f32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eea:	4b09      	ldr	r3, [pc, #36]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a08      	ldr	r2, [pc, #32]	@ (8005f10 <HAL_RCC_OscConfig+0x780>)
 8005ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fc fbc7 	bl	8002688 <HAL_GetTick>
 8005efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005efc:	e00c      	b.n	8005f18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005efe:	f7fc fbc3 	bl	8002688 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d905      	bls.n	8005f18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e013      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
 8005f10:	40021000 	.word	0x40021000
 8005f14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <HAL_RCC_OscConfig+0x7b0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ec      	bne.n	8005efe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f24:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <HAL_RCC_OscConfig+0x7b0>)
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	4905      	ldr	r1, [pc, #20]	@ (8005f40 <HAL_RCC_OscConfig+0x7b0>)
 8005f2a:	4b06      	ldr	r3, [pc, #24]	@ (8005f44 <HAL_RCC_OscConfig+0x7b4>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60cb      	str	r3, [r1, #12]
 8005f30:	e001      	b.n	8005f36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3720      	adds	r7, #32
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40021000 	.word	0x40021000
 8005f44:	feeefffc 	.word	0xfeeefffc

08005f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0e7      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f5c:	4b75      	ldr	r3, [pc, #468]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d910      	bls.n	8005f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f6a:	4b72      	ldr	r3, [pc, #456]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f023 0207 	bic.w	r2, r3, #7
 8005f72:	4970      	ldr	r1, [pc, #448]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0cf      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d010      	beq.n	8005fba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4b66      	ldr	r3, [pc, #408]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d908      	bls.n	8005fba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa8:	4b63      	ldr	r3, [pc, #396]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4960      	ldr	r1, [pc, #384]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04c      	beq.n	8006060 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fce:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d121      	bne.n	800601e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e0a6      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fe6:	4b54      	ldr	r3, [pc, #336]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d115      	bne.n	800601e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e09a      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d107      	bne.n	800600e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e08e      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800600e:	4b4a      	ldr	r3, [pc, #296]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e086      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800601e:	4b46      	ldr	r3, [pc, #280]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f023 0203 	bic.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4943      	ldr	r1, [pc, #268]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006030:	f7fc fb2a 	bl	8002688 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	e00a      	b.n	800604e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006038:	f7fc fb26 	bl	8002688 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006046:	4293      	cmp	r3, r2
 8006048:	d901      	bls.n	800604e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e06e      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	4b3a      	ldr	r3, [pc, #232]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 020c 	and.w	r2, r3, #12
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	429a      	cmp	r2, r3
 800605e:	d1eb      	bne.n	8006038 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d010      	beq.n	800608e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	4b31      	ldr	r3, [pc, #196]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006078:	429a      	cmp	r2, r3
 800607a:	d208      	bcs.n	800608e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800607c:	4b2e      	ldr	r3, [pc, #184]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	492b      	ldr	r1, [pc, #172]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800608e:	4b29      	ldr	r3, [pc, #164]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d210      	bcs.n	80060be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609c:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 0207 	bic.w	r2, r3, #7
 80060a4:	4923      	ldr	r1, [pc, #140]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ac:	4b21      	ldr	r3, [pc, #132]	@ (8006134 <HAL_RCC_ClockConfig+0x1ec>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d001      	beq.n	80060be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e036      	b.n	800612c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	4918      	ldr	r1, [pc, #96]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d009      	beq.n	80060fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060e8:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4910      	ldr	r1, [pc, #64]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060fc:	f000 f824 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <HAL_RCC_ClockConfig+0x1f0>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	091b      	lsrs	r3, r3, #4
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	490b      	ldr	r1, [pc, #44]	@ (800613c <HAL_RCC_ClockConfig+0x1f4>)
 800610e:	5ccb      	ldrb	r3, [r1, r3]
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	fa22 f303 	lsr.w	r3, r2, r3
 8006118:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <HAL_RCC_ClockConfig+0x1f8>)
 800611a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <HAL_RCC_ClockConfig+0x1fc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fc fa61 	bl	80025e8 <HAL_InitTick>
 8006126:	4603      	mov	r3, r0
 8006128:	72fb      	strb	r3, [r7, #11]

  return status;
 800612a:	7afb      	ldrb	r3, [r7, #11]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40022000 	.word	0x40022000
 8006138:	40021000 	.word	0x40021000
 800613c:	0800b45c 	.word	0x0800b45c
 8006140:	20000004 	.word	0x20000004
 8006144:	20000008 	.word	0x20000008

08006148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	@ 0x24
 800614c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006156:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006160:	4b3b      	ldr	r3, [pc, #236]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_GetSysClockFreq+0x34>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d121      	bne.n	80061ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d11e      	bne.n	80061ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800617c:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006188:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800618a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	e005      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006198:	4b2d      	ldr	r3, [pc, #180]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10d      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d102      	bne.n	80061c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061c0:	4b25      	ldr	r3, [pc, #148]	@ (8006258 <HAL_RCC_GetSysClockFreq+0x110>)
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e004      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061cc:	4b23      	ldr	r3, [pc, #140]	@ (800625c <HAL_RCC_GetSysClockFreq+0x114>)
 80061ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b0c      	cmp	r3, #12
 80061d4:	d134      	bne.n	8006240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_GetSysClockFreq+0xa6>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d003      	beq.n	80061f4 <HAL_RCC_GetSysClockFreq+0xac>
 80061ec:	e005      	b.n	80061fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCC_GetSysClockFreq+0x110>)
 80061f0:	617b      	str	r3, [r7, #20]
      break;
 80061f2:	e005      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061f4:	4b19      	ldr	r3, [pc, #100]	@ (800625c <HAL_RCC_GetSysClockFreq+0x114>)
 80061f6:	617b      	str	r3, [r7, #20]
      break;
 80061f8:	e002      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	617b      	str	r3, [r7, #20]
      break;
 80061fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006200:	4b13      	ldr	r3, [pc, #76]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	3301      	adds	r3, #1
 800620c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	fb03 f202 	mul.w	r2, r3, r2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	fbb2 f3f3 	udiv	r3, r2, r3
 8006224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006226:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <HAL_RCC_GetSysClockFreq+0x108>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	0e5b      	lsrs	r3, r3, #25
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	3301      	adds	r3, #1
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006240:	69bb      	ldr	r3, [r7, #24]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3724      	adds	r7, #36	@ 0x24
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40021000 	.word	0x40021000
 8006254:	0800b474 	.word	0x0800b474
 8006258:	00f42400 	.word	0x00f42400
 800625c:	007a1200 	.word	0x007a1200

08006260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006264:	4b03      	ldr	r3, [pc, #12]	@ (8006274 <HAL_RCC_GetHCLKFreq+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20000004 	.word	0x20000004

08006278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800627c:	f7ff fff0 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4904      	ldr	r1, [pc, #16]	@ (80062a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000
 80062a0:	0800b46c 	.word	0x0800b46c

080062a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062a8:	f7ff ffda 	bl	8006260 <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0adb      	lsrs	r3, r3, #11
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4904      	ldr	r1, [pc, #16]	@ (80062cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800b46c 	.word	0x0800b46c

080062d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062d8:	2300      	movs	r3, #0
 80062da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062e8:	f7ff f9ee 	bl	80056c8 <HAL_PWREx_GetVoltageRange>
 80062ec:	6178      	str	r0, [r7, #20]
 80062ee:	e014      	b.n	800631a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062f0:	4b25      	ldr	r3, [pc, #148]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f4:	4a24      	ldr	r2, [pc, #144]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80062fc:	4b22      	ldr	r3, [pc, #136]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006308:	f7ff f9de 	bl	80056c8 <HAL_PWREx_GetVoltageRange>
 800630c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800630e:	4b1e      	ldr	r3, [pc, #120]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	4a1d      	ldr	r2, [pc, #116]	@ (8006388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006318:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006320:	d10b      	bne.n	800633a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b80      	cmp	r3, #128	@ 0x80
 8006326:	d919      	bls.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2ba0      	cmp	r3, #160	@ 0xa0
 800632c:	d902      	bls.n	8006334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800632e:	2302      	movs	r3, #2
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e013      	b.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006334:	2301      	movs	r3, #1
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e010      	b.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d902      	bls.n	8006346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006340:	2303      	movs	r3, #3
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	e00a      	b.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b80      	cmp	r3, #128	@ 0x80
 800634a:	d102      	bne.n	8006352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800634c:	2302      	movs	r3, #2
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	e004      	b.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b70      	cmp	r3, #112	@ 0x70
 8006356:	d101      	bne.n	800635c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006358:	2301      	movs	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800635c:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 0207 	bic.w	r2, r3, #7
 8006364:	4909      	ldr	r1, [pc, #36]	@ (800638c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800636c:	4b07      	ldr	r3, [pc, #28]	@ (800638c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	d001      	beq.n	800637e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40021000 	.word	0x40021000
 800638c:	40022000 	.word	0x40022000

08006390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006398:	2300      	movs	r3, #0
 800639a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800639c:	2300      	movs	r3, #0
 800639e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d041      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063b4:	d02a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80063b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80063ba:	d824      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063c0:	d008      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80063c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80063c6:	d81e      	bhi.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80063cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063d0:	d010      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063d2:	e018      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063d4:	4b86      	ldr	r3, [pc, #536]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4a85      	ldr	r2, [pc, #532]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063e0:	e015      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3304      	adds	r3, #4
 80063e6:	2100      	movs	r1, #0
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fabb 	bl	8006964 <RCCEx_PLLSAI1_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063f2:	e00c      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3320      	adds	r3, #32
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fba6 	bl	8006b4c <RCCEx_PLLSAI2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006404:	e003      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	74fb      	strb	r3, [r7, #19]
      break;
 800640a:	e000      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800640c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006414:	4b76      	ldr	r3, [pc, #472]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800641a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006422:	4973      	ldr	r1, [pc, #460]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800642a:	e001      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	7cfb      	ldrb	r3, [r7, #19]
 800642e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d041      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006444:	d02a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800644a:	d824      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800644c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006450:	d008      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006456:	d81e      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800645c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006460:	d010      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006462:	e018      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006464:	4b62      	ldr	r3, [pc, #392]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a61      	ldr	r2, [pc, #388]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800646a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800646e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006470:	e015      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3304      	adds	r3, #4
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f000 fa73 	bl	8006964 <RCCEx_PLLSAI1_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006482:	e00c      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3320      	adds	r3, #32
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fb5e 	bl	8006b4c <RCCEx_PLLSAI2_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	74fb      	strb	r3, [r7, #19]
      break;
 800649a:	e000      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800649c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10b      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064a4:	4b52      	ldr	r3, [pc, #328]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064b2:	494f      	ldr	r1, [pc, #316]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80064ba:	e001      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80a0 	beq.w	800660e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ce:	2300      	movs	r3, #0
 80064d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064d2:	4b47      	ldr	r3, [pc, #284]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00d      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e8:	4b41      	ldr	r3, [pc, #260]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ec:	4a40      	ldr	r2, [pc, #256]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f4:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006500:	2301      	movs	r3, #1
 8006502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3a      	ldr	r2, [pc, #232]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800650a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800650e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006510:	f7fc f8ba 	bl	8002688 <HAL_GetTick>
 8006514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006516:	e009      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006518:	f7fc f8b6 	bl	8002688 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d902      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	74fb      	strb	r3, [r7, #19]
        break;
 800652a:	e005      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800652c:	4b31      	ldr	r3, [pc, #196]	@ (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0ef      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d15c      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800653e:	4b2c      	ldr	r3, [pc, #176]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	429a      	cmp	r2, r3
 800655a:	d019      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800655c:	4b24      	ldr	r3, [pc, #144]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006568:	4b21      	ldr	r3, [pc, #132]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800656a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656e:	4a20      	ldr	r2, [pc, #128]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006578:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657e:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006588:	4a19      	ldr	r2, [pc, #100]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659a:	f7fc f875 	bl	8002688 <HAL_GetTick>
 800659e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a0:	e00b      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a2:	f7fc f871 	bl	8002688 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d902      	bls.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	74fb      	strb	r3, [r7, #19]
            break;
 80065b8:	e006      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ba:	4b0d      	ldr	r3, [pc, #52]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ec      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065ce:	4b08      	ldr	r3, [pc, #32]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065de:	4904      	ldr	r1, [pc, #16]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80065e6:	e009      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	74bb      	strb	r3, [r7, #18]
 80065ec:	e006      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065fc:	7c7b      	ldrb	r3, [r7, #17]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b9e      	ldr	r3, [pc, #632]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006606:	4a9d      	ldr	r2, [pc, #628]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800661a:	4b98      	ldr	r3, [pc, #608]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	f023 0203 	bic.w	r2, r3, #3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006628:	4994      	ldr	r1, [pc, #592]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800663c:	4b8f      	ldr	r3, [pc, #572]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006642:	f023 020c 	bic.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664a:	498c      	ldr	r1, [pc, #560]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664c:	4313      	orrs	r3, r2
 800664e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800665e:	4b87      	ldr	r3, [pc, #540]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006664:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	4983      	ldr	r1, [pc, #524]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666e:	4313      	orrs	r3, r2
 8006670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006680:	4b7e      	ldr	r3, [pc, #504]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006686:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	497b      	ldr	r1, [pc, #492]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066a2:	4b76      	ldr	r3, [pc, #472]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b0:	4972      	ldr	r1, [pc, #456]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066c4:	4b6d      	ldr	r3, [pc, #436]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d2:	496a      	ldr	r1, [pc, #424]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066e6:	4b65      	ldr	r3, [pc, #404]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	4961      	ldr	r1, [pc, #388]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006708:	4b5c      	ldr	r3, [pc, #368]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006716:	4959      	ldr	r1, [pc, #356]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800672a:	4b54      	ldr	r3, [pc, #336]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006738:	4950      	ldr	r1, [pc, #320]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800674c:	4b4b      	ldr	r3, [pc, #300]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675a:	4948      	ldr	r1, [pc, #288]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800676e:	4b43      	ldr	r3, [pc, #268]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	493f      	ldr	r1, [pc, #252]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d028      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006790:	4b3a      	ldr	r3, [pc, #232]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006796:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800679e:	4937      	ldr	r1, [pc, #220]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ae:	d106      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b0:	4b32      	ldr	r3, [pc, #200]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	4a31      	ldr	r2, [pc, #196]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ba:	60d3      	str	r3, [r2, #12]
 80067bc:	e011      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067c6:	d10c      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f8c8 	bl	8006964 <RCCEx_PLLSAI1_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067d8:	7cfb      	ldrb	r3, [r7, #19]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067ee:	4b23      	ldr	r3, [pc, #140]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fc:	491f      	ldr	r1, [pc, #124]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800680e:	4b1b      	ldr	r3, [pc, #108]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	4a1a      	ldr	r2, [pc, #104]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006818:	60d3      	str	r3, [r2, #12]
 800681a:	e011      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006824:	d10c      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	2101      	movs	r1, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f000 f899 	bl	8006964 <RCCEx_PLLSAI1_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006836:	7cfb      	ldrb	r3, [r7, #19]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800683c:	7cfb      	ldrb	r3, [r7, #19]
 800683e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d02b      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800684c:	4b0b      	ldr	r3, [pc, #44]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800685a:	4908      	ldr	r1, [pc, #32]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4a02      	ldr	r2, [pc, #8]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006876:	60d3      	str	r3, [r2, #12]
 8006878:	e014      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800687a:	bf00      	nop
 800687c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006888:	d10c      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3304      	adds	r3, #4
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f000 f867 	bl	8006964 <RCCEx_PLLSAI1_Config>
 8006896:	4603      	mov	r3, r0
 8006898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800689a:	7cfb      	ldrb	r3, [r7, #19]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80068a0:	7cfb      	ldrb	r3, [r7, #19]
 80068a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d02f      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068be:	4928      	ldr	r1, [pc, #160]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ce:	d10d      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	2102      	movs	r1, #2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f844 	bl	8006964 <RCCEx_PLLSAI1_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068e0:	7cfb      	ldrb	r3, [r7, #19]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d014      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	74bb      	strb	r3, [r7, #18]
 80068ea:	e011      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f4:	d10c      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3320      	adds	r3, #32
 80068fa:	2102      	movs	r1, #2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f925 	bl	8006b4c <RCCEx_PLLSAI2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800691c:	4b10      	ldr	r3, [pc, #64]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006922:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800692a:	490d      	ldr	r1, [pc, #52]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800693e:	4b08      	ldr	r3, [pc, #32]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800694e:	4904      	ldr	r1, [pc, #16]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006950:	4313      	orrs	r3, r2
 8006952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006956:	7cbb      	ldrb	r3, [r7, #18]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40021000 	.word	0x40021000

08006964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006972:	4b75      	ldr	r3, [pc, #468]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d018      	beq.n	80069b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800697e:	4b72      	ldr	r3, [pc, #456]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0203 	and.w	r2, r3, #3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d10d      	bne.n	80069aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
       ||
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006996:	4b6c      	ldr	r3, [pc, #432]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	091b      	lsrs	r3, r3, #4
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
       ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d047      	beq.n	8006a3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	e044      	b.n	8006a3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d018      	beq.n	80069ea <RCCEx_PLLSAI1_Config+0x86>
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d825      	bhi.n	8006a08 <RCCEx_PLLSAI1_Config+0xa4>
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d002      	beq.n	80069c6 <RCCEx_PLLSAI1_Config+0x62>
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d009      	beq.n	80069d8 <RCCEx_PLLSAI1_Config+0x74>
 80069c4:	e020      	b.n	8006a08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069c6:	4b60      	ldr	r3, [pc, #384]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d11d      	bne.n	8006a0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d6:	e01a      	b.n	8006a0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d116      	bne.n	8006a12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e8:	e013      	b.n	8006a12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ea:	4b57      	ldr	r3, [pc, #348]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10f      	bne.n	8006a16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069f6:	4b54      	ldr	r3, [pc, #336]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a06:	e006      	b.n	8006a16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0c:	e004      	b.n	8006a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a0e:	bf00      	nop
 8006a10:	e002      	b.n	8006a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a12:	bf00      	nop
 8006a14:	e000      	b.n	8006a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10d      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	430b      	orrs	r3, r1
 8006a34:	4944      	ldr	r1, [pc, #272]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d17d      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a40:	4b41      	ldr	r3, [pc, #260]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a40      	ldr	r2, [pc, #256]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4c:	f7fb fe1c 	bl	8002688 <HAL_GetTick>
 8006a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a52:	e009      	b.n	8006a68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a54:	f7fb fe18 	bl	8002688 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d902      	bls.n	8006a68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	73fb      	strb	r3, [r7, #15]
        break;
 8006a66:	e005      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a68:	4b37      	ldr	r3, [pc, #220]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1ef      	bne.n	8006a54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d160      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d111      	bne.n	8006aa4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a80:	4b31      	ldr	r3, [pc, #196]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6892      	ldr	r2, [r2, #8]
 8006a90:	0211      	lsls	r1, r2, #8
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68d2      	ldr	r2, [r2, #12]
 8006a96:	0912      	lsrs	r2, r2, #4
 8006a98:	0452      	lsls	r2, r2, #17
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	492a      	ldr	r1, [pc, #168]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	610b      	str	r3, [r1, #16]
 8006aa2:	e027      	b.n	8006af4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d112      	bne.n	8006ad0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aaa:	4b27      	ldr	r3, [pc, #156]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006ab2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	0211      	lsls	r1, r2, #8
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6912      	ldr	r2, [r2, #16]
 8006ac0:	0852      	lsrs	r2, r2, #1
 8006ac2:	3a01      	subs	r2, #1
 8006ac4:	0552      	lsls	r2, r2, #21
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	491f      	ldr	r1, [pc, #124]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	610b      	str	r3, [r1, #16]
 8006ace:	e011      	b.n	8006af4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6892      	ldr	r2, [r2, #8]
 8006ae0:	0211      	lsls	r1, r2, #8
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6952      	ldr	r2, [r2, #20]
 8006ae6:	0852      	lsrs	r2, r2, #1
 8006ae8:	3a01      	subs	r2, #1
 8006aea:	0652      	lsls	r2, r2, #25
 8006aec:	430a      	orrs	r2, r1
 8006aee:	4916      	ldr	r1, [pc, #88]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006af4:	4b14      	ldr	r3, [pc, #80]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a13      	ldr	r2, [pc, #76]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006afa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fb fdc2 	bl	8002688 <HAL_GetTick>
 8006b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b06:	e009      	b.n	8006b1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b08:	f7fb fdbe 	bl	8002688 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d902      	bls.n	8006b1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
          break;
 8006b1a:	e005      	b.n	8006b28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0ef      	beq.n	8006b08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b2e:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	4904      	ldr	r1, [pc, #16]	@ (8006b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40021000 	.word	0x40021000

08006b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d018      	beq.n	8006b98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b66:	4b67      	ldr	r3, [pc, #412]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0203 	and.w	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d10d      	bne.n	8006b92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
       ||
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d009      	beq.n	8006b92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b7e:	4b61      	ldr	r3, [pc, #388]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	091b      	lsrs	r3, r3, #4
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
       ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d047      	beq.n	8006c22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	e044      	b.n	8006c22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d018      	beq.n	8006bd2 <RCCEx_PLLSAI2_Config+0x86>
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d825      	bhi.n	8006bf0 <RCCEx_PLLSAI2_Config+0xa4>
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d002      	beq.n	8006bae <RCCEx_PLLSAI2_Config+0x62>
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d009      	beq.n	8006bc0 <RCCEx_PLLSAI2_Config+0x74>
 8006bac:	e020      	b.n	8006bf0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bae:	4b55      	ldr	r3, [pc, #340]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11d      	bne.n	8006bf6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bbe:	e01a      	b.n	8006bf6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bc0:	4b50      	ldr	r3, [pc, #320]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d116      	bne.n	8006bfa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd0:	e013      	b.n	8006bfa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10f      	bne.n	8006bfe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bde:	4b49      	ldr	r3, [pc, #292]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bee:	e006      	b.n	8006bfe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	e004      	b.n	8006c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bf6:	bf00      	nop
 8006bf8:	e002      	b.n	8006c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bfa:	bf00      	nop
 8006bfc:	e000      	b.n	8006c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c06:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	430b      	orrs	r3, r1
 8006c1c:	4939      	ldr	r1, [pc, #228]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d167      	bne.n	8006cf8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c28:	4b36      	ldr	r3, [pc, #216]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c34:	f7fb fd28 	bl	8002688 <HAL_GetTick>
 8006c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c3a:	e009      	b.n	8006c50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c3c:	f7fb fd24 	bl	8002688 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d902      	bls.n	8006c50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c4e:	e005      	b.n	8006c5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c50:	4b2c      	ldr	r3, [pc, #176]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ef      	bne.n	8006c3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d14a      	bne.n	8006cf8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d111      	bne.n	8006c8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c68:	4b26      	ldr	r3, [pc, #152]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6892      	ldr	r2, [r2, #8]
 8006c78:	0211      	lsls	r1, r2, #8
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68d2      	ldr	r2, [r2, #12]
 8006c7e:	0912      	lsrs	r2, r2, #4
 8006c80:	0452      	lsls	r2, r2, #17
 8006c82:	430a      	orrs	r2, r1
 8006c84:	491f      	ldr	r1, [pc, #124]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	614b      	str	r3, [r1, #20]
 8006c8a:	e011      	b.n	8006cb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6892      	ldr	r2, [r2, #8]
 8006c9c:	0211      	lsls	r1, r2, #8
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6912      	ldr	r2, [r2, #16]
 8006ca2:	0852      	lsrs	r2, r2, #1
 8006ca4:	3a01      	subs	r2, #1
 8006ca6:	0652      	lsls	r2, r2, #25
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	4916      	ldr	r1, [pc, #88]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006cb0:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a13      	ldr	r2, [pc, #76]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cbc:	f7fb fce4 	bl	8002688 <HAL_GetTick>
 8006cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cc2:	e009      	b.n	8006cd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006cc4:	f7fb fce0 	bl	8002688 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d902      	bls.n	8006cd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8006cd6:	e005      	b.n	8006ce4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0ef      	beq.n	8006cc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	4904      	ldr	r1, [pc, #16]	@ (8006d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40021000 	.word	0x40021000

08006d08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e049      	b.n	8006dae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fb faea 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f000 f968 	bl	800701c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e047      	b.n	8006e60 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	@ (8006e6c <HAL_TIM_Base_Start+0xb4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dea:	d018      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e70 <HAL_TIM_Base_Start+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <HAL_TIM_Base_Start+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <HAL_TIM_Base_Start+0xc0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_TIM_Base_Start+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_Base_Start+0x66>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <HAL_TIM_Base_Start+0xc8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d115      	bne.n	8006e4a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b17      	ldr	r3, [pc, #92]	@ (8006e84 <HAL_TIM_Base_Start+0xcc>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d015      	beq.n	8006e5c <HAL_TIM_Base_Start+0xa4>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e36:	d011      	beq.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	e008      	b.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40013400 	.word	0x40013400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	00010007 	.word	0x00010007

08006e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e0b6      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x18a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ec2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee0:	d03e      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0xd8>
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee6:	f200 8087 	bhi.w	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eee:	f000 8086 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x176>
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef6:	d87f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006ef8:	2b70      	cmp	r3, #112	@ 0x70
 8006efa:	d01a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0xaa>
 8006efc:	2b70      	cmp	r3, #112	@ 0x70
 8006efe:	d87b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f00:	2b60      	cmp	r3, #96	@ 0x60
 8006f02:	d050      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x11e>
 8006f04:	2b60      	cmp	r3, #96	@ 0x60
 8006f06:	d877      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f08:	2b50      	cmp	r3, #80	@ 0x50
 8006f0a:	d03c      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0xfe>
 8006f0c:	2b50      	cmp	r3, #80	@ 0x50
 8006f0e:	d873      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f10:	2b40      	cmp	r3, #64	@ 0x40
 8006f12:	d058      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x13e>
 8006f14:	2b40      	cmp	r3, #64	@ 0x40
 8006f16:	d86f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f18:	2b30      	cmp	r3, #48	@ 0x30
 8006f1a:	d064      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8006f1c:	2b30      	cmp	r3, #48	@ 0x30
 8006f1e:	d86b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d060      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d867      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05c      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d05a      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8006f30:	e062      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	f000 f98b 	bl	800725c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
      break;
 8006f5e:	e04f      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f70:	f000 f974 	bl	800725c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f82:	609a      	str	r2, [r3, #8]
      break;
 8006f84:	e03c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 f8e8 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2150      	movs	r1, #80	@ 0x50
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f941 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e02c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 f907 	bl	80071c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2160      	movs	r1, #96	@ 0x60
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f931 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e01c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 f8c8 	bl	8007168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2140      	movs	r1, #64	@ 0x40
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f921 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e00c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f000 f918 	bl	8007226 <TIM_ITRx_SetConfig>
      break;
 8006ff6:	e003      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e000      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a46      	ldr	r2, [pc, #280]	@ (8007148 <TIM_Base_SetConfig+0x12c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703a:	d00f      	beq.n	800705c <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a43      	ldr	r2, [pc, #268]	@ (800714c <TIM_Base_SetConfig+0x130>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00b      	beq.n	800705c <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a42      	ldr	r2, [pc, #264]	@ (8007150 <TIM_Base_SetConfig+0x134>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d007      	beq.n	800705c <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a41      	ldr	r2, [pc, #260]	@ (8007154 <TIM_Base_SetConfig+0x138>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a40      	ldr	r2, [pc, #256]	@ (8007158 <TIM_Base_SetConfig+0x13c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d108      	bne.n	800706e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a35      	ldr	r2, [pc, #212]	@ (8007148 <TIM_Base_SetConfig+0x12c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01f      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800707c:	d01b      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a32      	ldr	r2, [pc, #200]	@ (800714c <TIM_Base_SetConfig+0x130>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d017      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a31      	ldr	r2, [pc, #196]	@ (8007150 <TIM_Base_SetConfig+0x134>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a30      	ldr	r2, [pc, #192]	@ (8007154 <TIM_Base_SetConfig+0x138>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2f      	ldr	r2, [pc, #188]	@ (8007158 <TIM_Base_SetConfig+0x13c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2e      	ldr	r2, [pc, #184]	@ (800715c <TIM_Base_SetConfig+0x140>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007160 <TIM_Base_SetConfig+0x144>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0x9a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007164 <TIM_Base_SetConfig+0x148>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a16      	ldr	r2, [pc, #88]	@ (8007148 <TIM_Base_SetConfig+0x12c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_Base_SetConfig+0xf8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <TIM_Base_SetConfig+0x13c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_Base_SetConfig+0xf8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a17      	ldr	r2, [pc, #92]	@ (800715c <TIM_Base_SetConfig+0x140>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_Base_SetConfig+0xf8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <TIM_Base_SetConfig+0x144>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0xf8>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a15      	ldr	r2, [pc, #84]	@ (8007164 <TIM_Base_SetConfig+0x148>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d103      	bne.n	800711c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b01      	cmp	r3, #1
 800712c:	d105      	bne.n	800713a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f023 0201 	bic.w	r2, r3, #1
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	611a      	str	r2, [r3, #16]
  }
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40012c00 	.word	0x40012c00
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40013400 	.word	0x40013400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800

08007168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f023 030a 	bic.w	r3, r3, #10
 80071a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b087      	sub	sp, #28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f023 0210 	bic.w	r2, r3, #16
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	031b      	lsls	r3, r3, #12
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007202:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	621a      	str	r2, [r3, #32]
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800723c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	f043 0307 	orr.w	r3, r3, #7
 8007248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	609a      	str	r2, [r3, #8]
}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	431a      	orrs	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4313      	orrs	r3, r2
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e068      	b.n	8007386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a2d      	ldr	r2, [pc, #180]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d108      	bne.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1e      	ldr	r2, [pc, #120]	@ (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007326:	d018      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1b      	ldr	r2, [pc, #108]	@ (800739c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a13      	ldr	r2, [pc, #76]	@ (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a14      	ldr	r2, [pc, #80]	@ (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d10c      	bne.n	8007374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4313      	orrs	r3, r2
 800736a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40013400 	.word	0x40013400
 800739c:	40000400 	.word	0x40000400
 80073a0:	40000800 	.word	0x40000800
 80073a4:	40000c00 	.word	0x40000c00
 80073a8:	40014000 	.word	0x40014000

080073ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e040      	b.n	8007440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fa ffce 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2224      	movs	r2, #36	@ 0x24
 80073d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fb6a 	bl	8007acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f8af 	bl	800755c <UART_SetConfig>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e01b      	b.n	8007440 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fbe9 	bl	8007c10 <UART_CheckIdleState>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	@ 0x28
 800744c:	af02      	add	r7, sp, #8
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	603b      	str	r3, [r7, #0]
 8007454:	4613      	mov	r3, r2
 8007456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800745c:	2b20      	cmp	r3, #32
 800745e:	d177      	bne.n	8007550 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_UART_Transmit+0x24>
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e070      	b.n	8007552 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2221      	movs	r2, #33	@ 0x21
 800747c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747e:	f7fb f903 	bl	8002688 <HAL_GetTick>
 8007482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	88fa      	ldrh	r2, [r7, #6]
 8007488:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749c:	d108      	bne.n	80074b0 <HAL_UART_Transmit+0x68>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	e003      	b.n	80074b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074b8:	e02f      	b.n	800751a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2200      	movs	r2, #0
 80074c2:	2180      	movs	r1, #128	@ 0x80
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fc4b 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e03b      	b.n	8007552 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ec:	b292      	uxth	r2, r2
 80074ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	3302      	adds	r3, #2
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e007      	b.n	8007508 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1c9      	bne.n	80074ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	2140      	movs	r1, #64	@ 0x40
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fc15 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e005      	b.n	8007552 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800755c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007560:	b08a      	sub	sp, #40	@ 0x28
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	431a      	orrs	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	431a      	orrs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	4313      	orrs	r3, r2
 8007582:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4ba4      	ldr	r3, [pc, #656]	@ (800781c <UART_SetConfig+0x2c0>)
 800758c:	4013      	ands	r3, r2
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007594:	430b      	orrs	r3, r1
 8007596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a99      	ldr	r2, [pc, #612]	@ (8007820 <UART_SetConfig+0x2c4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c4:	4313      	orrs	r3, r2
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a90      	ldr	r2, [pc, #576]	@ (8007824 <UART_SetConfig+0x2c8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d126      	bne.n	8007634 <UART_SetConfig+0xd8>
 80075e6:	4b90      	ldr	r3, [pc, #576]	@ (8007828 <UART_SetConfig+0x2cc>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d81b      	bhi.n	800762c <UART_SetConfig+0xd0>
 80075f4:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <UART_SetConfig+0xa0>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	0800761d 	.word	0x0800761d
 8007604:	08007615 	.word	0x08007615
 8007608:	08007625 	.word	0x08007625
 800760c:	2301      	movs	r3, #1
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007612:	e116      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007614:	2302      	movs	r3, #2
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761a:	e112      	b.n	8007842 <UART_SetConfig+0x2e6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007622:	e10e      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762a:	e10a      	b.n	8007842 <UART_SetConfig+0x2e6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007632:	e106      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a7c      	ldr	r2, [pc, #496]	@ (800782c <UART_SetConfig+0x2d0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d138      	bne.n	80076b0 <UART_SetConfig+0x154>
 800763e:	4b7a      	ldr	r3, [pc, #488]	@ (8007828 <UART_SetConfig+0x2cc>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007644:	f003 030c 	and.w	r3, r3, #12
 8007648:	2b0c      	cmp	r3, #12
 800764a:	d82d      	bhi.n	80076a8 <UART_SetConfig+0x14c>
 800764c:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <UART_SetConfig+0xf8>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007689 	.word	0x08007689
 8007658:	080076a9 	.word	0x080076a9
 800765c:	080076a9 	.word	0x080076a9
 8007660:	080076a9 	.word	0x080076a9
 8007664:	08007699 	.word	0x08007699
 8007668:	080076a9 	.word	0x080076a9
 800766c:	080076a9 	.word	0x080076a9
 8007670:	080076a9 	.word	0x080076a9
 8007674:	08007691 	.word	0x08007691
 8007678:	080076a9 	.word	0x080076a9
 800767c:	080076a9 	.word	0x080076a9
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076a1 	.word	0x080076a1
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768e:	e0d8      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007690:	2302      	movs	r3, #2
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007696:	e0d4      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769e:	e0d0      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a6:	e0cc      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ae:	e0c8      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5e      	ldr	r2, [pc, #376]	@ (8007830 <UART_SetConfig+0x2d4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d125      	bne.n	8007706 <UART_SetConfig+0x1aa>
 80076ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007828 <UART_SetConfig+0x2cc>)
 80076bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076c4:	2b30      	cmp	r3, #48	@ 0x30
 80076c6:	d016      	beq.n	80076f6 <UART_SetConfig+0x19a>
 80076c8:	2b30      	cmp	r3, #48	@ 0x30
 80076ca:	d818      	bhi.n	80076fe <UART_SetConfig+0x1a2>
 80076cc:	2b20      	cmp	r3, #32
 80076ce:	d00a      	beq.n	80076e6 <UART_SetConfig+0x18a>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d814      	bhi.n	80076fe <UART_SetConfig+0x1a2>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <UART_SetConfig+0x182>
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d008      	beq.n	80076ee <UART_SetConfig+0x192>
 80076dc:	e00f      	b.n	80076fe <UART_SetConfig+0x1a2>
 80076de:	2300      	movs	r3, #0
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e4:	e0ad      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076e6:	2302      	movs	r3, #2
 80076e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ec:	e0a9      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076ee:	2304      	movs	r3, #4
 80076f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f4:	e0a5      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076f6:	2308      	movs	r3, #8
 80076f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076fc:	e0a1      	b.n	8007842 <UART_SetConfig+0x2e6>
 80076fe:	2310      	movs	r3, #16
 8007700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007704:	e09d      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a4a      	ldr	r2, [pc, #296]	@ (8007834 <UART_SetConfig+0x2d8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d125      	bne.n	800775c <UART_SetConfig+0x200>
 8007710:	4b45      	ldr	r3, [pc, #276]	@ (8007828 <UART_SetConfig+0x2cc>)
 8007712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007716:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800771a:	2bc0      	cmp	r3, #192	@ 0xc0
 800771c:	d016      	beq.n	800774c <UART_SetConfig+0x1f0>
 800771e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007720:	d818      	bhi.n	8007754 <UART_SetConfig+0x1f8>
 8007722:	2b80      	cmp	r3, #128	@ 0x80
 8007724:	d00a      	beq.n	800773c <UART_SetConfig+0x1e0>
 8007726:	2b80      	cmp	r3, #128	@ 0x80
 8007728:	d814      	bhi.n	8007754 <UART_SetConfig+0x1f8>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <UART_SetConfig+0x1d8>
 800772e:	2b40      	cmp	r3, #64	@ 0x40
 8007730:	d008      	beq.n	8007744 <UART_SetConfig+0x1e8>
 8007732:	e00f      	b.n	8007754 <UART_SetConfig+0x1f8>
 8007734:	2300      	movs	r3, #0
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773a:	e082      	b.n	8007842 <UART_SetConfig+0x2e6>
 800773c:	2302      	movs	r3, #2
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007742:	e07e      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007744:	2304      	movs	r3, #4
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774a:	e07a      	b.n	8007842 <UART_SetConfig+0x2e6>
 800774c:	2308      	movs	r3, #8
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007752:	e076      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007754:	2310      	movs	r3, #16
 8007756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775a:	e072      	b.n	8007842 <UART_SetConfig+0x2e6>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a35      	ldr	r2, [pc, #212]	@ (8007838 <UART_SetConfig+0x2dc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d12a      	bne.n	80077bc <UART_SetConfig+0x260>
 8007766:	4b30      	ldr	r3, [pc, #192]	@ (8007828 <UART_SetConfig+0x2cc>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007774:	d01a      	beq.n	80077ac <UART_SetConfig+0x250>
 8007776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800777a:	d81b      	bhi.n	80077b4 <UART_SetConfig+0x258>
 800777c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007780:	d00c      	beq.n	800779c <UART_SetConfig+0x240>
 8007782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007786:	d815      	bhi.n	80077b4 <UART_SetConfig+0x258>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <UART_SetConfig+0x238>
 800778c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007790:	d008      	beq.n	80077a4 <UART_SetConfig+0x248>
 8007792:	e00f      	b.n	80077b4 <UART_SetConfig+0x258>
 8007794:	2300      	movs	r3, #0
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800779a:	e052      	b.n	8007842 <UART_SetConfig+0x2e6>
 800779c:	2302      	movs	r3, #2
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077a2:	e04e      	b.n	8007842 <UART_SetConfig+0x2e6>
 80077a4:	2304      	movs	r3, #4
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077aa:	e04a      	b.n	8007842 <UART_SetConfig+0x2e6>
 80077ac:	2308      	movs	r3, #8
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b2:	e046      	b.n	8007842 <UART_SetConfig+0x2e6>
 80077b4:	2310      	movs	r3, #16
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ba:	e042      	b.n	8007842 <UART_SetConfig+0x2e6>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a17      	ldr	r2, [pc, #92]	@ (8007820 <UART_SetConfig+0x2c4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d13a      	bne.n	800783c <UART_SetConfig+0x2e0>
 80077c6:	4b18      	ldr	r3, [pc, #96]	@ (8007828 <UART_SetConfig+0x2cc>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80077d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077d4:	d01a      	beq.n	800780c <UART_SetConfig+0x2b0>
 80077d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077da:	d81b      	bhi.n	8007814 <UART_SetConfig+0x2b8>
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e0:	d00c      	beq.n	80077fc <UART_SetConfig+0x2a0>
 80077e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077e6:	d815      	bhi.n	8007814 <UART_SetConfig+0x2b8>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <UART_SetConfig+0x298>
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f0:	d008      	beq.n	8007804 <UART_SetConfig+0x2a8>
 80077f2:	e00f      	b.n	8007814 <UART_SetConfig+0x2b8>
 80077f4:	2300      	movs	r3, #0
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e022      	b.n	8007842 <UART_SetConfig+0x2e6>
 80077fc:	2302      	movs	r3, #2
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e01e      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007804:	2304      	movs	r3, #4
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e01a      	b.n	8007842 <UART_SetConfig+0x2e6>
 800780c:	2308      	movs	r3, #8
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e016      	b.n	8007842 <UART_SetConfig+0x2e6>
 8007814:	2310      	movs	r3, #16
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e012      	b.n	8007842 <UART_SetConfig+0x2e6>
 800781c:	efff69f3 	.word	0xefff69f3
 8007820:	40008000 	.word	0x40008000
 8007824:	40013800 	.word	0x40013800
 8007828:	40021000 	.word	0x40021000
 800782c:	40004400 	.word	0x40004400
 8007830:	40004800 	.word	0x40004800
 8007834:	40004c00 	.word	0x40004c00
 8007838:	40005000 	.word	0x40005000
 800783c:	2310      	movs	r3, #16
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a9f      	ldr	r2, [pc, #636]	@ (8007ac4 <UART_SetConfig+0x568>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d17a      	bne.n	8007942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800784c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007850:	2b08      	cmp	r3, #8
 8007852:	d824      	bhi.n	800789e <UART_SetConfig+0x342>
 8007854:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <UART_SetConfig+0x300>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007881 	.word	0x08007881
 8007860:	0800789f 	.word	0x0800789f
 8007864:	08007889 	.word	0x08007889
 8007868:	0800789f 	.word	0x0800789f
 800786c:	0800788f 	.word	0x0800788f
 8007870:	0800789f 	.word	0x0800789f
 8007874:	0800789f 	.word	0x0800789f
 8007878:	0800789f 	.word	0x0800789f
 800787c:	08007897 	.word	0x08007897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007880:	f7fe fcfa 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8007884:	61f8      	str	r0, [r7, #28]
        break;
 8007886:	e010      	b.n	80078aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007888:	4b8f      	ldr	r3, [pc, #572]	@ (8007ac8 <UART_SetConfig+0x56c>)
 800788a:	61fb      	str	r3, [r7, #28]
        break;
 800788c:	e00d      	b.n	80078aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800788e:	f7fe fc5b 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8007892:	61f8      	str	r0, [r7, #28]
        break;
 8007894:	e009      	b.n	80078aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800789a:	61fb      	str	r3, [r7, #28]
        break;
 800789c:	e005      	b.n	80078aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80fb 	beq.w	8007aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	005b      	lsls	r3, r3, #1
 80078ba:	4413      	add	r3, r2
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d305      	bcc.n	80078ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80078d4:	e0e8      	b.n	8007aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	2200      	movs	r2, #0
 80078da:	461c      	mov	r4, r3
 80078dc:	4615      	mov	r5, r2
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	022b      	lsls	r3, r5, #8
 80078e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078ec:	0222      	lsls	r2, r4, #8
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6849      	ldr	r1, [r1, #4]
 80078f2:	0849      	lsrs	r1, r1, #1
 80078f4:	2000      	movs	r0, #0
 80078f6:	4688      	mov	r8, r1
 80078f8:	4681      	mov	r9, r0
 80078fa:	eb12 0a08 	adds.w	sl, r2, r8
 80078fe:	eb43 0b09 	adc.w	fp, r3, r9
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	603b      	str	r3, [r7, #0]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007910:	4650      	mov	r0, sl
 8007912:	4659      	mov	r1, fp
 8007914:	f7f9 fc10 	bl	8001138 <__aeabi_uldivmod>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4613      	mov	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007926:	d308      	bcc.n	800793a <UART_SetConfig+0x3de>
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800792e:	d204      	bcs.n	800793a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	60da      	str	r2, [r3, #12]
 8007938:	e0b6      	b.n	8007aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007940:	e0b2      	b.n	8007aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800794a:	d15e      	bne.n	8007a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800794c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007950:	2b08      	cmp	r3, #8
 8007952:	d828      	bhi.n	80079a6 <UART_SetConfig+0x44a>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <UART_SetConfig+0x400>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	08007981 	.word	0x08007981
 8007960:	08007989 	.word	0x08007989
 8007964:	08007991 	.word	0x08007991
 8007968:	080079a7 	.word	0x080079a7
 800796c:	08007997 	.word	0x08007997
 8007970:	080079a7 	.word	0x080079a7
 8007974:	080079a7 	.word	0x080079a7
 8007978:	080079a7 	.word	0x080079a7
 800797c:	0800799f 	.word	0x0800799f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007980:	f7fe fc7a 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8007984:	61f8      	str	r0, [r7, #28]
        break;
 8007986:	e014      	b.n	80079b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007988:	f7fe fc8c 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 800798c:	61f8      	str	r0, [r7, #28]
        break;
 800798e:	e010      	b.n	80079b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007990:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac8 <UART_SetConfig+0x56c>)
 8007992:	61fb      	str	r3, [r7, #28]
        break;
 8007994:	e00d      	b.n	80079b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007996:	f7fe fbd7 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 800799a:	61f8      	str	r0, [r7, #28]
        break;
 800799c:	e009      	b.n	80079b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800799e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079a2:	61fb      	str	r3, [r7, #28]
        break;
 80079a4:	e005      	b.n	80079b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d077      	beq.n	8007aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	005a      	lsls	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	441a      	add	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b0f      	cmp	r3, #15
 80079d2:	d916      	bls.n	8007a02 <UART_SetConfig+0x4a6>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079da:	d212      	bcs.n	8007a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f023 030f 	bic.w	r3, r3, #15
 80079e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	8afb      	ldrh	r3, [r7, #22]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	8afa      	ldrh	r2, [r7, #22]
 80079fe:	60da      	str	r2, [r3, #12]
 8007a00:	e052      	b.n	8007aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a08:	e04e      	b.n	8007aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d827      	bhi.n	8007a62 <UART_SetConfig+0x506>
 8007a12:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <UART_SetConfig+0x4bc>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a45 	.word	0x08007a45
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a63 	.word	0x08007a63
 8007a28:	08007a53 	.word	0x08007a53
 8007a2c:	08007a63 	.word	0x08007a63
 8007a30:	08007a63 	.word	0x08007a63
 8007a34:	08007a63 	.word	0x08007a63
 8007a38:	08007a5b 	.word	0x08007a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3c:	f7fe fc1c 	bl	8006278 <HAL_RCC_GetPCLK1Freq>
 8007a40:	61f8      	str	r0, [r7, #28]
        break;
 8007a42:	e014      	b.n	8007a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a44:	f7fe fc2e 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 8007a48:	61f8      	str	r0, [r7, #28]
        break;
 8007a4a:	e010      	b.n	8007a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac8 <UART_SetConfig+0x56c>)
 8007a4e:	61fb      	str	r3, [r7, #28]
        break;
 8007a50:	e00d      	b.n	8007a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a52:	f7fe fb79 	bl	8006148 <HAL_RCC_GetSysClockFreq>
 8007a56:	61f8      	str	r0, [r7, #28]
        break;
 8007a58:	e009      	b.n	8007a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a5e:	61fb      	str	r3, [r7, #28]
        break;
 8007a60:	e005      	b.n	8007a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d019      	beq.n	8007aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	085a      	lsrs	r2, r3, #1
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	441a      	add	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d909      	bls.n	8007aa2 <UART_SetConfig+0x546>
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a94:	d205      	bcs.n	8007aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	e002      	b.n	8007aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3728      	adds	r7, #40	@ 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40008000 	.word	0x40008000
 8007ac8:	00f42400 	.word	0x00f42400

08007acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad8:	f003 0308 	and.w	r3, r3, #8
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d01a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bca:	d10a      	bne.n	8007be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b098      	sub	sp, #96	@ 0x60
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c20:	f7fa fd32 	bl	8002688 <HAL_GetTick>
 8007c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d12e      	bne.n	8007c92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f88c 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d021      	beq.n	8007c92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2220      	movs	r2, #32
 8007c84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e062      	b.n	8007d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d149      	bne.n	8007d34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f856 	bl	8007d60 <UART_WaitOnFlagUntilTimeout>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d03c      	beq.n	8007d34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e6      	bne.n	8007cba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0c:	61fa      	str	r2, [r7, #28]
 8007d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e011      	b.n	8007d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3758      	adds	r7, #88	@ 0x58
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d70:	e04f      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d04b      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7a:	f7fa fc85 	bl	8002688 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d302      	bcc.n	8007d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e04e      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d037      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2b80      	cmp	r3, #128	@ 0x80
 8007da6:	d034      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d031      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d110      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f838 	bl	8007e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e029      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dec:	d111      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f81e 	bl	8007e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0a0      	beq.n	8007d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b095      	sub	sp, #84	@ 0x54
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e6      	bne.n	8007e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e5      	bne.n	8007e74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d118      	bne.n	8007ee2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f023 0310 	bic.w	r3, r3, #16
 8007ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	613b      	str	r3, [r7, #16]
   return(result);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e6      	bne.n	8007eb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ef6:	bf00      	nop
 8007ef8:	3754      	adds	r7, #84	@ 0x54
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <arm_rfft_fast_init_f32>:
 8007f04:	084b      	lsrs	r3, r1, #1
 8007f06:	2b80      	cmp	r3, #128	@ 0x80
 8007f08:	b410      	push	{r4}
 8007f0a:	8201      	strh	r1, [r0, #16]
 8007f0c:	8003      	strh	r3, [r0, #0]
 8007f0e:	d047      	beq.n	8007fa0 <arm_rfft_fast_init_f32+0x9c>
 8007f10:	d917      	bls.n	8007f42 <arm_rfft_fast_init_f32+0x3e>
 8007f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f16:	d03d      	beq.n	8007f94 <arm_rfft_fast_init_f32+0x90>
 8007f18:	d929      	bls.n	8007f6e <arm_rfft_fast_init_f32+0x6a>
 8007f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f1e:	d020      	beq.n	8007f62 <arm_rfft_fast_init_f32+0x5e>
 8007f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f24:	d113      	bne.n	8007f4e <arm_rfft_fast_init_f32+0x4a>
 8007f26:	4921      	ldr	r1, [pc, #132]	@ (8007fac <arm_rfft_fast_init_f32+0xa8>)
 8007f28:	4a21      	ldr	r2, [pc, #132]	@ (8007fb0 <arm_rfft_fast_init_f32+0xac>)
 8007f2a:	4b22      	ldr	r3, [pc, #136]	@ (8007fb4 <arm_rfft_fast_init_f32+0xb0>)
 8007f2c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8007f30:	8184      	strh	r4, [r0, #12]
 8007f32:	6081      	str	r1, [r0, #8]
 8007f34:	6042      	str	r2, [r0, #4]
 8007f36:	6143      	str	r3, [r0, #20]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	b240      	sxtb	r0, r0
 8007f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d01c      	beq.n	8007f80 <arm_rfft_fast_init_f32+0x7c>
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d006      	beq.n	8007f58 <arm_rfft_fast_init_f32+0x54>
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d01d      	beq.n	8007f8a <arm_rfft_fast_init_f32+0x86>
 8007f4e:	20ff      	movs	r0, #255	@ 0xff
 8007f50:	b240      	sxtb	r0, r0
 8007f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	2438      	movs	r4, #56	@ 0x38
 8007f5a:	4917      	ldr	r1, [pc, #92]	@ (8007fb8 <arm_rfft_fast_init_f32+0xb4>)
 8007f5c:	4a17      	ldr	r2, [pc, #92]	@ (8007fbc <arm_rfft_fast_init_f32+0xb8>)
 8007f5e:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <arm_rfft_fast_init_f32+0xbc>)
 8007f60:	e7e6      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007f62:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8007f66:	4917      	ldr	r1, [pc, #92]	@ (8007fc4 <arm_rfft_fast_init_f32+0xc0>)
 8007f68:	4a17      	ldr	r2, [pc, #92]	@ (8007fc8 <arm_rfft_fast_init_f32+0xc4>)
 8007f6a:	4b18      	ldr	r3, [pc, #96]	@ (8007fcc <arm_rfft_fast_init_f32+0xc8>)
 8007f6c:	e7e0      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f72:	d1ec      	bne.n	8007f4e <arm_rfft_fast_init_f32+0x4a>
 8007f74:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8007f78:	4915      	ldr	r1, [pc, #84]	@ (8007fd0 <arm_rfft_fast_init_f32+0xcc>)
 8007f7a:	4a16      	ldr	r2, [pc, #88]	@ (8007fd4 <arm_rfft_fast_init_f32+0xd0>)
 8007f7c:	4b16      	ldr	r3, [pc, #88]	@ (8007fd8 <arm_rfft_fast_init_f32+0xd4>)
 8007f7e:	e7d7      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007f80:	2430      	movs	r4, #48	@ 0x30
 8007f82:	4916      	ldr	r1, [pc, #88]	@ (8007fdc <arm_rfft_fast_init_f32+0xd8>)
 8007f84:	4a16      	ldr	r2, [pc, #88]	@ (8007fe0 <arm_rfft_fast_init_f32+0xdc>)
 8007f86:	4b17      	ldr	r3, [pc, #92]	@ (8007fe4 <arm_rfft_fast_init_f32+0xe0>)
 8007f88:	e7d2      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007f8a:	2414      	movs	r4, #20
 8007f8c:	4916      	ldr	r1, [pc, #88]	@ (8007fe8 <arm_rfft_fast_init_f32+0xe4>)
 8007f8e:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <arm_rfft_fast_init_f32+0xe8>)
 8007f90:	4b17      	ldr	r3, [pc, #92]	@ (8007ff0 <arm_rfft_fast_init_f32+0xec>)
 8007f92:	e7cd      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007f94:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8007f98:	4916      	ldr	r1, [pc, #88]	@ (8007ff4 <arm_rfft_fast_init_f32+0xf0>)
 8007f9a:	4a17      	ldr	r2, [pc, #92]	@ (8007ff8 <arm_rfft_fast_init_f32+0xf4>)
 8007f9c:	4b17      	ldr	r3, [pc, #92]	@ (8007ffc <arm_rfft_fast_init_f32+0xf8>)
 8007f9e:	e7c7      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007fa0:	24d0      	movs	r4, #208	@ 0xd0
 8007fa2:	4917      	ldr	r1, [pc, #92]	@ (8008000 <arm_rfft_fast_init_f32+0xfc>)
 8007fa4:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <arm_rfft_fast_init_f32+0x100>)
 8007fa6:	4b18      	ldr	r3, [pc, #96]	@ (8008008 <arm_rfft_fast_init_f32+0x104>)
 8007fa8:	e7c2      	b.n	8007f30 <arm_rfft_fast_init_f32+0x2c>
 8007faa:	bf00      	nop
 8007fac:	0801a2ac 	.word	0x0801a2ac
 8007fb0:	0800b4a4 	.word	0x0800b4a4
 8007fb4:	08011614 	.word	0x08011614
 8007fb8:	0800f5a4 	.word	0x0800f5a4
 8007fbc:	0801c06c 	.word	0x0801c06c
 8007fc0:	0801e55c 	.word	0x0801e55c
 8007fc4:	08017f94 	.word	0x08017f94
 8007fc8:	08015e94 	.word	0x08015e94
 8007fcc:	0800f614 	.word	0x0800f614
 8007fd0:	0801e1ec 	.word	0x0801e1ec
 8007fd4:	08015614 	.word	0x08015614
 8007fd8:	0801c26c 	.word	0x0801c26c
 8007fdc:	08018e4c 	.word	0x08018e4c
 8007fe0:	08017e94 	.word	0x08017e94
 8007fe4:	0800f4a4 	.word	0x0800f4a4
 8007fe8:	08018da4 	.word	0x08018da4
 8007fec:	08015e14 	.word	0x08015e14
 8007ff0:	08018dcc 	.word	0x08018dcc
 8007ff4:	0801ca6c 	.word	0x0801ca6c
 8007ff8:	080192ac 	.word	0x080192ac
 8007ffc:	0801cdec 	.word	0x0801cdec
 8008000:	0801e75c 	.word	0x0801e75c
 8008004:	08018eac 	.word	0x08018eac
 8008008:	0801ddec 	.word	0x0801ddec

0800800c <arm_rfft_fast_f32>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	b089      	sub	sp, #36	@ 0x24
 8008012:	460e      	mov	r6, r1
 8008014:	9205      	str	r2, [sp, #20]
 8008016:	8a02      	ldrh	r2, [r0, #16]
 8008018:	9006      	str	r0, [sp, #24]
 800801a:	0852      	lsrs	r2, r2, #1
 800801c:	8002      	strh	r2, [r0, #0]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f040 8097 	bne.w	8008154 <arm_rfft_fast_f32+0x148>
 8008026:	461a      	mov	r2, r3
 8008028:	2301      	movs	r3, #1
 800802a:	f000 fe35 	bl	8008c98 <arm_cfft_f32>
 800802e:	9a06      	ldr	r2, [sp, #24]
 8008030:	6830      	ldr	r0, [r6, #0]
 8008032:	8813      	ldrh	r3, [r2, #0]
 8008034:	6954      	ldr	r4, [r2, #20]
 8008036:	3b01      	subs	r3, #1
 8008038:	4601      	mov	r1, r0
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	f7f8 fe24 	bl	8000c88 <__addsf3>
 8008040:	4605      	mov	r5, r0
 8008042:	6870      	ldr	r0, [r6, #4]
 8008044:	4601      	mov	r1, r0
 8008046:	f7f8 fe1f 	bl	8000c88 <__addsf3>
 800804a:	4607      	mov	r7, r0
 800804c:	4639      	mov	r1, r7
 800804e:	4628      	mov	r0, r5
 8008050:	f7f8 fe1a 	bl	8000c88 <__addsf3>
 8008054:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008058:	f7f8 ff1e 	bl	8000e98 <__aeabi_fmul>
 800805c:	4639      	mov	r1, r7
 800805e:	9f05      	ldr	r7, [sp, #20]
 8008060:	6038      	str	r0, [r7, #0]
 8008062:	4628      	mov	r0, r5
 8008064:	f7f8 fe0e 	bl	8000c84 <__aeabi_fsub>
 8008068:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800806c:	f7f8 ff14 	bl	8000e98 <__aeabi_fmul>
 8008070:	9b01      	ldr	r3, [sp, #4]
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008078:	f106 0210 	add.w	r2, r6, #16
 800807c:	f1a3 0c08 	sub.w	ip, r3, #8
 8008080:	f107 0510 	add.w	r5, r7, #16
 8008084:	3410      	adds	r4, #16
 8008086:	4666      	mov	r6, ip
 8008088:	4617      	mov	r7, r2
 800808a:	68f1      	ldr	r1, [r6, #12]
 800808c:	68b2      	ldr	r2, [r6, #8]
 800808e:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8008092:	9206      	str	r2, [sp, #24]
 8008094:	4688      	mov	r8, r1
 8008096:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800809a:	9100      	str	r1, [sp, #0]
 800809c:	4610      	mov	r0, r2
 800809e:	4619      	mov	r1, r3
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	f7f8 fdef 	bl	8000c84 <__aeabi_fsub>
 80080a6:	9900      	ldr	r1, [sp, #0]
 80080a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80080ac:	4683      	mov	fp, r0
 80080ae:	4640      	mov	r0, r8
 80080b0:	f7f8 fdea 	bl	8000c88 <__addsf3>
 80080b4:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80080b8:	f854 9c08 	ldr.w	r9, [r4, #-8]
 80080bc:	4680      	mov	r8, r0
 80080be:	4641      	mov	r1, r8
 80080c0:	4650      	mov	r0, sl
 80080c2:	f7f8 fee9 	bl	8000e98 <__aeabi_fmul>
 80080c6:	4659      	mov	r1, fp
 80080c8:	9003      	str	r0, [sp, #12]
 80080ca:	4648      	mov	r0, r9
 80080cc:	f7f8 fee4 	bl	8000e98 <__aeabi_fmul>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	9a06      	ldr	r2, [sp, #24]
 80080d4:	9004      	str	r0, [sp, #16]
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7f8 fdd5 	bl	8000c88 <__addsf3>
 80080de:	f8dd c010 	ldr.w	ip, [sp, #16]
 80080e2:	4601      	mov	r1, r0
 80080e4:	4660      	mov	r0, ip
 80080e6:	f7f8 fdcf 	bl	8000c88 <__addsf3>
 80080ea:	4601      	mov	r1, r0
 80080ec:	9803      	ldr	r0, [sp, #12]
 80080ee:	f7f8 fdcb 	bl	8000c88 <__addsf3>
 80080f2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80080f6:	f7f8 fecf 	bl	8000e98 <__aeabi_fmul>
 80080fa:	4659      	mov	r1, fp
 80080fc:	f845 0c08 	str.w	r0, [r5, #-8]
 8008100:	4650      	mov	r0, sl
 8008102:	f7f8 fec9 	bl	8000e98 <__aeabi_fmul>
 8008106:	9902      	ldr	r1, [sp, #8]
 8008108:	4682      	mov	sl, r0
 800810a:	9800      	ldr	r0, [sp, #0]
 800810c:	f7f8 fdba 	bl	8000c84 <__aeabi_fsub>
 8008110:	4601      	mov	r1, r0
 8008112:	4650      	mov	r0, sl
 8008114:	f7f8 fdb8 	bl	8000c88 <__addsf3>
 8008118:	4641      	mov	r1, r8
 800811a:	4682      	mov	sl, r0
 800811c:	4648      	mov	r0, r9
 800811e:	f7f8 febb 	bl	8000e98 <__aeabi_fmul>
 8008122:	4601      	mov	r1, r0
 8008124:	4650      	mov	r0, sl
 8008126:	f7f8 fdad 	bl	8000c84 <__aeabi_fsub>
 800812a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800812e:	f7f8 feb3 	bl	8000e98 <__aeabi_fmul>
 8008132:	9b01      	ldr	r3, [sp, #4]
 8008134:	f845 0c04 	str.w	r0, [r5, #-4]
 8008138:	3b01      	subs	r3, #1
 800813a:	f1a6 0608 	sub.w	r6, r6, #8
 800813e:	f107 0708 	add.w	r7, r7, #8
 8008142:	f104 0408 	add.w	r4, r4, #8
 8008146:	f105 0508 	add.w	r5, r5, #8
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	d19d      	bne.n	800808a <arm_rfft_fast_f32+0x7e>
 800814e:	b009      	add	sp, #36	@ 0x24
 8008150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008154:	680d      	ldr	r5, [r1, #0]
 8008156:	684f      	ldr	r7, [r1, #4]
 8008158:	6944      	ldr	r4, [r0, #20]
 800815a:	1e53      	subs	r3, r2, #1
 800815c:	4639      	mov	r1, r7
 800815e:	4628      	mov	r0, r5
 8008160:	9302      	str	r3, [sp, #8]
 8008162:	f7f8 fd91 	bl	8000c88 <__addsf3>
 8008166:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800816a:	f7f8 fe95 	bl	8000e98 <__aeabi_fmul>
 800816e:	4639      	mov	r1, r7
 8008170:	9f05      	ldr	r7, [sp, #20]
 8008172:	6038      	str	r0, [r7, #0]
 8008174:	4628      	mov	r0, r5
 8008176:	f7f8 fd85 	bl	8000c84 <__aeabi_fsub>
 800817a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800817e:	f7f8 fe8b 	bl	8000e98 <__aeabi_fmul>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	00dd      	lsls	r5, r3, #3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d06b      	beq.n	8008264 <arm_rfft_fast_f32+0x258>
 800818c:	3d08      	subs	r5, #8
 800818e:	f104 0310 	add.w	r3, r4, #16
 8008192:	4435      	add	r5, r6
 8008194:	f106 0410 	add.w	r4, r6, #16
 8008198:	f107 0610 	add.w	r6, r7, #16
 800819c:	46b0      	mov	r8, r6
 800819e:	461f      	mov	r7, r3
 80081a0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80081a4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80081a8:	68eb      	ldr	r3, [r5, #12]
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4661      	mov	r1, ip
 80081ae:	4610      	mov	r0, r2
 80081b0:	f8cd c010 	str.w	ip, [sp, #16]
 80081b4:	9203      	str	r2, [sp, #12]
 80081b6:	f7f8 fd65 	bl	8000c84 <__aeabi_fsub>
 80081ba:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80081be:	f857 9c08 	ldr.w	r9, [r7, #-8]
 80081c2:	f857 bc04 	ldr.w	fp, [r7, #-4]
 80081c6:	4606      	mov	r6, r0
 80081c8:	4651      	mov	r1, sl
 80081ca:	9800      	ldr	r0, [sp, #0]
 80081cc:	f7f8 fd5c 	bl	8000c88 <__addsf3>
 80081d0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80081d4:	9a03      	ldr	r2, [sp, #12]
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	4611      	mov	r1, r2
 80081da:	4660      	mov	r0, ip
 80081dc:	f7f8 fd54 	bl	8000c88 <__addsf3>
 80081e0:	4631      	mov	r1, r6
 80081e2:	9003      	str	r0, [sp, #12]
 80081e4:	4648      	mov	r0, r9
 80081e6:	f7f8 fe57 	bl	8000e98 <__aeabi_fmul>
 80081ea:	9a03      	ldr	r2, [sp, #12]
 80081ec:	4601      	mov	r1, r0
 80081ee:	4610      	mov	r0, r2
 80081f0:	f7f8 fd48 	bl	8000c84 <__aeabi_fsub>
 80081f4:	9901      	ldr	r1, [sp, #4]
 80081f6:	9003      	str	r0, [sp, #12]
 80081f8:	4658      	mov	r0, fp
 80081fa:	f7f8 fe4d 	bl	8000e98 <__aeabi_fmul>
 80081fe:	9a03      	ldr	r2, [sp, #12]
 8008200:	4601      	mov	r1, r0
 8008202:	4610      	mov	r0, r2
 8008204:	f7f8 fd3e 	bl	8000c84 <__aeabi_fsub>
 8008208:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800820c:	f7f8 fe44 	bl	8000e98 <__aeabi_fmul>
 8008210:	4631      	mov	r1, r6
 8008212:	f848 0c08 	str.w	r0, [r8, #-8]
 8008216:	4658      	mov	r0, fp
 8008218:	f7f8 fe3e 	bl	8000e98 <__aeabi_fmul>
 800821c:	9900      	ldr	r1, [sp, #0]
 800821e:	4606      	mov	r6, r0
 8008220:	4650      	mov	r0, sl
 8008222:	f7f8 fd2f 	bl	8000c84 <__aeabi_fsub>
 8008226:	4601      	mov	r1, r0
 8008228:	4630      	mov	r0, r6
 800822a:	f7f8 fd2d 	bl	8000c88 <__addsf3>
 800822e:	9901      	ldr	r1, [sp, #4]
 8008230:	4606      	mov	r6, r0
 8008232:	4648      	mov	r0, r9
 8008234:	f7f8 fe30 	bl	8000e98 <__aeabi_fmul>
 8008238:	4601      	mov	r1, r0
 800823a:	4630      	mov	r0, r6
 800823c:	f7f8 fd22 	bl	8000c84 <__aeabi_fsub>
 8008240:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008244:	f7f8 fe28 	bl	8000e98 <__aeabi_fmul>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	f848 0c04 	str.w	r0, [r8, #-4]
 800824e:	3b01      	subs	r3, #1
 8008250:	f1a5 0508 	sub.w	r5, r5, #8
 8008254:	f104 0408 	add.w	r4, r4, #8
 8008258:	f107 0708 	add.w	r7, r7, #8
 800825c:	f108 0808 	add.w	r8, r8, #8
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	d19d      	bne.n	80081a0 <arm_rfft_fast_f32+0x194>
 8008264:	9806      	ldr	r0, [sp, #24]
 8008266:	9905      	ldr	r1, [sp, #20]
 8008268:	9a07      	ldr	r2, [sp, #28]
 800826a:	2301      	movs	r3, #1
 800826c:	b009      	add	sp, #36	@ 0x24
 800826e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008272:	f000 bd11 	b.w	8008c98 <arm_cfft_f32>
 8008276:	bf00      	nop

08008278 <arm_cfft_radix8by2_f32>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	4602      	mov	r2, r0
 800827e:	b093      	sub	sp, #76	@ 0x4c
 8008280:	8813      	ldrh	r3, [r2, #0]
 8008282:	900e      	str	r0, [sp, #56]	@ 0x38
 8008284:	085c      	lsrs	r4, r3, #1
 8008286:	4608      	mov	r0, r1
 8008288:	9111      	str	r1, [sp, #68]	@ 0x44
 800828a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	6852      	ldr	r2, [r2, #4]
 8008292:	9410      	str	r4, [sp, #64]	@ 0x40
 8008294:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008298:	910f      	str	r1, [sp, #60]	@ 0x3c
 800829a:	f000 8137 	beq.w	800850c <arm_cfft_radix8by2_f32+0x294>
 800829e:	f10c 0c10 	add.w	ip, ip, #16
 80082a2:	eb00 070c 	add.w	r7, r0, ip
 80082a6:	f101 0910 	add.w	r9, r1, #16
 80082aa:	3210      	adds	r2, #16
 80082ac:	448c      	add	ip, r1
 80082ae:	46ca      	mov	sl, r9
 80082b0:	9200      	str	r2, [sp, #0]
 80082b2:	f100 0610 	add.w	r6, r0, #16
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	46e1      	mov	r9, ip
 80082ba:	46bb      	mov	fp, r7
 80082bc:	f85a cc10 	ldr.w	ip, [sl, #-16]
 80082c0:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 80082c4:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 80082c8:	f856 4c10 	ldr.w	r4, [r6, #-16]
 80082cc:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 80082d0:	f85b ec08 	ldr.w	lr, [fp, #-8]
 80082d4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80082d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082da:	900c      	str	r0, [sp, #48]	@ 0x30
 80082dc:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 80082e0:	f859 0c08 	ldr.w	r0, [r9, #-8]
 80082e4:	f856 8c08 	ldr.w	r8, [r6, #-8]
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	9203      	str	r2, [sp, #12]
 80082ec:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80082f0:	f859 2c10 	ldr.w	r2, [r9, #-16]
 80082f4:	f8cd e010 	str.w	lr, [sp, #16]
 80082f8:	9107      	str	r1, [sp, #28]
 80082fa:	f859 ec04 	ldr.w	lr, [r9, #-4]
 80082fe:	9008      	str	r0, [sp, #32]
 8008300:	4661      	mov	r1, ip
 8008302:	4620      	mov	r0, r4
 8008304:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	9206      	str	r2, [sp, #24]
 800830c:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8008310:	f8cd 8008 	str.w	r8, [sp, #8]
 8008314:	f7f8 fcb8 	bl	8000c88 <__addsf3>
 8008318:	f85a 7c0c 	ldr.w	r7, [sl, #-12]
 800831c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8008320:	f846 0c10 	str.w	r0, [r6, #-16]
 8008324:	4639      	mov	r1, r7
 8008326:	9801      	ldr	r0, [sp, #4]
 8008328:	f856 8c04 	ldr.w	r8, [r6, #-4]
 800832c:	f7f8 fcac 	bl	8000c88 <__addsf3>
 8008330:	9903      	ldr	r1, [sp, #12]
 8008332:	f846 0c0c 	str.w	r0, [r6, #-12]
 8008336:	9802      	ldr	r0, [sp, #8]
 8008338:	f7f8 fca6 	bl	8000c88 <__addsf3>
 800833c:	4629      	mov	r1, r5
 800833e:	f846 0c08 	str.w	r0, [r6, #-8]
 8008342:	4640      	mov	r0, r8
 8008344:	f7f8 fca0 	bl	8000c88 <__addsf3>
 8008348:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800834c:	f846 0c04 	str.w	r0, [r6, #-4]
 8008350:	4661      	mov	r1, ip
 8008352:	4620      	mov	r0, r4
 8008354:	f7f8 fc96 	bl	8000c84 <__aeabi_fsub>
 8008358:	4639      	mov	r1, r7
 800835a:	4604      	mov	r4, r0
 800835c:	9801      	ldr	r0, [sp, #4]
 800835e:	f7f8 fc91 	bl	8000c84 <__aeabi_fsub>
 8008362:	9903      	ldr	r1, [sp, #12]
 8008364:	4607      	mov	r7, r0
 8008366:	9802      	ldr	r0, [sp, #8]
 8008368:	f7f8 fc8c 	bl	8000c84 <__aeabi_fsub>
 800836c:	4629      	mov	r1, r5
 800836e:	9001      	str	r0, [sp, #4]
 8008370:	4640      	mov	r0, r8
 8008372:	f7f8 fc87 	bl	8000c84 <__aeabi_fsub>
 8008376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008378:	900d      	str	r0, [sp, #52]	@ 0x34
 800837a:	9906      	ldr	r1, [sp, #24]
 800837c:	4628      	mov	r0, r5
 800837e:	f7f8 fc83 	bl	8000c88 <__addsf3>
 8008382:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8008386:	9907      	ldr	r1, [sp, #28]
 8008388:	f84b 0c10 	str.w	r0, [fp, #-16]
 800838c:	4640      	mov	r0, r8
 800838e:	f7f8 fc7b 	bl	8000c88 <__addsf3>
 8008392:	9908      	ldr	r1, [sp, #32]
 8008394:	f84b 0c0c 	str.w	r0, [fp, #-12]
 8008398:	9804      	ldr	r0, [sp, #16]
 800839a:	f7f8 fc75 	bl	8000c88 <__addsf3>
 800839e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083a0:	f84b 0c08 	str.w	r0, [fp, #-8]
 80083a4:	9805      	ldr	r0, [sp, #20]
 80083a6:	f7f8 fc6f 	bl	8000c88 <__addsf3>
 80083aa:	4629      	mov	r1, r5
 80083ac:	f84b 0c04 	str.w	r0, [fp, #-4]
 80083b0:	9806      	ldr	r0, [sp, #24]
 80083b2:	f7f8 fc67 	bl	8000c84 <__aeabi_fsub>
 80083b6:	4641      	mov	r1, r8
 80083b8:	9002      	str	r0, [sp, #8]
 80083ba:	9807      	ldr	r0, [sp, #28]
 80083bc:	f7f8 fc62 	bl	8000c84 <__aeabi_fsub>
 80083c0:	9904      	ldr	r1, [sp, #16]
 80083c2:	9006      	str	r0, [sp, #24]
 80083c4:	9808      	ldr	r0, [sp, #32]
 80083c6:	f7f8 fc5d 	bl	8000c84 <__aeabi_fsub>
 80083ca:	9905      	ldr	r1, [sp, #20]
 80083cc:	9003      	str	r0, [sp, #12]
 80083ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083d0:	f7f8 fc58 	bl	8000c84 <__aeabi_fsub>
 80083d4:	9a00      	ldr	r2, [sp, #0]
 80083d6:	9004      	str	r0, [sp, #16]
 80083d8:	f852 5c10 	ldr.w	r5, [r2, #-16]
 80083dc:	f852 8c0c 	ldr.w	r8, [r2, #-12]
 80083e0:	4629      	mov	r1, r5
 80083e2:	4620      	mov	r0, r4
 80083e4:	f7f8 fd58 	bl	8000e98 <__aeabi_fmul>
 80083e8:	4641      	mov	r1, r8
 80083ea:	9005      	str	r0, [sp, #20]
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7f8 fd53 	bl	8000e98 <__aeabi_fmul>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	4601      	mov	r1, r0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7f8 fc46 	bl	8000c88 <__addsf3>
 80083fc:	4629      	mov	r1, r5
 80083fe:	f84a 0c10 	str.w	r0, [sl, #-16]
 8008402:	4638      	mov	r0, r7
 8008404:	f7f8 fd48 	bl	8000e98 <__aeabi_fmul>
 8008408:	4641      	mov	r1, r8
 800840a:	4607      	mov	r7, r0
 800840c:	4620      	mov	r0, r4
 800840e:	f7f8 fd43 	bl	8000e98 <__aeabi_fmul>
 8008412:	4601      	mov	r1, r0
 8008414:	4638      	mov	r0, r7
 8008416:	f7f8 fc35 	bl	8000c84 <__aeabi_fsub>
 800841a:	4641      	mov	r1, r8
 800841c:	f84a 0c0c 	str.w	r0, [sl, #-12]
 8008420:	9802      	ldr	r0, [sp, #8]
 8008422:	f7f8 fd39 	bl	8000e98 <__aeabi_fmul>
 8008426:	9f06      	ldr	r7, [sp, #24]
 8008428:	4604      	mov	r4, r0
 800842a:	4629      	mov	r1, r5
 800842c:	4638      	mov	r0, r7
 800842e:	f7f8 fd33 	bl	8000e98 <__aeabi_fmul>
 8008432:	4601      	mov	r1, r0
 8008434:	4620      	mov	r0, r4
 8008436:	f7f8 fc25 	bl	8000c84 <__aeabi_fsub>
 800843a:	4641      	mov	r1, r8
 800843c:	f849 0c10 	str.w	r0, [r9, #-16]
 8008440:	4638      	mov	r0, r7
 8008442:	f7f8 fd29 	bl	8000e98 <__aeabi_fmul>
 8008446:	4629      	mov	r1, r5
 8008448:	4604      	mov	r4, r0
 800844a:	9802      	ldr	r0, [sp, #8]
 800844c:	f7f8 fd24 	bl	8000e98 <__aeabi_fmul>
 8008450:	4601      	mov	r1, r0
 8008452:	4620      	mov	r0, r4
 8008454:	f7f8 fc18 	bl	8000c88 <__addsf3>
 8008458:	9a00      	ldr	r2, [sp, #0]
 800845a:	f849 0c0c 	str.w	r0, [r9, #-12]
 800845e:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8008462:	9801      	ldr	r0, [sp, #4]
 8008464:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008468:	4621      	mov	r1, r4
 800846a:	f7f8 fd15 	bl	8000e98 <__aeabi_fmul>
 800846e:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8008472:	4607      	mov	r7, r0
 8008474:	4629      	mov	r1, r5
 8008476:	4640      	mov	r0, r8
 8008478:	f7f8 fd0e 	bl	8000e98 <__aeabi_fmul>
 800847c:	4601      	mov	r1, r0
 800847e:	4638      	mov	r0, r7
 8008480:	f7f8 fc02 	bl	8000c88 <__addsf3>
 8008484:	4621      	mov	r1, r4
 8008486:	f84a 0c08 	str.w	r0, [sl, #-8]
 800848a:	4640      	mov	r0, r8
 800848c:	f7f8 fd04 	bl	8000e98 <__aeabi_fmul>
 8008490:	4629      	mov	r1, r5
 8008492:	4607      	mov	r7, r0
 8008494:	9801      	ldr	r0, [sp, #4]
 8008496:	f7f8 fcff 	bl	8000e98 <__aeabi_fmul>
 800849a:	4601      	mov	r1, r0
 800849c:	4638      	mov	r0, r7
 800849e:	f7f8 fbf1 	bl	8000c84 <__aeabi_fsub>
 80084a2:	4629      	mov	r1, r5
 80084a4:	f84a 0c04 	str.w	r0, [sl, #-4]
 80084a8:	9803      	ldr	r0, [sp, #12]
 80084aa:	f7f8 fcf5 	bl	8000e98 <__aeabi_fmul>
 80084ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80084b2:	4607      	mov	r7, r0
 80084b4:	4621      	mov	r1, r4
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7f8 fcee 	bl	8000e98 <__aeabi_fmul>
 80084bc:	4601      	mov	r1, r0
 80084be:	4638      	mov	r0, r7
 80084c0:	f7f8 fbe0 	bl	8000c84 <__aeabi_fsub>
 80084c4:	4629      	mov	r1, r5
 80084c6:	f849 0c08 	str.w	r0, [r9, #-8]
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7f8 fce4 	bl	8000e98 <__aeabi_fmul>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4605      	mov	r5, r0
 80084d4:	9803      	ldr	r0, [sp, #12]
 80084d6:	f7f8 fcdf 	bl	8000e98 <__aeabi_fmul>
 80084da:	4601      	mov	r1, r0
 80084dc:	4628      	mov	r0, r5
 80084de:	f7f8 fbd3 	bl	8000c88 <__addsf3>
 80084e2:	9b00      	ldr	r3, [sp, #0]
 80084e4:	f849 0c04 	str.w	r0, [r9, #-4]
 80084e8:	3310      	adds	r3, #16
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ee:	3b01      	subs	r3, #1
 80084f0:	f106 0610 	add.w	r6, r6, #16
 80084f4:	f10b 0b10 	add.w	fp, fp, #16
 80084f8:	f10a 0a10 	add.w	sl, sl, #16
 80084fc:	f109 0910 	add.w	r9, r9, #16
 8008500:	930a      	str	r3, [sp, #40]	@ 0x28
 8008502:	f47f aedb 	bne.w	80082bc <arm_cfft_radix8by2_f32+0x44>
 8008506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008508:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8008510:	2302      	movs	r3, #2
 8008512:	4621      	mov	r1, r4
 8008514:	f000 fc3e 	bl	8008d94 <arm_radix8_butterfly_f32>
 8008518:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800851a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	4621      	mov	r1, r4
 8008520:	2302      	movs	r3, #2
 8008522:	b013      	add	sp, #76	@ 0x4c
 8008524:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	f000 bc34 	b.w	8008d94 <arm_radix8_butterfly_f32>

0800852c <arm_cfft_radix8by4_f32>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	8804      	ldrh	r4, [r0, #0]
 8008532:	6843      	ldr	r3, [r0, #4]
 8008534:	680e      	ldr	r6, [r1, #0]
 8008536:	b0a7      	sub	sp, #156	@ 0x9c
 8008538:	0864      	lsrs	r4, r4, #1
 800853a:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800853e:	9302      	str	r3, [sp, #8]
 8008540:	eb01 0309 	add.w	r3, r1, r9
 8008544:	461f      	mov	r7, r3
 8008546:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800854a:	9025      	str	r0, [sp, #148]	@ 0x94
 800854c:	911a      	str	r1, [sp, #104]	@ 0x68
 800854e:	9318      	str	r3, [sp, #96]	@ 0x60
 8008550:	4629      	mov	r1, r5
 8008552:	444b      	add	r3, r9
 8008554:	4630      	mov	r0, r6
 8008556:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008558:	f7f8 fb96 	bl	8000c88 <__addsf3>
 800855c:	4629      	mov	r1, r5
 800855e:	4683      	mov	fp, r0
 8008560:	4630      	mov	r0, r6
 8008562:	f7f8 fb8f 	bl	8000c84 <__aeabi_fsub>
 8008566:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800856a:	6855      	ldr	r5, [r2, #4]
 800856c:	684e      	ldr	r6, [r1, #4]
 800856e:	9000      	str	r0, [sp, #0]
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7f8 fb88 	bl	8000c88 <__addsf3>
 8008578:	4629      	mov	r1, r5
 800857a:	4682      	mov	sl, r0
 800857c:	4630      	mov	r0, r6
 800857e:	f7f8 fb81 	bl	8000c84 <__aeabi_fsub>
 8008582:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008584:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8008586:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800858a:	9001      	str	r0, [sp, #4]
 800858c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8008590:	9718      	str	r7, [sp, #96]	@ 0x60
 8008592:	4631      	mov	r1, r6
 8008594:	4658      	mov	r0, fp
 8008596:	f7f8 fb77 	bl	8000c88 <__addsf3>
 800859a:	4601      	mov	r1, r0
 800859c:	4628      	mov	r0, r5
 800859e:	f7f8 fb73 	bl	8000c88 <__addsf3>
 80085a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80085a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085a6:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80085aa:	468e      	mov	lr, r1
 80085ac:	eb02 0709 	add.w	r7, r2, r9
 80085b0:	9719      	str	r7, [sp, #100]	@ 0x64
 80085b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80085b4:	687f      	ldr	r7, [r7, #4]
 80085b6:	f84e 0b08 	str.w	r0, [lr], #8
 80085ba:	4650      	mov	r0, sl
 80085bc:	6851      	ldr	r1, [r2, #4]
 80085be:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
 80085c2:	f7f8 fb61 	bl	8000c88 <__addsf3>
 80085c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085c8:	6859      	ldr	r1, [r3, #4]
 80085ca:	f7f8 fb5d 	bl	8000c88 <__addsf3>
 80085ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80085d0:	9900      	ldr	r1, [sp, #0]
 80085d2:	6058      	str	r0, [r3, #4]
 80085d4:	4640      	mov	r0, r8
 80085d6:	f7f8 fb57 	bl	8000c88 <__addsf3>
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f8 fb52 	bl	8000c84 <__aeabi_fsub>
 80085e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80085e2:	4631      	mov	r1, r6
 80085e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80085e8:	9801      	ldr	r0, [sp, #4]
 80085ea:	f7f8 fb4b 	bl	8000c84 <__aeabi_fsub>
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f8 fb4a 	bl	8000c88 <__addsf3>
 80085f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80085f6:	4631      	mov	r1, r6
 80085f8:	6058      	str	r0, [r3, #4]
 80085fa:	4658      	mov	r0, fp
 80085fc:	f7f8 fb42 	bl	8000c84 <__aeabi_fsub>
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 fb3f 	bl	8000c84 <__aeabi_fsub>
 8008606:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008608:	4641      	mov	r1, r8
 800860a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800860e:	4650      	mov	r0, sl
 8008610:	f7f8 fb38 	bl	8000c84 <__aeabi_fsub>
 8008614:	4639      	mov	r1, r7
 8008616:	f7f8 fb35 	bl	8000c84 <__aeabi_fsub>
 800861a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800861c:	4641      	mov	r1, r8
 800861e:	6058      	str	r0, [r3, #4]
 8008620:	9800      	ldr	r0, [sp, #0]
 8008622:	f7f8 fb2f 	bl	8000c84 <__aeabi_fsub>
 8008626:	4601      	mov	r1, r0
 8008628:	4638      	mov	r0, r7
 800862a:	f7f8 fb2d 	bl	8000c88 <__addsf3>
 800862e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8008630:	4631      	mov	r1, r6
 8008632:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8008636:	9801      	ldr	r0, [sp, #4]
 8008638:	f7f8 fb26 	bl	8000c88 <__addsf3>
 800863c:	4629      	mov	r1, r5
 800863e:	f7f8 fb21 	bl	8000c84 <__aeabi_fsub>
 8008642:	0866      	lsrs	r6, r4, #1
 8008644:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008646:	9b02      	ldr	r3, [sp, #8]
 8008648:	9624      	str	r6, [sp, #144]	@ 0x90
 800864a:	1eb1      	subs	r1, r6, #2
 800864c:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800864e:	f104 0208 	add.w	r2, r4, #8
 8008652:	6070      	str	r0, [r6, #4]
 8008654:	921e      	str	r2, [sp, #120]	@ 0x78
 8008656:	4630      	mov	r0, r6
 8008658:	f103 0208 	add.w	r2, r3, #8
 800865c:	3008      	adds	r0, #8
 800865e:	9220      	str	r2, [sp, #128]	@ 0x80
 8008660:	f103 0210 	add.w	r2, r3, #16
 8008664:	4635      	mov	r5, r6
 8008666:	901c      	str	r0, [sp, #112]	@ 0x70
 8008668:	463e      	mov	r6, r7
 800866a:	4638      	mov	r0, r7
 800866c:	9221      	str	r2, [sp, #132]	@ 0x84
 800866e:	4617      	mov	r7, r2
 8008670:	f103 0218 	add.w	r2, r3, #24
 8008674:	3008      	adds	r0, #8
 8008676:	9222      	str	r2, [sp, #136]	@ 0x88
 8008678:	084a      	lsrs	r2, r1, #1
 800867a:	901f      	str	r0, [sp, #124]	@ 0x7c
 800867c:	9223      	str	r2, [sp, #140]	@ 0x8c
 800867e:	f000 821d 	beq.w	8008abc <arm_cfft_radix8by4_f32+0x590>
 8008682:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008684:	9706      	str	r7, [sp, #24]
 8008686:	3110      	adds	r1, #16
 8008688:	4694      	mov	ip, r2
 800868a:	4628      	mov	r0, r5
 800868c:	f1a9 020c 	sub.w	r2, r9, #12
 8008690:	9102      	str	r1, [sp, #8]
 8008692:	f103 0120 	add.w	r1, r3, #32
 8008696:	3330      	adds	r3, #48	@ 0x30
 8008698:	4410      	add	r0, r2
 800869a:	9304      	str	r3, [sp, #16]
 800869c:	2200      	movs	r2, #0
 800869e:	f106 0310 	add.w	r3, r6, #16
 80086a2:	f104 0910 	add.w	r9, r4, #16
 80086a6:	f1a6 0b0c 	sub.w	fp, r6, #12
 80086aa:	9301      	str	r3, [sp, #4]
 80086ac:	f105 0810 	add.w	r8, r5, #16
 80086b0:	4613      	mov	r3, r2
 80086b2:	46ca      	mov	sl, r9
 80086b4:	4662      	mov	r2, ip
 80086b6:	9003      	str	r0, [sp, #12]
 80086b8:	9105      	str	r1, [sp, #20]
 80086ba:	46d9      	mov	r9, fp
 80086bc:	f8cd 8000 	str.w	r8, [sp]
 80086c0:	469c      	mov	ip, r3
 80086c2:	9e02      	ldr	r6, [sp, #8]
 80086c4:	9f01      	ldr	r7, [sp, #4]
 80086c6:	f856 5c08 	ldr.w	r5, [r6, #-8]
 80086ca:	f857 4c08 	ldr.w	r4, [r7, #-8]
 80086ce:	9217      	str	r2, [sp, #92]	@ 0x5c
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 80086d8:	f7f8 fad6 	bl	8000c88 <__addsf3>
 80086dc:	4621      	mov	r1, r4
 80086de:	4680      	mov	r8, r0
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7f8 facf 	bl	8000c84 <__aeabi_fsub>
 80086e6:	f856 5c04 	ldr.w	r5, [r6, #-4]
 80086ea:	f857 4c04 	ldr.w	r4, [r7, #-4]
 80086ee:	9007      	str	r0, [sp, #28]
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	9602      	str	r6, [sp, #8]
 80086f6:	9701      	str	r7, [sp, #4]
 80086f8:	f7f8 fac6 	bl	8000c88 <__addsf3>
 80086fc:	4621      	mov	r1, r4
 80086fe:	4607      	mov	r7, r0
 8008700:	4628      	mov	r0, r5
 8008702:	f7f8 fabf 	bl	8000c84 <__aeabi_fsub>
 8008706:	9c00      	ldr	r4, [sp, #0]
 8008708:	f85a bc04 	ldr.w	fp, [sl, #-4]
 800870c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008710:	9907      	ldr	r1, [sp, #28]
 8008712:	9008      	str	r0, [sp, #32]
 8008714:	4658      	mov	r0, fp
 8008716:	f7f8 fab7 	bl	8000c88 <__addsf3>
 800871a:	4631      	mov	r1, r6
 800871c:	f7f8 fab2 	bl	8000c84 <__aeabi_fsub>
 8008720:	f85a 5c08 	ldr.w	r5, [sl, #-8]
 8008724:	9400      	str	r4, [sp, #0]
 8008726:	f854 4c08 	ldr.w	r4, [r4, #-8]
 800872a:	9009      	str	r0, [sp, #36]	@ 0x24
 800872c:	4629      	mov	r1, r5
 800872e:	9808      	ldr	r0, [sp, #32]
 8008730:	f7f8 faa8 	bl	8000c84 <__aeabi_fsub>
 8008734:	4621      	mov	r1, r4
 8008736:	f7f8 faa7 	bl	8000c88 <__addsf3>
 800873a:	4629      	mov	r1, r5
 800873c:	9010      	str	r0, [sp, #64]	@ 0x40
 800873e:	4640      	mov	r0, r8
 8008740:	f7f8 faa0 	bl	8000c84 <__aeabi_fsub>
 8008744:	4621      	mov	r1, r4
 8008746:	f7f8 fa9d 	bl	8000c84 <__aeabi_fsub>
 800874a:	4659      	mov	r1, fp
 800874c:	900a      	str	r0, [sp, #40]	@ 0x28
 800874e:	4638      	mov	r0, r7
 8008750:	f7f8 fa98 	bl	8000c84 <__aeabi_fsub>
 8008754:	4631      	mov	r1, r6
 8008756:	f7f8 fa95 	bl	8000c84 <__aeabi_fsub>
 800875a:	4659      	mov	r1, fp
 800875c:	9011      	str	r0, [sp, #68]	@ 0x44
 800875e:	9807      	ldr	r0, [sp, #28]
 8008760:	f7f8 fa90 	bl	8000c84 <__aeabi_fsub>
 8008764:	4601      	mov	r1, r0
 8008766:	4630      	mov	r0, r6
 8008768:	f7f8 fa8e 	bl	8000c88 <__addsf3>
 800876c:	4629      	mov	r1, r5
 800876e:	9007      	str	r0, [sp, #28]
 8008770:	9808      	ldr	r0, [sp, #32]
 8008772:	f7f8 fa89 	bl	8000c88 <__addsf3>
 8008776:	4621      	mov	r1, r4
 8008778:	f7f8 fa84 	bl	8000c84 <__aeabi_fsub>
 800877c:	4629      	mov	r1, r5
 800877e:	9012      	str	r0, [sp, #72]	@ 0x48
 8008780:	4640      	mov	r0, r8
 8008782:	f7f8 fa81 	bl	8000c88 <__addsf3>
 8008786:	4601      	mov	r1, r0
 8008788:	4620      	mov	r0, r4
 800878a:	f7f8 fa7d 	bl	8000c88 <__addsf3>
 800878e:	9d02      	ldr	r5, [sp, #8]
 8008790:	f845 0c08 	str.w	r0, [r5, #-8]
 8008794:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8008798:	4638      	mov	r0, r7
 800879a:	f7f8 fa75 	bl	8000c88 <__addsf3>
 800879e:	9900      	ldr	r1, [sp, #0]
 80087a0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80087a4:	f7f8 fa70 	bl	8000c88 <__addsf3>
 80087a8:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 80087ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80087ae:	f845 0c04 	str.w	r0, [r5, #-4]
 80087b2:	eb03 040c 	add.w	r4, r3, ip
 80087b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087b8:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80087bc:	9502      	str	r5, [sp, #8]
 80087be:	4463      	add	r3, ip
 80087c0:	461f      	mov	r7, r3
 80087c2:	4630      	mov	r0, r6
 80087c4:	f857 5c08 	ldr.w	r5, [r7, #-8]
 80087c8:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f8 fa5b 	bl	8000c88 <__addsf3>
 80087d2:	4629      	mov	r1, r5
 80087d4:	9008      	str	r0, [sp, #32]
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7f8 fa54 	bl	8000c84 <__aeabi_fsub>
 80087dc:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80087e0:	f857 5c04 	ldr.w	r5, [r7, #-4]
 80087e4:	970f      	str	r7, [sp, #60]	@ 0x3c
 80087e6:	4683      	mov	fp, r0
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7f8 fa4c 	bl	8000c88 <__addsf3>
 80087f0:	4629      	mov	r1, r5
 80087f2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80087f4:	4630      	mov	r0, r6
 80087f6:	f7f8 fa45 	bl	8000c84 <__aeabi_fsub>
 80087fa:	9e03      	ldr	r6, [sp, #12]
 80087fc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8008800:	68b5      	ldr	r5, [r6, #8]
 8008802:	900c      	str	r0, [sp, #48]	@ 0x30
 8008804:	4629      	mov	r1, r5
 8008806:	4638      	mov	r0, r7
 8008808:	f7f8 fa3c 	bl	8000c84 <__aeabi_fsub>
 800880c:	4659      	mov	r1, fp
 800880e:	9015      	str	r0, [sp, #84]	@ 0x54
 8008810:	f7f8 fa3a 	bl	8000c88 <__addsf3>
 8008814:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8008818:	9603      	str	r6, [sp, #12]
 800881a:	6876      	ldr	r6, [r6, #4]
 800881c:	9013      	str	r0, [sp, #76]	@ 0x4c
 800881e:	4641      	mov	r1, r8
 8008820:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008822:	f7f8 fa2f 	bl	8000c84 <__aeabi_fsub>
 8008826:	4631      	mov	r1, r6
 8008828:	f7f8 fa2e 	bl	8000c88 <__addsf3>
 800882c:	4641      	mov	r1, r8
 800882e:	900d      	str	r0, [sp, #52]	@ 0x34
 8008830:	9808      	ldr	r0, [sp, #32]
 8008832:	f7f8 fa27 	bl	8000c84 <__aeabi_fsub>
 8008836:	4631      	mov	r1, r6
 8008838:	f7f8 fa24 	bl	8000c84 <__aeabi_fsub>
 800883c:	4639      	mov	r1, r7
 800883e:	9014      	str	r0, [sp, #80]	@ 0x50
 8008840:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008842:	f7f8 fa1f 	bl	8000c84 <__aeabi_fsub>
 8008846:	4629      	mov	r1, r5
 8008848:	f7f8 fa1c 	bl	8000c84 <__aeabi_fsub>
 800884c:	900e      	str	r0, [sp, #56]	@ 0x38
 800884e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008850:	4659      	mov	r1, fp
 8008852:	4618      	mov	r0, r3
 8008854:	f7f8 fa16 	bl	8000c84 <__aeabi_fsub>
 8008858:	4641      	mov	r1, r8
 800885a:	4683      	mov	fp, r0
 800885c:	4630      	mov	r0, r6
 800885e:	f7f8 fa11 	bl	8000c84 <__aeabi_fsub>
 8008862:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008864:	f7f8 fa0e 	bl	8000c84 <__aeabi_fsub>
 8008868:	4639      	mov	r1, r7
 800886a:	4606      	mov	r6, r0
 800886c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800886e:	f7f8 fa0b 	bl	8000c88 <__addsf3>
 8008872:	4601      	mov	r1, r0
 8008874:	4628      	mov	r0, r5
 8008876:	f7f8 fa07 	bl	8000c88 <__addsf3>
 800887a:	f844 0c04 	str.w	r0, [r4, #-4]
 800887e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008882:	9808      	ldr	r0, [sp, #32]
 8008884:	f7f8 fa00 	bl	8000c88 <__addsf3>
 8008888:	9d03      	ldr	r5, [sp, #12]
 800888a:	6869      	ldr	r1, [r5, #4]
 800888c:	f7f8 f9fc 	bl	8000c88 <__addsf3>
 8008890:	9a06      	ldr	r2, [sp, #24]
 8008892:	f844 0c08 	str.w	r0, [r4, #-8]
 8008896:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800889a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800889c:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80088a0:	4621      	mov	r1, r4
 80088a2:	f7f8 faf9 	bl	8000e98 <__aeabi_fmul>
 80088a6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80088a8:	4680      	mov	r8, r0
 80088aa:	4629      	mov	r1, r5
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7f8 faf3 	bl	8000e98 <__aeabi_fmul>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4640      	mov	r0, r8
 80088b6:	f7f8 f9e7 	bl	8000c88 <__addsf3>
 80088ba:	4621      	mov	r1, r4
 80088bc:	f84a 0c08 	str.w	r0, [sl, #-8]
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7f8 fae9 	bl	8000e98 <__aeabi_fmul>
 80088c6:	4629      	mov	r1, r5
 80088c8:	4680      	mov	r8, r0
 80088ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088cc:	f7f8 fae4 	bl	8000e98 <__aeabi_fmul>
 80088d0:	4601      	mov	r1, r0
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7f8 f9d6 	bl	8000c84 <__aeabi_fsub>
 80088d8:	4629      	mov	r1, r5
 80088da:	f84a 0c04 	str.w	r0, [sl, #-4]
 80088de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80088e0:	f7f8 fada 	bl	8000e98 <__aeabi_fmul>
 80088e4:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80088e6:	4680      	mov	r8, r0
 80088e8:	4621      	mov	r1, r4
 80088ea:	4638      	mov	r0, r7
 80088ec:	f7f8 fad4 	bl	8000e98 <__aeabi_fmul>
 80088f0:	4601      	mov	r1, r0
 80088f2:	4640      	mov	r0, r8
 80088f4:	f7f8 f9c6 	bl	8000c84 <__aeabi_fsub>
 80088f8:	4629      	mov	r1, r5
 80088fa:	f8c9 0008 	str.w	r0, [r9, #8]
 80088fe:	4638      	mov	r0, r7
 8008900:	f7f8 faca 	bl	8000e98 <__aeabi_fmul>
 8008904:	4621      	mov	r1, r4
 8008906:	4605      	mov	r5, r0
 8008908:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800890a:	f7f8 fac5 	bl	8000e98 <__aeabi_fmul>
 800890e:	4601      	mov	r1, r0
 8008910:	4628      	mov	r0, r5
 8008912:	f7f8 f9b9 	bl	8000c88 <__addsf3>
 8008916:	9d05      	ldr	r5, [sp, #20]
 8008918:	f8c9 0004 	str.w	r0, [r9, #4]
 800891c:	f855 4c10 	ldr.w	r4, [r5, #-16]
 8008920:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008922:	f855 5c0c 	ldr.w	r5, [r5, #-12]
 8008926:	4621      	mov	r1, r4
 8008928:	f7f8 fab6 	bl	8000e98 <__aeabi_fmul>
 800892c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008930:	4607      	mov	r7, r0
 8008932:	4629      	mov	r1, r5
 8008934:	4640      	mov	r0, r8
 8008936:	f7f8 faaf 	bl	8000e98 <__aeabi_fmul>
 800893a:	4601      	mov	r1, r0
 800893c:	4638      	mov	r0, r7
 800893e:	f7f8 f9a3 	bl	8000c88 <__addsf3>
 8008942:	9f01      	ldr	r7, [sp, #4]
 8008944:	4621      	mov	r1, r4
 8008946:	f847 0c08 	str.w	r0, [r7, #-8]
 800894a:	4640      	mov	r0, r8
 800894c:	f7f8 faa4 	bl	8000e98 <__aeabi_fmul>
 8008950:	4629      	mov	r1, r5
 8008952:	4607      	mov	r7, r0
 8008954:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008956:	f7f8 fa9f 	bl	8000e98 <__aeabi_fmul>
 800895a:	4601      	mov	r1, r0
 800895c:	4638      	mov	r0, r7
 800895e:	f7f8 f991 	bl	8000c84 <__aeabi_fsub>
 8008962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008964:	9f01      	ldr	r7, [sp, #4]
 8008966:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 800896a:	f847 0c04 	str.w	r0, [r7, #-4]
 800896e:	4621      	mov	r1, r4
 8008970:	4618      	mov	r0, r3
 8008972:	f7f8 fa91 	bl	8000e98 <__aeabi_fmul>
 8008976:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 800897a:	4607      	mov	r7, r0
 800897c:	4629      	mov	r1, r5
 800897e:	4640      	mov	r0, r8
 8008980:	f7f8 fa8a 	bl	8000e98 <__aeabi_fmul>
 8008984:	4601      	mov	r1, r0
 8008986:	4638      	mov	r0, r7
 8008988:	f7f8 f97c 	bl	8000c84 <__aeabi_fsub>
 800898c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800898e:	4629      	mov	r1, r5
 8008990:	f847 0c04 	str.w	r0, [r7, #-4]
 8008994:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008996:	f7f8 fa7f 	bl	8000e98 <__aeabi_fmul>
 800899a:	4621      	mov	r1, r4
 800899c:	4605      	mov	r5, r0
 800899e:	4640      	mov	r0, r8
 80089a0:	f7f8 fa7a 	bl	8000e98 <__aeabi_fmul>
 80089a4:	4601      	mov	r1, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f7f8 f96c 	bl	8000c84 <__aeabi_fsub>
 80089ac:	f847 0c08 	str.w	r0, [r7, #-8]
 80089b0:	9f04      	ldr	r7, [sp, #16]
 80089b2:	9807      	ldr	r0, [sp, #28]
 80089b4:	f857 4c18 	ldr.w	r4, [r7, #-24]
 80089b8:	f857 5c14 	ldr.w	r5, [r7, #-20]
 80089bc:	4621      	mov	r1, r4
 80089be:	f7f8 fa6b 	bl	8000e98 <__aeabi_fmul>
 80089c2:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 80089c6:	4607      	mov	r7, r0
 80089c8:	4629      	mov	r1, r5
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7f8 fa64 	bl	8000e98 <__aeabi_fmul>
 80089d0:	4601      	mov	r1, r0
 80089d2:	4638      	mov	r0, r7
 80089d4:	f7f8 f958 	bl	8000c88 <__addsf3>
 80089d8:	9b00      	ldr	r3, [sp, #0]
 80089da:	4621      	mov	r1, r4
 80089dc:	f843 0c08 	str.w	r0, [r3, #-8]
 80089e0:	4640      	mov	r0, r8
 80089e2:	f7f8 fa59 	bl	8000e98 <__aeabi_fmul>
 80089e6:	4629      	mov	r1, r5
 80089e8:	4607      	mov	r7, r0
 80089ea:	9807      	ldr	r0, [sp, #28]
 80089ec:	f7f8 fa54 	bl	8000e98 <__aeabi_fmul>
 80089f0:	4601      	mov	r1, r0
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7f8 f946 	bl	8000c84 <__aeabi_fsub>
 80089f8:	9a00      	ldr	r2, [sp, #0]
 80089fa:	4629      	mov	r1, r5
 80089fc:	f842 0c04 	str.w	r0, [r2, #-4]
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7f8 fa49 	bl	8000e98 <__aeabi_fmul>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4607      	mov	r7, r0
 8008a0a:	4658      	mov	r0, fp
 8008a0c:	f7f8 fa44 	bl	8000e98 <__aeabi_fmul>
 8008a10:	4601      	mov	r1, r0
 8008a12:	4638      	mov	r0, r7
 8008a14:	f7f8 f936 	bl	8000c84 <__aeabi_fsub>
 8008a18:	9f03      	ldr	r7, [sp, #12]
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	60b8      	str	r0, [r7, #8]
 8008a1e:	4658      	mov	r0, fp
 8008a20:	f7f8 fa3a 	bl	8000e98 <__aeabi_fmul>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4605      	mov	r5, r0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7f8 fa35 	bl	8000e98 <__aeabi_fmul>
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4628      	mov	r0, r5
 8008a32:	f7f8 f929 	bl	8000c88 <__addsf3>
 8008a36:	9902      	ldr	r1, [sp, #8]
 8008a38:	9c06      	ldr	r4, [sp, #24]
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	9a00      	ldr	r2, [sp, #0]
 8008a3e:	9f03      	ldr	r7, [sp, #12]
 8008a40:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460e      	mov	r6, r1
 8008a48:	3608      	adds	r6, #8
 8008a4a:	9602      	str	r6, [sp, #8]
 8008a4c:	4626      	mov	r6, r4
 8008a4e:	3608      	adds	r6, #8
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	9c04      	ldr	r4, [sp, #16]
 8008a54:	9606      	str	r6, [sp, #24]
 8008a56:	f103 0610 	add.w	r6, r3, #16
 8008a5a:	f102 0308 	add.w	r3, r2, #8
 8008a5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	3108      	adds	r1, #8
 8008a64:	9101      	str	r1, [sp, #4]
 8008a66:	f1a7 0308 	sub.w	r3, r7, #8
 8008a6a:	f104 0118 	add.w	r1, r4, #24
 8008a6e:	3a01      	subs	r2, #1
 8008a70:	f1ac 0c08 	sub.w	ip, ip, #8
 8008a74:	f10a 0a08 	add.w	sl, sl, #8
 8008a78:	f1a9 0908 	sub.w	r9, r9, #8
 8008a7c:	9605      	str	r6, [sp, #20]
 8008a7e:	9104      	str	r1, [sp, #16]
 8008a80:	9303      	str	r3, [sp, #12]
 8008a82:	f47f ae1e 	bne.w	80086c2 <arm_cfft_radix8by4_f32+0x196>
 8008a86:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008a88:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8008a8a:	00cb      	lsls	r3, r1, #3
 8008a8c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008a90:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008a94:	9121      	str	r1, [sp, #132]	@ 0x84
 8008a96:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8008a98:	4419      	add	r1, r3
 8008a9a:	911d      	str	r1, [sp, #116]	@ 0x74
 8008a9c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a9e:	4419      	add	r1, r3
 8008aa0:	9120      	str	r1, [sp, #128]	@ 0x80
 8008aa2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008aa4:	4419      	add	r1, r3
 8008aa6:	911e      	str	r1, [sp, #120]	@ 0x78
 8008aa8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8008aaa:	4419      	add	r1, r3
 8008aac:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008aae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008ab0:	4419      	add	r1, r3
 8008ab2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ab4:	911c      	str	r1, [sp, #112]	@ 0x70
 8008ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aba:	9322      	str	r3, [sp, #136]	@ 0x88
 8008abc:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8008abe:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008ac0:	6835      	ldr	r5, [r6, #0]
 8008ac2:	683c      	ldr	r4, [r7, #0]
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	f7f8 f8de 	bl	8000c88 <__addsf3>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4681      	mov	r9, r0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7f8 f8d7 	bl	8000c84 <__aeabi_fsub>
 8008ad6:	6875      	ldr	r5, [r6, #4]
 8008ad8:	687c      	ldr	r4, [r7, #4]
 8008ada:	961d      	str	r6, [sp, #116]	@ 0x74
 8008adc:	4683      	mov	fp, r0
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	971f      	str	r7, [sp, #124]	@ 0x7c
 8008ae4:	f7f8 f8d0 	bl	8000c88 <__addsf3>
 8008ae8:	4621      	mov	r1, r4
 8008aea:	4680      	mov	r8, r0
 8008aec:	4628      	mov	r0, r5
 8008aee:	f7f8 f8c9 	bl	8000c84 <__aeabi_fsub>
 8008af2:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8008af4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008af6:	6867      	ldr	r7, [r4, #4]
 8008af8:	685e      	ldr	r6, [r3, #4]
 8008afa:	4682      	mov	sl, r0
 8008afc:	4659      	mov	r1, fp
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7f8 f8c2 	bl	8000c88 <__addsf3>
 8008b04:	4631      	mov	r1, r6
 8008b06:	f7f8 f8bd 	bl	8000c84 <__aeabi_fsub>
 8008b0a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008b0c:	6825      	ldr	r5, [r4, #0]
 8008b0e:	941e      	str	r4, [sp, #120]	@ 0x78
 8008b10:	680c      	ldr	r4, [r1, #0]
 8008b12:	9000      	str	r0, [sp, #0]
 8008b14:	4629      	mov	r1, r5
 8008b16:	4650      	mov	r0, sl
 8008b18:	f7f8 f8b4 	bl	8000c84 <__aeabi_fsub>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f7f8 f8b3 	bl	8000c88 <__addsf3>
 8008b22:	4629      	mov	r1, r5
 8008b24:	9001      	str	r0, [sp, #4]
 8008b26:	4648      	mov	r0, r9
 8008b28:	f7f8 f8ac 	bl	8000c84 <__aeabi_fsub>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7f8 f8a9 	bl	8000c84 <__aeabi_fsub>
 8008b32:	4639      	mov	r1, r7
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	4640      	mov	r0, r8
 8008b38:	f7f8 f8a4 	bl	8000c84 <__aeabi_fsub>
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	f7f8 f8a1 	bl	8000c84 <__aeabi_fsub>
 8008b42:	4639      	mov	r1, r7
 8008b44:	9003      	str	r0, [sp, #12]
 8008b46:	4658      	mov	r0, fp
 8008b48:	f7f8 f89c 	bl	8000c84 <__aeabi_fsub>
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7f8 f89a 	bl	8000c88 <__addsf3>
 8008b54:	4629      	mov	r1, r5
 8008b56:	4606      	mov	r6, r0
 8008b58:	4650      	mov	r0, sl
 8008b5a:	f7f8 f895 	bl	8000c88 <__addsf3>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	f7f8 f890 	bl	8000c84 <__aeabi_fsub>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4682      	mov	sl, r0
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f7f8 f88d 	bl	8000c88 <__addsf3>
 8008b6e:	4601      	mov	r1, r0
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7f8 f889 	bl	8000c88 <__addsf3>
 8008b76:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008b78:	6028      	str	r0, [r5, #0]
 8008b7a:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	f7f8 f882 	bl	8000c88 <__addsf3>
 8008b84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008b86:	6851      	ldr	r1, [r2, #4]
 8008b88:	f7f8 f87e 	bl	8000c88 <__addsf3>
 8008b8c:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8008b8e:	6068      	str	r0, [r5, #4]
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	f8dd 9000 	ldr.w	r9, [sp]
 8008b96:	6864      	ldr	r4, [r4, #4]
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4648      	mov	r0, r9
 8008b9c:	f7f8 f97c 	bl	8000e98 <__aeabi_fmul>
 8008ba0:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4658      	mov	r0, fp
 8008baa:	f7f8 f975 	bl	8000e98 <__aeabi_fmul>
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	f7f8 f869 	bl	8000c88 <__addsf3>
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	6038      	str	r0, [r7, #0]
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f7f8 f96c 	bl	8000e98 <__aeabi_fmul>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f7f8 f967 	bl	8000e98 <__aeabi_fmul>
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7f8 f859 	bl	8000c84 <__aeabi_fsub>
 8008bd2:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6825      	ldr	r5, [r4, #0]
 8008bd8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008bdc:	6864      	ldr	r4, [r4, #4]
 8008bde:	4629      	mov	r1, r5
 8008be0:	4648      	mov	r0, r9
 8008be2:	f7f8 f959 	bl	8000e98 <__aeabi_fmul>
 8008be6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bea:	4607      	mov	r7, r0
 8008bec:	4621      	mov	r1, r4
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f7f8 f952 	bl	8000e98 <__aeabi_fmul>
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7f8 f846 	bl	8000c88 <__addsf3>
 8008bfc:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008bfe:	4629      	mov	r1, r5
 8008c00:	6038      	str	r0, [r7, #0]
 8008c02:	4640      	mov	r0, r8
 8008c04:	f7f8 f948 	bl	8000e98 <__aeabi_fmul>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	4648      	mov	r0, r9
 8008c0e:	f7f8 f943 	bl	8000e98 <__aeabi_fmul>
 8008c12:	4601      	mov	r1, r0
 8008c14:	4628      	mov	r0, r5
 8008c16:	f7f8 f835 	bl	8000c84 <__aeabi_fsub>
 8008c1a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	680d      	ldr	r5, [r1, #0]
 8008c20:	684c      	ldr	r4, [r1, #4]
 8008c22:	4630      	mov	r0, r6
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f8 f937 	bl	8000e98 <__aeabi_fmul>
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f7f8 f932 	bl	8000e98 <__aeabi_fmul>
 8008c34:	4601      	mov	r1, r0
 8008c36:	4638      	mov	r0, r7
 8008c38:	f7f8 f826 	bl	8000c88 <__addsf3>
 8008c3c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8008c3e:	4629      	mov	r1, r5
 8008c40:	6038      	str	r0, [r7, #0]
 8008c42:	4650      	mov	r0, sl
 8008c44:	f7f8 f928 	bl	8000e98 <__aeabi_fmul>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4605      	mov	r5, r0
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7f8 f923 	bl	8000e98 <__aeabi_fmul>
 8008c52:	4601      	mov	r1, r0
 8008c54:	4628      	mov	r0, r5
 8008c56:	f7f8 f815 	bl	8000c84 <__aeabi_fsub>
 8008c5a:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 8008c5e:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6872      	ldr	r2, [r6, #4]
 8008c64:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8008c66:	4621      	mov	r1, r4
 8008c68:	2304      	movs	r3, #4
 8008c6a:	f000 f893 	bl	8008d94 <arm_radix8_butterfly_f32>
 8008c6e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8008c70:	6872      	ldr	r2, [r6, #4]
 8008c72:	4621      	mov	r1, r4
 8008c74:	2304      	movs	r3, #4
 8008c76:	f000 f88d 	bl	8008d94 <arm_radix8_butterfly_f32>
 8008c7a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8008c7c:	6872      	ldr	r2, [r6, #4]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	2304      	movs	r3, #4
 8008c82:	f000 f887 	bl	8008d94 <arm_radix8_butterfly_f32>
 8008c86:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c88:	6872      	ldr	r2, [r6, #4]
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	b027      	add	sp, #156	@ 0x9c
 8008c90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	f000 b87e 	b.w	8008d94 <arm_radix8_butterfly_f32>

08008c98 <arm_cfft_f32>:
 8008c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9c:	2a01      	cmp	r2, #1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	4617      	mov	r7, r2
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	4698      	mov	r8, r3
 8008ca6:	8805      	ldrh	r5, [r0, #0]
 8008ca8:	d058      	beq.n	8008d5c <arm_cfft_f32+0xc4>
 8008caa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8008cae:	d050      	beq.n	8008d52 <arm_cfft_f32+0xba>
 8008cb0:	d916      	bls.n	8008ce0 <arm_cfft_f32+0x48>
 8008cb2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8008cb6:	d01a      	beq.n	8008cee <arm_cfft_f32+0x56>
 8008cb8:	d960      	bls.n	8008d7c <arm_cfft_f32+0xe4>
 8008cba:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8008cbe:	d048      	beq.n	8008d52 <arm_cfft_f32+0xba>
 8008cc0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008cc4:	d105      	bne.n	8008cd2 <arm_cfft_f32+0x3a>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	6872      	ldr	r2, [r6, #4]
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f000 f861 	bl	8008d94 <arm_radix8_butterfly_f32>
 8008cd2:	f1b8 0f00 	cmp.w	r8, #0
 8008cd6:	d111      	bne.n	8008cfc <arm_cfft_f32+0x64>
 8008cd8:	2f01      	cmp	r7, #1
 8008cda:	d016      	beq.n	8008d0a <arm_cfft_f32+0x72>
 8008cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce0:	2d20      	cmp	r5, #32
 8008ce2:	d036      	beq.n	8008d52 <arm_cfft_f32+0xba>
 8008ce4:	d94e      	bls.n	8008d84 <arm_cfft_f32+0xec>
 8008ce6:	2d40      	cmp	r5, #64	@ 0x40
 8008ce8:	d0ed      	beq.n	8008cc6 <arm_cfft_f32+0x2e>
 8008cea:	2d80      	cmp	r5, #128	@ 0x80
 8008cec:	d1f1      	bne.n	8008cd2 <arm_cfft_f32+0x3a>
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7ff fac1 	bl	8008278 <arm_cfft_radix8by2_f32>
 8008cf6:	f1b8 0f00 	cmp.w	r8, #0
 8008cfa:	d0ed      	beq.n	8008cd8 <arm_cfft_f32+0x40>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	89b1      	ldrh	r1, [r6, #12]
 8008d00:	68b2      	ldr	r2, [r6, #8]
 8008d02:	f7f7 fa65 	bl	80001d0 <arm_bitreversal_32>
 8008d06:	2f01      	cmp	r7, #1
 8008d08:	d1e8      	bne.n	8008cdc <arm_cfft_f32+0x44>
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f7f8 f86c 	bl	8000de8 <__aeabi_ui2f>
 8008d10:	4601      	mov	r1, r0
 8008d12:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008d16:	f7f8 f973 	bl	8001000 <__aeabi_fdiv>
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d0dd      	beq.n	8008cdc <arm_cfft_f32+0x44>
 8008d20:	3408      	adds	r4, #8
 8008d22:	2600      	movs	r6, #0
 8008d24:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8008d28:	4639      	mov	r1, r7
 8008d2a:	f7f8 f8b5 	bl	8000e98 <__aeabi_fmul>
 8008d2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008d32:	f844 0c08 	str.w	r0, [r4, #-8]
 8008d36:	4639      	mov	r1, r7
 8008d38:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 8008d3c:	f7f8 f8ac 	bl	8000e98 <__aeabi_fmul>
 8008d40:	3601      	adds	r6, #1
 8008d42:	42b5      	cmp	r5, r6
 8008d44:	f844 0c04 	str.w	r0, [r4, #-4]
 8008d48:	f104 0408 	add.w	r4, r4, #8
 8008d4c:	d1ea      	bne.n	8008d24 <arm_cfft_f32+0x8c>
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d52:	4630      	mov	r0, r6
 8008d54:	4621      	mov	r1, r4
 8008d56:	f7ff fbe9 	bl	800852c <arm_cfft_radix8by4_f32>
 8008d5a:	e7ba      	b.n	8008cd2 <arm_cfft_f32+0x3a>
 8008d5c:	b1ad      	cbz	r5, 8008d8a <arm_cfft_f32+0xf2>
 8008d5e:	f101 030c 	add.w	r3, r1, #12
 8008d62:	2100      	movs	r1, #0
 8008d64:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008d68:	3101      	adds	r1, #1
 8008d6a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8008d6e:	428d      	cmp	r5, r1
 8008d70:	f843 2c08 	str.w	r2, [r3, #-8]
 8008d74:	f103 0308 	add.w	r3, r3, #8
 8008d78:	d1f4      	bne.n	8008d64 <arm_cfft_f32+0xcc>
 8008d7a:	e796      	b.n	8008caa <arm_cfft_f32+0x12>
 8008d7c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008d80:	d0a1      	beq.n	8008cc6 <arm_cfft_f32+0x2e>
 8008d82:	e7a6      	b.n	8008cd2 <arm_cfft_f32+0x3a>
 8008d84:	2d10      	cmp	r5, #16
 8008d86:	d0b2      	beq.n	8008cee <arm_cfft_f32+0x56>
 8008d88:	e7a3      	b.n	8008cd2 <arm_cfft_f32+0x3a>
 8008d8a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8008d8e:	d890      	bhi.n	8008cb2 <arm_cfft_f32+0x1a>
 8008d90:	e7a6      	b.n	8008ce0 <arm_cfft_f32+0x48>
 8008d92:	bf00      	nop

08008d94 <arm_radix8_butterfly_f32>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	b0b1      	sub	sp, #196	@ 0xc4
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	932c      	str	r3, [sp, #176]	@ 0xb0
 8008d9e:	9119      	str	r1, [sp, #100]	@ 0x64
 8008da0:	9029      	str	r0, [sp, #164]	@ 0xa4
 8008da2:	9225      	str	r2, [sp, #148]	@ 0x94
 8008da4:	460b      	mov	r3, r1
 8008da6:	9118      	str	r1, [sp, #96]	@ 0x60
 8008da8:	08db      	lsrs	r3, r3, #3
 8008daa:	00d9      	lsls	r1, r3, #3
 8008dac:	460c      	mov	r4, r1
 8008dae:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008db0:	4639      	mov	r1, r7
 8008db2:	4421      	add	r1, r4
 8008db4:	005a      	lsls	r2, r3, #1
 8008db6:	9111      	str	r1, [sp, #68]	@ 0x44
 8008db8:	461e      	mov	r6, r3
 8008dba:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008dbc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008dbe:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008dc0:	9322      	str	r3, [sp, #136]	@ 0x88
 8008dc2:	441a      	add	r2, r3
 8008dc4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008dc8:	ebc6 7146 	rsb	r1, r6, r6, lsl #29
 8008dcc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008dd0:	eb03 0446 	add.w	r4, r3, r6, lsl #1
 8008dd4:	1828      	adds	r0, r5, r0
 8008dd6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8008dda:	00c9      	lsls	r1, r1, #3
 8008ddc:	9008      	str	r0, [sp, #32]
 8008dde:	9103      	str	r1, [sp, #12]
 8008de0:	1d15      	adds	r5, r2, #4
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
 8008de8:	9201      	str	r2, [sp, #4]
 8008dea:	9c03      	ldr	r4, [sp, #12]
 8008dec:	9a08      	ldr	r2, [sp, #32]
 8008dee:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008df0:	4422      	add	r2, r4
 8008df2:	eba6 0086 	sub.w	r0, r6, r6, lsl #2
 8008df6:	ebc6 7106 	rsb	r1, r6, r6, lsl #28
 8008dfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8008dfc:	00c2      	lsls	r2, r0, #3
 8008dfe:	9204      	str	r2, [sp, #16]
 8008e00:	010a      	lsls	r2, r1, #4
 8008e02:	9205      	str	r2, [sp, #20]
 8008e04:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008e08:	0132      	lsls	r2, r6, #4
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	46ba      	mov	sl, r7
 8008e0e:	9202      	str	r2, [sp, #8]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	462f      	mov	r7, r5
 8008e14:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008e16:	9e00      	ldr	r6, [sp, #0]
 8008e18:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	9b04      	ldr	r3, [sp, #16]
 8008e20:	f852 5036 	ldr.w	r5, [r2, r6, lsl #3]
 8008e24:	f85a 4003 	ldr.w	r4, [sl, r3]
 8008e28:	4628      	mov	r0, r5
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7f7 ff2c 	bl	8000c88 <__addsf3>
 8008e30:	4621      	mov	r1, r4
 8008e32:	4683      	mov	fp, r0
 8008e34:	4628      	mov	r0, r5
 8008e36:	f7f7 ff25 	bl	8000c84 <__aeabi_fsub>
 8008e3a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008e40:	4611      	mov	r1, r2
 8008e42:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8008e46:	f851 5036 	ldr.w	r5, [r1, r6, lsl #3]
 8008e4a:	9600      	str	r6, [sp, #0]
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7f7 ff1a 	bl	8000c88 <__addsf3>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4606      	mov	r6, r0
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f7f7 ff13 	bl	8000c84 <__aeabi_fsub>
 8008e5e:	9908      	ldr	r1, [sp, #32]
 8008e60:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e62:	460c      	mov	r4, r1
 8008e64:	9900      	ldr	r1, [sp, #0]
 8008e66:	f854 8031 	ldr.w	r8, [r4, r1, lsl #3]
 8008e6a:	9c03      	ldr	r4, [sp, #12]
 8008e6c:	f85a 5004 	ldr.w	r5, [sl, r4]
 8008e70:	4640      	mov	r0, r8
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 ff08 	bl	8000c88 <__addsf3>
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	f7f7 ff01 	bl	8000c84 <__aeabi_fsub>
 8008e82:	f857 9c04 	ldr.w	r9, [r7, #-4]
 8008e86:	f8da 8000 	ldr.w	r8, [sl]
 8008e8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	4648      	mov	r0, r9
 8008e90:	f7f7 fefa 	bl	8000c88 <__addsf3>
 8008e94:	4641      	mov	r1, r8
 8008e96:	4605      	mov	r5, r0
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f7f7 fef3 	bl	8000c84 <__aeabi_fsub>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	900c      	str	r0, [sp, #48]	@ 0x30
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f7f7 feee 	bl	8000c84 <__aeabi_fsub>
 8008ea8:	46d8      	mov	r8, fp
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4683      	mov	fp, r0
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f7f7 feea 	bl	8000c88 <__addsf3>
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7f7 fee3 	bl	8000c84 <__aeabi_fsub>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	900d      	str	r0, [sp, #52]	@ 0x34
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7f7 fee0 	bl	8000c88 <__addsf3>
 8008ec8:	4605      	mov	r5, r0
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7f7 fedb 	bl	8000c88 <__addsf3>
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8008edc:	4620      	mov	r0, r4
 8008ede:	f7f7 fed1 	bl	8000c84 <__aeabi_fsub>
 8008ee2:	9d04      	ldr	r5, [sp, #16]
 8008ee4:	f84a 0005 	str.w	r0, [sl, r5]
 8008ee8:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008eea:	597d      	ldr	r5, [r7, r5]
 8008eec:	f857 4031 	ldr.w	r4, [r7, r1, lsl #3]
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f7f7 fec8 	bl	8000c88 <__addsf3>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4680      	mov	r8, r0
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7f7 fec1 	bl	8000c84 <__aeabi_fsub>
 8008f02:	9a02      	ldr	r2, [sp, #8]
 8008f04:	9e05      	ldr	r6, [sp, #20]
 8008f06:	58bc      	ldr	r4, [r7, r2]
 8008f08:	59bd      	ldr	r5, [r7, r6]
 8008f0a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f7f7 feba 	bl	8000c88 <__addsf3>
 8008f14:	4621      	mov	r1, r4
 8008f16:	9006      	str	r0, [sp, #24]
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f7f7 feb3 	bl	8000c84 <__aeabi_fsub>
 8008f1e:	9a01      	ldr	r2, [sp, #4]
 8008f20:	9e03      	ldr	r6, [sp, #12]
 8008f22:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8008f24:	59bd      	ldr	r5, [r7, r6]
 8008f26:	f852 4034 	ldr.w	r4, [r2, r4, lsl #3]
 8008f2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 feaa 	bl	8000c88 <__addsf3>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4606      	mov	r6, r0
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f7f7 fea3 	bl	8000c84 <__aeabi_fsub>
 8008f3e:	9c01      	ldr	r4, [sp, #4]
 8008f40:	9905      	ldr	r1, [sp, #20]
 8008f42:	9007      	str	r0, [sp, #28]
 8008f44:	5865      	ldr	r5, [r4, r1]
 8008f46:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7f7 fe9b 	bl	8000c88 <__addsf3>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4681      	mov	r9, r0
 8008f56:	4628      	mov	r0, r5
 8008f58:	f7f7 fe94 	bl	8000c84 <__aeabi_fsub>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4640      	mov	r0, r8
 8008f62:	f7f7 fe8f 	bl	8000c84 <__aeabi_fsub>
 8008f66:	4631      	mov	r1, r6
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7f7 fe8c 	bl	8000c88 <__addsf3>
 8008f70:	4649      	mov	r1, r9
 8008f72:	4680      	mov	r8, r0
 8008f74:	9806      	ldr	r0, [sp, #24]
 8008f76:	f7f7 fe85 	bl	8000c84 <__aeabi_fsub>
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	9806      	ldr	r0, [sp, #24]
 8008f80:	f7f7 fe82 	bl	8000c88 <__addsf3>
 8008f84:	4681      	mov	r9, r0
 8008f86:	4649      	mov	r1, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f7f7 fe7d 	bl	8000c88 <__addsf3>
 8008f8e:	9a04      	ldr	r2, [sp, #16]
 8008f90:	4649      	mov	r1, r9
 8008f92:	50b8      	str	r0, [r7, r2]
 8008f94:	4640      	mov	r0, r8
 8008f96:	f7f7 fe75 	bl	8000c84 <__aeabi_fsub>
 8008f9a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f7f7 fe70 	bl	8000c88 <__addsf3>
 8008fa8:	9b08      	ldr	r3, [sp, #32]
 8008faa:	9a00      	ldr	r2, [sp, #0]
 8008fac:	469e      	mov	lr, r3
 8008fae:	4631      	mov	r1, r6
 8008fb0:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	f7f7 fe65 	bl	8000c84 <__aeabi_fsub>
 8008fba:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8008fbe:	9e03      	ldr	r6, [sp, #12]
 8008fc0:	4659      	mov	r1, fp
 8008fc2:	f84a 0006 	str.w	r0, [sl, r6]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7f7 fe5c 	bl	8000c84 <__aeabi_fsub>
 8008fcc:	9e03      	ldr	r6, [sp, #12]
 8008fce:	4659      	mov	r1, fp
 8008fd0:	51b8      	str	r0, [r7, r6]
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f7f7 fe58 	bl	8000c88 <__addsf3>
 8008fd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8008fdc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 8008fe0:	9e01      	ldr	r6, [sp, #4]
 8008fe2:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8008fe4:	4641      	mov	r1, r8
 8008fe6:	f846 0034 	str.w	r0, [r6, r4, lsl #3]
 8008fea:	4658      	mov	r0, fp
 8008fec:	f7f7 fe4a 	bl	8000c84 <__aeabi_fsub>
 8008ff0:	497e      	ldr	r1, [pc, #504]	@ (80091ec <arm_radix8_butterfly_f32+0x458>)
 8008ff2:	f7f7 ff51 	bl	8000e98 <__aeabi_fmul>
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	4658      	mov	r0, fp
 8008ffc:	f7f7 fe44 	bl	8000c88 <__addsf3>
 8009000:	497a      	ldr	r1, [pc, #488]	@ (80091ec <arm_radix8_butterfly_f32+0x458>)
 8009002:	f7f7 ff49 	bl	8000e98 <__aeabi_fmul>
 8009006:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800900a:	4604      	mov	r4, r0
 800900c:	4629      	mov	r1, r5
 800900e:	4640      	mov	r0, r8
 8009010:	f7f7 fe38 	bl	8000c84 <__aeabi_fsub>
 8009014:	4975      	ldr	r1, [pc, #468]	@ (80091ec <arm_radix8_butterfly_f32+0x458>)
 8009016:	f7f7 ff3f 	bl	8000e98 <__aeabi_fmul>
 800901a:	4629      	mov	r1, r5
 800901c:	4606      	mov	r6, r0
 800901e:	4640      	mov	r0, r8
 8009020:	f7f7 fe32 	bl	8000c88 <__addsf3>
 8009024:	4971      	ldr	r1, [pc, #452]	@ (80091ec <arm_radix8_butterfly_f32+0x458>)
 8009026:	f7f7 ff37 	bl	8000e98 <__aeabi_fmul>
 800902a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800902c:	4683      	mov	fp, r0
 800902e:	4649      	mov	r1, r9
 8009030:	4628      	mov	r0, r5
 8009032:	f7f7 fe27 	bl	8000c84 <__aeabi_fsub>
 8009036:	4649      	mov	r1, r9
 8009038:	4680      	mov	r8, r0
 800903a:	4628      	mov	r0, r5
 800903c:	f7f7 fe24 	bl	8000c88 <__addsf3>
 8009040:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8009044:	9006      	str	r0, [sp, #24]
 8009046:	4621      	mov	r1, r4
 8009048:	4648      	mov	r0, r9
 800904a:	f7f7 fe1b 	bl	8000c84 <__aeabi_fsub>
 800904e:	4621      	mov	r1, r4
 8009050:	4605      	mov	r5, r0
 8009052:	4648      	mov	r0, r9
 8009054:	f7f7 fe18 	bl	8000c88 <__addsf3>
 8009058:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800905c:	9009      	str	r0, [sp, #36]	@ 0x24
 800905e:	4631      	mov	r1, r6
 8009060:	4648      	mov	r0, r9
 8009062:	f7f7 fe0f 	bl	8000c84 <__aeabi_fsub>
 8009066:	4631      	mov	r1, r6
 8009068:	4604      	mov	r4, r0
 800906a:	4648      	mov	r0, r9
 800906c:	f7f7 fe0c 	bl	8000c88 <__addsf3>
 8009070:	4659      	mov	r1, fp
 8009072:	4606      	mov	r6, r0
 8009074:	9807      	ldr	r0, [sp, #28]
 8009076:	f7f7 fe05 	bl	8000c84 <__aeabi_fsub>
 800907a:	4659      	mov	r1, fp
 800907c:	4681      	mov	r9, r0
 800907e:	9807      	ldr	r0, [sp, #28]
 8009080:	f7f7 fe02 	bl	8000c88 <__addsf3>
 8009084:	4683      	mov	fp, r0
 8009086:	4659      	mov	r1, fp
 8009088:	9806      	ldr	r0, [sp, #24]
 800908a:	f7f7 fdfd 	bl	8000c88 <__addsf3>
 800908e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009090:	469e      	mov	lr, r3
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	4659      	mov	r1, fp
 8009096:	f84e 0033 	str.w	r0, [lr, r3, lsl #3]
 800909a:	9806      	ldr	r0, [sp, #24]
 800909c:	f7f7 fdf2 	bl	8000c84 <__aeabi_fsub>
 80090a0:	4649      	mov	r1, r9
 80090a2:	f8ca 0000 	str.w	r0, [sl]
 80090a6:	4640      	mov	r0, r8
 80090a8:	f7f7 fdee 	bl	8000c88 <__addsf3>
 80090ac:	9a01      	ldr	r2, [sp, #4]
 80090ae:	4649      	mov	r1, r9
 80090b0:	f842 0c04 	str.w	r0, [r2, #-4]
 80090b4:	4640      	mov	r0, r8
 80090b6:	f7f7 fde5 	bl	8000c84 <__aeabi_fsub>
 80090ba:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80090be:	f847 0c04 	str.w	r0, [r7, #-4]
 80090c2:	4641      	mov	r1, r8
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7f7 fddd 	bl	8000c84 <__aeabi_fsub>
 80090ca:	9b05      	ldr	r3, [sp, #20]
 80090cc:	4641      	mov	r1, r8
 80090ce:	50f8      	str	r0, [r7, r3]
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7f7 fdd9 	bl	8000c88 <__addsf3>
 80090d6:	4629      	mov	r1, r5
 80090d8:	f8ca 0004 	str.w	r0, [sl, #4]
 80090dc:	4620      	mov	r0, r4
 80090de:	f7f7 fdd1 	bl	8000c84 <__aeabi_fsub>
 80090e2:	4629      	mov	r1, r5
 80090e4:	9d02      	ldr	r5, [sp, #8]
 80090e6:	5178      	str	r0, [r7, r5]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7f7 fdcd 	bl	8000c88 <__addsf3>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	9a01      	ldr	r2, [sp, #4]
 80090f2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80090f4:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 80090f8:	9905      	ldr	r1, [sp, #20]
 80090fa:	191c      	adds	r4, r3, r4
 80090fc:	4613      	mov	r3, r2
 80090fe:	4463      	add	r3, ip
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009104:	9400      	str	r4, [sp, #0]
 8009106:	42a3      	cmp	r3, r4
 8009108:	44e2      	add	sl, ip
 800910a:	5050      	str	r0, [r2, r1]
 800910c:	4467      	add	r7, ip
 800910e:	f63f ae81 	bhi.w	8008e14 <arm_radix8_butterfly_f32+0x80>
 8009112:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8009114:	2d07      	cmp	r5, #7
 8009116:	f240 82e8 	bls.w	80096ea <arm_radix8_butterfly_f32+0x956>
 800911a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800911c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800911e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8009120:	461a      	mov	r2, r3
 8009122:	1b73      	subs	r3, r6, r5
 8009124:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	1908      	adds	r0, r1, r4
 800912c:	442a      	add	r2, r5
 800912e:	9305      	str	r3, [sp, #20]
 8009130:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009132:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8009134:	00c9      	lsls	r1, r1, #3
 8009136:	00c0      	lsls	r0, r0, #3
 8009138:	0112      	lsls	r2, r2, #4
 800913a:	460f      	mov	r7, r1
 800913c:	912f      	str	r1, [sp, #188]	@ 0xbc
 800913e:	9206      	str	r2, [sp, #24]
 8009140:	4621      	mov	r1, r4
 8009142:	181a      	adds	r2, r3, r0
 8009144:	00e4      	lsls	r4, r4, #3
 8009146:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009148:	19da      	adds	r2, r3, r7
 800914a:	4423      	add	r3, r4
 800914c:	9326      	str	r3, [sp, #152]	@ 0x98
 800914e:	016b      	lsls	r3, r5, #5
 8009150:	942d      	str	r4, [sp, #180]	@ 0xb4
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8009156:	902e      	str	r0, [sp, #184]	@ 0xb8
 8009158:	2301      	movs	r3, #1
 800915a:	9227      	str	r2, [sp, #156]	@ 0x9c
 800915c:	9123      	str	r1, [sp, #140]	@ 0x8c
 800915e:	9324      	str	r3, [sp, #144]	@ 0x90
 8009160:	46b0      	mov	r8, r6
 8009162:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009164:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8009166:	010f      	lsls	r7, r1, #4
 8009168:	19c6      	adds	r6, r0, r7
 800916a:	00cb      	lsls	r3, r1, #3
 800916c:	18f5      	adds	r5, r6, r3
 800916e:	eb05 0903 	add.w	r9, r5, r3
 8009172:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009176:	1a5b      	subs	r3, r3, r1
 8009178:	eb09 0ec2 	add.w	lr, r9, r2, lsl #3
 800917c:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8009180:	930c      	str	r3, [sp, #48]	@ 0x30
 8009182:	0149      	lsls	r1, r1, #5
 8009184:	f8de 3004 	ldr.w	r3, [lr, #4]
 8009188:	686d      	ldr	r5, [r5, #4]
 800918a:	9321      	str	r3, [sp, #132]	@ 0x84
 800918c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009190:	59c7      	ldr	r7, [r0, r7]
 8009192:	951e      	str	r5, [sp, #120]	@ 0x78
 8009194:	930e      	str	r3, [sp, #56]	@ 0x38
 8009196:	4605      	mov	r5, r0
 8009198:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
 800919c:	5840      	ldr	r0, [r0, r1]
 800919e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80091a0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80091a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091a4:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
 80091a8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80091aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	931b      	str	r3, [sp, #108]	@ 0x6c
 80091b0:	680b      	ldr	r3, [r1, #0]
 80091b2:	931c      	str	r3, [sp, #112]	@ 0x70
 80091b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80091b6:	6876      	ldr	r6, [r6, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80091bc:	6853      	ldr	r3, [r2, #4]
 80091be:	931f      	str	r3, [sp, #124]	@ 0x7c
 80091c0:	684b      	ldr	r3, [r1, #4]
 80091c2:	970a      	str	r7, [sp, #40]	@ 0x28
 80091c4:	f108 0208 	add.w	r2, r8, #8
 80091c8:	961d      	str	r6, [sp, #116]	@ 0x74
 80091ca:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80091ce:	f104 0308 	add.w	r3, r4, #8
 80091d2:	461f      	mov	r7, r3
 80091d4:	932b      	str	r3, [sp, #172]	@ 0xac
 80091d6:	922a      	str	r2, [sp, #168]	@ 0xa8
 80091d8:	f104 010c 	add.w	r1, r4, #12
 80091dc:	f108 030c 	add.w	r3, r8, #12
 80091e0:	9201      	str	r2, [sp, #4]
 80091e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80091e4:	9100      	str	r1, [sp, #0]
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	46bb      	mov	fp, r7
 80091ea:	e001      	b.n	80091f0 <arm_radix8_butterfly_f32+0x45c>
 80091ec:	3f3504f3 	.word	0x3f3504f3
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	9f04      	ldr	r7, [sp, #16]
 80091f4:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80091f8:	f85b 4007 	ldr.w	r4, [fp, r7]
 80091fc:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
 8009200:	4621      	mov	r1, r4
 8009202:	4628      	mov	r0, r5
 8009204:	9216      	str	r2, [sp, #88]	@ 0x58
 8009206:	f7f7 fd3f 	bl	8000c88 <__addsf3>
 800920a:	4621      	mov	r1, r4
 800920c:	4606      	mov	r6, r0
 800920e:	4628      	mov	r0, r5
 8009210:	f7f7 fd38 	bl	8000c84 <__aeabi_fsub>
 8009214:	9c01      	ldr	r4, [sp, #4]
 8009216:	9903      	ldr	r1, [sp, #12]
 8009218:	900f      	str	r0, [sp, #60]	@ 0x3c
 800921a:	46a6      	mov	lr, r4
 800921c:	f851 5c04 	ldr.w	r5, [r1, #-4]
 8009220:	f85e 4007 	ldr.w	r4, [lr, r7]
 8009224:	9704      	str	r7, [sp, #16]
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f7f7 fd2d 	bl	8000c88 <__addsf3>
 800922e:	4621      	mov	r1, r4
 8009230:	4607      	mov	r7, r0
 8009232:	4628      	mov	r0, r5
 8009234:	f7f7 fd26 	bl	8000c84 <__aeabi_fsub>
 8009238:	9902      	ldr	r1, [sp, #8]
 800923a:	9d06      	ldr	r5, [sp, #24]
 800923c:	f85b 8001 	ldr.w	r8, [fp, r1]
 8009240:	f85b 5005 	ldr.w	r5, [fp, r5]
 8009244:	9010      	str	r0, [sp, #64]	@ 0x40
 8009246:	4629      	mov	r1, r5
 8009248:	4640      	mov	r0, r8
 800924a:	f7f7 fd1d 	bl	8000c88 <__addsf3>
 800924e:	4629      	mov	r1, r5
 8009250:	4604      	mov	r4, r0
 8009252:	4640      	mov	r0, r8
 8009254:	f7f7 fd16 	bl	8000c84 <__aeabi_fsub>
 8009258:	9d01      	ldr	r5, [sp, #4]
 800925a:	9a05      	ldr	r2, [sp, #20]
 800925c:	9011      	str	r0, [sp, #68]	@ 0x44
 800925e:	46ae      	mov	lr, r5
 8009260:	9d02      	ldr	r5, [sp, #8]
 8009262:	f85b 8002 	ldr.w	r8, [fp, r2]
 8009266:	f85e 9005 	ldr.w	r9, [lr, r5]
 800926a:	4641      	mov	r1, r8
 800926c:	4648      	mov	r0, r9
 800926e:	f7f7 fd0b 	bl	8000c88 <__addsf3>
 8009272:	4641      	mov	r1, r8
 8009274:	4605      	mov	r5, r0
 8009276:	4648      	mov	r0, r9
 8009278:	f7f7 fd04 	bl	8000c84 <__aeabi_fsub>
 800927c:	4621      	mov	r1, r4
 800927e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009280:	4630      	mov	r0, r6
 8009282:	f7f7 fcff 	bl	8000c84 <__aeabi_fsub>
 8009286:	4621      	mov	r1, r4
 8009288:	9007      	str	r0, [sp, #28]
 800928a:	4630      	mov	r0, r6
 800928c:	f7f7 fcfc 	bl	8000c88 <__addsf3>
 8009290:	4629      	mov	r1, r5
 8009292:	4604      	mov	r4, r0
 8009294:	4638      	mov	r0, r7
 8009296:	f7f7 fcf5 	bl	8000c84 <__aeabi_fsub>
 800929a:	4629      	mov	r1, r5
 800929c:	4606      	mov	r6, r0
 800929e:	4638      	mov	r0, r7
 80092a0:	f7f7 fcf2 	bl	8000c88 <__addsf3>
 80092a4:	4605      	mov	r5, r0
 80092a6:	4629      	mov	r1, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7f7 fced 	bl	8000c88 <__addsf3>
 80092ae:	9a00      	ldr	r2, [sp, #0]
 80092b0:	4629      	mov	r1, r5
 80092b2:	f842 0c04 	str.w	r0, [r2, #-4]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7f7 fce4 	bl	8000c84 <__aeabi_fsub>
 80092bc:	f8db 7004 	ldr.w	r7, [fp, #4]
 80092c0:	9900      	ldr	r1, [sp, #0]
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	58cc      	ldr	r4, [r1, r3]
 80092c6:	4605      	mov	r5, r0
 80092c8:	4621      	mov	r1, r4
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7f7 fcdc 	bl	8000c88 <__addsf3>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4682      	mov	sl, r0
 80092d4:	4638      	mov	r0, r7
 80092d6:	f7f7 fcd5 	bl	8000c84 <__aeabi_fsub>
 80092da:	9a03      	ldr	r2, [sp, #12]
 80092dc:	9f01      	ldr	r7, [sp, #4]
 80092de:	9c04      	ldr	r4, [sp, #16]
 80092e0:	687f      	ldr	r7, [r7, #4]
 80092e2:	5914      	ldr	r4, [r2, r4]
 80092e4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80092e6:	4621      	mov	r1, r4
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7f7 fccd 	bl	8000c88 <__addsf3>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4681      	mov	r9, r0
 80092f2:	4638      	mov	r0, r7
 80092f4:	f7f7 fcc6 	bl	8000c84 <__aeabi_fsub>
 80092f8:	9a02      	ldr	r2, [sp, #8]
 80092fa:	9b06      	ldr	r3, [sp, #24]
 80092fc:	9900      	ldr	r1, [sp, #0]
 80092fe:	9014      	str	r0, [sp, #80]	@ 0x50
 8009300:	588f      	ldr	r7, [r1, r2]
 8009302:	58cc      	ldr	r4, [r1, r3]
 8009304:	4638      	mov	r0, r7
 8009306:	4621      	mov	r1, r4
 8009308:	f7f7 fcbe 	bl	8000c88 <__addsf3>
 800930c:	4621      	mov	r1, r4
 800930e:	4680      	mov	r8, r0
 8009310:	4638      	mov	r0, r7
 8009312:	f7f7 fcb7 	bl	8000c84 <__aeabi_fsub>
 8009316:	9f03      	ldr	r7, [sp, #12]
 8009318:	9900      	ldr	r1, [sp, #0]
 800931a:	9c05      	ldr	r4, [sp, #20]
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	46be      	mov	lr, r7
 8009320:	9f02      	ldr	r7, [sp, #8]
 8009322:	f85e 3007 	ldr.w	r3, [lr, r7]
 8009326:	590f      	ldr	r7, [r1, r4]
 8009328:	9315      	str	r3, [sp, #84]	@ 0x54
 800932a:	4639      	mov	r1, r7
 800932c:	4618      	mov	r0, r3
 800932e:	f7f7 fcab 	bl	8000c88 <__addsf3>
 8009332:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009334:	4604      	mov	r4, r0
 8009336:	4639      	mov	r1, r7
 8009338:	4618      	mov	r0, r3
 800933a:	f7f7 fca3 	bl	8000c84 <__aeabi_fsub>
 800933e:	4641      	mov	r1, r8
 8009340:	9015      	str	r0, [sp, #84]	@ 0x54
 8009342:	4650      	mov	r0, sl
 8009344:	f7f7 fc9e 	bl	8000c84 <__aeabi_fsub>
 8009348:	4641      	mov	r1, r8
 800934a:	4607      	mov	r7, r0
 800934c:	4650      	mov	r0, sl
 800934e:	f7f7 fc9b 	bl	8000c88 <__addsf3>
 8009352:	4621      	mov	r1, r4
 8009354:	4680      	mov	r8, r0
 8009356:	4648      	mov	r0, r9
 8009358:	f7f7 fc94 	bl	8000c84 <__aeabi_fsub>
 800935c:	4621      	mov	r1, r4
 800935e:	4682      	mov	sl, r0
 8009360:	4648      	mov	r0, r9
 8009362:	f7f7 fc91 	bl	8000c88 <__addsf3>
 8009366:	4651      	mov	r1, sl
 8009368:	4681      	mov	r9, r0
 800936a:	9807      	ldr	r0, [sp, #28]
 800936c:	f7f7 fc8c 	bl	8000c88 <__addsf3>
 8009370:	4651      	mov	r1, sl
 8009372:	4604      	mov	r4, r0
 8009374:	9807      	ldr	r0, [sp, #28]
 8009376:	f7f7 fc85 	bl	8000c84 <__aeabi_fsub>
 800937a:	4649      	mov	r1, r9
 800937c:	4682      	mov	sl, r0
 800937e:	4640      	mov	r0, r8
 8009380:	f7f7 fc82 	bl	8000c88 <__addsf3>
 8009384:	4649      	mov	r1, r9
 8009386:	f8cb 0004 	str.w	r0, [fp, #4]
 800938a:	4640      	mov	r0, r8
 800938c:	f7f7 fc7a 	bl	8000c84 <__aeabi_fsub>
 8009390:	4631      	mov	r1, r6
 8009392:	4681      	mov	r9, r0
 8009394:	4638      	mov	r0, r7
 8009396:	f7f7 fc75 	bl	8000c84 <__aeabi_fsub>
 800939a:	4631      	mov	r1, r6
 800939c:	4680      	mov	r8, r0
 800939e:	4638      	mov	r0, r7
 80093a0:	f7f7 fc72 	bl	8000c88 <__addsf3>
 80093a4:	4629      	mov	r1, r5
 80093a6:	4606      	mov	r6, r0
 80093a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80093aa:	f7f7 fd75 	bl	8000e98 <__aeabi_fmul>
 80093ae:	4649      	mov	r1, r9
 80093b0:	4607      	mov	r7, r0
 80093b2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80093b4:	f7f7 fd70 	bl	8000e98 <__aeabi_fmul>
 80093b8:	4601      	mov	r1, r0
 80093ba:	4638      	mov	r0, r7
 80093bc:	f7f7 fc64 	bl	8000c88 <__addsf3>
 80093c0:	9a04      	ldr	r2, [sp, #16]
 80093c2:	4649      	mov	r1, r9
 80093c4:	f84b 0002 	str.w	r0, [fp, r2]
 80093c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80093ca:	f7f7 fd65 	bl	8000e98 <__aeabi_fmul>
 80093ce:	4629      	mov	r1, r5
 80093d0:	4607      	mov	r7, r0
 80093d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80093d4:	f7f7 fd60 	bl	8000e98 <__aeabi_fmul>
 80093d8:	4601      	mov	r1, r0
 80093da:	4638      	mov	r0, r7
 80093dc:	f7f7 fc52 	bl	8000c84 <__aeabi_fsub>
 80093e0:	9f00      	ldr	r7, [sp, #0]
 80093e2:	9d04      	ldr	r5, [sp, #16]
 80093e4:	4621      	mov	r1, r4
 80093e6:	5178      	str	r0, [r7, r5]
 80093e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093ea:	f7f7 fd55 	bl	8000e98 <__aeabi_fmul>
 80093ee:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80093f2:	4605      	mov	r5, r0
 80093f4:	4641      	mov	r1, r8
 80093f6:	4648      	mov	r0, r9
 80093f8:	f7f7 fd4e 	bl	8000e98 <__aeabi_fmul>
 80093fc:	4601      	mov	r1, r0
 80093fe:	4628      	mov	r0, r5
 8009400:	f7f7 fc42 	bl	8000c88 <__addsf3>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	4641      	mov	r1, r8
 8009408:	f84b 0003 	str.w	r0, [fp, r3]
 800940c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800940e:	f7f7 fd43 	bl	8000e98 <__aeabi_fmul>
 8009412:	4621      	mov	r1, r4
 8009414:	4605      	mov	r5, r0
 8009416:	4648      	mov	r0, r9
 8009418:	f7f7 fd3e 	bl	8000e98 <__aeabi_fmul>
 800941c:	4601      	mov	r1, r0
 800941e:	4628      	mov	r0, r5
 8009420:	f7f7 fc30 	bl	8000c84 <__aeabi_fsub>
 8009424:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8009428:	9c02      	ldr	r4, [sp, #8]
 800942a:	4651      	mov	r1, sl
 800942c:	5138      	str	r0, [r7, r4]
 800942e:	4640      	mov	r0, r8
 8009430:	f7f7 fd32 	bl	8000e98 <__aeabi_fmul>
 8009434:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 8009438:	4604      	mov	r4, r0
 800943a:	4631      	mov	r1, r6
 800943c:	4648      	mov	r0, r9
 800943e:	f7f7 fd2b 	bl	8000e98 <__aeabi_fmul>
 8009442:	4601      	mov	r1, r0
 8009444:	4620      	mov	r0, r4
 8009446:	f7f7 fc1f 	bl	8000c88 <__addsf3>
 800944a:	4631      	mov	r1, r6
 800944c:	9e06      	ldr	r6, [sp, #24]
 800944e:	f84b 0006 	str.w	r0, [fp, r6]
 8009452:	4640      	mov	r0, r8
 8009454:	f7f7 fd20 	bl	8000e98 <__aeabi_fmul>
 8009458:	4651      	mov	r1, sl
 800945a:	4604      	mov	r4, r0
 800945c:	4648      	mov	r0, r9
 800945e:	f7f7 fd1b 	bl	8000e98 <__aeabi_fmul>
 8009462:	4601      	mov	r1, r0
 8009464:	4620      	mov	r0, r4
 8009466:	f7f7 fc0d 	bl	8000c84 <__aeabi_fsub>
 800946a:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800946e:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8009472:	51b8      	str	r0, [r7, r6]
 8009474:	4641      	mov	r1, r8
 8009476:	4648      	mov	r0, r9
 8009478:	9700      	str	r7, [sp, #0]
 800947a:	f7f7 fc03 	bl	8000c84 <__aeabi_fsub>
 800947e:	499c      	ldr	r1, [pc, #624]	@ (80096f0 <arm_radix8_butterfly_f32+0x95c>)
 8009480:	f7f7 fd0a 	bl	8000e98 <__aeabi_fmul>
 8009484:	4641      	mov	r1, r8
 8009486:	4604      	mov	r4, r0
 8009488:	4648      	mov	r0, r9
 800948a:	f7f7 fbfd 	bl	8000c88 <__addsf3>
 800948e:	4998      	ldr	r1, [pc, #608]	@ (80096f0 <arm_radix8_butterfly_f32+0x95c>)
 8009490:	f7f7 fd02 	bl	8000e98 <__aeabi_fmul>
 8009494:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009498:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800949c:	4607      	mov	r7, r0
 800949e:	4641      	mov	r1, r8
 80094a0:	4650      	mov	r0, sl
 80094a2:	f7f7 fbef 	bl	8000c84 <__aeabi_fsub>
 80094a6:	4992      	ldr	r1, [pc, #584]	@ (80096f0 <arm_radix8_butterfly_f32+0x95c>)
 80094a8:	f7f7 fcf6 	bl	8000e98 <__aeabi_fmul>
 80094ac:	4641      	mov	r1, r8
 80094ae:	4681      	mov	r9, r0
 80094b0:	4650      	mov	r0, sl
 80094b2:	f7f7 fbe9 	bl	8000c88 <__addsf3>
 80094b6:	498e      	ldr	r1, [pc, #568]	@ (80096f0 <arm_radix8_butterfly_f32+0x95c>)
 80094b8:	f7f7 fcee 	bl	8000e98 <__aeabi_fmul>
 80094bc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80094be:	4605      	mov	r5, r0
 80094c0:	4621      	mov	r1, r4
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7f7 fbde 	bl	8000c84 <__aeabi_fsub>
 80094c8:	4621      	mov	r1, r4
 80094ca:	9007      	str	r0, [sp, #28]
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7f7 fbdb 	bl	8000c88 <__addsf3>
 80094d2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80094d6:	4604      	mov	r4, r0
 80094d8:	4639      	mov	r1, r7
 80094da:	4640      	mov	r0, r8
 80094dc:	f7f7 fbd2 	bl	8000c84 <__aeabi_fsub>
 80094e0:	4639      	mov	r1, r7
 80094e2:	4606      	mov	r6, r0
 80094e4:	4640      	mov	r0, r8
 80094e6:	f7f7 fbcf 	bl	8000c88 <__addsf3>
 80094ea:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80094ee:	4680      	mov	r8, r0
 80094f0:	4649      	mov	r1, r9
 80094f2:	4650      	mov	r0, sl
 80094f4:	f7f7 fbc6 	bl	8000c84 <__aeabi_fsub>
 80094f8:	4649      	mov	r1, r9
 80094fa:	4607      	mov	r7, r0
 80094fc:	4650      	mov	r0, sl
 80094fe:	f7f7 fbc3 	bl	8000c88 <__addsf3>
 8009502:	4629      	mov	r1, r5
 8009504:	4681      	mov	r9, r0
 8009506:	9808      	ldr	r0, [sp, #32]
 8009508:	f7f7 fbbc 	bl	8000c84 <__aeabi_fsub>
 800950c:	4629      	mov	r1, r5
 800950e:	4682      	mov	sl, r0
 8009510:	9808      	ldr	r0, [sp, #32]
 8009512:	f7f7 fbb9 	bl	8000c88 <__addsf3>
 8009516:	4603      	mov	r3, r0
 8009518:	4619      	mov	r1, r3
 800951a:	4620      	mov	r0, r4
 800951c:	9308      	str	r3, [sp, #32]
 800951e:	f7f7 fbb3 	bl	8000c88 <__addsf3>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	4605      	mov	r5, r0
 8009526:	4619      	mov	r1, r3
 8009528:	4620      	mov	r0, r4
 800952a:	f7f7 fbab 	bl	8000c84 <__aeabi_fsub>
 800952e:	4651      	mov	r1, sl
 8009530:	4604      	mov	r4, r0
 8009532:	9807      	ldr	r0, [sp, #28]
 8009534:	f7f7 fba8 	bl	8000c88 <__addsf3>
 8009538:	4651      	mov	r1, sl
 800953a:	9008      	str	r0, [sp, #32]
 800953c:	9807      	ldr	r0, [sp, #28]
 800953e:	f7f7 fba1 	bl	8000c84 <__aeabi_fsub>
 8009542:	4641      	mov	r1, r8
 8009544:	9007      	str	r0, [sp, #28]
 8009546:	4648      	mov	r0, r9
 8009548:	f7f7 fb9c 	bl	8000c84 <__aeabi_fsub>
 800954c:	4641      	mov	r1, r8
 800954e:	4682      	mov	sl, r0
 8009550:	4648      	mov	r0, r9
 8009552:	f7f7 fb99 	bl	8000c88 <__addsf3>
 8009556:	4631      	mov	r1, r6
 8009558:	4681      	mov	r9, r0
 800955a:	4638      	mov	r0, r7
 800955c:	f7f7 fb92 	bl	8000c84 <__aeabi_fsub>
 8009560:	4631      	mov	r1, r6
 8009562:	4680      	mov	r8, r0
 8009564:	4638      	mov	r0, r7
 8009566:	f7f7 fb8f 	bl	8000c88 <__addsf3>
 800956a:	4629      	mov	r1, r5
 800956c:	4606      	mov	r6, r0
 800956e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009570:	f7f7 fc92 	bl	8000e98 <__aeabi_fmul>
 8009574:	4651      	mov	r1, sl
 8009576:	4607      	mov	r7, r0
 8009578:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800957a:	f7f7 fc8d 	bl	8000e98 <__aeabi_fmul>
 800957e:	4601      	mov	r1, r0
 8009580:	4638      	mov	r0, r7
 8009582:	f7f7 fb81 	bl	8000c88 <__addsf3>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	4651      	mov	r1, sl
 800958a:	f843 0c04 	str.w	r0, [r3, #-4]
 800958e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009590:	f7f7 fc82 	bl	8000e98 <__aeabi_fmul>
 8009594:	4629      	mov	r1, r5
 8009596:	4607      	mov	r7, r0
 8009598:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800959a:	f7f7 fc7d 	bl	8000e98 <__aeabi_fmul>
 800959e:	4601      	mov	r1, r0
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7f7 fb6f 	bl	8000c84 <__aeabi_fsub>
 80095a6:	9f01      	ldr	r7, [sp, #4]
 80095a8:	4621      	mov	r1, r4
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80095ae:	f7f7 fc73 	bl	8000e98 <__aeabi_fmul>
 80095b2:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 80095b6:	4605      	mov	r5, r0
 80095b8:	4649      	mov	r1, r9
 80095ba:	4650      	mov	r0, sl
 80095bc:	f7f7 fc6c 	bl	8000e98 <__aeabi_fmul>
 80095c0:	4601      	mov	r1, r0
 80095c2:	4628      	mov	r0, r5
 80095c4:	f7f7 fb60 	bl	8000c88 <__addsf3>
 80095c8:	9a05      	ldr	r2, [sp, #20]
 80095ca:	4649      	mov	r1, r9
 80095cc:	f84b 0002 	str.w	r0, [fp, r2]
 80095d0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80095d2:	f7f7 fc61 	bl	8000e98 <__aeabi_fmul>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4605      	mov	r5, r0
 80095da:	4650      	mov	r0, sl
 80095dc:	f7f7 fc5c 	bl	8000e98 <__aeabi_fmul>
 80095e0:	4601      	mov	r1, r0
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7f7 fb4e 	bl	8000c84 <__aeabi_fsub>
 80095e8:	9908      	ldr	r1, [sp, #32]
 80095ea:	9a05      	ldr	r2, [sp, #20]
 80095ec:	9d00      	ldr	r5, [sp, #0]
 80095ee:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 80095f2:	50a8      	str	r0, [r5, r2]
 80095f4:	4650      	mov	r0, sl
 80095f6:	f7f7 fc4f 	bl	8000e98 <__aeabi_fmul>
 80095fa:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 80095fe:	4604      	mov	r4, r0
 8009600:	4641      	mov	r1, r8
 8009602:	4648      	mov	r0, r9
 8009604:	f7f7 fc48 	bl	8000e98 <__aeabi_fmul>
 8009608:	4601      	mov	r1, r0
 800960a:	4620      	mov	r0, r4
 800960c:	f7f7 fb3c 	bl	8000c88 <__addsf3>
 8009610:	463a      	mov	r2, r7
 8009612:	9701      	str	r7, [sp, #4]
 8009614:	9f04      	ldr	r7, [sp, #16]
 8009616:	4641      	mov	r1, r8
 8009618:	51d0      	str	r0, [r2, r7]
 800961a:	4650      	mov	r0, sl
 800961c:	f7f7 fc3c 	bl	8000e98 <__aeabi_fmul>
 8009620:	9908      	ldr	r1, [sp, #32]
 8009622:	4604      	mov	r4, r0
 8009624:	4648      	mov	r0, r9
 8009626:	f7f7 fc37 	bl	8000e98 <__aeabi_fmul>
 800962a:	4601      	mov	r1, r0
 800962c:	4620      	mov	r0, r4
 800962e:	f7f7 fb29 	bl	8000c84 <__aeabi_fsub>
 8009632:	9a03      	ldr	r2, [sp, #12]
 8009634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009638:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 800963c:	51d0      	str	r0, [r2, r7]
 800963e:	4651      	mov	r1, sl
 8009640:	4648      	mov	r0, r9
 8009642:	f7f7 fc29 	bl	8000e98 <__aeabi_fmul>
 8009646:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 800964a:	4604      	mov	r4, r0
 800964c:	4631      	mov	r1, r6
 800964e:	4640      	mov	r0, r8
 8009650:	f7f7 fc22 	bl	8000e98 <__aeabi_fmul>
 8009654:	4601      	mov	r1, r0
 8009656:	4620      	mov	r0, r4
 8009658:	f7f7 fb16 	bl	8000c88 <__addsf3>
 800965c:	9f01      	ldr	r7, [sp, #4]
 800965e:	4631      	mov	r1, r6
 8009660:	9e02      	ldr	r6, [sp, #8]
 8009662:	51b8      	str	r0, [r7, r6]
 8009664:	4648      	mov	r0, r9
 8009666:	f7f7 fc17 	bl	8000e98 <__aeabi_fmul>
 800966a:	4651      	mov	r1, sl
 800966c:	4604      	mov	r4, r0
 800966e:	4640      	mov	r0, r8
 8009670:	f7f7 fc12 	bl	8000e98 <__aeabi_fmul>
 8009674:	4601      	mov	r1, r0
 8009676:	4620      	mov	r0, r4
 8009678:	f7f7 fb04 	bl	8000c84 <__aeabi_fsub>
 800967c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8009680:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009684:	9f01      	ldr	r7, [sp, #4]
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	440a      	add	r2, r1
 800968a:	eb05 010c 	add.w	r1, r5, ip
 800968e:	9100      	str	r1, [sp, #0]
 8009690:	5198      	str	r0, [r3, r6]
 8009692:	eb07 010c 	add.w	r1, r7, ip
 8009696:	4463      	add	r3, ip
 8009698:	9101      	str	r1, [sp, #4]
 800969a:	9303      	str	r3, [sp, #12]
 800969c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800969e:	4293      	cmp	r3, r2
 80096a0:	44e3      	add	fp, ip
 80096a2:	f63f ada5 	bhi.w	80091f0 <arm_radix8_butterfly_f32+0x45c>
 80096a6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096a8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80096aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80096ac:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 80096ae:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 80096b2:	440a      	add	r2, r1
 80096b4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80096b6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80096b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80096ba:	440a      	add	r2, r1
 80096bc:	9226      	str	r2, [sp, #152]	@ 0x98
 80096be:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80096c0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80096c2:	440a      	add	r2, r1
 80096c4:	9227      	str	r2, [sp, #156]	@ 0x9c
 80096c6:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80096c8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80096ca:	440a      	add	r2, r1
 80096cc:	9228      	str	r2, [sp, #160]	@ 0xa0
 80096ce:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80096d0:	3301      	adds	r3, #1
 80096d2:	4293      	cmp	r3, r2
 80096d4:	9324      	str	r3, [sp, #144]	@ 0x90
 80096d6:	f47f ad44 	bne.w	8009162 <arm_radix8_butterfly_f32+0x3ce>
 80096da:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	@ 0xb4
 80096de:	932c      	str	r3, [sp, #176]	@ 0xb0
 80096e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80096e2:	9318      	str	r3, [sp, #96]	@ 0x60
 80096e4:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80096e6:	f7ff bb5f 	b.w	8008da8 <arm_radix8_butterfly_f32+0x14>
 80096ea:	b031      	add	sp, #196	@ 0xc4
 80096ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f0:	3f3504f3 	.word	0x3f3504f3

080096f4 <siprintf>:
 80096f4:	b40e      	push	{r1, r2, r3}
 80096f6:	b500      	push	{lr}
 80096f8:	b09c      	sub	sp, #112	@ 0x70
 80096fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80096fc:	9002      	str	r0, [sp, #8]
 80096fe:	9006      	str	r0, [sp, #24]
 8009700:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009704:	4809      	ldr	r0, [pc, #36]	@ (800972c <siprintf+0x38>)
 8009706:	9107      	str	r1, [sp, #28]
 8009708:	9104      	str	r1, [sp, #16]
 800970a:	4909      	ldr	r1, [pc, #36]	@ (8009730 <siprintf+0x3c>)
 800970c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009710:	9105      	str	r1, [sp, #20]
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	a902      	add	r1, sp, #8
 8009718:	f000 f994 	bl	8009a44 <_svfiprintf_r>
 800971c:	9b02      	ldr	r3, [sp, #8]
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	b01c      	add	sp, #112	@ 0x70
 8009724:	f85d eb04 	ldr.w	lr, [sp], #4
 8009728:	b003      	add	sp, #12
 800972a:	4770      	bx	lr
 800972c:	20000010 	.word	0x20000010
 8009730:	ffff0208 	.word	0xffff0208

08009734 <memset>:
 8009734:	4402      	add	r2, r0
 8009736:	4603      	mov	r3, r0
 8009738:	4293      	cmp	r3, r2
 800973a:	d100      	bne.n	800973e <memset+0xa>
 800973c:	4770      	bx	lr
 800973e:	f803 1b01 	strb.w	r1, [r3], #1
 8009742:	e7f9      	b.n	8009738 <memset+0x4>

08009744 <__errno>:
 8009744:	4b01      	ldr	r3, [pc, #4]	@ (800974c <__errno+0x8>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	20000010 	.word	0x20000010

08009750 <__libc_init_array>:
 8009750:	b570      	push	{r4, r5, r6, lr}
 8009752:	4d0d      	ldr	r5, [pc, #52]	@ (8009788 <__libc_init_array+0x38>)
 8009754:	4c0d      	ldr	r4, [pc, #52]	@ (800978c <__libc_init_array+0x3c>)
 8009756:	1b64      	subs	r4, r4, r5
 8009758:	10a4      	asrs	r4, r4, #2
 800975a:	2600      	movs	r6, #0
 800975c:	42a6      	cmp	r6, r4
 800975e:	d109      	bne.n	8009774 <__libc_init_array+0x24>
 8009760:	4d0b      	ldr	r5, [pc, #44]	@ (8009790 <__libc_init_array+0x40>)
 8009762:	4c0c      	ldr	r4, [pc, #48]	@ (8009794 <__libc_init_array+0x44>)
 8009764:	f001 fe50 	bl	800b408 <_init>
 8009768:	1b64      	subs	r4, r4, r5
 800976a:	10a4      	asrs	r4, r4, #2
 800976c:	2600      	movs	r6, #0
 800976e:	42a6      	cmp	r6, r4
 8009770:	d105      	bne.n	800977e <__libc_init_array+0x2e>
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	f855 3b04 	ldr.w	r3, [r5], #4
 8009778:	4798      	blx	r3
 800977a:	3601      	adds	r6, #1
 800977c:	e7ee      	b.n	800975c <__libc_init_array+0xc>
 800977e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009782:	4798      	blx	r3
 8009784:	3601      	adds	r6, #1
 8009786:	e7f2      	b.n	800976e <__libc_init_array+0x1e>
 8009788:	0801eb48 	.word	0x0801eb48
 800978c:	0801eb48 	.word	0x0801eb48
 8009790:	0801eb48 	.word	0x0801eb48
 8009794:	0801eb4c 	.word	0x0801eb4c

08009798 <__retarget_lock_acquire_recursive>:
 8009798:	4770      	bx	lr

0800979a <__retarget_lock_release_recursive>:
 800979a:	4770      	bx	lr

0800979c <_free_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4605      	mov	r5, r0
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d041      	beq.n	8009828 <_free_r+0x8c>
 80097a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a8:	1f0c      	subs	r4, r1, #4
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bfb8      	it	lt
 80097ae:	18e4      	addlt	r4, r4, r3
 80097b0:	f000 f8e0 	bl	8009974 <__malloc_lock>
 80097b4:	4a1d      	ldr	r2, [pc, #116]	@ (800982c <_free_r+0x90>)
 80097b6:	6813      	ldr	r3, [r2, #0]
 80097b8:	b933      	cbnz	r3, 80097c8 <_free_r+0x2c>
 80097ba:	6063      	str	r3, [r4, #4]
 80097bc:	6014      	str	r4, [r2, #0]
 80097be:	4628      	mov	r0, r5
 80097c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c4:	f000 b8dc 	b.w	8009980 <__malloc_unlock>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d908      	bls.n	80097de <_free_r+0x42>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	1821      	adds	r1, r4, r0
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf01      	itttt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	1809      	addeq	r1, r1, r0
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	e7ed      	b.n	80097ba <_free_r+0x1e>
 80097de:	461a      	mov	r2, r3
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	b10b      	cbz	r3, 80097e8 <_free_r+0x4c>
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	d9fa      	bls.n	80097de <_free_r+0x42>
 80097e8:	6811      	ldr	r1, [r2, #0]
 80097ea:	1850      	adds	r0, r2, r1
 80097ec:	42a0      	cmp	r0, r4
 80097ee:	d10b      	bne.n	8009808 <_free_r+0x6c>
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	4401      	add	r1, r0
 80097f4:	1850      	adds	r0, r2, r1
 80097f6:	4283      	cmp	r3, r0
 80097f8:	6011      	str	r1, [r2, #0]
 80097fa:	d1e0      	bne.n	80097be <_free_r+0x22>
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	6053      	str	r3, [r2, #4]
 8009802:	4408      	add	r0, r1
 8009804:	6010      	str	r0, [r2, #0]
 8009806:	e7da      	b.n	80097be <_free_r+0x22>
 8009808:	d902      	bls.n	8009810 <_free_r+0x74>
 800980a:	230c      	movs	r3, #12
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	e7d6      	b.n	80097be <_free_r+0x22>
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	1821      	adds	r1, r4, r0
 8009814:	428b      	cmp	r3, r1
 8009816:	bf04      	itt	eq
 8009818:	6819      	ldreq	r1, [r3, #0]
 800981a:	685b      	ldreq	r3, [r3, #4]
 800981c:	6063      	str	r3, [r4, #4]
 800981e:	bf04      	itt	eq
 8009820:	1809      	addeq	r1, r1, r0
 8009822:	6021      	streq	r1, [r4, #0]
 8009824:	6054      	str	r4, [r2, #4]
 8009826:	e7ca      	b.n	80097be <_free_r+0x22>
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	bf00      	nop
 800982c:	200095e4 	.word	0x200095e4

08009830 <sbrk_aligned>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4e0f      	ldr	r6, [pc, #60]	@ (8009870 <sbrk_aligned+0x40>)
 8009834:	460c      	mov	r4, r1
 8009836:	6831      	ldr	r1, [r6, #0]
 8009838:	4605      	mov	r5, r0
 800983a:	b911      	cbnz	r1, 8009842 <sbrk_aligned+0x12>
 800983c:	f000 fba6 	bl	8009f8c <_sbrk_r>
 8009840:	6030      	str	r0, [r6, #0]
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f000 fba1 	bl	8009f8c <_sbrk_r>
 800984a:	1c43      	adds	r3, r0, #1
 800984c:	d103      	bne.n	8009856 <sbrk_aligned+0x26>
 800984e:	f04f 34ff 	mov.w	r4, #4294967295
 8009852:	4620      	mov	r0, r4
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	1cc4      	adds	r4, r0, #3
 8009858:	f024 0403 	bic.w	r4, r4, #3
 800985c:	42a0      	cmp	r0, r4
 800985e:	d0f8      	beq.n	8009852 <sbrk_aligned+0x22>
 8009860:	1a21      	subs	r1, r4, r0
 8009862:	4628      	mov	r0, r5
 8009864:	f000 fb92 	bl	8009f8c <_sbrk_r>
 8009868:	3001      	adds	r0, #1
 800986a:	d1f2      	bne.n	8009852 <sbrk_aligned+0x22>
 800986c:	e7ef      	b.n	800984e <sbrk_aligned+0x1e>
 800986e:	bf00      	nop
 8009870:	200095e0 	.word	0x200095e0

08009874 <_malloc_r>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	1ccd      	adds	r5, r1, #3
 800987a:	f025 0503 	bic.w	r5, r5, #3
 800987e:	3508      	adds	r5, #8
 8009880:	2d0c      	cmp	r5, #12
 8009882:	bf38      	it	cc
 8009884:	250c      	movcc	r5, #12
 8009886:	2d00      	cmp	r5, #0
 8009888:	4606      	mov	r6, r0
 800988a:	db01      	blt.n	8009890 <_malloc_r+0x1c>
 800988c:	42a9      	cmp	r1, r5
 800988e:	d904      	bls.n	800989a <_malloc_r+0x26>
 8009890:	230c      	movs	r3, #12
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	2000      	movs	r0, #0
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009970 <_malloc_r+0xfc>
 800989e:	f000 f869 	bl	8009974 <__malloc_lock>
 80098a2:	f8d8 3000 	ldr.w	r3, [r8]
 80098a6:	461c      	mov	r4, r3
 80098a8:	bb44      	cbnz	r4, 80098fc <_malloc_r+0x88>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff ffbf 	bl	8009830 <sbrk_aligned>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	4604      	mov	r4, r0
 80098b6:	d158      	bne.n	800996a <_malloc_r+0xf6>
 80098b8:	f8d8 4000 	ldr.w	r4, [r8]
 80098bc:	4627      	mov	r7, r4
 80098be:	2f00      	cmp	r7, #0
 80098c0:	d143      	bne.n	800994a <_malloc_r+0xd6>
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d04b      	beq.n	800995e <_malloc_r+0xea>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	4639      	mov	r1, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	eb04 0903 	add.w	r9, r4, r3
 80098d0:	f000 fb5c 	bl	8009f8c <_sbrk_r>
 80098d4:	4581      	cmp	r9, r0
 80098d6:	d142      	bne.n	800995e <_malloc_r+0xea>
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	1a6d      	subs	r5, r5, r1
 80098dc:	4629      	mov	r1, r5
 80098de:	4630      	mov	r0, r6
 80098e0:	f7ff ffa6 	bl	8009830 <sbrk_aligned>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d03a      	beq.n	800995e <_malloc_r+0xea>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	442b      	add	r3, r5
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	f8d8 3000 	ldr.w	r3, [r8]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	bb62      	cbnz	r2, 8009950 <_malloc_r+0xdc>
 80098f6:	f8c8 7000 	str.w	r7, [r8]
 80098fa:	e00f      	b.n	800991c <_malloc_r+0xa8>
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	1b52      	subs	r2, r2, r5
 8009900:	d420      	bmi.n	8009944 <_malloc_r+0xd0>
 8009902:	2a0b      	cmp	r2, #11
 8009904:	d917      	bls.n	8009936 <_malloc_r+0xc2>
 8009906:	1961      	adds	r1, r4, r5
 8009908:	42a3      	cmp	r3, r4
 800990a:	6025      	str	r5, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	6059      	strne	r1, [r3, #4]
 8009910:	6863      	ldr	r3, [r4, #4]
 8009912:	bf08      	it	eq
 8009914:	f8c8 1000 	streq.w	r1, [r8]
 8009918:	5162      	str	r2, [r4, r5]
 800991a:	604b      	str	r3, [r1, #4]
 800991c:	4630      	mov	r0, r6
 800991e:	f000 f82f 	bl	8009980 <__malloc_unlock>
 8009922:	f104 000b 	add.w	r0, r4, #11
 8009926:	1d23      	adds	r3, r4, #4
 8009928:	f020 0007 	bic.w	r0, r0, #7
 800992c:	1ac2      	subs	r2, r0, r3
 800992e:	bf1c      	itt	ne
 8009930:	1a1b      	subne	r3, r3, r0
 8009932:	50a3      	strne	r3, [r4, r2]
 8009934:	e7af      	b.n	8009896 <_malloc_r+0x22>
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	42a3      	cmp	r3, r4
 800993a:	bf0c      	ite	eq
 800993c:	f8c8 2000 	streq.w	r2, [r8]
 8009940:	605a      	strne	r2, [r3, #4]
 8009942:	e7eb      	b.n	800991c <_malloc_r+0xa8>
 8009944:	4623      	mov	r3, r4
 8009946:	6864      	ldr	r4, [r4, #4]
 8009948:	e7ae      	b.n	80098a8 <_malloc_r+0x34>
 800994a:	463c      	mov	r4, r7
 800994c:	687f      	ldr	r7, [r7, #4]
 800994e:	e7b6      	b.n	80098be <_malloc_r+0x4a>
 8009950:	461a      	mov	r2, r3
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	42a3      	cmp	r3, r4
 8009956:	d1fb      	bne.n	8009950 <_malloc_r+0xdc>
 8009958:	2300      	movs	r3, #0
 800995a:	6053      	str	r3, [r2, #4]
 800995c:	e7de      	b.n	800991c <_malloc_r+0xa8>
 800995e:	230c      	movs	r3, #12
 8009960:	6033      	str	r3, [r6, #0]
 8009962:	4630      	mov	r0, r6
 8009964:	f000 f80c 	bl	8009980 <__malloc_unlock>
 8009968:	e794      	b.n	8009894 <_malloc_r+0x20>
 800996a:	6005      	str	r5, [r0, #0]
 800996c:	e7d6      	b.n	800991c <_malloc_r+0xa8>
 800996e:	bf00      	nop
 8009970:	200095e4 	.word	0x200095e4

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	@ (800997c <__malloc_lock+0x8>)
 8009976:	f7ff bf0f 	b.w	8009798 <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	200095dc 	.word	0x200095dc

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	@ (8009988 <__malloc_unlock+0x8>)
 8009982:	f7ff bf0a 	b.w	800979a <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	200095dc 	.word	0x200095dc

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	688e      	ldr	r6, [r1, #8]
 8009992:	461f      	mov	r7, r3
 8009994:	42be      	cmp	r6, r7
 8009996:	680b      	ldr	r3, [r1, #0]
 8009998:	4682      	mov	sl, r0
 800999a:	460c      	mov	r4, r1
 800999c:	4690      	mov	r8, r2
 800999e:	d82d      	bhi.n	80099fc <__ssputs_r+0x70>
 80099a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099a8:	d026      	beq.n	80099f8 <__ssputs_r+0x6c>
 80099aa:	6965      	ldr	r5, [r4, #20]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b2:	eba3 0901 	sub.w	r9, r3, r1
 80099b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ba:	1c7b      	adds	r3, r7, #1
 80099bc:	444b      	add	r3, r9
 80099be:	106d      	asrs	r5, r5, #1
 80099c0:	429d      	cmp	r5, r3
 80099c2:	bf38      	it	cc
 80099c4:	461d      	movcc	r5, r3
 80099c6:	0553      	lsls	r3, r2, #21
 80099c8:	d527      	bpl.n	8009a1a <__ssputs_r+0x8e>
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7ff ff52 	bl	8009874 <_malloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	b360      	cbz	r0, 8009a2e <__ssputs_r+0xa2>
 80099d4:	6921      	ldr	r1, [r4, #16]
 80099d6:	464a      	mov	r2, r9
 80099d8:	f000 fae8 	bl	8009fac <memcpy>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	6126      	str	r6, [r4, #16]
 80099ea:	6165      	str	r5, [r4, #20]
 80099ec:	444e      	add	r6, r9
 80099ee:	eba5 0509 	sub.w	r5, r5, r9
 80099f2:	6026      	str	r6, [r4, #0]
 80099f4:	60a5      	str	r5, [r4, #8]
 80099f6:	463e      	mov	r6, r7
 80099f8:	42be      	cmp	r6, r7
 80099fa:	d900      	bls.n	80099fe <__ssputs_r+0x72>
 80099fc:	463e      	mov	r6, r7
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	4632      	mov	r2, r6
 8009a02:	4641      	mov	r1, r8
 8009a04:	f000 faa8 	bl	8009f58 <memmove>
 8009a08:	68a3      	ldr	r3, [r4, #8]
 8009a0a:	1b9b      	subs	r3, r3, r6
 8009a0c:	60a3      	str	r3, [r4, #8]
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	4433      	add	r3, r6
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	2000      	movs	r0, #0
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	f000 fad4 	bl	8009fc8 <_realloc_r>
 8009a20:	4606      	mov	r6, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d1e0      	bne.n	80099e8 <__ssputs_r+0x5c>
 8009a26:	6921      	ldr	r1, [r4, #16]
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7ff feb7 	bl	800979c <_free_r>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f8ca 3000 	str.w	r3, [sl]
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e7e9      	b.n	8009a16 <__ssputs_r+0x8a>
	...

08009a44 <_svfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	4698      	mov	r8, r3
 8009a4a:	898b      	ldrh	r3, [r1, #12]
 8009a4c:	061b      	lsls	r3, r3, #24
 8009a4e:	b09d      	sub	sp, #116	@ 0x74
 8009a50:	4607      	mov	r7, r0
 8009a52:	460d      	mov	r5, r1
 8009a54:	4614      	mov	r4, r2
 8009a56:	d510      	bpl.n	8009a7a <_svfiprintf_r+0x36>
 8009a58:	690b      	ldr	r3, [r1, #16]
 8009a5a:	b973      	cbnz	r3, 8009a7a <_svfiprintf_r+0x36>
 8009a5c:	2140      	movs	r1, #64	@ 0x40
 8009a5e:	f7ff ff09 	bl	8009874 <_malloc_r>
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	6128      	str	r0, [r5, #16]
 8009a66:	b930      	cbnz	r0, 8009a76 <_svfiprintf_r+0x32>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	@ 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7e:	2320      	movs	r3, #32
 8009a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a88:	2330      	movs	r3, #48	@ 0x30
 8009a8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c28 <_svfiprintf_r+0x1e4>
 8009a8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a92:	f04f 0901 	mov.w	r9, #1
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x60>
 8009aa0:	2a25      	cmp	r2, #37	@ 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x54>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7e>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6b 	bl	800998c <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80a7 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 809f 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad6:	f10a 0a01 	add.w	sl, sl, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	484e      	ldr	r0, [pc, #312]	@ (8009c28 <_svfiprintf_r+0x1e4>)
 8009aee:	f7f6 fbd7 	bl	80002a0 <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xea>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	@ 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xfa>
 8009b12:	9a07      	ldr	r2, [sp, #28]
 8009b14:	4654      	mov	r4, sl
 8009b16:	2000      	movs	r0, #0
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	@ 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94b      	bls.n	8009bc0 <_svfiprintf_r+0x17c>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x114>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x114>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	fa09 f303 	lsl.w	r3, r9, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	46a2      	mov	sl, r4
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0xa0>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5c:	d10a      	bne.n	8009b74 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b62:	d132      	bne.n	8009bca <_svfiprintf_r+0x186>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d1a      	adds	r2, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9203      	str	r2, [sp, #12]
 8009b6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b70:	3402      	adds	r4, #2
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c38 <_svfiprintf_r+0x1f4>
 8009b78:	7821      	ldrb	r1, [r4, #0]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	f7f6 fb8f 	bl	80002a0 <memchr>
 8009b82:	b138      	cbz	r0, 8009b94 <_svfiprintf_r+0x150>
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	eba0 000a 	sub.w	r0, r0, sl
 8009b8a:	2240      	movs	r2, #64	@ 0x40
 8009b8c:	4082      	lsls	r2, r0
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	3401      	adds	r4, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b98:	4824      	ldr	r0, [pc, #144]	@ (8009c2c <_svfiprintf_r+0x1e8>)
 8009b9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	f7f6 fb7e 	bl	80002a0 <memchr>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d036      	beq.n	8009c16 <_svfiprintf_r+0x1d2>
 8009ba8:	4b21      	ldr	r3, [pc, #132]	@ (8009c30 <_svfiprintf_r+0x1ec>)
 8009baa:	bb1b      	cbnz	r3, 8009bf4 <_svfiprintf_r+0x1b0>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	3307      	adds	r3, #7
 8009bb0:	f023 0307 	bic.w	r3, r3, #7
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	4433      	add	r3, r6
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	e76a      	b.n	8009a96 <_svfiprintf_r+0x52>
 8009bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7a8      	b.n	8009b1c <_svfiprintf_r+0xd8>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	3401      	adds	r4, #1
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	f04f 0c0a 	mov.w	ip, #10
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bdc:	3a30      	subs	r2, #48	@ 0x30
 8009bde:	2a09      	cmp	r2, #9
 8009be0:	d903      	bls.n	8009bea <_svfiprintf_r+0x1a6>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c6      	beq.n	8009b74 <_svfiprintf_r+0x130>
 8009be6:	9105      	str	r1, [sp, #20]
 8009be8:	e7c4      	b.n	8009b74 <_svfiprintf_r+0x130>
 8009bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bee:	4604      	mov	r4, r0
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7f0      	b.n	8009bd6 <_svfiprintf_r+0x192>
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009bfc:	a904      	add	r1, sp, #16
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f3af 8000 	nop.w
 8009c04:	1c42      	adds	r2, r0, #1
 8009c06:	4606      	mov	r6, r0
 8009c08:	d1d6      	bne.n	8009bb8 <_svfiprintf_r+0x174>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	f53f af2d 	bmi.w	8009a6c <_svfiprintf_r+0x28>
 8009c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c14:	e72c      	b.n	8009a70 <_svfiprintf_r+0x2c>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009c1e:	a904      	add	r1, sp, #16
 8009c20:	4638      	mov	r0, r7
 8009c22:	f000 f879 	bl	8009d18 <_printf_i>
 8009c26:	e7ed      	b.n	8009c04 <_svfiprintf_r+0x1c0>
 8009c28:	0801e8fc 	.word	0x0801e8fc
 8009c2c:	0801e906 	.word	0x0801e906
 8009c30:	00000000 	.word	0x00000000
 8009c34:	0800998d 	.word	0x0800998d
 8009c38:	0801e902 	.word	0x0801e902

08009c3c <_printf_common>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	4616      	mov	r6, r2
 8009c42:	4698      	mov	r8, r3
 8009c44:	688a      	ldr	r2, [r1, #8]
 8009c46:	690b      	ldr	r3, [r1, #16]
 8009c48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bfb8      	it	lt
 8009c50:	4613      	movlt	r3, r2
 8009c52:	6033      	str	r3, [r6, #0]
 8009c54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c58:	4607      	mov	r7, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b10a      	cbz	r2, 8009c62 <_printf_common+0x26>
 8009c5e:	3301      	adds	r3, #1
 8009c60:	6033      	str	r3, [r6, #0]
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	0699      	lsls	r1, r3, #26
 8009c66:	bf42      	ittt	mi
 8009c68:	6833      	ldrmi	r3, [r6, #0]
 8009c6a:	3302      	addmi	r3, #2
 8009c6c:	6033      	strmi	r3, [r6, #0]
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	f015 0506 	ands.w	r5, r5, #6
 8009c74:	d106      	bne.n	8009c84 <_printf_common+0x48>
 8009c76:	f104 0a19 	add.w	sl, r4, #25
 8009c7a:	68e3      	ldr	r3, [r4, #12]
 8009c7c:	6832      	ldr	r2, [r6, #0]
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	42ab      	cmp	r3, r5
 8009c82:	dc26      	bgt.n	8009cd2 <_printf_common+0x96>
 8009c84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c88:	6822      	ldr	r2, [r4, #0]
 8009c8a:	3b00      	subs	r3, #0
 8009c8c:	bf18      	it	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	0692      	lsls	r2, r2, #26
 8009c92:	d42b      	bmi.n	8009cec <_printf_common+0xb0>
 8009c94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c98:	4641      	mov	r1, r8
 8009c9a:	4638      	mov	r0, r7
 8009c9c:	47c8      	blx	r9
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d01e      	beq.n	8009ce0 <_printf_common+0xa4>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	6922      	ldr	r2, [r4, #16]
 8009ca6:	f003 0306 	and.w	r3, r3, #6
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	bf02      	ittt	eq
 8009cae:	68e5      	ldreq	r5, [r4, #12]
 8009cb0:	6833      	ldreq	r3, [r6, #0]
 8009cb2:	1aed      	subeq	r5, r5, r3
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	bf0c      	ite	eq
 8009cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cbc:	2500      	movne	r5, #0
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	bfc4      	itt	gt
 8009cc2:	1a9b      	subgt	r3, r3, r2
 8009cc4:	18ed      	addgt	r5, r5, r3
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	341a      	adds	r4, #26
 8009cca:	42b5      	cmp	r5, r6
 8009ccc:	d11a      	bne.n	8009d04 <_printf_common+0xc8>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e008      	b.n	8009ce4 <_printf_common+0xa8>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4652      	mov	r2, sl
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	4638      	mov	r0, r7
 8009cda:	47c8      	blx	r9
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d103      	bne.n	8009ce8 <_printf_common+0xac>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce8:	3501      	adds	r5, #1
 8009cea:	e7c6      	b.n	8009c7a <_printf_common+0x3e>
 8009cec:	18e1      	adds	r1, r4, r3
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	2030      	movs	r0, #48	@ 0x30
 8009cf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cf6:	4422      	add	r2, r4
 8009cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d00:	3302      	adds	r3, #2
 8009d02:	e7c7      	b.n	8009c94 <_printf_common+0x58>
 8009d04:	2301      	movs	r3, #1
 8009d06:	4622      	mov	r2, r4
 8009d08:	4641      	mov	r1, r8
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	47c8      	blx	r9
 8009d0e:	3001      	adds	r0, #1
 8009d10:	d0e6      	beq.n	8009ce0 <_printf_common+0xa4>
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7d9      	b.n	8009cca <_printf_common+0x8e>
	...

08009d18 <_printf_i>:
 8009d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	7e0f      	ldrb	r7, [r1, #24]
 8009d1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d20:	2f78      	cmp	r7, #120	@ 0x78
 8009d22:	4691      	mov	r9, r2
 8009d24:	4680      	mov	r8, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	469a      	mov	sl, r3
 8009d2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d2e:	d807      	bhi.n	8009d40 <_printf_i+0x28>
 8009d30:	2f62      	cmp	r7, #98	@ 0x62
 8009d32:	d80a      	bhi.n	8009d4a <_printf_i+0x32>
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	f000 80d2 	beq.w	8009ede <_printf_i+0x1c6>
 8009d3a:	2f58      	cmp	r7, #88	@ 0x58
 8009d3c:	f000 80b9 	beq.w	8009eb2 <_printf_i+0x19a>
 8009d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d48:	e03a      	b.n	8009dc0 <_printf_i+0xa8>
 8009d4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d4e:	2b15      	cmp	r3, #21
 8009d50:	d8f6      	bhi.n	8009d40 <_printf_i+0x28>
 8009d52:	a101      	add	r1, pc, #4	@ (adr r1, 8009d58 <_printf_i+0x40>)
 8009d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d58:	08009db1 	.word	0x08009db1
 8009d5c:	08009dc5 	.word	0x08009dc5
 8009d60:	08009d41 	.word	0x08009d41
 8009d64:	08009d41 	.word	0x08009d41
 8009d68:	08009d41 	.word	0x08009d41
 8009d6c:	08009d41 	.word	0x08009d41
 8009d70:	08009dc5 	.word	0x08009dc5
 8009d74:	08009d41 	.word	0x08009d41
 8009d78:	08009d41 	.word	0x08009d41
 8009d7c:	08009d41 	.word	0x08009d41
 8009d80:	08009d41 	.word	0x08009d41
 8009d84:	08009ec5 	.word	0x08009ec5
 8009d88:	08009def 	.word	0x08009def
 8009d8c:	08009e7f 	.word	0x08009e7f
 8009d90:	08009d41 	.word	0x08009d41
 8009d94:	08009d41 	.word	0x08009d41
 8009d98:	08009ee7 	.word	0x08009ee7
 8009d9c:	08009d41 	.word	0x08009d41
 8009da0:	08009def 	.word	0x08009def
 8009da4:	08009d41 	.word	0x08009d41
 8009da8:	08009d41 	.word	0x08009d41
 8009dac:	08009e87 	.word	0x08009e87
 8009db0:	6833      	ldr	r3, [r6, #0]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6032      	str	r2, [r6, #0]
 8009db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e09d      	b.n	8009f00 <_printf_i+0x1e8>
 8009dc4:	6833      	ldr	r3, [r6, #0]
 8009dc6:	6820      	ldr	r0, [r4, #0]
 8009dc8:	1d19      	adds	r1, r3, #4
 8009dca:	6031      	str	r1, [r6, #0]
 8009dcc:	0606      	lsls	r6, r0, #24
 8009dce:	d501      	bpl.n	8009dd4 <_printf_i+0xbc>
 8009dd0:	681d      	ldr	r5, [r3, #0]
 8009dd2:	e003      	b.n	8009ddc <_printf_i+0xc4>
 8009dd4:	0645      	lsls	r5, r0, #25
 8009dd6:	d5fb      	bpl.n	8009dd0 <_printf_i+0xb8>
 8009dd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	da03      	bge.n	8009de8 <_printf_i+0xd0>
 8009de0:	232d      	movs	r3, #45	@ 0x2d
 8009de2:	426d      	negs	r5, r5
 8009de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009de8:	4859      	ldr	r0, [pc, #356]	@ (8009f50 <_printf_i+0x238>)
 8009dea:	230a      	movs	r3, #10
 8009dec:	e011      	b.n	8009e12 <_printf_i+0xfa>
 8009dee:	6821      	ldr	r1, [r4, #0]
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	0608      	lsls	r0, r1, #24
 8009df4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009df8:	d402      	bmi.n	8009e00 <_printf_i+0xe8>
 8009dfa:	0649      	lsls	r1, r1, #25
 8009dfc:	bf48      	it	mi
 8009dfe:	b2ad      	uxthmi	r5, r5
 8009e00:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e02:	4853      	ldr	r0, [pc, #332]	@ (8009f50 <_printf_i+0x238>)
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	bf14      	ite	ne
 8009e08:	230a      	movne	r3, #10
 8009e0a:	2308      	moveq	r3, #8
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e12:	6866      	ldr	r6, [r4, #4]
 8009e14:	60a6      	str	r6, [r4, #8]
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	bfa2      	ittt	ge
 8009e1a:	6821      	ldrge	r1, [r4, #0]
 8009e1c:	f021 0104 	bicge.w	r1, r1, #4
 8009e20:	6021      	strge	r1, [r4, #0]
 8009e22:	b90d      	cbnz	r5, 8009e28 <_printf_i+0x110>
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d04b      	beq.n	8009ec0 <_printf_i+0x1a8>
 8009e28:	4616      	mov	r6, r2
 8009e2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e2e:	fb03 5711 	mls	r7, r3, r1, r5
 8009e32:	5dc7      	ldrb	r7, [r0, r7]
 8009e34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e38:	462f      	mov	r7, r5
 8009e3a:	42bb      	cmp	r3, r7
 8009e3c:	460d      	mov	r5, r1
 8009e3e:	d9f4      	bls.n	8009e2a <_printf_i+0x112>
 8009e40:	2b08      	cmp	r3, #8
 8009e42:	d10b      	bne.n	8009e5c <_printf_i+0x144>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	07df      	lsls	r7, r3, #31
 8009e48:	d508      	bpl.n	8009e5c <_printf_i+0x144>
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	6861      	ldr	r1, [r4, #4]
 8009e4e:	4299      	cmp	r1, r3
 8009e50:	bfde      	ittt	le
 8009e52:	2330      	movle	r3, #48	@ 0x30
 8009e54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e5c:	1b92      	subs	r2, r2, r6
 8009e5e:	6122      	str	r2, [r4, #16]
 8009e60:	f8cd a000 	str.w	sl, [sp]
 8009e64:	464b      	mov	r3, r9
 8009e66:	aa03      	add	r2, sp, #12
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4640      	mov	r0, r8
 8009e6c:	f7ff fee6 	bl	8009c3c <_printf_common>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d14a      	bne.n	8009f0a <_printf_i+0x1f2>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	b004      	add	sp, #16
 8009e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	f043 0320 	orr.w	r3, r3, #32
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	4833      	ldr	r0, [pc, #204]	@ (8009f54 <_printf_i+0x23c>)
 8009e88:	2778      	movs	r7, #120	@ 0x78
 8009e8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	6831      	ldr	r1, [r6, #0]
 8009e92:	061f      	lsls	r7, r3, #24
 8009e94:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e98:	d402      	bmi.n	8009ea0 <_printf_i+0x188>
 8009e9a:	065f      	lsls	r7, r3, #25
 8009e9c:	bf48      	it	mi
 8009e9e:	b2ad      	uxthmi	r5, r5
 8009ea0:	6031      	str	r1, [r6, #0]
 8009ea2:	07d9      	lsls	r1, r3, #31
 8009ea4:	bf44      	itt	mi
 8009ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8009eaa:	6023      	strmi	r3, [r4, #0]
 8009eac:	b11d      	cbz	r5, 8009eb6 <_printf_i+0x19e>
 8009eae:	2310      	movs	r3, #16
 8009eb0:	e7ac      	b.n	8009e0c <_printf_i+0xf4>
 8009eb2:	4827      	ldr	r0, [pc, #156]	@ (8009f50 <_printf_i+0x238>)
 8009eb4:	e7e9      	b.n	8009e8a <_printf_i+0x172>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	f023 0320 	bic.w	r3, r3, #32
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	e7f6      	b.n	8009eae <_printf_i+0x196>
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	e7bd      	b.n	8009e40 <_printf_i+0x128>
 8009ec4:	6833      	ldr	r3, [r6, #0]
 8009ec6:	6825      	ldr	r5, [r4, #0]
 8009ec8:	6961      	ldr	r1, [r4, #20]
 8009eca:	1d18      	adds	r0, r3, #4
 8009ecc:	6030      	str	r0, [r6, #0]
 8009ece:	062e      	lsls	r6, r5, #24
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	d501      	bpl.n	8009ed8 <_printf_i+0x1c0>
 8009ed4:	6019      	str	r1, [r3, #0]
 8009ed6:	e002      	b.n	8009ede <_printf_i+0x1c6>
 8009ed8:	0668      	lsls	r0, r5, #25
 8009eda:	d5fb      	bpl.n	8009ed4 <_printf_i+0x1bc>
 8009edc:	8019      	strh	r1, [r3, #0]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	6123      	str	r3, [r4, #16]
 8009ee2:	4616      	mov	r6, r2
 8009ee4:	e7bc      	b.n	8009e60 <_printf_i+0x148>
 8009ee6:	6833      	ldr	r3, [r6, #0]
 8009ee8:	1d1a      	adds	r2, r3, #4
 8009eea:	6032      	str	r2, [r6, #0]
 8009eec:	681e      	ldr	r6, [r3, #0]
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7f6 f9d4 	bl	80002a0 <memchr>
 8009ef8:	b108      	cbz	r0, 8009efe <_printf_i+0x1e6>
 8009efa:	1b80      	subs	r0, r0, r6
 8009efc:	6060      	str	r0, [r4, #4]
 8009efe:	6863      	ldr	r3, [r4, #4]
 8009f00:	6123      	str	r3, [r4, #16]
 8009f02:	2300      	movs	r3, #0
 8009f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f08:	e7aa      	b.n	8009e60 <_printf_i+0x148>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	4649      	mov	r1, r9
 8009f10:	4640      	mov	r0, r8
 8009f12:	47d0      	blx	sl
 8009f14:	3001      	adds	r0, #1
 8009f16:	d0ad      	beq.n	8009e74 <_printf_i+0x15c>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	079b      	lsls	r3, r3, #30
 8009f1c:	d413      	bmi.n	8009f46 <_printf_i+0x22e>
 8009f1e:	68e0      	ldr	r0, [r4, #12]
 8009f20:	9b03      	ldr	r3, [sp, #12]
 8009f22:	4298      	cmp	r0, r3
 8009f24:	bfb8      	it	lt
 8009f26:	4618      	movlt	r0, r3
 8009f28:	e7a6      	b.n	8009e78 <_printf_i+0x160>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	4649      	mov	r1, r9
 8009f30:	4640      	mov	r0, r8
 8009f32:	47d0      	blx	sl
 8009f34:	3001      	adds	r0, #1
 8009f36:	d09d      	beq.n	8009e74 <_printf_i+0x15c>
 8009f38:	3501      	adds	r5, #1
 8009f3a:	68e3      	ldr	r3, [r4, #12]
 8009f3c:	9903      	ldr	r1, [sp, #12]
 8009f3e:	1a5b      	subs	r3, r3, r1
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	dcf2      	bgt.n	8009f2a <_printf_i+0x212>
 8009f44:	e7eb      	b.n	8009f1e <_printf_i+0x206>
 8009f46:	2500      	movs	r5, #0
 8009f48:	f104 0619 	add.w	r6, r4, #25
 8009f4c:	e7f5      	b.n	8009f3a <_printf_i+0x222>
 8009f4e:	bf00      	nop
 8009f50:	0801e90d 	.word	0x0801e90d
 8009f54:	0801e91e 	.word	0x0801e91e

08009f58 <memmove>:
 8009f58:	4288      	cmp	r0, r1
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	eb01 0402 	add.w	r4, r1, r2
 8009f60:	d902      	bls.n	8009f68 <memmove+0x10>
 8009f62:	4284      	cmp	r4, r0
 8009f64:	4623      	mov	r3, r4
 8009f66:	d807      	bhi.n	8009f78 <memmove+0x20>
 8009f68:	1e43      	subs	r3, r0, #1
 8009f6a:	42a1      	cmp	r1, r4
 8009f6c:	d008      	beq.n	8009f80 <memmove+0x28>
 8009f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f76:	e7f8      	b.n	8009f6a <memmove+0x12>
 8009f78:	4402      	add	r2, r0
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d100      	bne.n	8009f82 <memmove+0x2a>
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8a:	e7f7      	b.n	8009f7c <memmove+0x24>

08009f8c <_sbrk_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d06      	ldr	r5, [pc, #24]	@ (8009fa8 <_sbrk_r+0x1c>)
 8009f90:	2300      	movs	r3, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	4608      	mov	r0, r1
 8009f96:	602b      	str	r3, [r5, #0]
 8009f98:	f7f8 fa94 	bl	80024c4 <_sbrk>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_sbrk_r+0x1a>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_sbrk_r+0x1a>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	200095d8 	.word	0x200095d8

08009fac <memcpy>:
 8009fac:	440a      	add	r2, r1
 8009fae:	4291      	cmp	r1, r2
 8009fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fb4:	d100      	bne.n	8009fb8 <memcpy+0xc>
 8009fb6:	4770      	bx	lr
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	d1f9      	bne.n	8009fba <memcpy+0xe>
 8009fc6:	bd10      	pop	{r4, pc}

08009fc8 <_realloc_r>:
 8009fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fcc:	4680      	mov	r8, r0
 8009fce:	4615      	mov	r5, r2
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	b921      	cbnz	r1, 8009fde <_realloc_r+0x16>
 8009fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd8:	4611      	mov	r1, r2
 8009fda:	f7ff bc4b 	b.w	8009874 <_malloc_r>
 8009fde:	b92a      	cbnz	r2, 8009fec <_realloc_r+0x24>
 8009fe0:	f7ff fbdc 	bl	800979c <_free_r>
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fec:	f000 f81a 	bl	800a024 <_malloc_usable_size_r>
 8009ff0:	4285      	cmp	r5, r0
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	d802      	bhi.n	8009ffc <_realloc_r+0x34>
 8009ff6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ffa:	d8f4      	bhi.n	8009fe6 <_realloc_r+0x1e>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4640      	mov	r0, r8
 800a000:	f7ff fc38 	bl	8009874 <_malloc_r>
 800a004:	4607      	mov	r7, r0
 800a006:	2800      	cmp	r0, #0
 800a008:	d0ec      	beq.n	8009fe4 <_realloc_r+0x1c>
 800a00a:	42b5      	cmp	r5, r6
 800a00c:	462a      	mov	r2, r5
 800a00e:	4621      	mov	r1, r4
 800a010:	bf28      	it	cs
 800a012:	4632      	movcs	r2, r6
 800a014:	f7ff ffca 	bl	8009fac <memcpy>
 800a018:	4621      	mov	r1, r4
 800a01a:	4640      	mov	r0, r8
 800a01c:	f7ff fbbe 	bl	800979c <_free_r>
 800a020:	463c      	mov	r4, r7
 800a022:	e7e0      	b.n	8009fe6 <_realloc_r+0x1e>

0800a024 <_malloc_usable_size_r>:
 800a024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a028:	1f18      	subs	r0, r3, #4
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfbc      	itt	lt
 800a02e:	580b      	ldrlt	r3, [r1, r0]
 800a030:	18c0      	addlt	r0, r0, r3
 800a032:	4770      	bx	lr

0800a034 <cos>:
 800a034:	b530      	push	{r4, r5, lr}
 800a036:	4d20      	ldr	r5, [pc, #128]	@ (800a0b8 <cos+0x84>)
 800a038:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a03c:	42ac      	cmp	r4, r5
 800a03e:	b087      	sub	sp, #28
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	d806      	bhi.n	800a054 <cos+0x20>
 800a046:	2200      	movs	r2, #0
 800a048:	2300      	movs	r3, #0
 800a04a:	b007      	add	sp, #28
 800a04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a050:	f000 b92e 	b.w	800a2b0 <__kernel_cos>
 800a054:	4d19      	ldr	r5, [pc, #100]	@ (800a0bc <cos+0x88>)
 800a056:	42ac      	cmp	r4, r5
 800a058:	d903      	bls.n	800a062 <cos+0x2e>
 800a05a:	f7f6 f975 	bl	8000348 <__aeabi_dsub>
 800a05e:	b007      	add	sp, #28
 800a060:	bd30      	pop	{r4, r5, pc}
 800a062:	aa02      	add	r2, sp, #8
 800a064:	f000 fa9c 	bl	800a5a0 <__ieee754_rem_pio2>
 800a068:	f000 0003 	and.w	r0, r0, #3
 800a06c:	2801      	cmp	r0, #1
 800a06e:	d009      	beq.n	800a084 <cos+0x50>
 800a070:	2802      	cmp	r0, #2
 800a072:	d011      	beq.n	800a098 <cos+0x64>
 800a074:	b9b8      	cbnz	r0, 800a0a6 <cos+0x72>
 800a076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07e:	f000 f917 	bl	800a2b0 <__kernel_cos>
 800a082:	e7ec      	b.n	800a05e <cos+0x2a>
 800a084:	9000      	str	r0, [sp, #0]
 800a086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08e:	f000 f9cf 	bl	800a430 <__kernel_sin>
 800a092:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a096:	e7e2      	b.n	800a05e <cos+0x2a>
 800a098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0a0:	f000 f906 	bl	800a2b0 <__kernel_cos>
 800a0a4:	e7f5      	b.n	800a092 <cos+0x5e>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b2:	f000 f9bd 	bl	800a430 <__kernel_sin>
 800a0b6:	e7d2      	b.n	800a05e <cos+0x2a>
 800a0b8:	3fe921fb 	.word	0x3fe921fb
 800a0bc:	7fefffff 	.word	0x7fefffff

0800a0c0 <fabs>:
 800a0c0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4770      	bx	lr

0800a0c8 <sin>:
 800a0c8:	b530      	push	{r4, r5, lr}
 800a0ca:	4d20      	ldr	r5, [pc, #128]	@ (800a14c <sin+0x84>)
 800a0cc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a0d0:	42ac      	cmp	r4, r5
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	d806      	bhi.n	800a0e8 <sin+0x20>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f000 f9a5 	bl	800a430 <__kernel_sin>
 800a0e6:	e004      	b.n	800a0f2 <sin+0x2a>
 800a0e8:	4d19      	ldr	r5, [pc, #100]	@ (800a150 <sin+0x88>)
 800a0ea:	42ac      	cmp	r4, r5
 800a0ec:	d903      	bls.n	800a0f6 <sin+0x2e>
 800a0ee:	f7f6 f92b 	bl	8000348 <__aeabi_dsub>
 800a0f2:	b007      	add	sp, #28
 800a0f4:	bd30      	pop	{r4, r5, pc}
 800a0f6:	aa02      	add	r2, sp, #8
 800a0f8:	f000 fa52 	bl	800a5a0 <__ieee754_rem_pio2>
 800a0fc:	f000 0003 	and.w	r0, r0, #3
 800a100:	2801      	cmp	r0, #1
 800a102:	d009      	beq.n	800a118 <sin+0x50>
 800a104:	2802      	cmp	r0, #2
 800a106:	d00e      	beq.n	800a126 <sin+0x5e>
 800a108:	b9c0      	cbnz	r0, 800a13c <sin+0x74>
 800a10a:	2301      	movs	r3, #1
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a116:	e7e4      	b.n	800a0e2 <sin+0x1a>
 800a118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a120:	f000 f8c6 	bl	800a2b0 <__kernel_cos>
 800a124:	e7e5      	b.n	800a0f2 <sin+0x2a>
 800a126:	2301      	movs	r3, #1
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a12e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a132:	f000 f97d 	bl	800a430 <__kernel_sin>
 800a136:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a13a:	e7da      	b.n	800a0f2 <sin+0x2a>
 800a13c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a144:	f000 f8b4 	bl	800a2b0 <__kernel_cos>
 800a148:	e7f5      	b.n	800a136 <sin+0x6e>
 800a14a:	bf00      	nop
 800a14c:	3fe921fb 	.word	0x3fe921fb
 800a150:	7fefffff 	.word	0x7fefffff

0800a154 <atan2f>:
 800a154:	f000 bc1a 	b.w	800a98c <__ieee754_atan2f>

0800a158 <sqrtf>:
 800a158:	b508      	push	{r3, lr}
 800a15a:	ed2d 8b02 	vpush	{d8}
 800a15e:	ee08 0a10 	vmov	s16, r0
 800a162:	f000 f81b 	bl	800a19c <__ieee754_sqrtf>
 800a166:	eeb4 8a48 	vcmp.f32	s16, s16
 800a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16e:	ee07 0a90 	vmov	s15, r0
 800a172:	d60c      	bvs.n	800a18e <sqrtf+0x36>
 800a174:	eddf 8a08 	vldr	s17, [pc, #32]	@ 800a198 <sqrtf+0x40>
 800a178:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a180:	d505      	bpl.n	800a18e <sqrtf+0x36>
 800a182:	f7ff fadf 	bl	8009744 <__errno>
 800a186:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800a18a:	2321      	movs	r3, #33	@ 0x21
 800a18c:	6003      	str	r3, [r0, #0]
 800a18e:	ecbd 8b02 	vpop	{d8}
 800a192:	ee17 0a90 	vmov	r0, s15
 800a196:	bd08      	pop	{r3, pc}
 800a198:	00000000 	.word	0x00000000

0800a19c <__ieee754_sqrtf>:
 800a19c:	ee07 0a90 	vmov	s15, r0
 800a1a0:	eef1 7ae7 	vsqrt.f32	s15, s15
 800a1a4:	ee17 0a90 	vmov	r0, s15
 800a1a8:	4770      	bx	lr
 800a1aa:	0000      	movs	r0, r0
 800a1ac:	0000      	movs	r0, r0
	...

0800a1b0 <floor>:
 800a1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a1b8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a1bc:	2e13      	cmp	r6, #19
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	dc35      	bgt.n	800a236 <floor+0x86>
 800a1ca:	2e00      	cmp	r6, #0
 800a1cc:	da17      	bge.n	800a1fe <floor+0x4e>
 800a1ce:	a334      	add	r3, pc, #208	@ (adr r3, 800a2a0 <floor+0xf0>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f6 f8ba 	bl	800034c <__adddf3>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f7f6 fcfc 	bl	8000bd8 <__aeabi_dcmpgt>
 800a1e0:	b150      	cbz	r0, 800a1f8 <floor+0x48>
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	da57      	bge.n	800a296 <floor+0xe6>
 800a1e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a1ea:	432c      	orrs	r4, r5
 800a1ec:	2500      	movs	r5, #0
 800a1ee:	42ac      	cmp	r4, r5
 800a1f0:	4c2d      	ldr	r4, [pc, #180]	@ (800a2a8 <floor+0xf8>)
 800a1f2:	bf08      	it	eq
 800a1f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	e024      	b.n	800a248 <floor+0x98>
 800a1fe:	4f2b      	ldr	r7, [pc, #172]	@ (800a2ac <floor+0xfc>)
 800a200:	4137      	asrs	r7, r6
 800a202:	ea01 0c07 	and.w	ip, r1, r7
 800a206:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a20a:	d01d      	beq.n	800a248 <floor+0x98>
 800a20c:	a324      	add	r3, pc, #144	@ (adr r3, 800a2a0 <floor+0xf0>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f89b 	bl	800034c <__adddf3>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	f7f6 fcdd 	bl	8000bd8 <__aeabi_dcmpgt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0ea      	beq.n	800a1f8 <floor+0x48>
 800a222:	2c00      	cmp	r4, #0
 800a224:	bfbe      	ittt	lt
 800a226:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a22a:	4133      	asrlt	r3, r6
 800a22c:	18e4      	addlt	r4, r4, r3
 800a22e:	ea24 0407 	bic.w	r4, r4, r7
 800a232:	2500      	movs	r5, #0
 800a234:	e7e0      	b.n	800a1f8 <floor+0x48>
 800a236:	2e33      	cmp	r6, #51	@ 0x33
 800a238:	dd0a      	ble.n	800a250 <floor+0xa0>
 800a23a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a23e:	d103      	bne.n	800a248 <floor+0x98>
 800a240:	f7f6 f884 	bl	800034c <__adddf3>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4610      	mov	r0, r2
 800a24a:	4619      	mov	r1, r3
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a254:	f04f 3cff 	mov.w	ip, #4294967295
 800a258:	fa2c f707 	lsr.w	r7, ip, r7
 800a25c:	4207      	tst	r7, r0
 800a25e:	d0f3      	beq.n	800a248 <floor+0x98>
 800a260:	a30f      	add	r3, pc, #60	@ (adr r3, 800a2a0 <floor+0xf0>)
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	f7f6 f871 	bl	800034c <__adddf3>
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	f7f6 fcb3 	bl	8000bd8 <__aeabi_dcmpgt>
 800a272:	2800      	cmp	r0, #0
 800a274:	d0c0      	beq.n	800a1f8 <floor+0x48>
 800a276:	2c00      	cmp	r4, #0
 800a278:	da0a      	bge.n	800a290 <floor+0xe0>
 800a27a:	2e14      	cmp	r6, #20
 800a27c:	d101      	bne.n	800a282 <floor+0xd2>
 800a27e:	3401      	adds	r4, #1
 800a280:	e006      	b.n	800a290 <floor+0xe0>
 800a282:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a286:	2301      	movs	r3, #1
 800a288:	40b3      	lsls	r3, r6
 800a28a:	441d      	add	r5, r3
 800a28c:	4545      	cmp	r5, r8
 800a28e:	d3f6      	bcc.n	800a27e <floor+0xce>
 800a290:	ea25 0507 	bic.w	r5, r5, r7
 800a294:	e7b0      	b.n	800a1f8 <floor+0x48>
 800a296:	2500      	movs	r5, #0
 800a298:	462c      	mov	r4, r5
 800a29a:	e7ad      	b.n	800a1f8 <floor+0x48>
 800a29c:	f3af 8000 	nop.w
 800a2a0:	8800759c 	.word	0x8800759c
 800a2a4:	7e37e43c 	.word	0x7e37e43c
 800a2a8:	bff00000 	.word	0xbff00000
 800a2ac:	000fffff 	.word	0x000fffff

0800a2b0 <__kernel_cos>:
 800a2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a2b8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a2bc:	e9cd 2300 	strd	r2, r3, [sp]
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	d204      	bcs.n	800a2d0 <__kernel_cos+0x20>
 800a2c6:	f7f6 fc91 	bl	8000bec <__aeabi_d2iz>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f000 8086 	beq.w	800a3dc <__kernel_cos+0x12c>
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	f7f6 f9ee 	bl	80006b8 <__aeabi_dmul>
 800a2dc:	4b4e      	ldr	r3, [pc, #312]	@ (800a418 <__kernel_cos+0x168>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	f7f6 f9e8 	bl	80006b8 <__aeabi_dmul>
 800a2e8:	a33f      	add	r3, pc, #252	@ (adr r3, 800a3e8 <__kernel_cos+0x138>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	4682      	mov	sl, r0
 800a2f0:	468b      	mov	fp, r1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f6 f9df 	bl	80006b8 <__aeabi_dmul>
 800a2fa:	a33d      	add	r3, pc, #244	@ (adr r3, 800a3f0 <__kernel_cos+0x140>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	f7f6 f824 	bl	800034c <__adddf3>
 800a304:	4622      	mov	r2, r4
 800a306:	462b      	mov	r3, r5
 800a308:	f7f6 f9d6 	bl	80006b8 <__aeabi_dmul>
 800a30c:	a33a      	add	r3, pc, #232	@ (adr r3, 800a3f8 <__kernel_cos+0x148>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f6 f819 	bl	8000348 <__aeabi_dsub>
 800a316:	4622      	mov	r2, r4
 800a318:	462b      	mov	r3, r5
 800a31a:	f7f6 f9cd 	bl	80006b8 <__aeabi_dmul>
 800a31e:	a338      	add	r3, pc, #224	@ (adr r3, 800a400 <__kernel_cos+0x150>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f6 f812 	bl	800034c <__adddf3>
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	f7f6 f9c4 	bl	80006b8 <__aeabi_dmul>
 800a330:	a335      	add	r3, pc, #212	@ (adr r3, 800a408 <__kernel_cos+0x158>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f6 f807 	bl	8000348 <__aeabi_dsub>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f7f6 f9bb 	bl	80006b8 <__aeabi_dmul>
 800a342:	a333      	add	r3, pc, #204	@ (adr r3, 800a410 <__kernel_cos+0x160>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f800 	bl	800034c <__adddf3>
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	f7f6 f9b2 	bl	80006b8 <__aeabi_dmul>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f9ae 	bl	80006b8 <__aeabi_dmul>
 800a35c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	4640      	mov	r0, r8
 800a366:	4649      	mov	r1, r9
 800a368:	f7f6 f9a6 	bl	80006b8 <__aeabi_dmul>
 800a36c:	460b      	mov	r3, r1
 800a36e:	4602      	mov	r2, r0
 800a370:	4629      	mov	r1, r5
 800a372:	4620      	mov	r0, r4
 800a374:	f7f5 ffe8 	bl	8000348 <__aeabi_dsub>
 800a378:	4b28      	ldr	r3, [pc, #160]	@ (800a41c <__kernel_cos+0x16c>)
 800a37a:	429e      	cmp	r6, r3
 800a37c:	4680      	mov	r8, r0
 800a37e:	4689      	mov	r9, r1
 800a380:	d80e      	bhi.n	800a3a0 <__kernel_cos+0xf0>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4650      	mov	r0, sl
 800a388:	4659      	mov	r1, fp
 800a38a:	f7f5 ffdd 	bl	8000348 <__aeabi_dsub>
 800a38e:	460b      	mov	r3, r1
 800a390:	4923      	ldr	r1, [pc, #140]	@ (800a420 <__kernel_cos+0x170>)
 800a392:	4602      	mov	r2, r0
 800a394:	2000      	movs	r0, #0
 800a396:	f7f5 ffd7 	bl	8000348 <__aeabi_dsub>
 800a39a:	b003      	add	sp, #12
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	4b20      	ldr	r3, [pc, #128]	@ (800a424 <__kernel_cos+0x174>)
 800a3a2:	491f      	ldr	r1, [pc, #124]	@ (800a420 <__kernel_cos+0x170>)
 800a3a4:	429e      	cmp	r6, r3
 800a3a6:	bf8c      	ite	hi
 800a3a8:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a428 <__kernel_cos+0x178>)
 800a3aa:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a3ae:	2400      	movs	r4, #0
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f7f5 ffc7 	bl	8000348 <__aeabi_dsub>
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460f      	mov	r7, r1
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	4659      	mov	r1, fp
 800a3c6:	f7f5 ffbf 	bl	8000348 <__aeabi_dsub>
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	f7f5 ffbb 	bl	8000348 <__aeabi_dsub>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	e7dc      	b.n	800a396 <__kernel_cos+0xe6>
 800a3dc:	4910      	ldr	r1, [pc, #64]	@ (800a420 <__kernel_cos+0x170>)
 800a3de:	2000      	movs	r0, #0
 800a3e0:	e7db      	b.n	800a39a <__kernel_cos+0xea>
 800a3e2:	bf00      	nop
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	be8838d4 	.word	0xbe8838d4
 800a3ec:	bda8fae9 	.word	0xbda8fae9
 800a3f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a3f4:	3e21ee9e 	.word	0x3e21ee9e
 800a3f8:	809c52ad 	.word	0x809c52ad
 800a3fc:	3e927e4f 	.word	0x3e927e4f
 800a400:	19cb1590 	.word	0x19cb1590
 800a404:	3efa01a0 	.word	0x3efa01a0
 800a408:	16c15177 	.word	0x16c15177
 800a40c:	3f56c16c 	.word	0x3f56c16c
 800a410:	5555554c 	.word	0x5555554c
 800a414:	3fa55555 	.word	0x3fa55555
 800a418:	3fe00000 	.word	0x3fe00000
 800a41c:	3fd33332 	.word	0x3fd33332
 800a420:	3ff00000 	.word	0x3ff00000
 800a424:	3fe90000 	.word	0x3fe90000
 800a428:	3fd20000 	.word	0x3fd20000
 800a42c:	00000000 	.word	0x00000000

0800a430 <__kernel_sin>:
 800a430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	461f      	mov	r7, r3
 800a436:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a43a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a43e:	b085      	sub	sp, #20
 800a440:	4604      	mov	r4, r0
 800a442:	460d      	mov	r5, r1
 800a444:	4616      	mov	r6, r2
 800a446:	d203      	bcs.n	800a450 <__kernel_sin+0x20>
 800a448:	f7f6 fbd0 	bl	8000bec <__aeabi_d2iz>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d051      	beq.n	800a4f4 <__kernel_sin+0xc4>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f6 f92e 	bl	80006b8 <__aeabi_dmul>
 800a45c:	4682      	mov	sl, r0
 800a45e:	468b      	mov	fp, r1
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f6 f926 	bl	80006b8 <__aeabi_dmul>
 800a46c:	a341      	add	r3, pc, #260	@ (adr r3, 800a574 <__kernel_sin+0x144>)
 800a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a472:	4680      	mov	r8, r0
 800a474:	4689      	mov	r9, r1
 800a476:	4650      	mov	r0, sl
 800a478:	4659      	mov	r1, fp
 800a47a:	f7f6 f91d 	bl	80006b8 <__aeabi_dmul>
 800a47e:	a33f      	add	r3, pc, #252	@ (adr r3, 800a57c <__kernel_sin+0x14c>)
 800a480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a484:	f7f5 ff60 	bl	8000348 <__aeabi_dsub>
 800a488:	4652      	mov	r2, sl
 800a48a:	465b      	mov	r3, fp
 800a48c:	f7f6 f914 	bl	80006b8 <__aeabi_dmul>
 800a490:	a33c      	add	r3, pc, #240	@ (adr r3, 800a584 <__kernel_sin+0x154>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f5 ff59 	bl	800034c <__adddf3>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f6 f90b 	bl	80006b8 <__aeabi_dmul>
 800a4a2:	a33a      	add	r3, pc, #232	@ (adr r3, 800a58c <__kernel_sin+0x15c>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f5 ff4e 	bl	8000348 <__aeabi_dsub>
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	f7f6 f902 	bl	80006b8 <__aeabi_dmul>
 800a4b4:	a337      	add	r3, pc, #220	@ (adr r3, 800a594 <__kernel_sin+0x164>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	f7f5 ff47 	bl	800034c <__adddf3>
 800a4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a4c4:	b9db      	cbnz	r3, 800a4fe <__kernel_sin+0xce>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4650      	mov	r0, sl
 800a4cc:	4659      	mov	r1, fp
 800a4ce:	f7f6 f8f3 	bl	80006b8 <__aeabi_dmul>
 800a4d2:	a325      	add	r3, pc, #148	@ (adr r3, 800a568 <__kernel_sin+0x138>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 ff36 	bl	8000348 <__aeabi_dsub>
 800a4dc:	4642      	mov	r2, r8
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f7f6 f8ea 	bl	80006b8 <__aeabi_dmul>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	f7f5 ff2e 	bl	800034c <__adddf3>
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	b005      	add	sp, #20
 800a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a570 <__kernel_sin+0x140>)
 800a500:	2200      	movs	r2, #0
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f6 f8d7 	bl	80006b8 <__aeabi_dmul>
 800a50a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	f7f6 f8cf 	bl	80006b8 <__aeabi_dmul>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	f7f5 ff11 	bl	8000348 <__aeabi_dsub>
 800a526:	4652      	mov	r2, sl
 800a528:	465b      	mov	r3, fp
 800a52a:	f7f6 f8c5 	bl	80006b8 <__aeabi_dmul>
 800a52e:	4632      	mov	r2, r6
 800a530:	463b      	mov	r3, r7
 800a532:	f7f5 ff09 	bl	8000348 <__aeabi_dsub>
 800a536:	a30c      	add	r3, pc, #48	@ (adr r3, 800a568 <__kernel_sin+0x138>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f6 f8b8 	bl	80006b8 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4630      	mov	r0, r6
 800a54e:	4639      	mov	r1, r7
 800a550:	f7f5 fefc 	bl	800034c <__adddf3>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f5 fef4 	bl	8000348 <__aeabi_dsub>
 800a560:	e7c6      	b.n	800a4f0 <__kernel_sin+0xc0>
 800a562:	bf00      	nop
 800a564:	f3af 8000 	nop.w
 800a568:	55555549 	.word	0x55555549
 800a56c:	3fc55555 	.word	0x3fc55555
 800a570:	3fe00000 	.word	0x3fe00000
 800a574:	5acfd57c 	.word	0x5acfd57c
 800a578:	3de5d93a 	.word	0x3de5d93a
 800a57c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a580:	3e5ae5e6 	.word	0x3e5ae5e6
 800a584:	57b1fe7d 	.word	0x57b1fe7d
 800a588:	3ec71de3 	.word	0x3ec71de3
 800a58c:	19c161d5 	.word	0x19c161d5
 800a590:	3f2a01a0 	.word	0x3f2a01a0
 800a594:	1110f8a6 	.word	0x1110f8a6
 800a598:	3f811111 	.word	0x3f811111
 800a59c:	00000000 	.word	0x00000000

0800a5a0 <__ieee754_rem_pio2>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	4bc4      	ldr	r3, [pc, #784]	@ (800a8b8 <__ieee754_rem_pio2+0x318>)
 800a5a6:	b08d      	sub	sp, #52	@ 0x34
 800a5a8:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a5ac:	4598      	cmp	r8, r3
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	4614      	mov	r4, r2
 800a5b4:	9104      	str	r1, [sp, #16]
 800a5b6:	d807      	bhi.n	800a5c8 <__ieee754_rem_pio2+0x28>
 800a5b8:	e9c2 6700 	strd	r6, r7, [r2]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a5c4:	2500      	movs	r5, #0
 800a5c6:	e026      	b.n	800a616 <__ieee754_rem_pio2+0x76>
 800a5c8:	4bbc      	ldr	r3, [pc, #752]	@ (800a8bc <__ieee754_rem_pio2+0x31c>)
 800a5ca:	4598      	cmp	r8, r3
 800a5cc:	d876      	bhi.n	800a6bc <__ieee754_rem_pio2+0x11c>
 800a5ce:	9b04      	ldr	r3, [sp, #16]
 800a5d0:	4dbb      	ldr	r5, [pc, #748]	@ (800a8c0 <__ieee754_rem_pio2+0x320>)
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x2e0>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	dd38      	ble.n	800a64e <__ieee754_rem_pio2+0xae>
 800a5dc:	f7f5 feb4 	bl	8000348 <__aeabi_dsub>
 800a5e0:	45a8      	cmp	r8, r5
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	d01a      	beq.n	800a61e <__ieee754_rem_pio2+0x7e>
 800a5e8:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x2e8>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f5 feab 	bl	8000348 <__aeabi_dsub>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	f7f5 fea3 	bl	8000348 <__aeabi_dsub>
 800a602:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x2e8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f5 fe9e 	bl	8000348 <__aeabi_dsub>
 800a60c:	e9c4 8900 	strd	r8, r9, [r4]
 800a610:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a614:	2501      	movs	r5, #1
 800a616:	4628      	mov	r0, r5
 800a618:	b00d      	add	sp, #52	@ 0x34
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61e:	a39c      	add	r3, pc, #624	@ (adr r3, 800a890 <__ieee754_rem_pio2+0x2f0>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f7f5 fe90 	bl	8000348 <__aeabi_dsub>
 800a628:	a39b      	add	r3, pc, #620	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x2f8>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	4606      	mov	r6, r0
 800a630:	460f      	mov	r7, r1
 800a632:	f7f5 fe89 	bl	8000348 <__aeabi_dsub>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4680      	mov	r8, r0
 800a63c:	4689      	mov	r9, r1
 800a63e:	4630      	mov	r0, r6
 800a640:	4639      	mov	r1, r7
 800a642:	f7f5 fe81 	bl	8000348 <__aeabi_dsub>
 800a646:	a394      	add	r3, pc, #592	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x2f8>)
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	e7dc      	b.n	800a608 <__ieee754_rem_pio2+0x68>
 800a64e:	f7f5 fe7d 	bl	800034c <__adddf3>
 800a652:	45a8      	cmp	r8, r5
 800a654:	4606      	mov	r6, r0
 800a656:	460f      	mov	r7, r1
 800a658:	d018      	beq.n	800a68c <__ieee754_rem_pio2+0xec>
 800a65a:	a38b      	add	r3, pc, #556	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x2e8>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f7f5 fe74 	bl	800034c <__adddf3>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4680      	mov	r8, r0
 800a66a:	4689      	mov	r9, r1
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f5 fe6a 	bl	8000348 <__aeabi_dsub>
 800a674:	a384      	add	r3, pc, #528	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x2e8>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe67 	bl	800034c <__adddf3>
 800a67e:	f04f 35ff 	mov.w	r5, #4294967295
 800a682:	e9c4 8900 	strd	r8, r9, [r4]
 800a686:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a68a:	e7c4      	b.n	800a616 <__ieee754_rem_pio2+0x76>
 800a68c:	a380      	add	r3, pc, #512	@ (adr r3, 800a890 <__ieee754_rem_pio2+0x2f0>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fe5b 	bl	800034c <__adddf3>
 800a696:	a380      	add	r3, pc, #512	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x2f8>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	4606      	mov	r6, r0
 800a69e:	460f      	mov	r7, r1
 800a6a0:	f7f5 fe54 	bl	800034c <__adddf3>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4689      	mov	r9, r1
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 fe4a 	bl	8000348 <__aeabi_dsub>
 800a6b4:	a378      	add	r3, pc, #480	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x2f8>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	e7de      	b.n	800a67a <__ieee754_rem_pio2+0xda>
 800a6bc:	4b81      	ldr	r3, [pc, #516]	@ (800a8c4 <__ieee754_rem_pio2+0x324>)
 800a6be:	4598      	cmp	r8, r3
 800a6c0:	f200 80cf 	bhi.w	800a862 <__ieee754_rem_pio2+0x2c2>
 800a6c4:	f7ff fcfc 	bl	800a0c0 <fabs>
 800a6c8:	a375      	add	r3, pc, #468	@ (adr r3, 800a8a0 <__ieee754_rem_pio2+0x300>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	f7f5 fff1 	bl	80006b8 <__aeabi_dmul>
 800a6d6:	4b7c      	ldr	r3, [pc, #496]	@ (800a8c8 <__ieee754_rem_pio2+0x328>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 fe37 	bl	800034c <__adddf3>
 800a6de:	f7f6 fa85 	bl	8000bec <__aeabi_d2iz>
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	f7f5 ff7e 	bl	80005e4 <__aeabi_i2d>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6f0:	a363      	add	r3, pc, #396	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x2e0>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 ffdf 	bl	80006b8 <__aeabi_dmul>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4630      	mov	r0, r6
 800a700:	4639      	mov	r1, r7
 800a702:	f7f5 fe21 	bl	8000348 <__aeabi_dsub>
 800a706:	a360      	add	r3, pc, #384	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x2e8>)
 800a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70c:	4682      	mov	sl, r0
 800a70e:	468b      	mov	fp, r1
 800a710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a714:	f7f5 ffd0 	bl	80006b8 <__aeabi_dmul>
 800a718:	2d1f      	cmp	r5, #31
 800a71a:	4606      	mov	r6, r0
 800a71c:	460f      	mov	r7, r1
 800a71e:	dc0c      	bgt.n	800a73a <__ieee754_rem_pio2+0x19a>
 800a720:	4b6a      	ldr	r3, [pc, #424]	@ (800a8cc <__ieee754_rem_pio2+0x32c>)
 800a722:	1e6a      	subs	r2, r5, #1
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	4543      	cmp	r3, r8
 800a72a:	d006      	beq.n	800a73a <__ieee754_rem_pio2+0x19a>
 800a72c:	4632      	mov	r2, r6
 800a72e:	463b      	mov	r3, r7
 800a730:	4650      	mov	r0, sl
 800a732:	4659      	mov	r1, fp
 800a734:	f7f5 fe08 	bl	8000348 <__aeabi_dsub>
 800a738:	e00e      	b.n	800a758 <__ieee754_rem_pio2+0x1b8>
 800a73a:	463b      	mov	r3, r7
 800a73c:	4632      	mov	r2, r6
 800a73e:	4650      	mov	r0, sl
 800a740:	4659      	mov	r1, fp
 800a742:	f7f5 fe01 	bl	8000348 <__aeabi_dsub>
 800a746:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a750:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a754:	2b10      	cmp	r3, #16
 800a756:	dc02      	bgt.n	800a75e <__ieee754_rem_pio2+0x1be>
 800a758:	e9c4 0100 	strd	r0, r1, [r4]
 800a75c:	e039      	b.n	800a7d2 <__ieee754_rem_pio2+0x232>
 800a75e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a890 <__ieee754_rem_pio2+0x2f0>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a768:	f7f5 ffa6 	bl	80006b8 <__aeabi_dmul>
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4650      	mov	r0, sl
 800a776:	4659      	mov	r1, fp
 800a778:	f7f5 fde6 	bl	8000348 <__aeabi_dsub>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4680      	mov	r8, r0
 800a782:	4689      	mov	r9, r1
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 fdde 	bl	8000348 <__aeabi_dsub>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	f7f5 fdda 	bl	8000348 <__aeabi_dsub>
 800a794:	a340      	add	r3, pc, #256	@ (adr r3, 800a898 <__ieee754_rem_pio2+0x2f8>)
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	4606      	mov	r6, r0
 800a79c:	460f      	mov	r7, r1
 800a79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a2:	f7f5 ff89 	bl	80006b8 <__aeabi_dmul>
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	463b      	mov	r3, r7
 800a7aa:	f7f5 fdcd 	bl	8000348 <__aeabi_dsub>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4606      	mov	r6, r0
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f5 fdc5 	bl	8000348 <__aeabi_dsub>
 800a7be:	9a05      	ldr	r2, [sp, #20]
 800a7c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b31      	cmp	r3, #49	@ 0x31
 800a7c8:	dc20      	bgt.n	800a80c <__ieee754_rem_pio2+0x26c>
 800a7ca:	e9c4 0100 	strd	r0, r1, [r4]
 800a7ce:	46c2      	mov	sl, r8
 800a7d0:	46cb      	mov	fp, r9
 800a7d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	4642      	mov	r2, r8
 800a7da:	464b      	mov	r3, r9
 800a7dc:	4659      	mov	r1, fp
 800a7de:	f7f5 fdb3 	bl	8000348 <__aeabi_dsub>
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	f7f5 fdaf 	bl	8000348 <__aeabi_dsub>
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7f2:	f6bf af10 	bge.w	800a616 <__ieee754_rem_pio2+0x76>
 800a7f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a7fa:	6063      	str	r3, [r4, #4]
 800a7fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a800:	f8c4 8000 	str.w	r8, [r4]
 800a804:	60a0      	str	r0, [r4, #8]
 800a806:	60e3      	str	r3, [r4, #12]
 800a808:	426d      	negs	r5, r5
 800a80a:	e704      	b.n	800a616 <__ieee754_rem_pio2+0x76>
 800a80c:	a326      	add	r3, pc, #152	@ (adr r3, 800a8a8 <__ieee754_rem_pio2+0x308>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a816:	f7f5 ff4f 	bl	80006b8 <__aeabi_dmul>
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4640      	mov	r0, r8
 800a824:	4649      	mov	r1, r9
 800a826:	f7f5 fd8f 	bl	8000348 <__aeabi_dsub>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4682      	mov	sl, r0
 800a830:	468b      	mov	fp, r1
 800a832:	4640      	mov	r0, r8
 800a834:	4649      	mov	r1, r9
 800a836:	f7f5 fd87 	bl	8000348 <__aeabi_dsub>
 800a83a:	4632      	mov	r2, r6
 800a83c:	463b      	mov	r3, r7
 800a83e:	f7f5 fd83 	bl	8000348 <__aeabi_dsub>
 800a842:	a31b      	add	r3, pc, #108	@ (adr r3, 800a8b0 <__ieee754_rem_pio2+0x310>)
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	4606      	mov	r6, r0
 800a84a:	460f      	mov	r7, r1
 800a84c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a850:	f7f5 ff32 	bl	80006b8 <__aeabi_dmul>
 800a854:	4632      	mov	r2, r6
 800a856:	463b      	mov	r3, r7
 800a858:	f7f5 fd76 	bl	8000348 <__aeabi_dsub>
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	e764      	b.n	800a72c <__ieee754_rem_pio2+0x18c>
 800a862:	4b1b      	ldr	r3, [pc, #108]	@ (800a8d0 <__ieee754_rem_pio2+0x330>)
 800a864:	4598      	cmp	r8, r3
 800a866:	d935      	bls.n	800a8d4 <__ieee754_rem_pio2+0x334>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	f7f5 fd6c 	bl	8000348 <__aeabi_dsub>
 800a870:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a874:	e9c4 0100 	strd	r0, r1, [r4]
 800a878:	e6a4      	b.n	800a5c4 <__ieee754_rem_pio2+0x24>
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
 800a880:	54400000 	.word	0x54400000
 800a884:	3ff921fb 	.word	0x3ff921fb
 800a888:	1a626331 	.word	0x1a626331
 800a88c:	3dd0b461 	.word	0x3dd0b461
 800a890:	1a600000 	.word	0x1a600000
 800a894:	3dd0b461 	.word	0x3dd0b461
 800a898:	2e037073 	.word	0x2e037073
 800a89c:	3ba3198a 	.word	0x3ba3198a
 800a8a0:	6dc9c883 	.word	0x6dc9c883
 800a8a4:	3fe45f30 	.word	0x3fe45f30
 800a8a8:	2e000000 	.word	0x2e000000
 800a8ac:	3ba3198a 	.word	0x3ba3198a
 800a8b0:	252049c1 	.word	0x252049c1
 800a8b4:	397b839a 	.word	0x397b839a
 800a8b8:	3fe921fb 	.word	0x3fe921fb
 800a8bc:	4002d97b 	.word	0x4002d97b
 800a8c0:	3ff921fb 	.word	0x3ff921fb
 800a8c4:	413921fb 	.word	0x413921fb
 800a8c8:	3fe00000 	.word	0x3fe00000
 800a8cc:	0801e930 	.word	0x0801e930
 800a8d0:	7fefffff 	.word	0x7fefffff
 800a8d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a8d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a8dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	f7f6 f983 	bl	8000bec <__aeabi_d2iz>
 800a8e6:	f7f5 fe7d 	bl	80005e4 <__aeabi_i2d>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8f6:	f7f5 fd27 	bl	8000348 <__aeabi_dsub>
 800a8fa:	4b22      	ldr	r3, [pc, #136]	@ (800a984 <__ieee754_rem_pio2+0x3e4>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f7f5 fedb 	bl	80006b8 <__aeabi_dmul>
 800a902:	460f      	mov	r7, r1
 800a904:	4606      	mov	r6, r0
 800a906:	f7f6 f971 	bl	8000bec <__aeabi_d2iz>
 800a90a:	f7f5 fe6b 	bl	80005e4 <__aeabi_i2d>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a91a:	f7f5 fd15 	bl	8000348 <__aeabi_dsub>
 800a91e:	4b19      	ldr	r3, [pc, #100]	@ (800a984 <__ieee754_rem_pio2+0x3e4>)
 800a920:	2200      	movs	r2, #0
 800a922:	f7f5 fec9 	bl	80006b8 <__aeabi_dmul>
 800a926:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a92a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a92e:	f04f 0803 	mov.w	r8, #3
 800a932:	2600      	movs	r6, #0
 800a934:	2700      	movs	r7, #0
 800a936:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a93a:	4632      	mov	r2, r6
 800a93c:	463b      	mov	r3, r7
 800a93e:	46c2      	mov	sl, r8
 800a940:	f108 38ff 	add.w	r8, r8, #4294967295
 800a944:	f7f6 f920 	bl	8000b88 <__aeabi_dcmpeq>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d1f4      	bne.n	800a936 <__ieee754_rem_pio2+0x396>
 800a94c:	4b0e      	ldr	r3, [pc, #56]	@ (800a988 <__ieee754_rem_pio2+0x3e8>)
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	2302      	movs	r3, #2
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	462a      	mov	r2, r5
 800a956:	4653      	mov	r3, sl
 800a958:	4621      	mov	r1, r4
 800a95a:	a806      	add	r0, sp, #24
 800a95c:	f000 fa10 	bl	800ad80 <__kernel_rem_pio2>
 800a960:	9b04      	ldr	r3, [sp, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	4605      	mov	r5, r0
 800a966:	f6bf ae56 	bge.w	800a616 <__ieee754_rem_pio2+0x76>
 800a96a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a96e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a972:	e9c4 2300 	strd	r2, r3, [r4]
 800a976:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a97a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a97e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a982:	e741      	b.n	800a808 <__ieee754_rem_pio2+0x268>
 800a984:	41700000 	.word	0x41700000
 800a988:	0801e9b0 	.word	0x0801e9b0

0800a98c <__ieee754_atan2f>:
 800a98c:	ee07 1a10 	vmov	s14, r1
 800a990:	460a      	mov	r2, r1
 800a992:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a996:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a99a:	b538      	push	{r3, r4, r5, lr}
 800a99c:	ee07 0a90 	vmov	s15, r0
 800a9a0:	d805      	bhi.n	800a9ae <__ieee754_atan2f+0x22>
 800a9a2:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a9a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	d904      	bls.n	800a9b8 <__ieee754_atan2f+0x2c>
 800a9ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a9b2:	ee17 0a90 	vmov	r0, s15
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a9bc:	d103      	bne.n	800a9c6 <__ieee754_atan2f+0x3a>
 800a9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c2:	f000 b885 	b.w	800aad0 <atanf>
 800a9c6:	1794      	asrs	r4, r2, #30
 800a9c8:	f004 0402 	and.w	r4, r4, #2
 800a9cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a9d0:	b943      	cbnz	r3, 800a9e4 <__ieee754_atan2f+0x58>
 800a9d2:	2c02      	cmp	r4, #2
 800a9d4:	d060      	beq.n	800aa98 <__ieee754_atan2f+0x10c>
 800a9d6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800aaac <__ieee754_atan2f+0x120>
 800a9da:	2c03      	cmp	r4, #3
 800a9dc:	bf08      	it	eq
 800a9de:	eef0 7a47 	vmoveq.f32	s15, s14
 800a9e2:	e7e6      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800a9e4:	b941      	cbnz	r1, 800a9f8 <__ieee754_atan2f+0x6c>
 800a9e6:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800aab0 <__ieee754_atan2f+0x124>
 800a9ea:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800aab4 <__ieee754_atan2f+0x128>
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	bfb8      	it	lt
 800a9f2:	eef0 7a47 	vmovlt.f32	s15, s14
 800a9f6:	e7dc      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800a9f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a9fc:	d110      	bne.n	800aa20 <__ieee754_atan2f+0x94>
 800a9fe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aa02:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa06:	d107      	bne.n	800aa18 <__ieee754_atan2f+0x8c>
 800aa08:	2c02      	cmp	r4, #2
 800aa0a:	d848      	bhi.n	800aa9e <__ieee754_atan2f+0x112>
 800aa0c:	4b2a      	ldr	r3, [pc, #168]	@ (800aab8 <__ieee754_atan2f+0x12c>)
 800aa0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa12:	edd3 7a00 	vldr	s15, [r3]
 800aa16:	e7cc      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa18:	2c02      	cmp	r4, #2
 800aa1a:	d843      	bhi.n	800aaa4 <__ieee754_atan2f+0x118>
 800aa1c:	4b27      	ldr	r3, [pc, #156]	@ (800aabc <__ieee754_atan2f+0x130>)
 800aa1e:	e7f6      	b.n	800aa0e <__ieee754_atan2f+0x82>
 800aa20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aa24:	d0df      	beq.n	800a9e6 <__ieee754_atan2f+0x5a>
 800aa26:	1a5b      	subs	r3, r3, r1
 800aa28:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800aa2c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aa30:	da1c      	bge.n	800aa6c <__ieee754_atan2f+0xe0>
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	da01      	bge.n	800aa3a <__ieee754_atan2f+0xae>
 800aa36:	313c      	adds	r1, #60	@ 0x3c
 800aa38:	db1b      	blt.n	800aa72 <__ieee754_atan2f+0xe6>
 800aa3a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800aa3e:	ee17 0a90 	vmov	r0, s15
 800aa42:	f000 f91b 	bl	800ac7c <fabsf>
 800aa46:	f000 f843 	bl	800aad0 <atanf>
 800aa4a:	ee07 0a90 	vmov	s15, r0
 800aa4e:	2c01      	cmp	r4, #1
 800aa50:	d012      	beq.n	800aa78 <__ieee754_atan2f+0xec>
 800aa52:	2c02      	cmp	r4, #2
 800aa54:	d017      	beq.n	800aa86 <__ieee754_atan2f+0xfa>
 800aa56:	2c00      	cmp	r4, #0
 800aa58:	d0ab      	beq.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa5a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800aac0 <__ieee754_atan2f+0x134>
 800aa5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa62:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800aac4 <__ieee754_atan2f+0x138>
 800aa66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa6a:	e7a2      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa6c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800aab0 <__ieee754_atan2f+0x124>
 800aa70:	e7ed      	b.n	800aa4e <__ieee754_atan2f+0xc2>
 800aa72:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800aac8 <__ieee754_atan2f+0x13c>
 800aa76:	e7ea      	b.n	800aa4e <__ieee754_atan2f+0xc2>
 800aa78:	ee17 3a90 	vmov	r3, s15
 800aa7c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	e795      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa86:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800aac0 <__ieee754_atan2f+0x134>
 800aa8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa8e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800aac4 <__ieee754_atan2f+0x138>
 800aa92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa96:	e78c      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa98:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800aac4 <__ieee754_atan2f+0x138>
 800aa9c:	e789      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aa9e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800aacc <__ieee754_atan2f+0x140>
 800aaa2:	e786      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aaa4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aac8 <__ieee754_atan2f+0x13c>
 800aaa8:	e783      	b.n	800a9b2 <__ieee754_atan2f+0x26>
 800aaaa:	bf00      	nop
 800aaac:	c0490fdb 	.word	0xc0490fdb
 800aab0:	3fc90fdb 	.word	0x3fc90fdb
 800aab4:	bfc90fdb 	.word	0xbfc90fdb
 800aab8:	0801eac4 	.word	0x0801eac4
 800aabc:	0801eab8 	.word	0x0801eab8
 800aac0:	33bbbd2e 	.word	0x33bbbd2e
 800aac4:	40490fdb 	.word	0x40490fdb
 800aac8:	00000000 	.word	0x00000000
 800aacc:	3f490fdb 	.word	0x3f490fdb

0800aad0 <atanf>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
 800aad6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800aada:	ee07 0a90 	vmov	s15, r0
 800aade:	4605      	mov	r5, r0
 800aae0:	d310      	bcc.n	800ab04 <atanf+0x34>
 800aae2:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800aae6:	d904      	bls.n	800aaf2 <atanf+0x22>
 800aae8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aaec:	ee17 0a90 	vmov	r0, s15
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800ac30 <atanf+0x160>
 800aaf6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800ac34 <atanf+0x164>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	bfc8      	it	gt
 800aafe:	eef0 7a47 	vmovgt.f32	s15, s14
 800ab02:	e7f3      	b.n	800aaec <atanf+0x1c>
 800ab04:	4b4c      	ldr	r3, [pc, #304]	@ (800ac38 <atanf+0x168>)
 800ab06:	429c      	cmp	r4, r3
 800ab08:	d810      	bhi.n	800ab2c <atanf+0x5c>
 800ab0a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ab0e:	d20a      	bcs.n	800ab26 <atanf+0x56>
 800ab10:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ac3c <atanf+0x16c>
 800ab14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab1c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ab20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab24:	dce2      	bgt.n	800aaec <atanf+0x1c>
 800ab26:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2a:	e015      	b.n	800ab58 <atanf+0x88>
 800ab2c:	f000 f8a6 	bl	800ac7c <fabsf>
 800ab30:	4b43      	ldr	r3, [pc, #268]	@ (800ac40 <atanf+0x170>)
 800ab32:	429c      	cmp	r4, r3
 800ab34:	ee07 0a10 	vmov	s14, r0
 800ab38:	d84f      	bhi.n	800abda <atanf+0x10a>
 800ab3a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ab3e:	429c      	cmp	r4, r3
 800ab40:	d841      	bhi.n	800abc6 <atanf+0xf6>
 800ab42:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ab46:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800ab4a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ab4e:	2300      	movs	r3, #0
 800ab50:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ab5e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ac44 <atanf+0x174>
 800ab62:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800ac48 <atanf+0x178>
 800ab66:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800ac4c <atanf+0x17c>
 800ab6a:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ab6e:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ab72:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ac50 <atanf+0x180>
 800ab76:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab7a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800ac54 <atanf+0x184>
 800ab7e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab82:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800ac58 <atanf+0x188>
 800ab86:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac5c <atanf+0x18c>
 800ab8e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab92:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ac60 <atanf+0x190>
 800ab96:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ab9a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ac64 <atanf+0x194>
 800ab9e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800aba2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800ac68 <atanf+0x198>
 800aba6:	eea7 5a26 	vfma.f32	s10, s14, s13
 800abaa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800ac6c <atanf+0x19c>
 800abae:	eea5 7a26 	vfma.f32	s14, s10, s13
 800abb2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800abb6:	eea5 7a86 	vfma.f32	s14, s11, s12
 800abba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800abbe:	d121      	bne.n	800ac04 <atanf+0x134>
 800abc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abc4:	e792      	b.n	800aaec <atanf+0x1c>
 800abc6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800abca:	ee77 6a67 	vsub.f32	s13, s14, s15
 800abce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abd2:	2301      	movs	r3, #1
 800abd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd8:	e7be      	b.n	800ab58 <atanf+0x88>
 800abda:	4b25      	ldr	r3, [pc, #148]	@ (800ac70 <atanf+0x1a0>)
 800abdc:	429c      	cmp	r4, r3
 800abde:	d80b      	bhi.n	800abf8 <atanf+0x128>
 800abe0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800abe4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abe8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800abec:	2302      	movs	r3, #2
 800abee:	ee37 6a67 	vsub.f32	s12, s14, s15
 800abf2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800abf6:	e7af      	b.n	800ab58 <atanf+0x88>
 800abf8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800abfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac00:	2303      	movs	r3, #3
 800ac02:	e7a9      	b.n	800ab58 <atanf+0x88>
 800ac04:	4a1b      	ldr	r2, [pc, #108]	@ (800ac74 <atanf+0x1a4>)
 800ac06:	491c      	ldr	r1, [pc, #112]	@ (800ac78 <atanf+0x1a8>)
 800ac08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ac0c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac10:	edd3 6a00 	vldr	s13, [r3]
 800ac14:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac18:	2d00      	cmp	r5, #0
 800ac1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac1e:	edd2 7a00 	vldr	s15, [r2]
 800ac22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac26:	bfb8      	it	lt
 800ac28:	eef1 7a67 	vneglt.f32	s15, s15
 800ac2c:	e75e      	b.n	800aaec <atanf+0x1c>
 800ac2e:	bf00      	nop
 800ac30:	bfc90fdb 	.word	0xbfc90fdb
 800ac34:	3fc90fdb 	.word	0x3fc90fdb
 800ac38:	3edfffff 	.word	0x3edfffff
 800ac3c:	7149f2ca 	.word	0x7149f2ca
 800ac40:	3f97ffff 	.word	0x3f97ffff
 800ac44:	3c8569d7 	.word	0x3c8569d7
 800ac48:	3d4bda59 	.word	0x3d4bda59
 800ac4c:	bd6ef16b 	.word	0xbd6ef16b
 800ac50:	3d886b35 	.word	0x3d886b35
 800ac54:	3dba2e6e 	.word	0x3dba2e6e
 800ac58:	3e124925 	.word	0x3e124925
 800ac5c:	3eaaaaab 	.word	0x3eaaaaab
 800ac60:	bd15a221 	.word	0xbd15a221
 800ac64:	bd9d8795 	.word	0xbd9d8795
 800ac68:	bde38e38 	.word	0xbde38e38
 800ac6c:	be4ccccd 	.word	0xbe4ccccd
 800ac70:	401bffff 	.word	0x401bffff
 800ac74:	0801eae0 	.word	0x0801eae0
 800ac78:	0801ead0 	.word	0x0801ead0

0800ac7c <fabsf>:
 800ac7c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ac80:	4770      	bx	lr
 800ac82:	0000      	movs	r0, r0
 800ac84:	0000      	movs	r0, r0
	...

0800ac88 <scalbn>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	4616      	mov	r6, r2
 800ac8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac90:	4604      	mov	r4, r0
 800ac92:	460d      	mov	r5, r1
 800ac94:	460b      	mov	r3, r1
 800ac96:	b982      	cbnz	r2, 800acba <scalbn+0x32>
 800ac98:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac9c:	4303      	orrs	r3, r0
 800ac9e:	d039      	beq.n	800ad14 <scalbn+0x8c>
 800aca0:	4b33      	ldr	r3, [pc, #204]	@ (800ad70 <scalbn+0xe8>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	f7f5 fd08 	bl	80006b8 <__aeabi_dmul>
 800aca8:	4b32      	ldr	r3, [pc, #200]	@ (800ad74 <scalbn+0xec>)
 800acaa:	429e      	cmp	r6, r3
 800acac:	4604      	mov	r4, r0
 800acae:	460d      	mov	r5, r1
 800acb0:	da0d      	bge.n	800acce <scalbn+0x46>
 800acb2:	a327      	add	r3, pc, #156	@ (adr r3, 800ad50 <scalbn+0xc8>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	e01c      	b.n	800acf4 <scalbn+0x6c>
 800acba:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800acbe:	42ba      	cmp	r2, r7
 800acc0:	d109      	bne.n	800acd6 <scalbn+0x4e>
 800acc2:	4602      	mov	r2, r0
 800acc4:	f7f5 fb42 	bl	800034c <__adddf3>
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	e022      	b.n	800ad14 <scalbn+0x8c>
 800acce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800acd2:	460b      	mov	r3, r1
 800acd4:	3a36      	subs	r2, #54	@ 0x36
 800acd6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800acda:	428e      	cmp	r6, r1
 800acdc:	dd0d      	ble.n	800acfa <scalbn+0x72>
 800acde:	2d00      	cmp	r5, #0
 800ace0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ad58 <scalbn+0xd0>)
 800ace2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace6:	da02      	bge.n	800acee <scalbn+0x66>
 800ace8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ad60 <scalbn+0xd8>)
 800acea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acee:	a31a      	add	r3, pc, #104	@ (adr r3, 800ad58 <scalbn+0xd0>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 fce0 	bl	80006b8 <__aeabi_dmul>
 800acf8:	e7e6      	b.n	800acc8 <scalbn+0x40>
 800acfa:	4432      	add	r2, r6
 800acfc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ad00:	428a      	cmp	r2, r1
 800ad02:	dcec      	bgt.n	800acde <scalbn+0x56>
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	dd08      	ble.n	800ad1a <scalbn+0x92>
 800ad08:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ad0c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ad10:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad14:	4620      	mov	r0, r4
 800ad16:	4629      	mov	r1, r5
 800ad18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad1a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ad1e:	da08      	bge.n	800ad32 <scalbn+0xaa>
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	a10b      	add	r1, pc, #44	@ (adr r1, 800ad50 <scalbn+0xc8>)
 800ad24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad28:	dac3      	bge.n	800acb2 <scalbn+0x2a>
 800ad2a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ad68 <scalbn+0xe0>)
 800ad2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad30:	e7bf      	b.n	800acb2 <scalbn+0x2a>
 800ad32:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ad36:	3236      	adds	r2, #54	@ 0x36
 800ad38:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ad3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad40:	4620      	mov	r0, r4
 800ad42:	4b0d      	ldr	r3, [pc, #52]	@ (800ad78 <scalbn+0xf0>)
 800ad44:	4629      	mov	r1, r5
 800ad46:	2200      	movs	r2, #0
 800ad48:	e7d4      	b.n	800acf4 <scalbn+0x6c>
 800ad4a:	bf00      	nop
 800ad4c:	f3af 8000 	nop.w
 800ad50:	c2f8f359 	.word	0xc2f8f359
 800ad54:	01a56e1f 	.word	0x01a56e1f
 800ad58:	8800759c 	.word	0x8800759c
 800ad5c:	7e37e43c 	.word	0x7e37e43c
 800ad60:	8800759c 	.word	0x8800759c
 800ad64:	fe37e43c 	.word	0xfe37e43c
 800ad68:	c2f8f359 	.word	0xc2f8f359
 800ad6c:	81a56e1f 	.word	0x81a56e1f
 800ad70:	43500000 	.word	0x43500000
 800ad74:	ffff3cb0 	.word	0xffff3cb0
 800ad78:	3c900000 	.word	0x3c900000
 800ad7c:	00000000 	.word	0x00000000

0800ad80 <__kernel_rem_pio2>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	ed2d 8b02 	vpush	{d8}
 800ad88:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800ad8c:	f112 0f14 	cmn.w	r2, #20
 800ad90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad92:	9101      	str	r1, [sp, #4]
 800ad94:	4bbe      	ldr	r3, [pc, #760]	@ (800b090 <__kernel_rem_pio2+0x310>)
 800ad96:	99a6      	ldr	r1, [sp, #664]	@ 0x298
 800ad98:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ada6:	bfa8      	it	ge
 800ada8:	1ed4      	subge	r4, r2, #3
 800adaa:	9306      	str	r3, [sp, #24]
 800adac:	bfb2      	itee	lt
 800adae:	2400      	movlt	r4, #0
 800adb0:	2318      	movge	r3, #24
 800adb2:	fb94 f4f3 	sdivge	r4, r4, r3
 800adb6:	f06f 0317 	mvn.w	r3, #23
 800adba:	fb04 3303 	mla	r3, r4, r3, r3
 800adbe:	eb03 0b02 	add.w	fp, r3, r2
 800adc2:	9b04      	ldr	r3, [sp, #16]
 800adc4:	9a06      	ldr	r2, [sp, #24]
 800adc6:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 800b088 <__kernel_rem_pio2+0x308>
 800adca:	eb03 0802 	add.w	r8, r3, r2
 800adce:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800add0:	1aa7      	subs	r7, r4, r2
 800add2:	ae22      	add	r6, sp, #136	@ 0x88
 800add4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800add8:	2500      	movs	r5, #0
 800adda:	4545      	cmp	r5, r8
 800addc:	dd13      	ble.n	800ae06 <__kernel_rem_pio2+0x86>
 800adde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade0:	aa22      	add	r2, sp, #136	@ 0x88
 800ade2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ade6:	f50d 7ae4 	add.w	sl, sp, #456	@ 0x1c8
 800adea:	f04f 0800 	mov.w	r8, #0
 800adee:	9b04      	ldr	r3, [sp, #16]
 800adf0:	4598      	cmp	r8, r3
 800adf2:	dc31      	bgt.n	800ae58 <__kernel_rem_pio2+0xd8>
 800adf4:	ed9f 7ba4 	vldr	d7, [pc, #656]	@ 800b088 <__kernel_rem_pio2+0x308>
 800adf8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800adfc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae00:	462f      	mov	r7, r5
 800ae02:	2600      	movs	r6, #0
 800ae04:	e01b      	b.n	800ae3e <__kernel_rem_pio2+0xbe>
 800ae06:	42ef      	cmn	r7, r5
 800ae08:	d407      	bmi.n	800ae1a <__kernel_rem_pio2+0x9a>
 800ae0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae0e:	f7f5 fbe9 	bl	80005e4 <__aeabi_i2d>
 800ae12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae16:	3501      	adds	r5, #1
 800ae18:	e7df      	b.n	800adda <__kernel_rem_pio2+0x5a>
 800ae1a:	ec51 0b18 	vmov	r0, r1, d8
 800ae1e:	e7f8      	b.n	800ae12 <__kernel_rem_pio2+0x92>
 800ae20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ae28:	f7f5 fc46 	bl	80006b8 <__aeabi_dmul>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae34:	f7f5 fa8a 	bl	800034c <__adddf3>
 800ae38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3c:	3601      	adds	r6, #1
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	429e      	cmp	r6, r3
 800ae42:	f1a7 0708 	sub.w	r7, r7, #8
 800ae46:	ddeb      	ble.n	800ae20 <__kernel_rem_pio2+0xa0>
 800ae48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae4c:	f108 0801 	add.w	r8, r8, #1
 800ae50:	ecaa 7b02 	vstmia	sl!, {d7}
 800ae54:	3508      	adds	r5, #8
 800ae56:	e7ca      	b.n	800adee <__kernel_rem_pio2+0x6e>
 800ae58:	9b04      	ldr	r3, [sp, #16]
 800ae5a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ae5e:	aa0e      	add	r2, sp, #56	@ 0x38
 800ae60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae66:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800ae68:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ae6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae6e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ae72:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae74:	ab9a      	add	r3, sp, #616	@ 0x268
 800ae76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae7a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800ae7e:	ae0e      	add	r6, sp, #56	@ 0x38
 800ae80:	ab72      	add	r3, sp, #456	@ 0x1c8
 800ae82:	eb03 07ca 	add.w	r7, r3, sl, lsl #3
 800ae86:	46b1      	mov	r9, r6
 800ae88:	46d0      	mov	r8, sl
 800ae8a:	f1b8 0f00 	cmp.w	r8, #0
 800ae8e:	f1a7 0708 	sub.w	r7, r7, #8
 800ae92:	dc71      	bgt.n	800af78 <__kernel_rem_pio2+0x1f8>
 800ae94:	465a      	mov	r2, fp
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7ff fef5 	bl	800ac88 <scalbn>
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800aea4:	4604      	mov	r4, r0
 800aea6:	460d      	mov	r5, r1
 800aea8:	f7f5 fc06 	bl	80006b8 <__aeabi_dmul>
 800aeac:	f7ff f980 	bl	800a1b0 <floor>
 800aeb0:	4b78      	ldr	r3, [pc, #480]	@ (800b094 <__kernel_rem_pio2+0x314>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f7f5 fc00 	bl	80006b8 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fa42 	bl	8000348 <__aeabi_dsub>
 800aec4:	460d      	mov	r5, r1
 800aec6:	4604      	mov	r4, r0
 800aec8:	f7f5 fe90 	bl	8000bec <__aeabi_d2iz>
 800aecc:	9008      	str	r0, [sp, #32]
 800aece:	f7f5 fb89 	bl	80005e4 <__aeabi_i2d>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 fa35 	bl	8000348 <__aeabi_dsub>
 800aede:	f1bb 0f00 	cmp.w	fp, #0
 800aee2:	4680      	mov	r8, r0
 800aee4:	4689      	mov	r9, r1
 800aee6:	dd6e      	ble.n	800afc6 <__kernel_rem_pio2+0x246>
 800aee8:	f10a 31ff 	add.w	r1, sl, #4294967295
 800aeec:	ab0e      	add	r3, sp, #56	@ 0x38
 800aeee:	9c08      	ldr	r4, [sp, #32]
 800aef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aef4:	f1cb 0018 	rsb	r0, fp, #24
 800aef8:	fa43 f200 	asr.w	r2, r3, r0
 800aefc:	4414      	add	r4, r2
 800aefe:	4082      	lsls	r2, r0
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	aa0e      	add	r2, sp, #56	@ 0x38
 800af04:	9408      	str	r4, [sp, #32]
 800af06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800af0a:	f1cb 0217 	rsb	r2, fp, #23
 800af0e:	4113      	asrs	r3, r2
 800af10:	9302      	str	r3, [sp, #8]
 800af12:	9b02      	ldr	r3, [sp, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	dd65      	ble.n	800afe4 <__kernel_rem_pio2+0x264>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	2200      	movs	r2, #0
 800af1c:	3301      	adds	r3, #1
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	4614      	mov	r4, r2
 800af22:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800af26:	4592      	cmp	sl, r2
 800af28:	f300 80a2 	bgt.w	800b070 <__kernel_rem_pio2+0x2f0>
 800af2c:	f1bb 0f00 	cmp.w	fp, #0
 800af30:	dd07      	ble.n	800af42 <__kernel_rem_pio2+0x1c2>
 800af32:	f1bb 0f01 	cmp.w	fp, #1
 800af36:	f000 80bb 	beq.w	800b0b0 <__kernel_rem_pio2+0x330>
 800af3a:	f1bb 0f02 	cmp.w	fp, #2
 800af3e:	f000 80c2 	beq.w	800b0c6 <__kernel_rem_pio2+0x346>
 800af42:	9b02      	ldr	r3, [sp, #8]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d14d      	bne.n	800afe4 <__kernel_rem_pio2+0x264>
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	4952      	ldr	r1, [pc, #328]	@ (800b098 <__kernel_rem_pio2+0x318>)
 800af4e:	2000      	movs	r0, #0
 800af50:	f7f5 f9fa 	bl	8000348 <__aeabi_dsub>
 800af54:	4680      	mov	r8, r0
 800af56:	4689      	mov	r9, r1
 800af58:	2c00      	cmp	r4, #0
 800af5a:	d043      	beq.n	800afe4 <__kernel_rem_pio2+0x264>
 800af5c:	465a      	mov	r2, fp
 800af5e:	494e      	ldr	r1, [pc, #312]	@ (800b098 <__kernel_rem_pio2+0x318>)
 800af60:	2000      	movs	r0, #0
 800af62:	f7ff fe91 	bl	800ac88 <scalbn>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f7f5 f9eb 	bl	8000348 <__aeabi_dsub>
 800af72:	4680      	mov	r8, r0
 800af74:	4689      	mov	r9, r1
 800af76:	e035      	b.n	800afe4 <__kernel_rem_pio2+0x264>
 800af78:	4b48      	ldr	r3, [pc, #288]	@ (800b09c <__kernel_rem_pio2+0x31c>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	4620      	mov	r0, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	f7f5 fb9a 	bl	80006b8 <__aeabi_dmul>
 800af84:	f7f5 fe32 	bl	8000bec <__aeabi_d2iz>
 800af88:	f7f5 fb2c 	bl	80005e4 <__aeabi_i2d>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af94:	4b42      	ldr	r3, [pc, #264]	@ (800b0a0 <__kernel_rem_pio2+0x320>)
 800af96:	2200      	movs	r2, #0
 800af98:	f7f5 fb8e 	bl	80006b8 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 f9d0 	bl	8000348 <__aeabi_dsub>
 800afa8:	f7f5 fe20 	bl	8000bec <__aeabi_d2iz>
 800afac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb0:	f849 0b04 	str.w	r0, [r9], #4
 800afb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb8:	f7f5 f9c8 	bl	800034c <__adddf3>
 800afbc:	f108 38ff 	add.w	r8, r8, #4294967295
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	e761      	b.n	800ae8a <__kernel_rem_pio2+0x10a>
 800afc6:	d106      	bne.n	800afd6 <__kernel_rem_pio2+0x256>
 800afc8:	f10a 33ff 	add.w	r3, sl, #4294967295
 800afcc:	aa0e      	add	r2, sp, #56	@ 0x38
 800afce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afd2:	15db      	asrs	r3, r3, #23
 800afd4:	e79c      	b.n	800af10 <__kernel_rem_pio2+0x190>
 800afd6:	4b33      	ldr	r3, [pc, #204]	@ (800b0a4 <__kernel_rem_pio2+0x324>)
 800afd8:	2200      	movs	r2, #0
 800afda:	f7f5 fdf3 	bl	8000bc4 <__aeabi_dcmpge>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d143      	bne.n	800b06a <__kernel_rem_pio2+0x2ea>
 800afe2:	9002      	str	r0, [sp, #8]
 800afe4:	2200      	movs	r2, #0
 800afe6:	2300      	movs	r3, #0
 800afe8:	4640      	mov	r0, r8
 800afea:	4649      	mov	r1, r9
 800afec:	f7f5 fdcc 	bl	8000b88 <__aeabi_dcmpeq>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f000 80ba 	beq.w	800b16a <__kernel_rem_pio2+0x3ea>
 800aff6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800affa:	2200      	movs	r2, #0
 800affc:	9904      	ldr	r1, [sp, #16]
 800affe:	428b      	cmp	r3, r1
 800b000:	da69      	bge.n	800b0d6 <__kernel_rem_pio2+0x356>
 800b002:	2a00      	cmp	r2, #0
 800b004:	f000 8084 	beq.w	800b110 <__kernel_rem_pio2+0x390>
 800b008:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b00c:	ab0e      	add	r3, sp, #56	@ 0x38
 800b00e:	f1ab 0b18 	sub.w	fp, fp, #24
 800b012:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0f6      	beq.n	800b008 <__kernel_rem_pio2+0x288>
 800b01a:	465a      	mov	r2, fp
 800b01c:	491e      	ldr	r1, [pc, #120]	@ (800b098 <__kernel_rem_pio2+0x318>)
 800b01e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800b09c <__kernel_rem_pio2+0x31c>
 800b022:	2000      	movs	r0, #0
 800b024:	f7ff fe30 	bl	800ac88 <scalbn>
 800b028:	f10a 0301 	add.w	r3, sl, #1
 800b02c:	aa72      	add	r2, sp, #456	@ 0x1c8
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800b036:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b03a:	4656      	mov	r6, sl
 800b03c:	f04f 0800 	mov.w	r8, #0
 800b040:	2e00      	cmp	r6, #0
 800b042:	f280 80c8 	bge.w	800b1d6 <__kernel_rem_pio2+0x456>
 800b046:	4654      	mov	r4, sl
 800b048:	2c00      	cmp	r4, #0
 800b04a:	f2c0 80f6 	blt.w	800b23a <__kernel_rem_pio2+0x4ba>
 800b04e:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <__kernel_rem_pio2+0x328>)
 800b050:	461f      	mov	r7, r3
 800b052:	ab72      	add	r3, sp, #456	@ 0x1c8
 800b054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b058:	9306      	str	r3, [sp, #24]
 800b05a:	f04f 0800 	mov.w	r8, #0
 800b05e:	f04f 0900 	mov.w	r9, #0
 800b062:	2600      	movs	r6, #0
 800b064:	ebaa 0504 	sub.w	r5, sl, r4
 800b068:	e0db      	b.n	800b222 <__kernel_rem_pio2+0x4a2>
 800b06a:	2302      	movs	r3, #2
 800b06c:	9302      	str	r3, [sp, #8]
 800b06e:	e753      	b.n	800af18 <__kernel_rem_pio2+0x198>
 800b070:	f856 3b04 	ldr.w	r3, [r6], #4
 800b074:	b9d4      	cbnz	r4, 800b0ac <__kernel_rem_pio2+0x32c>
 800b076:	b123      	cbz	r3, 800b082 <__kernel_rem_pio2+0x302>
 800b078:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b07c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b080:	2301      	movs	r3, #1
 800b082:	3201      	adds	r2, #1
 800b084:	461c      	mov	r4, r3
 800b086:	e74e      	b.n	800af26 <__kernel_rem_pio2+0x1a6>
	...
 800b090:	0801eb30 	.word	0x0801eb30
 800b094:	40200000 	.word	0x40200000
 800b098:	3ff00000 	.word	0x3ff00000
 800b09c:	3e700000 	.word	0x3e700000
 800b0a0:	41700000 	.word	0x41700000
 800b0a4:	3fe00000 	.word	0x3fe00000
 800b0a8:	0801eaf0 	.word	0x0801eaf0
 800b0ac:	1acb      	subs	r3, r1, r3
 800b0ae:	e7e5      	b.n	800b07c <__kernel_rem_pio2+0x2fc>
 800b0b0:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b0b4:	ab0e      	add	r3, sp, #56	@ 0x38
 800b0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0be:	a90e      	add	r1, sp, #56	@ 0x38
 800b0c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0c4:	e73d      	b.n	800af42 <__kernel_rem_pio2+0x1c2>
 800b0c6:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b0ca:	ab0e      	add	r3, sp, #56	@ 0x38
 800b0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b0d4:	e7f3      	b.n	800b0be <__kernel_rem_pio2+0x33e>
 800b0d6:	a90e      	add	r1, sp, #56	@ 0x38
 800b0d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	e78c      	b.n	800affc <__kernel_rem_pio2+0x27c>
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	d0fa      	beq.n	800b0e2 <__kernel_rem_pio2+0x362>
 800b0ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b0f2:	eb0d 0503 	add.w	r5, sp, r3
 800b0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f8:	aa22      	add	r2, sp, #136	@ 0x88
 800b0fa:	4453      	add	r3, sl
 800b0fc:	f10a 0701 	add.w	r7, sl, #1
 800b100:	3d98      	subs	r5, #152	@ 0x98
 800b102:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b106:	4454      	add	r4, sl
 800b108:	42bc      	cmp	r4, r7
 800b10a:	da04      	bge.n	800b116 <__kernel_rem_pio2+0x396>
 800b10c:	46a2      	mov	sl, r4
 800b10e:	e6ae      	b.n	800ae6e <__kernel_rem_pio2+0xee>
 800b110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b112:	2401      	movs	r4, #1
 800b114:	e7e6      	b.n	800b0e4 <__kernel_rem_pio2+0x364>
 800b116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b118:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b11c:	f7f5 fa62 	bl	80005e4 <__aeabi_i2d>
 800b120:	ed9f 7bad 	vldr	d7, [pc, #692]	@ 800b3d8 <__kernel_rem_pio2+0x658>
 800b124:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b128:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b12c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b130:	46b2      	mov	sl, r6
 800b132:	f04f 0800 	mov.w	r8, #0
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	4598      	cmp	r8, r3
 800b13a:	dd05      	ble.n	800b148 <__kernel_rem_pio2+0x3c8>
 800b13c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b140:	3701      	adds	r7, #1
 800b142:	eca5 7b02 	vstmia	r5!, {d7}
 800b146:	e7df      	b.n	800b108 <__kernel_rem_pio2+0x388>
 800b148:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b14c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b150:	f7f5 fab2 	bl	80006b8 <__aeabi_dmul>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b15c:	f7f5 f8f6 	bl	800034c <__adddf3>
 800b160:	f108 0801 	add.w	r8, r8, #1
 800b164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b168:	e7e5      	b.n	800b136 <__kernel_rem_pio2+0x3b6>
 800b16a:	f1cb 0200 	rsb	r2, fp, #0
 800b16e:	4640      	mov	r0, r8
 800b170:	4649      	mov	r1, r9
 800b172:	f7ff fd89 	bl	800ac88 <scalbn>
 800b176:	4b9a      	ldr	r3, [pc, #616]	@ (800b3e0 <__kernel_rem_pio2+0x660>)
 800b178:	2200      	movs	r2, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	460d      	mov	r5, r1
 800b17e:	f7f5 fd21 	bl	8000bc4 <__aeabi_dcmpge>
 800b182:	b300      	cbz	r0, 800b1c6 <__kernel_rem_pio2+0x446>
 800b184:	4b97      	ldr	r3, [pc, #604]	@ (800b3e4 <__kernel_rem_pio2+0x664>)
 800b186:	2200      	movs	r2, #0
 800b188:	4620      	mov	r0, r4
 800b18a:	4629      	mov	r1, r5
 800b18c:	f7f5 fa94 	bl	80006b8 <__aeabi_dmul>
 800b190:	f7f5 fd2c 	bl	8000bec <__aeabi_d2iz>
 800b194:	4606      	mov	r6, r0
 800b196:	f7f5 fa25 	bl	80005e4 <__aeabi_i2d>
 800b19a:	4b91      	ldr	r3, [pc, #580]	@ (800b3e0 <__kernel_rem_pio2+0x660>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	f7f5 fa8b 	bl	80006b8 <__aeabi_dmul>
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7f5 f8cd 	bl	8000348 <__aeabi_dsub>
 800b1ae:	f7f5 fd1d 	bl	8000bec <__aeabi_d2iz>
 800b1b2:	ab0e      	add	r3, sp, #56	@ 0x38
 800b1b4:	f10b 0b18 	add.w	fp, fp, #24
 800b1b8:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b1bc:	f10a 0a01 	add.w	sl, sl, #1
 800b1c0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800b1c4:	e729      	b.n	800b01a <__kernel_rem_pio2+0x29a>
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fd0f 	bl	8000bec <__aeabi_d2iz>
 800b1ce:	ab0e      	add	r3, sp, #56	@ 0x38
 800b1d0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b1d4:	e721      	b.n	800b01a <__kernel_rem_pio2+0x29a>
 800b1d6:	ab0e      	add	r3, sp, #56	@ 0x38
 800b1d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b1dc:	f7f5 fa02 	bl	80005e4 <__aeabi_i2d>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 fa68 	bl	80006b8 <__aeabi_dmul>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	f7f5 fa60 	bl	80006b8 <__aeabi_dmul>
 800b1f8:	3e01      	subs	r6, #1
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	e71f      	b.n	800b040 <__kernel_rem_pio2+0x2c0>
 800b200:	9906      	ldr	r1, [sp, #24]
 800b202:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b206:	9106      	str	r1, [sp, #24]
 800b208:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b20c:	f7f5 fa54 	bl	80006b8 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 f898 	bl	800034c <__adddf3>
 800b21c:	3601      	adds	r6, #1
 800b21e:	4680      	mov	r8, r0
 800b220:	4689      	mov	r9, r1
 800b222:	9b04      	ldr	r3, [sp, #16]
 800b224:	429e      	cmp	r6, r3
 800b226:	dc01      	bgt.n	800b22c <__kernel_rem_pio2+0x4ac>
 800b228:	42b5      	cmp	r5, r6
 800b22a:	dae9      	bge.n	800b200 <__kernel_rem_pio2+0x480>
 800b22c:	ab4a      	add	r3, sp, #296	@ 0x128
 800b22e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b232:	e9c5 8900 	strd	r8, r9, [r5]
 800b236:	3c01      	subs	r4, #1
 800b238:	e706      	b.n	800b048 <__kernel_rem_pio2+0x2c8>
 800b23a:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	dc0b      	bgt.n	800b258 <__kernel_rem_pio2+0x4d8>
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc38      	bgt.n	800b2b6 <__kernel_rem_pio2+0x536>
 800b244:	d05a      	beq.n	800b2fc <__kernel_rem_pio2+0x57c>
 800b246:	9b08      	ldr	r3, [sp, #32]
 800b248:	f003 0007 	and.w	r0, r3, #7
 800b24c:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
 800b250:	ecbd 8b02 	vpop	{d8}
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d1f3      	bne.n	800b246 <__kernel_rem_pio2+0x4c6>
 800b25e:	f50b 731a 	add.w	r3, fp, #616	@ 0x268
 800b262:	eb0d 0403 	add.w	r4, sp, r3
 800b266:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b26a:	4625      	mov	r5, r4
 800b26c:	46d0      	mov	r8, sl
 800b26e:	f1b8 0f00 	cmp.w	r8, #0
 800b272:	f1a5 0508 	sub.w	r5, r5, #8
 800b276:	dc67      	bgt.n	800b348 <__kernel_rem_pio2+0x5c8>
 800b278:	4655      	mov	r5, sl
 800b27a:	2d01      	cmp	r5, #1
 800b27c:	f1a4 0408 	sub.w	r4, r4, #8
 800b280:	f300 8083 	bgt.w	800b38a <__kernel_rem_pio2+0x60a>
 800b284:	ab4a      	add	r3, sp, #296	@ 0x128
 800b286:	eb03 040b 	add.w	r4, r3, fp
 800b28a:	2000      	movs	r0, #0
 800b28c:	2100      	movs	r1, #0
 800b28e:	f1ba 0f01 	cmp.w	sl, #1
 800b292:	f300 8098 	bgt.w	800b3c6 <__kernel_rem_pio2+0x646>
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b29c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	@ 0x130
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f040 80a1 	bne.w	800b3e8 <__kernel_rem_pio2+0x668>
 800b2a6:	9b01      	ldr	r3, [sp, #4]
 800b2a8:	e9c3 7800 	strd	r7, r8, [r3]
 800b2ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b2b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b2b4:	e7c7      	b.n	800b246 <__kernel_rem_pio2+0x4c6>
 800b2b6:	ab4a      	add	r3, sp, #296	@ 0x128
 800b2b8:	449b      	add	fp, r3
 800b2ba:	4654      	mov	r4, sl
 800b2bc:	2000      	movs	r0, #0
 800b2be:	2100      	movs	r1, #0
 800b2c0:	2c00      	cmp	r4, #0
 800b2c2:	da32      	bge.n	800b32a <__kernel_rem_pio2+0x5aa>
 800b2c4:	9b02      	ldr	r3, [sp, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d035      	beq.n	800b336 <__kernel_rem_pio2+0x5b6>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2d0:	9c01      	ldr	r4, [sp, #4]
 800b2d2:	e9c4 2300 	strd	r2, r3, [r4]
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	@ 0x128
 800b2de:	f7f5 f833 	bl	8000348 <__aeabi_dsub>
 800b2e2:	ad4c      	add	r5, sp, #304	@ 0x130
 800b2e4:	2401      	movs	r4, #1
 800b2e6:	45a2      	cmp	sl, r4
 800b2e8:	da28      	bge.n	800b33c <__kernel_rem_pio2+0x5bc>
 800b2ea:	9b02      	ldr	r3, [sp, #8]
 800b2ec:	b113      	cbz	r3, 800b2f4 <__kernel_rem_pio2+0x574>
 800b2ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b2fa:	e7a4      	b.n	800b246 <__kernel_rem_pio2+0x4c6>
 800b2fc:	ab4a      	add	r3, sp, #296	@ 0x128
 800b2fe:	449b      	add	fp, r3
 800b300:	2000      	movs	r0, #0
 800b302:	2100      	movs	r1, #0
 800b304:	f1ba 0f00 	cmp.w	sl, #0
 800b308:	da08      	bge.n	800b31c <__kernel_rem_pio2+0x59c>
 800b30a:	9b02      	ldr	r3, [sp, #8]
 800b30c:	b113      	cbz	r3, 800b314 <__kernel_rem_pio2+0x594>
 800b30e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b312:	4619      	mov	r1, r3
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	e9c3 0100 	strd	r0, r1, [r3]
 800b31a:	e794      	b.n	800b246 <__kernel_rem_pio2+0x4c6>
 800b31c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b320:	f7f5 f814 	bl	800034c <__adddf3>
 800b324:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b328:	e7ec      	b.n	800b304 <__kernel_rem_pio2+0x584>
 800b32a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b32e:	f7f5 f80d 	bl	800034c <__adddf3>
 800b332:	3c01      	subs	r4, #1
 800b334:	e7c4      	b.n	800b2c0 <__kernel_rem_pio2+0x540>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	e7c9      	b.n	800b2d0 <__kernel_rem_pio2+0x550>
 800b33c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b340:	f7f5 f804 	bl	800034c <__adddf3>
 800b344:	3401      	adds	r4, #1
 800b346:	e7ce      	b.n	800b2e6 <__kernel_rem_pio2+0x566>
 800b348:	ed95 7b00 	vldr	d7, [r5]
 800b34c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b350:	ed95 7b02 	vldr	d7, [r5, #8]
 800b354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b358:	ec53 2b17 	vmov	r2, r3, d7
 800b35c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b360:	f7f4 fff4 	bl	800034c <__adddf3>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4606      	mov	r6, r0
 800b36a:	460f      	mov	r7, r1
 800b36c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b370:	f7f4 ffea 	bl	8000348 <__aeabi_dsub>
 800b374:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b378:	f7f4 ffe8 	bl	800034c <__adddf3>
 800b37c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b380:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b384:	e9c5 6700 	strd	r6, r7, [r5]
 800b388:	e771      	b.n	800b26e <__kernel_rem_pio2+0x4ee>
 800b38a:	ed94 7b02 	vldr	d7, [r4, #8]
 800b38e:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b392:	ec53 2b17 	vmov	r2, r3, d7
 800b396:	4640      	mov	r0, r8
 800b398:	4649      	mov	r1, r9
 800b39a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b39e:	f7f4 ffd5 	bl	800034c <__adddf3>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	f7f4 ffcb 	bl	8000348 <__aeabi_dsub>
 800b3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b6:	f7f4 ffc9 	bl	800034c <__adddf3>
 800b3ba:	3d01      	subs	r5, #1
 800b3bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3c0:	e9c4 6700 	strd	r6, r7, [r4]
 800b3c4:	e759      	b.n	800b27a <__kernel_rem_pio2+0x4fa>
 800b3c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3ca:	f7f4 ffbf 	bl	800034c <__adddf3>
 800b3ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3d2:	e75c      	b.n	800b28e <__kernel_rem_pio2+0x50e>
 800b3d4:	f3af 8000 	nop.w
	...
 800b3e0:	41700000 	.word	0x41700000
 800b3e4:	3e700000 	.word	0x3e700000
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	9a01      	ldr	r2, [sp, #4]
 800b3ec:	601f      	str	r7, [r3, #0]
 800b3ee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b3f2:	605c      	str	r4, [r3, #4]
 800b3f4:	609d      	str	r5, [r3, #8]
 800b3f6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b3fa:	60d3      	str	r3, [r2, #12]
 800b3fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b400:	6110      	str	r0, [r2, #16]
 800b402:	6153      	str	r3, [r2, #20]
 800b404:	e71f      	b.n	800b246 <__kernel_rem_pio2+0x4c6>
 800b406:	bf00      	nop

0800b408 <_init>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr

0800b414 <_fini>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr
