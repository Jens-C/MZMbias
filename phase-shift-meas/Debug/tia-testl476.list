
tia-testl476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013718  0800b548  0800b548  0000c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ec60  0801ec60  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0801ec60  0801ec60  0001fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ec68  0801ec68  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ec68  0801ec68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ec6c  0801ec6c  0001fc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801ec70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007584  20000060  0801ecd0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075e4  0801ecd0  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001856b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003173  00000000  00000000  000385f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffe  00000000  00000000  0003ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ca  00000000  00000000  0003dcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ff7  00000000  00000000  00067088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108a89  00000000  00000000  0008007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00188b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  00188bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0018f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037c6  00000000  00000000  0018f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001928aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b530 	.word	0x0800b530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800b530 	.word	0x0800b530

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2iz>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d215      	bcs.n	8000c22 <__aeabi_d2iz+0x36>
 8000bf6:	d511      	bpl.n	8000c1c <__aeabi_d2iz+0x30>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d912      	bls.n	8000c28 <__aeabi_d2iz+0x3c>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d105      	bne.n	8000c34 <__aeabi_d2iz+0x48>
 8000c28:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2f>:
 8000c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c84:	bf24      	itt	cs
 8000c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c8e:	d90d      	bls.n	8000cac <__aeabi_d2f+0x30>
 8000c90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cb0:	d121      	bne.n	8000cf6 <__aeabi_d2f+0x7a>
 8000cb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cb6:	bfbc      	itt	lt
 8000cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	4770      	bxlt	lr
 8000cbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc6:	f1c2 0218 	rsb	r2, r2, #24
 8000cca:	f1c2 0c20 	rsb	ip, r2, #32
 8000cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	f040 0001 	orrne.w	r0, r0, #1
 8000cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce8:	ea40 000c 	orr.w	r0, r0, ip
 8000cec:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf4:	e7cc      	b.n	8000c90 <__aeabi_d2f+0x14>
 8000cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfa:	d107      	bne.n	8000d0c <__aeabi_d2f+0x90>
 8000cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d00:	bf1e      	ittt	ne
 8000d02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bxne	lr
 8000d0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_frsub>:
 8000d1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	e002      	b.n	8000d28 <__addsf3>
 8000d22:	bf00      	nop

08000d24 <__aeabi_fsub>:
 8000d24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d28 <__addsf3>:
 8000d28:	0042      	lsls	r2, r0, #1
 8000d2a:	bf1f      	itttt	ne
 8000d2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d30:	ea92 0f03 	teqne	r2, r3
 8000d34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3c:	d06a      	beq.n	8000e14 <__addsf3+0xec>
 8000d3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d46:	bfc1      	itttt	gt
 8000d48:	18d2      	addgt	r2, r2, r3
 8000d4a:	4041      	eorgt	r1, r0
 8000d4c:	4048      	eorgt	r0, r1
 8000d4e:	4041      	eorgt	r1, r0
 8000d50:	bfb8      	it	lt
 8000d52:	425b      	neglt	r3, r3
 8000d54:	2b19      	cmp	r3, #25
 8000d56:	bf88      	it	hi
 8000d58:	4770      	bxhi	lr
 8000d5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d66:	bf18      	it	ne
 8000d68:	4240      	negne	r0, r0
 8000d6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d76:	bf18      	it	ne
 8000d78:	4249      	negne	r1, r1
 8000d7a:	ea92 0f03 	teq	r2, r3
 8000d7e:	d03f      	beq.n	8000e00 <__addsf3+0xd8>
 8000d80:	f1a2 0201 	sub.w	r2, r2, #1
 8000d84:	fa41 fc03 	asr.w	ip, r1, r3
 8000d88:	eb10 000c 	adds.w	r0, r0, ip
 8000d8c:	f1c3 0320 	rsb	r3, r3, #32
 8000d90:	fa01 f103 	lsl.w	r1, r1, r3
 8000d94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d98:	d502      	bpl.n	8000da0 <__addsf3+0x78>
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000da0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000da4:	d313      	bcc.n	8000dce <__addsf3+0xa6>
 8000da6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000daa:	d306      	bcc.n	8000dba <__addsf3+0x92>
 8000dac:	0840      	lsrs	r0, r0, #1
 8000dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000db2:	f102 0201 	add.w	r2, r2, #1
 8000db6:	2afe      	cmp	r2, #254	@ 0xfe
 8000db8:	d251      	bcs.n	8000e5e <__addsf3+0x136>
 8000dba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	ea40 0003 	orr.w	r0, r0, r3
 8000dcc:	4770      	bx	lr
 8000dce:	0049      	lsls	r1, r1, #1
 8000dd0:	eb40 0000 	adc.w	r0, r0, r0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	bf28      	it	cs
 8000dd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ddc:	d2ed      	bcs.n	8000dba <__addsf3+0x92>
 8000dde:	fab0 fc80 	clz	ip, r0
 8000de2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000de6:	ebb2 020c 	subs.w	r2, r2, ip
 8000dea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dee:	bfaa      	itet	ge
 8000df0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000df4:	4252      	neglt	r2, r2
 8000df6:	4318      	orrge	r0, r3
 8000df8:	bfbc      	itt	lt
 8000dfa:	40d0      	lsrlt	r0, r2
 8000dfc:	4318      	orrlt	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	f092 0f00 	teq	r2, #0
 8000e04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e08:	bf06      	itte	eq
 8000e0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	3201      	addeq	r2, #1
 8000e10:	3b01      	subne	r3, #1
 8000e12:	e7b5      	b.n	8000d80 <__addsf3+0x58>
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d021      	beq.n	8000e68 <__addsf3+0x140>
 8000e24:	ea92 0f03 	teq	r2, r3
 8000e28:	d004      	beq.n	8000e34 <__addsf3+0x10c>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	bf08      	it	eq
 8000e30:	4608      	moveq	r0, r1
 8000e32:	4770      	bx	lr
 8000e34:	ea90 0f01 	teq	r0, r1
 8000e38:	bf1c      	itt	ne
 8000e3a:	2000      	movne	r0, #0
 8000e3c:	4770      	bxne	lr
 8000e3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e42:	d104      	bne.n	8000e4e <__addsf3+0x126>
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	bf28      	it	cs
 8000e48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e52:	bf3c      	itt	cc
 8000e54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e58:	4770      	bxcc	lr
 8000e5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e6c:	bf16      	itet	ne
 8000e6e:	4608      	movne	r0, r1
 8000e70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e74:	4601      	movne	r1, r0
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	bf06      	itte	eq
 8000e7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e7e:	ea90 0f01 	teqeq	r0, r1
 8000e82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_ui2f>:
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e004      	b.n	8000e98 <__aeabi_i2f+0x8>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_i2f>:
 8000e90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e94:	bf48      	it	mi
 8000e96:	4240      	negmi	r0, r0
 8000e98:	ea5f 0c00 	movs.w	ip, r0
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	e01c      	b.n	8000ee6 <__aeabi_l2f+0x2a>

08000eac <__aeabi_ul2f>:
 8000eac:	ea50 0201 	orrs.w	r2, r0, r1
 8000eb0:	bf08      	it	eq
 8000eb2:	4770      	bxeq	lr
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e00a      	b.n	8000ed0 <__aeabi_l2f+0x14>
 8000eba:	bf00      	nop

08000ebc <__aeabi_l2f>:
 8000ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ec0:	bf08      	it	eq
 8000ec2:	4770      	bxeq	lr
 8000ec4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_l2f+0x14>
 8000eca:	4240      	negs	r0, r0
 8000ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed0:	ea5f 0c01 	movs.w	ip, r1
 8000ed4:	bf02      	ittt	eq
 8000ed6:	4684      	moveq	ip, r0
 8000ed8:	4601      	moveq	r1, r0
 8000eda:	2000      	moveq	r0, #0
 8000edc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ee0:	bf08      	it	eq
 8000ee2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eea:	fabc f28c 	clz	r2, ip
 8000eee:	3a08      	subs	r2, #8
 8000ef0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ef4:	db10      	blt.n	8000f18 <__aeabi_l2f+0x5c>
 8000ef6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000efa:	4463      	add	r3, ip
 8000efc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f00:	f1c2 0220 	rsb	r2, r2, #32
 8000f04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	eb43 0002 	adc.w	r0, r3, r2
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f102 0220 	add.w	r2, r2, #32
 8000f1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f20:	f1c2 0220 	rsb	r2, r2, #32
 8000f24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f28:	fa21 f202 	lsr.w	r2, r1, r2
 8000f2c:	eb43 0002 	adc.w	r0, r3, r2
 8000f30:	bf08      	it	eq
 8000f32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fmul>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d06f      	beq.n	8001030 <__aeabi_fmul+0xf8>
 8000f50:	441a      	add	r2, r3
 8000f52:	ea80 0c01 	eor.w	ip, r0, r1
 8000f56:	0240      	lsls	r0, r0, #9
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000f5e:	d01e      	beq.n	8000f9e <__aeabi_fmul+0x66>
 8000f60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000f68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000f6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000f70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000f78:	bf3e      	ittt	cc
 8000f7a:	0049      	lslcc	r1, r1, #1
 8000f7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f80:	005b      	lslcc	r3, r3, #1
 8000f82:	ea40 0001 	orr.w	r0, r0, r1
 8000f86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000f8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000f8c:	d81d      	bhi.n	8000fca <__aeabi_fmul+0x92>
 8000f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f96:	bf08      	it	eq
 8000f98:	f020 0001 	biceq.w	r0, r0, #1
 8000f9c:	4770      	bx	lr
 8000f9e:	f090 0f00 	teq	r0, #0
 8000fa2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa6:	bf08      	it	eq
 8000fa8:	0249      	lsleq	r1, r1, #9
 8000faa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000fb2:	3a7f      	subs	r2, #127	@ 0x7f
 8000fb4:	bfc2      	ittt	gt
 8000fb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fbe:	4770      	bxgt	lr
 8000fc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	dc5d      	bgt.n	8001088 <__aeabi_fmul+0x150>
 8000fcc:	f112 0f19 	cmn.w	r2, #25
 8000fd0:	bfdc      	itt	le
 8000fd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000fd6:	4770      	bxle	lr
 8000fd8:	f1c2 0200 	rsb	r2, r2, #0
 8000fdc:	0041      	lsls	r1, r0, #1
 8000fde:	fa21 f102 	lsr.w	r1, r1, r2
 8000fe2:	f1c2 0220 	rsb	r2, r2, #32
 8000fe6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000fee:	f140 0000 	adc.w	r0, r0, #0
 8000ff2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ff6:	bf08      	it	eq
 8000ff8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ffc:	4770      	bx	lr
 8000ffe:	f092 0f00 	teq	r2, #0
 8001002:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0040      	lsleq	r0, r0, #1
 800100a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800100e:	3a01      	subeq	r2, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fmul+0xce>
 8001012:	ea40 000c 	orr.w	r0, r0, ip
 8001016:	f093 0f00 	teq	r3, #0
 800101a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800101e:	bf02      	ittt	eq
 8001020:	0049      	lsleq	r1, r1, #1
 8001022:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001026:	3b01      	subeq	r3, #1
 8001028:	d0f9      	beq.n	800101e <__aeabi_fmul+0xe6>
 800102a:	ea41 010c 	orr.w	r1, r1, ip
 800102e:	e78f      	b.n	8000f50 <__aeabi_fmul+0x18>
 8001030:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001034:	ea92 0f0c 	teq	r2, ip
 8001038:	bf18      	it	ne
 800103a:	ea93 0f0c 	teqne	r3, ip
 800103e:	d00a      	beq.n	8001056 <__aeabi_fmul+0x11e>
 8001040:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001044:	bf18      	it	ne
 8001046:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104a:	d1d8      	bne.n	8000ffe <__aeabi_fmul+0xc6>
 800104c:	ea80 0001 	eor.w	r0, r0, r1
 8001050:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001054:	4770      	bx	lr
 8001056:	f090 0f00 	teq	r0, #0
 800105a:	bf17      	itett	ne
 800105c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8001060:	4608      	moveq	r0, r1
 8001062:	f091 0f00 	teqne	r1, #0
 8001066:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800106a:	d014      	beq.n	8001096 <__aeabi_fmul+0x15e>
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d101      	bne.n	8001076 <__aeabi_fmul+0x13e>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d10f      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001076:	ea93 0f0c 	teq	r3, ip
 800107a:	d103      	bne.n	8001084 <__aeabi_fmul+0x14c>
 800107c:	024b      	lsls	r3, r1, #9
 800107e:	bf18      	it	ne
 8001080:	4608      	movne	r0, r1
 8001082:	d108      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001084:	ea80 0001 	eor.w	r0, r0, r1
 8001088:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800108c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001090:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001094:	4770      	bx	lr
 8001096:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800109a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800109e:	4770      	bx	lr

080010a0 <__aeabi_fdiv>:
 80010a0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80010a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80010a8:	bf1e      	ittt	ne
 80010aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80010ae:	ea92 0f0c 	teqne	r2, ip
 80010b2:	ea93 0f0c 	teqne	r3, ip
 80010b6:	d069      	beq.n	800118c <__aeabi_fdiv+0xec>
 80010b8:	eba2 0203 	sub.w	r2, r2, r3
 80010bc:	ea80 0c01 	eor.w	ip, r0, r1
 80010c0:	0249      	lsls	r1, r1, #9
 80010c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80010c6:	d037      	beq.n	8001138 <__aeabi_fdiv+0x98>
 80010c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80010d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80010d4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf38      	it	cc
 80010dc:	005b      	lslcc	r3, r3, #1
 80010de:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80010e2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80010e6:	428b      	cmp	r3, r1
 80010e8:	bf24      	itt	cs
 80010ea:	1a5b      	subcs	r3, r3, r1
 80010ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80010f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80010f4:	bf24      	itt	cs
 80010f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80010fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80010fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001102:	bf24      	itt	cs
 8001104:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800110c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001110:	bf24      	itt	cs
 8001112:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001116:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	bf18      	it	ne
 800111e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001122:	d1e0      	bne.n	80010e6 <__aeabi_fdiv+0x46>
 8001124:	2afd      	cmp	r2, #253	@ 0xfd
 8001126:	f63f af50 	bhi.w	8000fca <__aeabi_fmul+0x92>
 800112a:	428b      	cmp	r3, r1
 800112c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001130:	bf08      	it	eq
 8001132:	f020 0001 	biceq.w	r0, r0, #1
 8001136:	4770      	bx	lr
 8001138:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800113c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001140:	327f      	adds	r2, #127	@ 0x7f
 8001142:	bfc2      	ittt	gt
 8001144:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001148:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800114c:	4770      	bxgt	lr
 800114e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	3a01      	subs	r2, #1
 8001158:	e737      	b.n	8000fca <__aeabi_fmul+0x92>
 800115a:	f092 0f00 	teq	r2, #0
 800115e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001162:	bf02      	ittt	eq
 8001164:	0040      	lsleq	r0, r0, #1
 8001166:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800116a:	3a01      	subeq	r2, #1
 800116c:	d0f9      	beq.n	8001162 <__aeabi_fdiv+0xc2>
 800116e:	ea40 000c 	orr.w	r0, r0, ip
 8001172:	f093 0f00 	teq	r3, #0
 8001176:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800117a:	bf02      	ittt	eq
 800117c:	0049      	lsleq	r1, r1, #1
 800117e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001182:	3b01      	subeq	r3, #1
 8001184:	d0f9      	beq.n	800117a <__aeabi_fdiv+0xda>
 8001186:	ea41 010c 	orr.w	r1, r1, ip
 800118a:	e795      	b.n	80010b8 <__aeabi_fdiv+0x18>
 800118c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001190:	ea92 0f0c 	teq	r2, ip
 8001194:	d108      	bne.n	80011a8 <__aeabi_fdiv+0x108>
 8001196:	0242      	lsls	r2, r0, #9
 8001198:	f47f af7d 	bne.w	8001096 <__aeabi_fmul+0x15e>
 800119c:	ea93 0f0c 	teq	r3, ip
 80011a0:	f47f af70 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011a4:	4608      	mov	r0, r1
 80011a6:	e776      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011a8:	ea93 0f0c 	teq	r3, ip
 80011ac:	d104      	bne.n	80011b8 <__aeabi_fdiv+0x118>
 80011ae:	024b      	lsls	r3, r1, #9
 80011b0:	f43f af4c 	beq.w	800104c <__aeabi_fmul+0x114>
 80011b4:	4608      	mov	r0, r1
 80011b6:	e76e      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011b8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80011bc:	bf18      	it	ne
 80011be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80011c2:	d1ca      	bne.n	800115a <__aeabi_fdiv+0xba>
 80011c4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80011c8:	f47f af5c 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011cc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80011d0:	f47f af3c 	bne.w	800104c <__aeabi_fmul+0x114>
 80011d4:	e75f      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011d6:	bf00      	nop

080011d8 <__aeabi_uldivmod>:
 80011d8:	b953      	cbnz	r3, 80011f0 <__aeabi_uldivmod+0x18>
 80011da:	b94a      	cbnz	r2, 80011f0 <__aeabi_uldivmod+0x18>
 80011dc:	2900      	cmp	r1, #0
 80011de:	bf08      	it	eq
 80011e0:	2800      	cmpeq	r0, #0
 80011e2:	bf1c      	itt	ne
 80011e4:	f04f 31ff 	movne.w	r1, #4294967295
 80011e8:	f04f 30ff 	movne.w	r0, #4294967295
 80011ec:	f000 b96a 	b.w	80014c4 <__aeabi_idiv0>
 80011f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011f8:	f000 f806 	bl	8001208 <__udivmoddi4>
 80011fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <__udivmoddi4>:
 8001208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800120c:	9d08      	ldr	r5, [sp, #32]
 800120e:	460c      	mov	r4, r1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d14e      	bne.n	80012b2 <__udivmoddi4+0xaa>
 8001214:	4694      	mov	ip, r2
 8001216:	458c      	cmp	ip, r1
 8001218:	4686      	mov	lr, r0
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	d962      	bls.n	80012e6 <__udivmoddi4+0xde>
 8001220:	b14a      	cbz	r2, 8001236 <__udivmoddi4+0x2e>
 8001222:	f1c2 0320 	rsb	r3, r2, #32
 8001226:	4091      	lsls	r1, r2
 8001228:	fa20 f303 	lsr.w	r3, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	4319      	orrs	r1, r3
 8001232:	fa00 fe02 	lsl.w	lr, r0, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f f68c 	uxth.w	r6, ip
 800123e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001246:	fb07 1114 	mls	r1, r7, r4, r1
 800124a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800124e:	fb04 f106 	mul.w	r1, r4, r6
 8001252:	4299      	cmp	r1, r3
 8001254:	d90a      	bls.n	800126c <__udivmoddi4+0x64>
 8001256:	eb1c 0303 	adds.w	r3, ip, r3
 800125a:	f104 30ff 	add.w	r0, r4, #4294967295
 800125e:	f080 8112 	bcs.w	8001486 <__udivmoddi4+0x27e>
 8001262:	4299      	cmp	r1, r3
 8001264:	f240 810f 	bls.w	8001486 <__udivmoddi4+0x27e>
 8001268:	3c02      	subs	r4, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a59      	subs	r1, r3, r1
 800126e:	fa1f f38e 	uxth.w	r3, lr
 8001272:	fbb1 f0f7 	udiv	r0, r1, r7
 8001276:	fb07 1110 	mls	r1, r7, r0, r1
 800127a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800127e:	fb00 f606 	mul.w	r6, r0, r6
 8001282:	429e      	cmp	r6, r3
 8001284:	d90a      	bls.n	800129c <__udivmoddi4+0x94>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f100 31ff 	add.w	r1, r0, #4294967295
 800128e:	f080 80fc 	bcs.w	800148a <__udivmoddi4+0x282>
 8001292:	429e      	cmp	r6, r3
 8001294:	f240 80f9 	bls.w	800148a <__udivmoddi4+0x282>
 8001298:	4463      	add	r3, ip
 800129a:	3802      	subs	r0, #2
 800129c:	1b9b      	subs	r3, r3, r6
 800129e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012a2:	2100      	movs	r1, #0
 80012a4:	b11d      	cbz	r5, 80012ae <__udivmoddi4+0xa6>
 80012a6:	40d3      	lsrs	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	e9c5 3200 	strd	r3, r2, [r5]
 80012ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d905      	bls.n	80012c2 <__udivmoddi4+0xba>
 80012b6:	b10d      	cbz	r5, 80012bc <__udivmoddi4+0xb4>
 80012b8:	e9c5 0100 	strd	r0, r1, [r5]
 80012bc:	2100      	movs	r1, #0
 80012be:	4608      	mov	r0, r1
 80012c0:	e7f5      	b.n	80012ae <__udivmoddi4+0xa6>
 80012c2:	fab3 f183 	clz	r1, r3
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d146      	bne.n	8001358 <__udivmoddi4+0x150>
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	d302      	bcc.n	80012d4 <__udivmoddi4+0xcc>
 80012ce:	4290      	cmp	r0, r2
 80012d0:	f0c0 80f0 	bcc.w	80014b4 <__udivmoddi4+0x2ac>
 80012d4:	1a86      	subs	r6, r0, r2
 80012d6:	eb64 0303 	sbc.w	r3, r4, r3
 80012da:	2001      	movs	r0, #1
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d0e6      	beq.n	80012ae <__udivmoddi4+0xa6>
 80012e0:	e9c5 6300 	strd	r6, r3, [r5]
 80012e4:	e7e3      	b.n	80012ae <__udivmoddi4+0xa6>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	f040 8090 	bne.w	800140c <__udivmoddi4+0x204>
 80012ec:	eba1 040c 	sub.w	r4, r1, ip
 80012f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012f4:	fa1f f78c 	uxth.w	r7, ip
 80012f8:	2101      	movs	r1, #1
 80012fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80012fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001302:	fb08 4416 	mls	r4, r8, r6, r4
 8001306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800130a:	fb07 f006 	mul.w	r0, r7, r6
 800130e:	4298      	cmp	r0, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x11c>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f106 34ff 	add.w	r4, r6, #4294967295
 800131a:	d202      	bcs.n	8001322 <__udivmoddi4+0x11a>
 800131c:	4298      	cmp	r0, r3
 800131e:	f200 80cd 	bhi.w	80014bc <__udivmoddi4+0x2b4>
 8001322:	4626      	mov	r6, r4
 8001324:	1a1c      	subs	r4, r3, r0
 8001326:	fa1f f38e 	uxth.w	r3, lr
 800132a:	fbb4 f0f8 	udiv	r0, r4, r8
 800132e:	fb08 4410 	mls	r4, r8, r0, r4
 8001332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001336:	fb00 f707 	mul.w	r7, r0, r7
 800133a:	429f      	cmp	r7, r3
 800133c:	d908      	bls.n	8001350 <__udivmoddi4+0x148>
 800133e:	eb1c 0303 	adds.w	r3, ip, r3
 8001342:	f100 34ff 	add.w	r4, r0, #4294967295
 8001346:	d202      	bcs.n	800134e <__udivmoddi4+0x146>
 8001348:	429f      	cmp	r7, r3
 800134a:	f200 80b0 	bhi.w	80014ae <__udivmoddi4+0x2a6>
 800134e:	4620      	mov	r0, r4
 8001350:	1bdb      	subs	r3, r3, r7
 8001352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001356:	e7a5      	b.n	80012a4 <__udivmoddi4+0x9c>
 8001358:	f1c1 0620 	rsb	r6, r1, #32
 800135c:	408b      	lsls	r3, r1
 800135e:	fa22 f706 	lsr.w	r7, r2, r6
 8001362:	431f      	orrs	r7, r3
 8001364:	fa20 fc06 	lsr.w	ip, r0, r6
 8001368:	fa04 f301 	lsl.w	r3, r4, r1
 800136c:	ea43 030c 	orr.w	r3, r3, ip
 8001370:	40f4      	lsrs	r4, r6
 8001372:	fa00 f801 	lsl.w	r8, r0, r1
 8001376:	0c38      	lsrs	r0, r7, #16
 8001378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800137c:	fbb4 fef0 	udiv	lr, r4, r0
 8001380:	fa1f fc87 	uxth.w	ip, r7
 8001384:	fb00 441e 	mls	r4, r0, lr, r4
 8001388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800138c:	fb0e f90c 	mul.w	r9, lr, ip
 8001390:	45a1      	cmp	r9, r4
 8001392:	fa02 f201 	lsl.w	r2, r2, r1
 8001396:	d90a      	bls.n	80013ae <__udivmoddi4+0x1a6>
 8001398:	193c      	adds	r4, r7, r4
 800139a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800139e:	f080 8084 	bcs.w	80014aa <__udivmoddi4+0x2a2>
 80013a2:	45a1      	cmp	r9, r4
 80013a4:	f240 8081 	bls.w	80014aa <__udivmoddi4+0x2a2>
 80013a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80013ac:	443c      	add	r4, r7
 80013ae:	eba4 0409 	sub.w	r4, r4, r9
 80013b2:	fa1f f983 	uxth.w	r9, r3
 80013b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80013ba:	fb00 4413 	mls	r4, r0, r3, r4
 80013be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80013c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80013c6:	45a4      	cmp	ip, r4
 80013c8:	d907      	bls.n	80013da <__udivmoddi4+0x1d2>
 80013ca:	193c      	adds	r4, r7, r4
 80013cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80013d0:	d267      	bcs.n	80014a2 <__udivmoddi4+0x29a>
 80013d2:	45a4      	cmp	ip, r4
 80013d4:	d965      	bls.n	80014a2 <__udivmoddi4+0x29a>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	443c      	add	r4, r7
 80013da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80013de:	fba0 9302 	umull	r9, r3, r0, r2
 80013e2:	eba4 040c 	sub.w	r4, r4, ip
 80013e6:	429c      	cmp	r4, r3
 80013e8:	46ce      	mov	lr, r9
 80013ea:	469c      	mov	ip, r3
 80013ec:	d351      	bcc.n	8001492 <__udivmoddi4+0x28a>
 80013ee:	d04e      	beq.n	800148e <__udivmoddi4+0x286>
 80013f0:	b155      	cbz	r5, 8001408 <__udivmoddi4+0x200>
 80013f2:	ebb8 030e 	subs.w	r3, r8, lr
 80013f6:	eb64 040c 	sbc.w	r4, r4, ip
 80013fa:	fa04 f606 	lsl.w	r6, r4, r6
 80013fe:	40cb      	lsrs	r3, r1
 8001400:	431e      	orrs	r6, r3
 8001402:	40cc      	lsrs	r4, r1
 8001404:	e9c5 6400 	strd	r6, r4, [r5]
 8001408:	2100      	movs	r1, #0
 800140a:	e750      	b.n	80012ae <__udivmoddi4+0xa6>
 800140c:	f1c2 0320 	rsb	r3, r2, #32
 8001410:	fa20 f103 	lsr.w	r1, r0, r3
 8001414:	fa0c fc02 	lsl.w	ip, ip, r2
 8001418:	fa24 f303 	lsr.w	r3, r4, r3
 800141c:	4094      	lsls	r4, r2
 800141e:	430c      	orrs	r4, r1
 8001420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001424:	fa00 fe02 	lsl.w	lr, r0, r2
 8001428:	fa1f f78c 	uxth.w	r7, ip
 800142c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001430:	fb08 3110 	mls	r1, r8, r0, r3
 8001434:	0c23      	lsrs	r3, r4, #16
 8001436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800143a:	fb00 f107 	mul.w	r1, r0, r7
 800143e:	4299      	cmp	r1, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x24c>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f100 36ff 	add.w	r6, r0, #4294967295
 800144a:	d22c      	bcs.n	80014a6 <__udivmoddi4+0x29e>
 800144c:	4299      	cmp	r1, r3
 800144e:	d92a      	bls.n	80014a6 <__udivmoddi4+0x29e>
 8001450:	3802      	subs	r0, #2
 8001452:	4463      	add	r3, ip
 8001454:	1a5b      	subs	r3, r3, r1
 8001456:	b2a4      	uxth	r4, r4
 8001458:	fbb3 f1f8 	udiv	r1, r3, r8
 800145c:	fb08 3311 	mls	r3, r8, r1, r3
 8001460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001464:	fb01 f307 	mul.w	r3, r1, r7
 8001468:	42a3      	cmp	r3, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x276>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f101 36ff 	add.w	r6, r1, #4294967295
 8001474:	d213      	bcs.n	800149e <__udivmoddi4+0x296>
 8001476:	42a3      	cmp	r3, r4
 8001478:	d911      	bls.n	800149e <__udivmoddi4+0x296>
 800147a:	3902      	subs	r1, #2
 800147c:	4464      	add	r4, ip
 800147e:	1ae4      	subs	r4, r4, r3
 8001480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001484:	e739      	b.n	80012fa <__udivmoddi4+0xf2>
 8001486:	4604      	mov	r4, r0
 8001488:	e6f0      	b.n	800126c <__udivmoddi4+0x64>
 800148a:	4608      	mov	r0, r1
 800148c:	e706      	b.n	800129c <__udivmoddi4+0x94>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d2ae      	bcs.n	80013f0 <__udivmoddi4+0x1e8>
 8001492:	ebb9 0e02 	subs.w	lr, r9, r2
 8001496:	eb63 0c07 	sbc.w	ip, r3, r7
 800149a:	3801      	subs	r0, #1
 800149c:	e7a8      	b.n	80013f0 <__udivmoddi4+0x1e8>
 800149e:	4631      	mov	r1, r6
 80014a0:	e7ed      	b.n	800147e <__udivmoddi4+0x276>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e799      	b.n	80013da <__udivmoddi4+0x1d2>
 80014a6:	4630      	mov	r0, r6
 80014a8:	e7d4      	b.n	8001454 <__udivmoddi4+0x24c>
 80014aa:	46d6      	mov	lr, sl
 80014ac:	e77f      	b.n	80013ae <__udivmoddi4+0x1a6>
 80014ae:	4463      	add	r3, ip
 80014b0:	3802      	subs	r0, #2
 80014b2:	e74d      	b.n	8001350 <__udivmoddi4+0x148>
 80014b4:	4606      	mov	r6, r0
 80014b6:	4623      	mov	r3, r4
 80014b8:	4608      	mov	r0, r1
 80014ba:	e70f      	b.n	80012dc <__udivmoddi4+0xd4>
 80014bc:	3e02      	subs	r6, #2
 80014be:	4463      	add	r3, ip
 80014c0:	e730      	b.n	8001324 <__udivmoddi4+0x11c>
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <calcsin>:

uint32_t sine_val[100];
uint16_t hanning_array[FFT_BUFFER_SIZE];

void calcsin ()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e046      	b.n	8001562 <calcsin+0x9a>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2))/5+200;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f883 	bl	80005e4 <__aeabi_i2d>
 80014de:	a32c      	add	r3, pc, #176	@ (adr r3, 8001590 <calcsin+0xc8>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8e8 	bl	80006b8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <calcsin+0xb0>)
 80014f6:	f7ff fa09 	bl	800090c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f008 fe77 	bl	800a1f4 <sin>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <calcsin+0xb4>)
 800150c:	f7fe ff1e 	bl	800034c <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <calcsin+0xb8>)
 800151e:	f7ff f8cb 	bl	80006b8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <calcsin+0xbc>)
 8001530:	f7ff f9ec 	bl	800090c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <calcsin+0xc0>)
 8001542:	f7fe ff03 	bl	800034c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb75 	bl	8000c3c <__aeabi_d2uiz>
 8001552:	4602      	mov	r2, r0
 8001554:	490d      	ldr	r1, [pc, #52]	@ (800158c <calcsin+0xc4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b63      	cmp	r3, #99	@ 0x63
 8001566:	ddb5      	ble.n	80014d4 <calcsin+0xc>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	40590000 	.word	0x40590000
 800157c:	3ff00000 	.word	0x3ff00000
 8001580:	40a00000 	.word	0x40a00000
 8001584:	40140000 	.word	0x40140000
 8001588:	40690000 	.word	0x40690000
 800158c:	200002a4 	.word	0x200002a4
 8001590:	4d12d84a 	.word	0x4d12d84a
 8001594:	400921fb 	.word	0x400921fb

08001598 <calchanning>:

void calchanning(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	e03e      	b.n	8001622 <calchanning+0x8a>
	        hanning_array[i] = (int)(0.5 * (1 - cos(2 * M_PI * i / (FFT_BUFFER_SIZE - 1))) * 4096);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f81d 	bl	80005e4 <__aeabi_i2d>
 80015aa:	a327      	add	r3, pc, #156	@ (adr r3, 8001648 <calchanning+0xb0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f882 	bl	80006b8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001650 <calchanning+0xb8>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f9a3 	bl	800090c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f008 fdc7 	bl	800a160 <cos>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	4917      	ldr	r1, [pc, #92]	@ (8001638 <calchanning+0xa0>)
 80015dc:	f7fe feb4 	bl	8000348 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <calchanning+0xa4>)
 80015ee:	f7ff f863 	bl	80006b8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <calchanning+0xa8>)
 8001600:	f7ff f85a 	bl	80006b8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faee 	bl	8000bec <__aeabi_d2iz>
 8001610:	4603      	mov	r3, r0
 8001612:	b299      	uxth	r1, r3
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <calchanning+0xac>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001628:	dbbc      	blt.n	80015a4 <calchanning+0xc>
	    }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	3fe00000 	.word	0x3fe00000
 8001640:	40b00000 	.word	0x40b00000
 8001644:	20000434 	.word	0x20000434
 8001648:	54442d18 	.word	0x54442d18
 800164c:	401921fb 	.word	0x401921fb
 8001650:	00000000 	.word	0x00000000
 8001654:	409ffc00 	.word	0x409ffc00

08001658 <sgn>:
    } while (fabs(term) > TOLERANCE);

    return sum;
}

int sgn(float x) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    if(x>=0){
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db01      	blt.n	8001672 <sgn+0x1a>
    	return 1;
 800166e:	2301      	movs	r3, #1
 8001670:	e001      	b.n	8001676 <sgn+0x1e>
    }
    else{
    	return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001688:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <Read_ADC+0x20>)
 800168a:	f001 fc57 	bl	8002f3c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800168e:	f04f 31ff 	mov.w	r1, #4294967295
 8001692:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <Read_ADC+0x20>)
 8001694:	f001 fd40 	bl	8003118 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <Read_ADC+0x20>)
 800169a:	f001 fed1 	bl	8003440 <HAL_ADC_GetValue>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000007c 	.word	0x2000007c

080016a8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e017      	b.n	80016e6 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	 	fftBufIn[i] = (float)(ADC_val[i]*hanning_array[i]) ;
 80016b6:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	4619      	mov	r1, r3
 80016c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ec:	dbe3      	blt.n	80016b6 <HAL_ADC_ConvHalfCpltCallback+0xe>
        }
        //sprintf(data, "half buffer\r\n\n ");
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 80016ee:	f000 f837 	bl	8001760 <Calc_FFT>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000144c 	.word	0x2000144c
 8001700:	20000434 	.word	0x20000434
 8001704:	2000344c 	.word	0x2000344c

08001708 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e012      	b.n	800173e <HAL_ADC_ConvCpltCallback+0x36>
	  	fftBufIn[i-FFT_BUFFER_SIZE] = (float)(ADC_val[i]) ;
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x4c>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001726:	ee07 2a90 	vmov	s15, r2
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x50>)
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001744:	dbe8      	blt.n	8001718 <HAL_ADC_ConvCpltCallback+0x10>
        }
        //sprintf(data, "full buffer\r\n\n " );
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 8001746:	f000 f80b 	bl	8001760 <Calc_FFT>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000144c 	.word	0x2000144c
 8001758:	2000344c 	.word	0x2000344c
 800175c:	00000000 	.word	0x00000000

08001760 <Calc_FFT>:





void Calc_FFT(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0

	arm_rfft_fast_f32(&fftHandler, &fftBufIn, &fftBufOut,0);
 8001766:	2300      	movs	r3, #0
 8001768:	4a83      	ldr	r2, [pc, #524]	@ (8001978 <Calc_FFT+0x218>)
 800176a:	4984      	ldr	r1, [pc, #528]	@ (800197c <Calc_FFT+0x21c>)
 800176c:	4884      	ldr	r0, [pc, #528]	@ (8001980 <Calc_FFT+0x220>)
 800176e:	f006 fce3 	bl	8008138 <arm_rfft_fast_f32>
		  float phase_1khz = 0.0f, phase_2khz = 0.0f;
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
		  //calc freqmagnitude for 1,2,3khz
		  float phase_shift_diff = 0.0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001784:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <Calc_FFT+0x224>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e057      	b.n	800183c <Calc_FFT+0xdc>
		        float real = fftBufOut[i * 2];
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4a79      	ldr	r2, [pc, #484]	@ (8001978 <Calc_FFT+0x218>)
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
		        float imag = fftBufOut[(i * 2) + 1];
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3301      	adds	r3, #1
 80017a0:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <Calc_FFT+0x218>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
		        float curVal = sqrtf((real * real) + (imag * imag));
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f008 fd5f 	bl	800a284 <sqrtf>
 80017c6:	60b8      	str	r0, [r7, #8]
		        float phase = atan2f(imag, real);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f008 fd58 	bl	800a280 <atan2f>
 80017d0:	6078      	str	r0, [r7, #4]
		        if (i == sample_count_1khz) {
 80017d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001984 <Calc_FFT+0x224>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <Calc_FFT+0x84>
		            phase_1khz = phase;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e2:	e00f      	b.n	8001804 <Calc_FFT+0xa4>
		        } else if (i == sample_count_1khz * 2) {
 80017e4:	4b67      	ldr	r3, [pc, #412]	@ (8001984 <Calc_FFT+0x224>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d109      	bne.n	8001804 <Calc_FFT+0xa4>
		            phase_2khz = phase;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
		            phase_shift_diff = phase_2khz - phase_1khz;
 80017f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80017f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		        }

			  freq_mag[i/sample_count_1khz-1]+=(uint16_t)curVal;
 8001804:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <Calc_FFT+0x224>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	495d      	ldr	r1, [pc, #372]	@ (8001988 <Calc_FFT+0x228>)
 8001814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001818:	edd7 7a02 	vldr	s15, [r7, #8]
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 1a90 	vmov	r1, s15
 8001824:	b289      	uxth	r1, r1
 8001826:	3b01      	subs	r3, #1
 8001828:	440a      	add	r2, r1
 800182a:	4957      	ldr	r1, [pc, #348]	@ (8001988 <Calc_FFT+0x228>)
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001830:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <Calc_FFT+0x224>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	4413      	add	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	4b51      	ldr	r3, [pc, #324]	@ (8001984 <Calc_FFT+0x224>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184a:	429a      	cmp	r2, r3
 800184c:	dd9e      	ble.n	800178c <Calc_FFT+0x2c>

		  }
		  //sprintf(data, "%d ", (int16_t)(phase_shift_diff*1000));
		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  if (phase_shift_diff < 0) {
 800184e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001852:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	d510      	bpl.n	800187e <Calc_FFT+0x11e>
		      phase_shift_diff += 2 * PI;
 800185c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800185e:	f7fe fed3 	bl	8000608 <__aeabi_f2d>
 8001862:	a343      	add	r3, pc, #268	@ (adr r3, 8001970 <Calc_FFT+0x210>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fd70 	bl	800034c <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff fa02 	bl	8000c7c <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187c:	e01a      	b.n	80018b4 <Calc_FFT+0x154>
		  } else if (phase_shift_diff >= 2 * PI) {
 800187e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001880:	f7fe fec2 	bl	8000608 <__aeabi_f2d>
 8001884:	a33a      	add	r3, pc, #232	@ (adr r3, 8001970 <Calc_FFT+0x210>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7ff f99b 	bl	8000bc4 <__aeabi_dcmpge>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00f      	beq.n	80018b4 <Calc_FFT+0x154>
		      phase_shift_diff -= 2 * PI;
 8001894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_f2d>
 800189a:	a335      	add	r3, pc, #212	@ (adr r3, 8001970 <Calc_FFT+0x210>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fd52 	bl	8000348 <__aeabi_dsub>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f9e6 	bl	8000c7c <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		  }


			  avgPhaseShift += phase_shift_diff;
 80018b4:	4b35      	ldr	r3, [pc, #212]	@ (800198c <Calc_FFT+0x22c>)
 80018b6:	ed93 7a00 	vldr	s14, [r3]
 80018ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	4b32      	ldr	r3, [pc, #200]	@ (800198c <Calc_FFT+0x22c>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
			  fft_count++;
 80018c8:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <Calc_FFT+0x230>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <Calc_FFT+0x230>)
 80018d2:	801a      	strh	r2, [r3, #0]


			  float avgTemp = 0.0;
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]

			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 80018da:	2304      	movs	r3, #4
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e02f      	b.n	8001940 <Calc_FFT+0x1e0>
			  	float curVal = sqrtf((fftBufOut[i]*fftBufOut[i])+ (fftBufOut[i+1]*fftBufOut[i+1]));
 80018e0:	4a25      	ldr	r2, [pc, #148]	@ (8001978 <Calc_FFT+0x218>)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <Calc_FFT+0x218>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <Calc_FFT+0x218>)
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd3 6a00 	vldr	s13, [r3]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	4a1a      	ldr	r2, [pc, #104]	@ (8001978 <Calc_FFT+0x218>)
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	ee17 0a90 	vmov	r0, s15
 8001924:	f008 fcae 	bl	800a284 <sqrtf>
 8001928:	6178      	str	r0, [r7, #20]
			  	avgTemp += curVal;  // Convert float to
 800192a:	ed97 7a08 	vldr	s14, [r7, #32]
 800192e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a08 	vstr	s15, [r7, #32]
			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3302      	adds	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001946:	dbcb      	blt.n	80018e0 <Calc_FFT+0x180>
				  //sprintf(data, "%d ", (uint16_t)(curVal));
				  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
			  }
			  avg += (uint32_t)avgTemp/((FFT_BUFFER_SIZE / 2)-2);
 8001948:	edd7 7a08 	vldr	s15, [r7, #32]
 800194c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <Calc_FFT+0x234>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	0a1a      	lsrs	r2, r3, #8
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <Calc_FFT+0x238>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <Calc_FFT+0x238>)
 8001966:	6013      	str	r3, [r2, #0]





}
 8001968:	bf00      	nop
 800196a:	3730      	adds	r7, #48	@ 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	4d12d84a 	.word	0x4d12d84a
 8001974:	401921fb 	.word	0x401921fb
 8001978:	2000544c 	.word	0x2000544c
 800197c:	2000344c 	.word	0x2000344c
 8001980:	20001434 	.word	0x20001434
 8001984:	20000000 	.word	0x20000000
 8001988:	20007484 	.word	0x20007484
 800198c:	20007490 	.word	0x20007490
 8001990:	2000747e 	.word	0x2000747e
 8001994:	80402011 	.word	0x80402011
 8001998:	20007480 	.word	0x20007480
 800199c:	00000000 	.word	0x00000000

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 80019a6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a8:	f000 fe94 	bl	80026d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ac:	f000 f956 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b0:	f000 fb3c 	bl	800202c <MX_GPIO_Init>
  MX_DMA_Init();
 80019b4:	f000 fb14 	bl	8001fe0 <MX_DMA_Init>
  MX_ADC1_Init();
 80019b8:	f000 f9a2 	bl	8001d00 <MX_ADC1_Init>
  MX_DAC1_Init();
 80019bc:	f000 fa18 	bl	8001df0 <MX_DAC1_Init>
  MX_TIM6_Init();
 80019c0:	f000 faa8 	bl	8001f14 <MX_TIM6_Init>
  MX_TIM1_Init();
 80019c4:	f000 fa52 	bl	8001e6c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80019c8:	f000 fada 	bl	8001f80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //start sweep for mzm bias and calculate bias on midpoint between min and max output current
#define STEP_SIZE_BIAS_SWEEP 16
  uint32_t adc_val[128]={0};
 80019cc:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80019d0:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80019d4:	4618      	mov	r0, r3
 80019d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019da:	461a      	mov	r2, r3
 80019dc:	2100      	movs	r1, #0
 80019de:	f007 ff3f 	bl	8009860 <memset>
  uint16_t dac_val[128]={0};
 80019e2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 80019e6:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 80019ea:	4618      	mov	r0, r3
 80019ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f0:	461a      	mov	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	f007 ff34 	bl	8009860 <memset>
  uint16_t index_adc_val_smallest=0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
  uint16_t index_adc_val_highest=0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8a7 3320 	strh.w	r3, [r7, #800]	@ 0x320
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4884      	ldr	r0, [pc, #528]	@ (8001c18 <main+0x278>)
 8001a08:	f003 f845 	bl	8004a96 <HAL_DAC_Start>
  Read_ADC();
 8001a0c:	f7ff fe3a 	bl	8001684 <Read_ADC>
	  }
	  dac_val[i/STEP_SIZE_BIAS_SWEEP] = i;
	  HAL_Delay(10);
  }
  //set dac to midpoint   */
  uint16_t midpoint_dac_val = dac_val[(index_adc_val_highest + index_adc_val_smallest) / 2];
 8001a10:	f8b7 2320 	ldrh.w	r2, [r7, #800]	@ 0x320
 8001a14:	f8b7 3322 	ldrh.w	r3, [r7, #802]	@ 0x322
 8001a18:	4413      	add	r3, r2
 8001a1a:	0fda      	lsrs	r2, r3, #31
 8001a1c:	4413      	add	r3, r2
 8001a1e:	105b      	asrs	r3, r3, #1
 8001a20:	461a      	mov	r2, r3
 8001a22:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001a26:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8001a2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a2e:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e

  midpoint_dac_val = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val  );
 8001a38:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4875      	ldr	r0, [pc, #468]	@ (8001c18 <main+0x278>)
 8001a42:	f003 f941 	bl	8004cc8 <HAL_DAC_SetValue>
  sprintf(data, "bias set as:%d\r\n\n ",midpoint_dac_val);
 8001a46:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4973      	ldr	r1, [pc, #460]	@ (8001c1c <main+0x27c>)
 8001a4e:	4874      	ldr	r0, [pc, #464]	@ (8001c20 <main+0x280>)
 8001a50:	f007 fee6 	bl	8009820 <siprintf>
  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001a54:	4872      	ldr	r0, [pc, #456]	@ (8001c20 <main+0x280>)
 8001a56:	f7fe fc1b 	bl	8000290 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	2364      	movs	r3, #100	@ 0x64
 8001a60:	496f      	ldr	r1, [pc, #444]	@ (8001c20 <main+0x280>)
 8001a62:	4870      	ldr	r0, [pc, #448]	@ (8001c24 <main+0x284>)
 8001a64:	f005 fd86 	bl	8007574 <HAL_UART_Transmit>


  //reset the adc
  HAL_ADC_Stop(&hadc1);
 8001a68:	486f      	ldr	r0, [pc, #444]	@ (8001c28 <main+0x288>)
 8001a6a:	f001 fb21 	bl	80030b0 <HAL_ADC_Stop>
  //ADC_Disable(&hadc1);
  MX_ADC1_Init2();
 8001a6e:	f000 fb2f 	bl	80020d0 <MX_ADC1_Init2>

  HAL_TIM_Base_Start(&htim6);
 8001a72:	486e      	ldr	r0, [pc, #440]	@ (8001c2c <main+0x28c>)
 8001a74:	f005 fa36 	bl	8006ee4 <HAL_TIM_Base_Start>
  calcsin();
 8001a78:	f7ff fd26 	bl	80014c8 <calcsin>
  calchanning();
 8001a7c:	f7ff fd8c 	bl	8001598 <calchanning>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a80:	217f      	movs	r1, #127	@ 0x7f
 8001a82:	4869      	ldr	r0, [pc, #420]	@ (8001c28 <main+0x288>)
 8001a84:	f002 fd92 	bl	80045ac <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, sine_val, 100, DAC_ALIGN_12B_R);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2364      	movs	r3, #100	@ 0x64
 8001a8e:	4a68      	ldr	r2, [pc, #416]	@ (8001c30 <main+0x290>)
 8001a90:	2110      	movs	r1, #16
 8001a92:	4861      	ldr	r0, [pc, #388]	@ (8001c18 <main+0x278>)
 8001a94:	f003 f84c 	bl	8004b30 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_val,FFT_BUFFER_SIZE*2);
 8001a98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a9c:	4965      	ldr	r1, [pc, #404]	@ (8001c34 <main+0x294>)
 8001a9e:	4862      	ldr	r0, [pc, #392]	@ (8001c28 <main+0x288>)
 8001aa0:	f001 fc12 	bl	80032c8 <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fftHandler,FFT_BUFFER_SIZE);
 8001aa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aa8:	4863      	ldr	r0, [pc, #396]	@ (8001c38 <main+0x298>)
 8001aaa:	f006 fac1 	bl	8008030 <arm_rfft_fast_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8001aae:	4863      	ldr	r0, [pc, #396]	@ (8001c3c <main+0x29c>)
 8001ab0:	f005 fa18 	bl	8006ee4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dac_val_tone_bias[3]={0};
 8001ab4:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ab8:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	809a      	strh	r2, [r3, #4]
  uint32_t adc_val_tone_bias[3]={0};
 8001ac2:	f507 734c 	add.w	r3, r7, #816	@ 0x330
 8001ac6:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8001aca:	461a      	mov	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	6053      	str	r3, [r2, #4]
 8001ad2:	6093      	str	r3, [r2, #8]
  int16_t sweep_count = -1;
 8001ad4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad8:	f8a7 331e 	strh.w	r3, [r7, #798]	@ 0x31e
  uint16_t prev_bias = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8a7 331c 	strh.w	r3, [r7, #796]	@ 0x31c
  while (1)
  {

	  //for(int sweep = midpoint_dac_val-STEP_SIZE_BIAS_SWEEP; i<midpoint_dac_val+STEP_SIZE_BIAS_SWEEP; i+=STEP_SIZE_BIAS_SWEEP)
	  //sweep through best known value of bias, one below and one above
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001ae2:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <main+0x2a0>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b63      	cmp	r3, #99	@ 0x63
 8001ae8:	d9fb      	bls.n	8001ae2 <main+0x142>
		  float phaseShift = avgPhaseShift/ fft_count;
 8001aea:	4b56      	ldr	r3, [pc, #344]	@ (8001c44 <main+0x2a4>)
 8001aec:	edd3 6a00 	vldr	s13, [r3]
 8001af0:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <main+0x2a0>)
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	edc7 7aca 	vstr	s15, [r7, #808]	@ 0x328

		  fft_count=0;
 8001b04:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <main+0x2a0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	801a      	strh	r2, [r3, #0]
		  //sprintf(data, "%dfor  %d 1khz:%d 2khz:%d 3khz:%d\r\n\n ",sweep_count,prev_bias,freq_mag[0], freq_mag[1] ,freq_mag[2]);
		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		    if (phaseShift> PI) {
 8001b0a:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8001b0e:	f7fe fd7b 	bl	8000608 <__aeabi_f2d>
 8001b12:	a33d      	add	r3, pc, #244	@ (adr r3, 8001c08 <main+0x268>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7ff f85e 	bl	8000bd8 <__aeabi_dcmpgt>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <main+0x1a8>
		    	phaseShift -= 2 * PI;
 8001b22:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8001b26:	f7fe fd6f 	bl	8000608 <__aeabi_f2d>
 8001b2a:	a339      	add	r3, pc, #228	@ (adr r3, 8001c10 <main+0x270>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fc0a 	bl	8000348 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f89e 	bl	8000c7c <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001b46:	e003      	b.n	8001b50 <main+0x1b0>
		    } else if (phaseShift < PI) {
 8001b48:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8001b4c:	f7fe fd5c 	bl	8000608 <__aeabi_f2d>
		    	//phaseShift+= 2 * PI;
		    }

			  sprintf(data, "dac: %d phase shift: %d\r\n\n ",midpoint_dac_val,(int16_t)(phaseShift*1000));
 8001b50:	f8b7 232e 	ldrh.w	r2, [r7, #814]	@ 0x32e
 8001b54:	edd7 7aca 	vldr	s15, [r7, #808]	@ 0x328
 8001b58:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001c48 <main+0x2a8>
 8001b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b64:	ee17 3a90 	vmov	r3, s15
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4938      	ldr	r1, [pc, #224]	@ (8001c4c <main+0x2ac>)
 8001b6c:	482c      	ldr	r0, [pc, #176]	@ (8001c20 <main+0x280>)
 8001b6e:	f007 fe57 	bl	8009820 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001b72:	482b      	ldr	r0, [pc, #172]	@ (8001c20 <main+0x280>)
 8001b74:	f7fe fb8c 	bl	8000290 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2364      	movs	r3, #100	@ 0x64
 8001b7e:	4928      	ldr	r1, [pc, #160]	@ (8001c20 <main+0x280>)
 8001b80:	4828      	ldr	r0, [pc, #160]	@ (8001c24 <main+0x284>)
 8001b82:	f005 fcf7 	bl	8007574 <HAL_UART_Transmit>
		  //float correction =(Vpi/PI*arccot(((float)freq_mag[1]*bessel_jn(1,((Vac*PI)/Vpi)))/((float)freq_mag[0]*bessel_jn(2,((Vac*PI)/Vpi))))*sgn(phaseShift));//-(Vpi/2);
		  //midpoint_dac_val = midpoint_dac_val - (int16_t)((correction/13.724)*4096);
		  //fixed offset
			  //sprintf(data, "avg: %d\r\n\n ",avg);
			  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  if(freq_mag[1]> 150000){
 8001b86:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <main+0x2b0>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <main+0x2b4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d91a      	bls.n	8001bc6 <main+0x226>
			  float correction2 =50*sgn(phaseShift);
 8001b90:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 8001b94:	f7ff fd60 	bl	8001658 <sgn>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2232      	movs	r2, #50	@ 0x32
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba8:	edc7 7ac6 	vstr	s15, [r7, #792]	@ 0x318
			  midpoint_dac_val= midpoint_dac_val+100;
 8001bac:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001bb0:	3364      	adds	r3, #100	@ 0x64
 8001bb2:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
			  if(midpoint_dac_val>=2048){
 8001bb6:	f8b7 332e 	ldrh.w	r3, [r7, #814]	@ 0x32e
 8001bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bbe:	d302      	bcc.n	8001bc6 <main+0x226>
				  midpoint_dac_val = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8a7 332e 	strh.w	r3, [r7, #814]	@ 0x32e
			  }
			  //sprintf(data, "correction: %d\r\n\n ",(int16_t)(correction2));
			  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  }
		  avg = 0;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <main+0x2b8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
		  //sprintf(data, "new dac val: %d\r\n\n ",midpoint_dac_val);
		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
		  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val);

	  		fft_count=0;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <main+0x2a0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
	  		avgPhaseShift = 0;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <main+0x2a4>)
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
			  for(int i =0;i<=2;i++){
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8001be0:	e00a      	b.n	8001bf8 <main+0x258>
				  freq_mag[i]=0;
 8001be2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <main+0x2b0>)
 8001be4:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001be8:	2100      	movs	r1, #0
 8001bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i =0;i<=2;i++){
 8001bee:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8001bf8:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	ddf0      	ble.n	8001be2 <main+0x242>
			  }
			  fft_count=0;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <main+0x2a0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001c06:	e76c      	b.n	8001ae2 <main+0x142>
 8001c08:	4d12d84a 	.word	0x4d12d84a
 8001c0c:	400921fb 	.word	0x400921fb
 8001c10:	4d12d84a 	.word	0x4d12d84a
 8001c14:	401921fb 	.word	0x401921fb
 8001c18:	20000128 	.word	0x20000128
 8001c1c:	0800b548 	.word	0x0800b548
 8001c20:	2000744c 	.word	0x2000744c
 8001c24:	2000021c 	.word	0x2000021c
 8001c28:	2000007c 	.word	0x2000007c
 8001c2c:	200001d0 	.word	0x200001d0
 8001c30:	200002a4 	.word	0x200002a4
 8001c34:	2000144c 	.word	0x2000144c
 8001c38:	20001434 	.word	0x20001434
 8001c3c:	20000184 	.word	0x20000184
 8001c40:	2000747e 	.word	0x2000747e
 8001c44:	20007490 	.word	0x20007490
 8001c48:	447a0000 	.word	0x447a0000
 8001c4c:	0800b55c 	.word	0x0800b55c
 8001c50:	20007484 	.word	0x20007484
 8001c54:	000249f0 	.word	0x000249f0
 8001c58:	20007480 	.word	0x20007480

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b096      	sub	sp, #88	@ 0x58
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	2244      	movs	r2, #68	@ 0x44
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f007 fdf8 	bl	8009860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c82:	f003 fdc5 	bl	8005810 <HAL_PWREx_ControlVoltageScaling>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c8c:	f000 fa9a 	bl	80021c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c90:	2310      	movs	r3, #16
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c94:	2301      	movs	r3, #1
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c9c:	2360      	movs	r3, #96	@ 0x60
 8001c9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001cac:	2320      	movs	r3, #32
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fdfb 	bl	80058bc <HAL_RCC_OscConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ccc:	f000 fa7a 	bl	80021c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2103      	movs	r1, #3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 f9c3 	bl	8006074 <HAL_RCC_ClockConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cf4:	f000 fa66 	bl	80021c4 <Error_Handler>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3758      	adds	r7, #88	@ 0x58
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d22:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d24:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <MX_ADC1_Init+0xe8>)
 8001d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d2a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d30:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d3c:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d42:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d44:	2204      	movs	r2, #4
 8001d46:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d48:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d68:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d84:	4817      	ldr	r0, [pc, #92]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001d86:	f000 ff89 	bl	8002c9c <HAL_ADC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d90:	f000 fa18 	bl	80021c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4811      	ldr	r0, [pc, #68]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001da0:	f002 fc96 	bl	80046d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001daa:	f000 fa0b 	bl	80021c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <MX_ADC1_Init+0xec>)
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db2:	2306      	movs	r3, #6
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dba:	237f      	movs	r3, #127	@ 0x7f
 8001dbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <MX_ADC1_Init+0xe4>)
 8001dcc:	f001 fd74 	bl	80038b8 <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001dd6:	f000 f9f5 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	@ 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000007c 	.word	0x2000007c
 8001de8:	50040000 	.word	0x50040000
 8001dec:	14f00020 	.word	0x14f00020

08001df0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2224      	movs	r2, #36	@ 0x24
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f007 fd2f 	bl	8009860 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <MX_DAC1_Init+0x74>)
 8001e04:	4a18      	ldr	r2, [pc, #96]	@ (8001e68 <MX_DAC1_Init+0x78>)
 8001e06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001e08:	4816      	ldr	r0, [pc, #88]	@ (8001e64 <MX_DAC1_Init+0x74>)
 8001e0a:	f002 fe22 	bl	8004a52 <HAL_DAC_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001e14:	f000 f9d6 	bl	80021c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	2200      	movs	r2, #0
 8001e30:	4619      	mov	r1, r3
 8001e32:	480c      	ldr	r0, [pc, #48]	@ (8001e64 <MX_DAC1_Init+0x74>)
 8001e34:	f002 ff8b 	bl	8004d4e <HAL_DAC_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f000 f9c1 	bl	80021c4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001e42:	2304      	movs	r3, #4
 8001e44:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	2210      	movs	r2, #16
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_DAC1_Init+0x74>)
 8001e4e:	f002 ff7e 	bl	8004d4e <HAL_DAC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001e58:	f000 f9b4 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	@ 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000128 	.word	0x20000128
 8001e68:	40007400 	.word	0x40007400

08001e6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0310 	add.w	r3, r7, #16
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001e8c:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <MX_TIM1_Init+0xa4>)
 8001e8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 624;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001e92:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001e96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001ea0:	2209      	movs	r2, #9
 8001ea2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001eb6:	4815      	ldr	r0, [pc, #84]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001eb8:	f004 ffbc 	bl	8006e34 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001ec2:	f000 f97f 	bl	80021c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480e      	ldr	r0, [pc, #56]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001ed4:	f005 f86e 	bl	8006fb4 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ede:	f000 f971 	bl	80021c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001ee6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001eea:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_TIM1_Init+0xa0>)
 8001ef6:	f005 fa67 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001f00:	f000 f960 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000184 	.word	0x20000184
 8001f10:	40012c00 	.word	0x40012c00

08001f14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f26:	4a15      	ldr	r2, [pc, #84]	@ (8001f7c <MX_TIM6_Init+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f2c:	223f      	movs	r2, #63	@ 0x3f
 8001f2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f38:	2209      	movs	r2, #9
 8001f3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f42:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f44:	f004 ff76 	bl	8006e34 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f4e:	f000 f939 	bl	80021c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f52:	2320      	movs	r3, #32
 8001f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4806      	ldr	r0, [pc, #24]	@ (8001f78 <MX_TIM6_Init+0x64>)
 8001f60:	f005 fa32 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f6a:	f000 f92b 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200001d0 	.word	0x200001d0
 8001f7c:	40001000 	.word	0x40001000

08001f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f84:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	@ (8001fdc <MX_USART2_UART_Init+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <MX_USART2_UART_Init+0x58>)
 8001fc4:	f005 fa88 	bl	80074d8 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fce:	f000 f8f9 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000021c 	.word	0x2000021c
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fe6:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <MX_DMA_Init+0x48>)
 8001fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <MX_DMA_Init+0x48>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <MX_DMA_Init+0x48>)
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	200b      	movs	r0, #11
 8002004:	f002 fcef 	bl	80049e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002008:	200b      	movs	r0, #11
 800200a:	f002 fd08 	bl	8004a1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	200e      	movs	r0, #14
 8002014:	f002 fce7 	bl	80049e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002018:	200e      	movs	r0, #14
 800201a:	f002 fd00 	bl	8004a1e <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000

0800202c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002046:	4a20      	ldr	r2, [pc, #128]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002060:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002076:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a0e      	ldr	r2, [pc, #56]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_GPIO_Init+0x9c>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MX_GPIO_Init+0xa0>)
 80020ba:	f003 f9f1 	bl	80054a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000800 	.word	0x48000800

080020d0 <MX_ADC1_Init2>:

/* USER CODE BEGIN 4 */
void MX_ADC1_Init2(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	@ 0x28
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020f2:	4b31      	ldr	r3, [pc, #196]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 80020f4:	4a31      	ldr	r2, [pc, #196]	@ (80021bc <MX_ADC1_Init2+0xec>)
 80020f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80020f8:	4b2f      	ldr	r3, [pc, #188]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 80020fa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002106:	4b2c      	ldr	r3, [pc, #176]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800210c:	4b2a      	ldr	r3, [pc, #168]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002112:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002114:	2204      	movs	r2, #4
 8002116:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002118:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800211e:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002120:	2200      	movs	r2, #0
 8002122:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002124:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002126:	2201      	movs	r2, #1
 8002128:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800212a:	4b23      	ldr	r3, [pc, #140]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002132:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002134:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002138:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800213a:	4b1f      	ldr	r3, [pc, #124]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800213c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800214a:	4b1b      	ldr	r3, [pc, #108]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002158:	4817      	ldr	r0, [pc, #92]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 800215a:	f000 fd9f 	bl	8002c9c <HAL_ADC_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_ADC1_Init2+0x98>
  {
    Error_Handler();
 8002164:	f000 f82e 	bl	80021c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	4619      	mov	r1, r3
 8002172:	4811      	ldr	r0, [pc, #68]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 8002174:	f002 faac 	bl	80046d0 <HAL_ADCEx_MultiModeConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_ADC1_Init2+0xb2>
  {
    Error_Handler();
 800217e:	f000 f821 	bl	80021c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002182:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <MX_ADC1_Init2+0xf0>)
 8002184:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002186:	2306      	movs	r3, #6
 8002188:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800218e:	237f      	movs	r3, #127	@ 0x7f
 8002190:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002192:	2304      	movs	r3, #4
 8002194:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4806      	ldr	r0, [pc, #24]	@ (80021b8 <MX_ADC1_Init2+0xe8>)
 80021a0:	f001 fb8a 	bl	80038b8 <HAL_ADC_ConfigChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_ADC1_Init2+0xde>
  {
    Error_Handler();
 80021aa:	f000 f80b 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	@ 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000007c 	.word	0x2000007c
 80021bc:	50040000 	.word	0x50040000
 80021c0:	14f00020 	.word	0x14f00020

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <Error_Handler+0x8>

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <HAL_MspInit+0x44>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <HAL_MspInit+0x44>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <HAL_MspInit+0x44>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0ac      	sub	sp, #176	@ 0xb0
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2288      	movs	r2, #136	@ 0x88
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f007 fb11 	bl	8009860 <memset>
  if(hadc->Instance==ADC1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <HAL_ADC_MspInit+0x130>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d17a      	bne.n	800233e <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002248:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800224c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800224e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800225e:	2310      	movs	r3, #16
 8002260:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002262:	2307      	movs	r3, #7
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 800226a:	2308      	movs	r3, #8
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800226e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4618      	mov	r0, r3
 800227a:	f004 f91f 	bl	80064bc <HAL_RCCEx_PeriphCLKConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002284:	f7ff ff9e 	bl	80021c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <HAL_ADC_MspInit+0x134>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228c:	4a2f      	ldr	r2, [pc, #188]	@ (800234c <HAL_ADC_MspInit+0x134>)
 800228e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_ADC_MspInit+0x134>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_ADC_MspInit+0x134>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a4:	4a29      	ldr	r2, [pc, #164]	@ (800234c <HAL_ADC_MspInit+0x134>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ac:	4b27      	ldr	r3, [pc, #156]	@ (800234c <HAL_ADC_MspInit+0x134>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022be:	230b      	movs	r3, #11
 80022c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d4:	f003 f8e4 	bl	80054a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022da:	4a1e      	ldr	r2, [pc, #120]	@ (8002354 <HAL_ADC_MspInit+0x13c>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022f0:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f6:	4b16      	ldr	r3, [pc, #88]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 80022f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022fe:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 8002300:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002304:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 8002308:	2220      	movs	r2, #32
 800230a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002312:	480f      	ldr	r0, [pc, #60]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 8002314:	f002 fecc 	bl	80050b0 <HAL_DMA_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800231e:	f7ff ff51 	bl	80021c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 8002326:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002328:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_ADC_MspInit+0x138>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2012      	movs	r0, #18
 8002334:	f002 fb57 	bl	80049e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002338:	2012      	movs	r0, #18
 800233a:	f002 fb70 	bl	8004a1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800233e:	bf00      	nop
 8002340:	37b0      	adds	r7, #176	@ 0xb0
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	50040000 	.word	0x50040000
 800234c:	40021000 	.word	0x40021000
 8002350:	200000e0 	.word	0x200000e0
 8002354:	40020008 	.word	0x40020008

08002358 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	@ 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <HAL_DAC_MspInit+0xcc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d14f      	bne.n	800241a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800237a:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	4a2a      	ldr	r2, [pc, #168]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 8002380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002384:	6593      	str	r3, [r2, #88]	@ 0x58
 8002386:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	4a24      	ldr	r2, [pc, #144]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239e:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <HAL_DAC_MspInit+0xd0>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023aa:	2330      	movs	r3, #48	@ 0x30
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f003 f86e 	bl	80054a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002430 <HAL_DAC_MspInit+0xd8>)
 80023c8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023cc:	2205      	movs	r2, #5
 80023ce:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d0:	4b16      	ldr	r3, [pc, #88]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023d2:	2210      	movs	r2, #16
 80023d4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023de:	2280      	movs	r2, #128	@ 0x80
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023e2:	4b12      	ldr	r3, [pc, #72]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023e8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023f0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023f4:	2220      	movs	r2, #32
 80023f6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80023fe:	480b      	ldr	r0, [pc, #44]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 8002400:	f002 fe56 	bl	80050b0 <HAL_DMA_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800240a:	f7ff fedb 	bl	80021c4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a06      	ldr	r2, [pc, #24]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	4a05      	ldr	r2, [pc, #20]	@ (800242c <HAL_DAC_MspInit+0xd4>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40007400 	.word	0x40007400
 8002428:	40021000 	.word	0x40021000
 800242c:	2000013c 	.word	0x2000013c
 8002430:	40020044 	.word	0x40020044

08002434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <HAL_TIM_Base_MspInit+0x5c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10c      	bne.n	8002460 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002446:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 800244c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002450:	6613      	str	r3, [r2, #96]	@ 0x60
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800245e:	e010      	b.n	8002482 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0c      	ldr	r2, [pc, #48]	@ (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10b      	bne.n	8002482 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6593      	str	r3, [r2, #88]	@ 0x58
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_TIM_Base_MspInit+0x60>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40012c00 	.word	0x40012c00
 8002494:	40021000 	.word	0x40021000
 8002498:	40001000 	.word	0x40001000

0800249c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ac      	sub	sp, #176	@ 0xb0
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2288      	movs	r2, #136	@ 0x88
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f007 f9cf 	bl	8009860 <memset>
  if(huart->Instance==USART2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	@ (800254c <HAL_UART_MspInit+0xb0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d13b      	bne.n	8002544 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024cc:	2302      	movs	r3, #2
 80024ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 ffef 	bl	80064bc <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024e4:	f7ff fe6e 	bl	80021c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	4a18      	ldr	r2, [pc, #96]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 80024ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f4:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002504:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250c:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_UART_MspInit+0xb4>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002518:	230c      	movs	r3, #12
 800251a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002530:	2307      	movs	r3, #7
 8002532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002540:	f002 ffae 	bl	80054a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002544:	bf00      	nop
 8002546:	37b0      	adds	r7, #176	@ 0xb0
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40004400 	.word	0x40004400
 8002550:	40021000 	.word	0x40021000

08002554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <NMI_Handler+0x4>

0800255c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <MemManage_Handler+0x4>

0800256c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <UsageFault_Handler+0x4>

0800257c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025aa:	f000 f8ef 	bl	800278c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ba:	f002 fe91 	bl	80052e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200000e0 	.word	0x200000e0

080025c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80025cc:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <DMA1_Channel4_IRQHandler+0x10>)
 80025ce:	f002 fe87 	bl	80052e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000013c 	.word	0x2000013c

080025dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <ADC1_2_IRQHandler+0x10>)
 80025e2:	f000 ff3b 	bl	800345c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000007c 	.word	0x2000007c

080025f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f8:	4a14      	ldr	r2, [pc, #80]	@ (800264c <_sbrk+0x5c>)
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <_sbrk+0x60>)
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <_sbrk+0x64>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <_sbrk+0x64>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <_sbrk+0x68>)
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d207      	bcs.n	8002630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002620:	f007 f926 	bl	8009870 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	220c      	movs	r2, #12
 8002628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
 800262e:	e009      	b.n	8002644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <_sbrk+0x64>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002636:	4b07      	ldr	r3, [pc, #28]	@ (8002654 <_sbrk+0x64>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	4a05      	ldr	r2, [pc, #20]	@ (8002654 <_sbrk+0x64>)
 8002640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20018000 	.word	0x20018000
 8002650:	00000400 	.word	0x00000400
 8002654:	20007494 	.word	0x20007494
 8002658:	200075e8 	.word	0x200075e8

0800265c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002660:	4b06      	ldr	r3, [pc, #24]	@ (800267c <SystemInit+0x20>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <SystemInit+0x20>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002684:	f7ff ffea 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480c      	ldr	r0, [pc, #48]	@ (80026bc <LoopForever+0x6>)
  ldr r1, =_edata
 800268a:	490d      	ldr	r1, [pc, #52]	@ (80026c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <LoopForever+0xe>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026a0:	4c0a      	ldr	r4, [pc, #40]	@ (80026cc <LoopForever+0x16>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ae:	f007 f8e5 	bl	800987c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026b2:	f7ff f975 	bl	80019a0 <main>

080026b6 <LoopForever>:

LoopForever:
    b LoopForever
 80026b6:	e7fe      	b.n	80026b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80026c4:	0801ec70 	.word	0x0801ec70
  ldr r2, =_sbss
 80026c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80026cc:	200075e4 	.word	0x200075e4

080026d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026d0:	e7fe      	b.n	80026d0 <ADC3_IRQHandler>
	...

080026d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <HAL_Init+0x3c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <HAL_Init+0x3c>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f002 f970 	bl	80049d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026f0:	2000      	movs	r0, #0
 80026f2:	f000 f80f 	bl	8002714 <HAL_InitTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	e001      	b.n	8002706 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002702:	f7ff fd65 	bl	80021d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002706:	79fb      	ldrb	r3, [r7, #7]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40022000 	.word	0x40022000

08002714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002720:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <HAL_InitTick+0x6c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d023      	beq.n	8002770 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002728:	4b16      	ldr	r3, [pc, #88]	@ (8002784 <HAL_InitTick+0x70>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <HAL_InitTick+0x6c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f002 f97b 	bl	8004a3a <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d809      	bhi.n	8002764 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f002 f945 	bl	80049e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800275c:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <HAL_InitTick+0x74>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e007      	b.n	8002774 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e004      	b.n	8002774 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e001      	b.n	8002774 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000000c 	.word	0x2000000c
 8002784:	20000004 	.word	0x20000004
 8002788:	20000008 	.word	0x20000008

0800278c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_IncTick+0x20>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_IncTick+0x24>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4413      	add	r3, r2
 800279c:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <HAL_IncTick+0x24>)
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c
 80027b0:	20007498 	.word	0x20007498

080027b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return uwTick;
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <HAL_GetTick+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20007498 	.word	0x20007498

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff ffee 	bl	80027b4 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_Delay+0x44>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffde 	bl	80027b4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2000000c 	.word	0x2000000c

08002814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3360      	adds	r3, #96	@ 0x60
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <LL_ADC_SetOffset+0x44>)
 800289e:	4013      	ands	r3, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	03fff000 	.word	0x03fff000

080028c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3360      	adds	r3, #96	@ 0x60
 80028d2:	461a      	mov	r2, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3360      	adds	r3, #96	@ 0x60
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3330      	adds	r3, #48	@ 0x30
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	211f      	movs	r1, #31
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	401a      	ands	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 011f 	and.w	r1, r3, #31
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	431a      	orrs	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3314      	adds	r3, #20
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	0e5b      	lsrs	r3, r3, #25
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	0d1b      	lsrs	r3, r3, #20
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2107      	movs	r1, #7
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0d1b      	lsrs	r3, r3, #20
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0318 	and.w	r3, r3, #24
 8002a42:	4908      	ldr	r1, [pc, #32]	@ (8002a64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a44:	40d9      	lsrs	r1, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	400b      	ands	r3, r1
 8002a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	0007ffff 	.word	0x0007ffff

08002a68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 031f 	and.w	r3, r3, #31
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6093      	str	r3, [r2, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b28:	d101      	bne.n	8002b2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b78:	f043 0202 	orr.w	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <LL_ADC_IsEnabled+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_ADC_IsEnabled+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d101      	bne.n	8002bca <LL_ADC_IsDisableOngoing+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_ADC_IsDisableOngoing+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c14:	f043 0210 	orr.w	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d101      	bne.n	8002c40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d101      	bne.n	8002c8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b089      	sub	sp, #36	@ 0x24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e130      	b.n	8002f18 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff faa7 	bl	8002218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fef1 	bl	8002ac4 <LL_ADC_IsDeepPowerDownEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fed7 	bl	8002aa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff0c 	bl	8002b14 <LL_ADC_IsInternalRegulatorEnabled>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fef0 	bl	8002aec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d0c:	4b84      	ldr	r3, [pc, #528]	@ (8002f20 <HAL_ADC_Init+0x284>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	4a84      	ldr	r2, [pc, #528]	@ (8002f24 <HAL_ADC_Init+0x288>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d20:	e002      	b.n	8002d28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f9      	bne.n	8002d22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff feee 	bl	8002b14 <LL_ADC_IsInternalRegulatorEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff62 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8002d64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80c9 	bne.w	8002f06 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80c5 	bne.w	8002f06 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fefb 	bl	8002b8c <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d115      	bne.n	8002dc8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d9c:	4862      	ldr	r0, [pc, #392]	@ (8002f28 <HAL_ADC_Init+0x28c>)
 8002d9e:	f7ff fef5 	bl	8002b8c <LL_ADC_IsEnabled>
 8002da2:	4604      	mov	r4, r0
 8002da4:	4861      	ldr	r0, [pc, #388]	@ (8002f2c <HAL_ADC_Init+0x290>)
 8002da6:	f7ff fef1 	bl	8002b8c <LL_ADC_IsEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	431c      	orrs	r4, r3
 8002dae:	4860      	ldr	r0, [pc, #384]	@ (8002f30 <HAL_ADC_Init+0x294>)
 8002db0:	f7ff feec 	bl	8002b8c <LL_ADC_IsEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4323      	orrs	r3, r4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	485c      	ldr	r0, [pc, #368]	@ (8002f34 <HAL_ADC_Init+0x298>)
 8002dc4:	f7ff fd26 	bl	8002814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7e5b      	ldrb	r3, [r3, #25]
 8002dcc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002dd8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dde:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d106      	bne.n	8002e04 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	045b      	lsls	r3, r3, #17
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b44      	ldr	r3, [pc, #272]	@ (8002f38 <HAL_ADC_Init+0x29c>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	69b9      	ldr	r1, [r7, #24]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff1c 	bl	8002c76 <LL_ADC_INJ_IsConversionOngoing>
 8002e3e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d13d      	bne.n	8002ec2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13a      	bne.n	8002ec2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e50:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e58:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e68:	f023 0302 	bic.w	r3, r3, #2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d118      	bne.n	8002eb2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	611a      	str	r2, [r3, #16]
 8002eb0:	e007      	b.n	8002ec2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f023 010f 	bic.w	r1, r3, #15
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee2:	e007      	b.n	8002ef4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 020f 	bic.w	r2, r2, #15
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	f043 0201 	orr.w	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f04:	e007      	b.n	8002f16 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3724      	adds	r7, #36	@ 0x24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	20000004 	.word	0x20000004
 8002f24:	053e2d63 	.word	0x053e2d63
 8002f28:	50040000 	.word	0x50040000
 8002f2c:	50040100 	.word	0x50040100
 8002f30:	50040200 	.word	0x50040200
 8002f34:	50040300 	.word	0x50040300
 8002f38:	fff0c007 	.word	0xfff0c007

08002f3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f44:	4857      	ldr	r0, [pc, #348]	@ (80030a4 <HAL_ADC_Start+0x168>)
 8002f46:	f7ff fd8f 	bl	8002a68 <LL_ADC_GetMultimode>
 8002f4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fe69 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 809c 	bne.w	8003096 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_Start+0x30>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e097      	b.n	800309c <HAL_ADC_Start+0x160>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f001 f94d 	bl	8004214 <ADC_Enable>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 8083 	bne.w	800308c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a42      	ldr	r2, [pc, #264]	@ (80030a8 <HAL_ADC_Start+0x16c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d002      	beq.n	8002faa <HAL_ADC_Start+0x6e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_Start+0x70>
 8002faa:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_ADC_Start+0x170>)
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d002      	beq.n	8002fba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	f023 0206 	bic.w	r2, r3, #6
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe0:	e002      	b.n	8002fe8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	221c      	movs	r2, #28
 8002fee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80030a8 <HAL_ADC_Start+0x16c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d002      	beq.n	8003008 <HAL_ADC_Start+0xcc>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	e000      	b.n	800300a <HAL_ADC_Start+0xce>
 8003008:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_ADC_Start+0x170>)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4293      	cmp	r3, r2
 8003010:	d008      	beq.n	8003024 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d002      	beq.n	8003024 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d114      	bne.n	800304e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003036:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800303a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fdc6 	bl	8002bd8 <LL_ADC_REG_StartConversion>
 800304c:	e025      	b.n	800309a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <HAL_ADC_Start+0x16c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d002      	beq.n	800306a <HAL_ADC_Start+0x12e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	e000      	b.n	800306c <HAL_ADC_Start+0x130>
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <HAL_ADC_Start+0x170>)
 800306c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00f      	beq.n	800309a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003082:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
 800308a:	e006      	b.n	800309a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003094:	e001      	b.n	800309a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003096:	2302      	movs	r3, #2
 8003098:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	50040300 	.word	0x50040300
 80030a8:	50040100 	.word	0x50040100
 80030ac:	50040000 	.word	0x50040000

080030b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Stop+0x16>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e023      	b.n	800310e <HAL_ADC_Stop+0x5e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80030ce:	2103      	movs	r1, #3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 ffe3 	bl	800409c <ADC_ConversionStop>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 f91d 	bl	8004320 <ADC_Disable>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003122:	4866      	ldr	r0, [pc, #408]	@ (80032bc <HAL_ADC_PollForConversion+0x1a4>)
 8003124:	f7ff fca0 	bl	8002a68 <LL_ADC_GetMultimode>
 8003128:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d102      	bne.n	8003138 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003132:	2308      	movs	r3, #8
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e02a      	b.n	800318e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d002      	beq.n	800314a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b09      	cmp	r3, #9
 8003148:	d111      	bne.n	800316e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0a4      	b.n	80032b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003168:	2304      	movs	r3, #4
 800316a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800316c:	e00f      	b.n	800318e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800316e:	4853      	ldr	r0, [pc, #332]	@ (80032bc <HAL_ADC_PollForConversion+0x1a4>)
 8003170:	f7ff fc88 	bl	8002a84 <LL_ADC_GetMultiDMATransfer>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e093      	b.n	80032b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800318a:	2304      	movs	r3, #4
 800318c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800318e:	f7ff fb11 	bl	80027b4 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003194:	e021      	b.n	80031da <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d01d      	beq.n	80031da <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800319e:	f7ff fb09 	bl	80027b4 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <HAL_ADC_PollForConversion+0x9c>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d112      	bne.n	80031da <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e06b      	b.n	80032b2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0d6      	beq.n	8003196 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fb94 	bl	8002926 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01c      	beq.n	800323e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7e5b      	ldrb	r3, [r3, #25]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d118      	bne.n	800323e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d111      	bne.n	800323e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1f      	ldr	r2, [pc, #124]	@ (80032c0 <HAL_ADC_PollForConversion+0x1a8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d002      	beq.n	800324e <HAL_ADC_PollForConversion+0x136>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	e000      	b.n	8003250 <HAL_ADC_PollForConversion+0x138>
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_ADC_PollForConversion+0x1ac>)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	4293      	cmp	r3, r2
 8003256:	d008      	beq.n	800326a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d002      	beq.n	800326a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b09      	cmp	r3, #9
 8003268:	d104      	bne.n	8003274 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	e00c      	b.n	800328e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <HAL_ADC_PollForConversion+0x1a8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d002      	beq.n	8003284 <HAL_ADC_PollForConversion+0x16c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e000      	b.n	8003286 <HAL_ADC_PollForConversion+0x16e>
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_ADC_PollForConversion+0x1ac>)
 8003286:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2208      	movs	r2, #8
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e008      	b.n	80032b0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	220c      	movs	r2, #12
 80032ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	50040300 	.word	0x50040300
 80032c0:	50040100 	.word	0x50040100
 80032c4:	50040000 	.word	0x50040000

080032c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d4:	4853      	ldr	r0, [pc, #332]	@ (8003424 <HAL_ADC_Start_DMA+0x15c>)
 80032d6:	f7ff fbc7 	bl	8002a68 <LL_ADC_GetMultimode>
 80032da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fca1 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8093 	bne.w	8003414 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_ADC_Start_DMA+0x34>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e08e      	b.n	800341a <HAL_ADC_Start_DMA+0x152>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a47      	ldr	r2, [pc, #284]	@ (8003428 <HAL_ADC_Start_DMA+0x160>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d008      	beq.n	8003320 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d002      	beq.n	8003320 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d172      	bne.n	8003406 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 ff77 	bl	8004214 <ADC_Enable>
 8003326:	4603      	mov	r3, r0
 8003328:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d165      	bne.n	80033fc <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003334:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a38      	ldr	r2, [pc, #224]	@ (800342c <HAL_ADC_Start_DMA+0x164>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d002      	beq.n	8003354 <HAL_ADC_Start_DMA+0x8c>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e000      	b.n	8003356 <HAL_ADC_Start_DMA+0x8e>
 8003354:	4b36      	ldr	r3, [pc, #216]	@ (8003430 <HAL_ADC_Start_DMA+0x168>)
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	4293      	cmp	r3, r2
 800335c:	d002      	beq.n	8003364 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f023 0206 	bic.w	r2, r3, #6
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	659a      	str	r2, [r3, #88]	@ 0x58
 8003388:	e002      	b.n	8003390 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	4a27      	ldr	r2, [pc, #156]	@ (8003434 <HAL_ADC_Start_DMA+0x16c>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	4a26      	ldr	r2, [pc, #152]	@ (8003438 <HAL_ADC_Start_DMA+0x170>)
 800339e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a4:	4a25      	ldr	r2, [pc, #148]	@ (800343c <HAL_ADC_Start_DMA+0x174>)
 80033a6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	221c      	movs	r2, #28
 80033ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0210 	orr.w	r2, r2, #16
 80033c6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3340      	adds	r3, #64	@ 0x40
 80033e2:	4619      	mov	r1, r3
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f001 ff1a 	bl	8005220 <HAL_DMA_Start_IT>
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fbef 	bl	8002bd8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80033fa:	e00d      	b.n	8003418 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003404:	e008      	b.n	8003418 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003412:	e001      	b.n	8003418 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	50040300 	.word	0x50040300
 8003428:	50040200 	.word	0x50040200
 800342c:	50040100 	.word	0x50040100
 8003430:	50040000 	.word	0x50040000
 8003434:	080043df 	.word	0x080043df
 8003438:	080044b7 	.word	0x080044b7
 800343c:	080044d3 	.word	0x080044d3

08003440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003478:	4882      	ldr	r0, [pc, #520]	@ (8003684 <HAL_ADC_IRQHandler+0x228>)
 800347a:	f7ff faf5 	bl	8002a68 <LL_ADC_GetMultimode>
 800347e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <HAL_ADC_IRQHandler+0x5e>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f001 f905 	bl	80046bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2202      	movs	r2, #2
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_IRQHandler+0x72>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8083 	beq.w	80035e0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d07d      	beq.n	80035e0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fa10 	bl	8002926 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d062      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5d      	ldr	r2, [pc, #372]	@ (8003688 <HAL_ADC_IRQHandler+0x22c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d002      	beq.n	800351c <HAL_ADC_IRQHandler+0xc0>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	e000      	b.n	800351e <HAL_ADC_IRQHandler+0xc2>
 800351c:	4b5b      	ldr	r3, [pc, #364]	@ (800368c <HAL_ADC_IRQHandler+0x230>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4293      	cmp	r3, r2
 8003524:	d008      	beq.n	8003538 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b05      	cmp	r3, #5
 8003530:	d002      	beq.n	8003538 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b09      	cmp	r3, #9
 8003536:	d104      	bne.n	8003542 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	e00c      	b.n	800355c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a50      	ldr	r2, [pc, #320]	@ (8003688 <HAL_ADC_IRQHandler+0x22c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d002      	beq.n	8003552 <HAL_ADC_IRQHandler+0xf6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	e000      	b.n	8003554 <HAL_ADC_IRQHandler+0xf8>
 8003552:	4b4e      	ldr	r3, [pc, #312]	@ (800368c <HAL_ADC_IRQHandler+0x230>)
 8003554:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d135      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d12e      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fb55 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11a      	bne.n	80035ba <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 020c 	bic.w	r2, r2, #12
 8003592:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003598:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d112      	bne.n	80035d2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80035b8:	e00b      	b.n	80035d2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe f898 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	220c      	movs	r2, #12
 80035de:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_IRQHandler+0x198>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809f 	beq.w	800373e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8099 	beq.w	800373e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff f9bb 	bl	80029a4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800362e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f976 	bl	8002926 <LL_ADC_REG_IsTriggerSourceSWStart>
 800363a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a11      	ldr	r2, [pc, #68]	@ (8003688 <HAL_ADC_IRQHandler+0x22c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d002      	beq.n	800364c <HAL_ADC_IRQHandler+0x1f0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e000      	b.n	800364e <HAL_ADC_IRQHandler+0x1f2>
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <HAL_ADC_IRQHandler+0x230>)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	4293      	cmp	r3, r2
 8003654:	d008      	beq.n	8003668 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d002      	beq.n	8003668 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b07      	cmp	r3, #7
 8003666:	d104      	bne.n	8003672 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	e013      	b.n	800369a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a04      	ldr	r2, [pc, #16]	@ (8003688 <HAL_ADC_IRQHandler+0x22c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d009      	beq.n	8003690 <HAL_ADC_IRQHandler+0x234>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	e007      	b.n	8003692 <HAL_ADC_IRQHandler+0x236>
 8003682:	bf00      	nop
 8003684:	50040300 	.word	0x50040300
 8003688:	50040100 	.word	0x50040100
 800368c:	50040000 	.word	0x50040000
 8003690:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <HAL_ADC_IRQHandler+0x42c>)
 8003692:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d047      	beq.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <HAL_ADC_IRQHandler+0x25e>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03f      	beq.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13a      	bne.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	d133      	bne.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d12e      	bne.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff facd 	bl	8002c76 <LL_ADC_INJ_IsConversionOngoing>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11a      	bne.n	8003718 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80036f0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d112      	bne.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
 8003716:	e00b      	b.n	8003730 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 ff9b 	bl	800466c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2260      	movs	r2, #96	@ 0x60
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <HAL_ADC_IRQHandler+0x310>
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003756:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f896 	bl	8003890 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_ADC_IRQHandler+0x340>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00d      	beq.n	800379c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 ff81 	bl	8004694 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <HAL_ADC_IRQHandler+0x370>
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 ff73 	bl	80046a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d036      	beq.n	8003844 <HAL_ADC_IRQHandler+0x3e8>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d031      	beq.n	8003844 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80037e8:	2301      	movs	r3, #1
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	e014      	b.n	8003818 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037f4:	4825      	ldr	r0, [pc, #148]	@ (800388c <HAL_ADC_IRQHandler+0x430>)
 80037f6:	f7ff f945 	bl	8002a84 <LL_ADC_GetMultiDMATransfer>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003800:	2301      	movs	r3, #1
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
 8003804:	e008      	b.n	8003818 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10e      	bne.n	800383c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f834 	bl	80038a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2210      	movs	r2, #16
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <HAL_ADC_IRQHandler+0x424>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	f043 0208 	orr.w	r2, r3, #8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003878:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 ff00 	bl	8004680 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003880:	bf00      	nop
 8003882:	3728      	adds	r7, #40	@ 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	50040000 	.word	0x50040000
 800388c:	50040300 	.word	0x50040300

08003890 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0b6      	sub	sp, #216	@ 0xd8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x22>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e3c9      	b.n	800406e <HAL_ADC_ConfigChannel+0x7b6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f99e 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 83aa 	bne.w	8004048 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d824      	bhi.n	800394e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	3b02      	subs	r3, #2
 800390a:	2b03      	cmp	r3, #3
 800390c:	d81b      	bhi.n	8003946 <HAL_ADC_ConfigChannel+0x8e>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_ADC_ConfigChannel+0x5c>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003925 	.word	0x08003925
 8003918:	0800392d 	.word	0x0800392d
 800391c:	08003935 	.word	0x08003935
 8003920:	0800393d 	.word	0x0800393d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003924:	230c      	movs	r3, #12
 8003926:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800392a:	e010      	b.n	800394e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800392c:	2312      	movs	r3, #18
 800392e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003932:	e00c      	b.n	800394e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003934:	2318      	movs	r3, #24
 8003936:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800393a:	e008      	b.n	800394e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800393c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003944:	e003      	b.n	800394e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003946:	2306      	movs	r3, #6
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800394c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800395c:	f7fe fff6 	bl	800294c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f95f 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 800396a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff f97f 	bl	8002c76 <LL_ADC_INJ_IsConversionOngoing>
 8003978:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800397c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 81a4 	bne.w	8003cce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800398a:	2b00      	cmp	r3, #0
 800398c:	f040 819f 	bne.w	8003cce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	461a      	mov	r2, r3
 800399e:	f7ff f814 	bl	80029ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	08db      	lsrs	r3, r3, #3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00a      	beq.n	80039da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039d4:	f7fe ff52 	bl	800287c <LL_ADC_SetOffset>
 80039d8:	e179      	b.n	8003cce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fe ff6f 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x14e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe ff64 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 80039fc:	4603      	mov	r3, r0
 80039fe:	0e9b      	lsrs	r3, r3, #26
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	e01e      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x18c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe ff59 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	e004      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003a38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x1a4>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	e018      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x1d6>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003a70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e004      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d106      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff28 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe ff0c 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x214>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe ff01 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	0e9b      	lsrs	r3, r3, #26
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	e01e      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x252>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fef6 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003afa:	2320      	movs	r3, #32
 8003afc:	e004      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x26a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0e9b      	lsrs	r3, r3, #26
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	e018      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x29c>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e004      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b4e:	fab3 f383 	clz	r3, r3
 8003b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d106      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2101      	movs	r1, #1
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fec5 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fea9 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x2da>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2102      	movs	r1, #2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fe9e 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	0e9b      	lsrs	r3, r3, #26
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	e01e      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x318>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fe93 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ba8:	fa93 f3a3 	rbit	r3, r3
 8003bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	e004      	b.n	8003bce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bc8:	fab3 f383 	clz	r3, r3
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x330>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	e014      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x35a>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e004      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fe66 	bl	80028f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2103      	movs	r1, #3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fe4a 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x398>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2103      	movs	r1, #3
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fe3f 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003c46:	4603      	mov	r3, r0
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	e017      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x3c8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2103      	movs	r1, #3
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fe34 	bl	80028c4 <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c6a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e003      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d105      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x3e0>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	0e9b      	lsrs	r3, r3, #26
 8003c92:	f003 031f 	and.w	r3, r3, #31
 8003c96:	e011      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x404>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003caa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	e003      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d106      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2103      	movs	r1, #3
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fe11 	bl	80028f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe ff5a 	bl	8002b8c <LL_ADC_IsEnabled>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 8140 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6819      	ldr	r1, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f7fe fe97 	bl	8002a20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a8f      	ldr	r2, [pc, #572]	@ (8003f34 <HAL_ADC_ConfigChannel+0x67c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	f040 8131 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x46e>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	3301      	adds	r3, #1
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2b09      	cmp	r3, #9
 8003d1c:	bf94      	ite	ls
 8003d1e:	2301      	movls	r3, #1
 8003d20:	2300      	movhi	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	e019      	b.n	8003d5a <HAL_ADC_ConfigChannel+0x4a2>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d2e:	fa93 f3a3 	rbit	r3, r3
 8003d32:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e003      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	bf94      	ite	ls
 8003d54:	2301      	movls	r3, #1
 8003d56:	2300      	movhi	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d079      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x4c2>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0e9b      	lsrs	r3, r3, #26
 8003d70:	3301      	adds	r3, #1
 8003d72:	069b      	lsls	r3, r3, #26
 8003d74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d78:	e015      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x4ee>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d8a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003d92:	2320      	movs	r3, #32
 8003d94:	e003      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	069b      	lsls	r3, r3, #26
 8003da2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x50e>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0e9b      	lsrs	r3, r3, #26
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	e017      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x53e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dce:	fa93 f3a3 	rbit	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e003      	b.n	8003dea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f303 	lsl.w	r3, r1, r3
 8003df6:	ea42 0103 	orr.w	r1, r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x564>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0e9b      	lsrs	r3, r3, #26
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	f003 021f 	and.w	r2, r3, #31
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	051b      	lsls	r3, r3, #20
 8003e1a:	e018      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x596>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e003      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	f003 021f 	and.w	r2, r3, #31
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	e081      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d107      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x5b6>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0e9b      	lsrs	r3, r3, #26
 8003e64:	3301      	adds	r3, #1
 8003e66:	069b      	lsls	r3, r3, #26
 8003e68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e6c:	e015      	b.n	8003e9a <HAL_ADC_ConfigChannel+0x5e2>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e003      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3301      	adds	r3, #1
 8003e94:	069b      	lsls	r3, r3, #26
 8003e96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x602>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0e9b      	lsrs	r3, r3, #26
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	e017      	b.n	8003eea <HAL_ADC_ConfigChannel+0x632>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	fa93 f3a3 	rbit	r3, r3
 8003ec6:	61bb      	str	r3, [r7, #24]
  return result;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003ed2:	2320      	movs	r3, #32
 8003ed4:	e003      	b.n	8003ede <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	ea42 0103 	orr.w	r1, r2, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x65e>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	0e9b      	lsrs	r3, r3, #26
 8003f00:	3301      	adds	r3, #1
 8003f02:	f003 021f 	and.w	r2, r3, #31
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b1e      	subs	r3, #30
 8003f0e:	051b      	lsls	r3, r3, #20
 8003f10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f14:	e01e      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x69c>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	60fb      	str	r3, [r7, #12]
  return result;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e006      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x688>
 8003f32:	bf00      	nop
 8003f34:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	3301      	adds	r3, #1
 8003f42:	f003 021f 	and.w	r2, r3, #31
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3b1e      	subs	r3, #30
 8003f4e:	051b      	lsls	r3, r3, #20
 8003f50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f7fe fd35 	bl	80029ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b44      	ldr	r3, [pc, #272]	@ (8004078 <HAL_ADC_ConfigChannel+0x7c0>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d07a      	beq.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f6c:	4843      	ldr	r0, [pc, #268]	@ (800407c <HAL_ADC_ConfigChannel+0x7c4>)
 8003f6e:	f7fe fc77 	bl	8002860 <LL_ADC_GetCommonPathInternalCh>
 8003f72:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a41      	ldr	r2, [pc, #260]	@ (8004080 <HAL_ADC_ConfigChannel+0x7c8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d12c      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d126      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a3c      	ldr	r2, [pc, #240]	@ (8004084 <HAL_ADC_ConfigChannel+0x7cc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_ADC_ConfigChannel+0x6e8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004088 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d15d      	bne.n	800405c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4834      	ldr	r0, [pc, #208]	@ (800407c <HAL_ADC_ConfigChannel+0x7c4>)
 8003fac:	f7fe fc45 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	099b      	lsrs	r3, r3, #6
 8003fb6:	4a36      	ldr	r2, [pc, #216]	@ (8004090 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fca:	e002      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f9      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd8:	e040      	b.n	800405c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d118      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d112      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	@ (8004084 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x74c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a22      	ldr	r2, [pc, #136]	@ (8004088 <HAL_ADC_ConfigChannel+0x7d0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d12d      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004008:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400c:	4619      	mov	r1, r3
 800400e:	481b      	ldr	r0, [pc, #108]	@ (800407c <HAL_ADC_ConfigChannel+0x7c4>)
 8004010:	f7fe fc13 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004014:	e024      	b.n	8004060 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1f      	ldr	r2, [pc, #124]	@ (8004098 <HAL_ADC_ConfigChannel+0x7e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d120      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004020:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d11a      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_ADC_ConfigChannel+0x7cc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d115      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800403a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800403e:	4619      	mov	r1, r3
 8004040:	480e      	ldr	r0, [pc, #56]	@ (800407c <HAL_ADC_ConfigChannel+0x7c4>)
 8004042:	f7fe fbfa 	bl	800283a <LL_ADC_SetCommonPathInternalCh>
 8004046:	e00c      	b.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800405a:	e002      	b.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004060:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800406a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800406e:	4618      	mov	r0, r3
 8004070:	37d8      	adds	r7, #216	@ 0xd8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	80080000 	.word	0x80080000
 800407c:	50040300 	.word	0x50040300
 8004080:	c7520000 	.word	0xc7520000
 8004084:	50040000 	.word	0x50040000
 8004088:	50040200 	.word	0x50040200
 800408c:	20000004 	.word	0x20000004
 8004090:	053e2d63 	.word	0x053e2d63
 8004094:	cb840000 	.word	0xcb840000
 8004098:	80000001 	.word	0x80000001

0800409c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fdb8 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 80040b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fdd9 	bl	8002c76 <LL_ADC_INJ_IsConversionOngoing>
 80040c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8098 	beq.w	8004204 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d02a      	beq.n	8004138 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7e5b      	ldrb	r3, [r3, #25]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d126      	bne.n	8004138 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7e1b      	ldrb	r3, [r3, #24]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d122      	bne.n	8004138 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040f6:	e014      	b.n	8004122 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4a45      	ldr	r2, [pc, #276]	@ (8004210 <ADC_ConversionStop+0x174>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90d      	bls.n	800411c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004104:	f043 0210 	orr.w	r2, r3, #16
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e074      	b.n	8004206 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	d1e3      	bne.n	80040f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2240      	movs	r2, #64	@ 0x40
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d014      	beq.n	8004168 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fd70 	bl	8002c28 <LL_ADC_REG_IsConversionOngoing>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fd2d 	bl	8002bb2 <LL_ADC_IsDisableOngoing>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fd4c 	bl	8002c00 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d014      	beq.n	8004198 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fd7f 	bl	8002c76 <LL_ADC_INJ_IsConversionOngoing>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fd15 	bl	8002bb2 <LL_ADC_IsDisableOngoing>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d104      	bne.n	8004198 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fd5b 	bl	8002c4e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d005      	beq.n	80041aa <ADC_ConversionStop+0x10e>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d105      	bne.n	80041b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80041a4:	230c      	movs	r3, #12
 80041a6:	617b      	str	r3, [r7, #20]
        break;
 80041a8:	e005      	b.n	80041b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80041aa:	2308      	movs	r3, #8
 80041ac:	617b      	str	r3, [r7, #20]
        break;
 80041ae:	e002      	b.n	80041b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80041b0:	2304      	movs	r3, #4
 80041b2:	617b      	str	r3, [r7, #20]
        break;
 80041b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80041b6:	f7fe fafd 	bl	80027b4 <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041bc:	e01b      	b.n	80041f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041be:	f7fe faf9 	bl	80027b4 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d914      	bls.n	80041f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041de:	f043 0210 	orr.w	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f043 0201 	orr.w	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1dc      	bne.n	80041be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3720      	adds	r7, #32
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	a33fffff 	.word	0xa33fffff

08004214 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fcb1 	bl	8002b8c <LL_ADC_IsEnabled>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d169      	bne.n	8004304 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <ADC_Enable+0xfc>)
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	f043 0210 	orr.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e055      	b.n	8004306 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fc6c 	bl	8002b3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004264:	482b      	ldr	r0, [pc, #172]	@ (8004314 <ADC_Enable+0x100>)
 8004266:	f7fe fafb 	bl	8002860 <LL_ADC_GetCommonPathInternalCh>
 800426a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800426c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004274:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <ADC_Enable+0x104>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <ADC_Enable+0x108>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800428e:	e002      	b.n	8004296 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3b01      	subs	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f9      	bne.n	8004290 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800429c:	f7fe fa8a 	bl	80027b4 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042a2:	e028      	b.n	80042f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe fc6f 	bl	8002b8c <LL_ADC_IsEnabled>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe fc3f 	bl	8002b3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042be:	f7fe fa79 	bl	80027b4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d914      	bls.n	80042f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d00d      	beq.n	80042f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e007      	b.n	8004306 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d1cf      	bne.n	80042a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	8000003f 	.word	0x8000003f
 8004314:	50040300 	.word	0x50040300
 8004318:	20000004 	.word	0x20000004
 800431c:	053e2d63 	.word	0x053e2d63

08004320 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fc40 	bl	8002bb2 <LL_ADC_IsDisableOngoing>
 8004332:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe fc27 	bl	8002b8c <LL_ADC_IsEnabled>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d047      	beq.n	80043d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d144      	bne.n	80043d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030d 	and.w	r3, r3, #13
 8004354:	2b01      	cmp	r3, #1
 8004356:	d10c      	bne.n	8004372 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fc01 	bl	8002b64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2203      	movs	r2, #3
 8004368:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800436a:	f7fe fa23 	bl	80027b4 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004370:	e029      	b.n	80043c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e023      	b.n	80043d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800438e:	f7fe fa11 	bl	80027b4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d914      	bls.n	80043c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	f043 0210 	orr.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ba:	f043 0201 	orr.w	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e007      	b.n	80043d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1dc      	bne.n	800438e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d14b      	bne.n	8004490 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d021      	beq.n	8004456 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fa85 	bl	8002926 <LL_ADC_REG_IsTriggerSourceSWStart>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d032      	beq.n	8004488 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d12b      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d11f      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	f043 0201 	orr.w	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
 8004454:	e018      	b.n	8004488 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d105      	bne.n	8004488 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7fd f93d 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800448e:	e00e      	b.n	80044ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fa01 	bl	80038a4 <HAL_ADC_ErrorCallback>
}
 80044a2:	e004      	b.n	80044ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7fd f8ef 	bl	80016a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	f043 0204 	orr.w	r2, r3, #4
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff f9d3 	bl	80038a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <LL_ADC_IsEnabled>:
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <LL_ADC_IsEnabled+0x18>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <LL_ADC_IsEnabled+0x1a>
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_StartCalibration>:
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800453e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004548:	4313      	orrs	r3, r2
 800454a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_ADC_IsCalibrationOnGoing>:
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800456e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004572:	d101      	bne.n	8004578 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <LL_ADC_REG_IsConversionOngoing>:
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d101      	bne.n	800459e <LL_ADC_REG_IsConversionOngoing+0x18>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e04d      	b.n	8004664 <HAL_ADCEx_Calibration_Start+0xb8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fea5 	bl	8004320 <ADC_Disable>
 80045d6:	4603      	mov	r3, r0
 80045d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d136      	bne.n	800464e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045e8:	f023 0302 	bic.w	r3, r3, #2
 80045ec:	f043 0202 	orr.w	r2, r3, #2
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff96 	bl	800452c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004600:	e014      	b.n	800462c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800460e:	d30d      	bcc.n	800462c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004614:	f023 0312 	bic.w	r3, r3, #18
 8004618:	f043 0210 	orr.w	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01b      	b.n	8004664 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff94 	bl	800455e <LL_ADC_IsCalibrationOnGoing>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e2      	bne.n	8004602 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	f043 0201 	orr.w	r2, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	655a      	str	r2, [r3, #84]	@ 0x54
 800464c:	e005      	b.n	800465a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80046d0:	b590      	push	{r4, r7, lr}
 80046d2:	b09f      	sub	sp, #124	@ 0x7c
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e093      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80046f6:	2300      	movs	r3, #0
 80046f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80046fa:	2300      	movs	r3, #0
 80046fc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a47      	ldr	r2, [pc, #284]	@ (8004820 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d102      	bne.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004708:	4b46      	ldr	r3, [pc, #280]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	e001      	b.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e072      	b.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff27 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 8004738:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff21 	bl	8004586 <LL_ADC_REG_IsConversionOngoing>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d154      	bne.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800474a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800474c:	2b00      	cmp	r3, #0
 800474e:	d151      	bne.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004750:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004752:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02c      	beq.n	80047b6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800475c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800476e:	035b      	lsls	r3, r3, #13
 8004770:	430b      	orrs	r3, r1
 8004772:	431a      	orrs	r2, r3
 8004774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004776:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004778:	4829      	ldr	r0, [pc, #164]	@ (8004820 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800477a:	f7ff fec4 	bl	8004506 <LL_ADC_IsEnabled>
 800477e:	4604      	mov	r4, r0
 8004780:	4828      	ldr	r0, [pc, #160]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004782:	f7ff fec0 	bl	8004506 <LL_ADC_IsEnabled>
 8004786:	4603      	mov	r3, r0
 8004788:	431c      	orrs	r4, r3
 800478a:	4828      	ldr	r0, [pc, #160]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800478c:	f7ff febb 	bl	8004506 <LL_ADC_IsEnabled>
 8004790:	4603      	mov	r3, r0
 8004792:	4323      	orrs	r3, r4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d137      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047a0:	f023 030f 	bic.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	6811      	ldr	r1, [r2, #0]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	6892      	ldr	r2, [r2, #8]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	431a      	orrs	r2, r3
 80047b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047b4:	e028      	b.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047c2:	4817      	ldr	r0, [pc, #92]	@ (8004820 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80047c4:	f7ff fe9f 	bl	8004506 <LL_ADC_IsEnabled>
 80047c8:	4604      	mov	r4, r0
 80047ca:	4816      	ldr	r0, [pc, #88]	@ (8004824 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80047cc:	f7ff fe9b 	bl	8004506 <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	431c      	orrs	r4, r3
 80047d4:	4815      	ldr	r0, [pc, #84]	@ (800482c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80047d6:	f7ff fe96 	bl	8004506 <LL_ADC_IsEnabled>
 80047da:	4603      	mov	r3, r0
 80047dc:	4323      	orrs	r3, r4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d112      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047ea:	f023 030f 	bic.w	r3, r3, #15
 80047ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047f2:	e009      	b.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004806:	e000      	b.n	800480a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004808:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004812:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004816:	4618      	mov	r0, r3
 8004818:	377c      	adds	r7, #124	@ 0x7c
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop
 8004820:	50040000 	.word	0x50040000
 8004824:	50040100 	.word	0x50040100
 8004828:	50040300 	.word	0x50040300
 800482c:	50040200 	.word	0x50040200

08004830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004840:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <__NVIC_SetPriorityGrouping+0x44>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800484c:	4013      	ands	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800485c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004862:	4a04      	ldr	r2, [pc, #16]	@ (8004874 <__NVIC_SetPriorityGrouping+0x44>)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	60d3      	str	r3, [r2, #12]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800487c:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <__NVIC_GetPriorityGrouping+0x18>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	f003 0307 	and.w	r3, r3, #7
}
 8004886:	4618      	mov	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db0b      	blt.n	80048be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	f003 021f 	and.w	r2, r3, #31
 80048ac:	4907      	ldr	r1, [pc, #28]	@ (80048cc <__NVIC_EnableIRQ+0x38>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2001      	movs	r0, #1
 80048b6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000e100 	.word	0xe000e100

080048d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	db0a      	blt.n	80048fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	490c      	ldr	r1, [pc, #48]	@ (800491c <__NVIC_SetPriority+0x4c>)
 80048ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ee:	0112      	lsls	r2, r2, #4
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	440b      	add	r3, r1
 80048f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048f8:	e00a      	b.n	8004910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	4908      	ldr	r1, [pc, #32]	@ (8004920 <__NVIC_SetPriority+0x50>)
 8004900:	79fb      	ldrb	r3, [r7, #7]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	3b04      	subs	r3, #4
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	440b      	add	r3, r1
 800490e:	761a      	strb	r2, [r3, #24]
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000e100 	.word	0xe000e100
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004924:	b480      	push	{r7}
 8004926:	b089      	sub	sp, #36	@ 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f1c3 0307 	rsb	r3, r3, #7
 800493e:	2b04      	cmp	r3, #4
 8004940:	bf28      	it	cs
 8004942:	2304      	movcs	r3, #4
 8004944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3304      	adds	r3, #4
 800494a:	2b06      	cmp	r3, #6
 800494c:	d902      	bls.n	8004954 <NVIC_EncodePriority+0x30>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3b03      	subs	r3, #3
 8004952:	e000      	b.n	8004956 <NVIC_EncodePriority+0x32>
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	401a      	ands	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800496c:	f04f 31ff 	mov.w	r1, #4294967295
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	43d9      	mvns	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800497c:	4313      	orrs	r3, r2
         );
}
 800497e:	4618      	mov	r0, r3
 8004980:	3724      	adds	r7, #36	@ 0x24
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3b01      	subs	r3, #1
 8004998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800499c:	d301      	bcc.n	80049a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800499e:	2301      	movs	r3, #1
 80049a0:	e00f      	b.n	80049c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049a2:	4a0a      	ldr	r2, [pc, #40]	@ (80049cc <SysTick_Config+0x40>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049aa:	210f      	movs	r1, #15
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	f7ff ff8e 	bl	80048d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <SysTick_Config+0x40>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ba:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <SysTick_Config+0x40>)
 80049bc:	2207      	movs	r2, #7
 80049be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	e000e010 	.word	0xe000e010

080049d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff29 	bl	8004830 <__NVIC_SetPriorityGrouping>
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049f8:	f7ff ff3e 	bl	8004878 <__NVIC_GetPriorityGrouping>
 80049fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7ff ff8e 	bl	8004924 <NVIC_EncodePriority>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff5d 	bl	80048d0 <__NVIC_SetPriority>
}
 8004a16:	bf00      	nop
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	4603      	mov	r3, r0
 8004a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff ff31 	bl	8004894 <__NVIC_EnableIRQ>
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ffa2 	bl	800498c <SysTick_Config>
 8004a48:	4603      	mov	r3, r0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e014      	b.n	8004a8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	791b      	ldrb	r3, [r3, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d105      	bne.n	8004a7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd fc6f 	bl	8002358 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	795b      	ldrb	r3, [r3, #5]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_DAC_Start+0x16>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e03b      	b.n	8004b24 <HAL_DAC_Start+0x8e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d118      	bne.n	8004b16 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	605a      	str	r2, [r3, #4]
 8004af4:	e00f      	b.n	8004b16 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b04:	d107      	bne.n	8004b16 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0202 	orr.w	r2, r2, #2
 8004b14:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	795b      	ldrb	r3, [r3, #5]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_DAC_Start_DMA+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ab      	b.n	8004ca6 <HAL_DAC_Start_DMA+0x176>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2202      	movs	r2, #2
 8004b58:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d12f      	bne.n	8004bc0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a52      	ldr	r2, [pc, #328]	@ (8004cb0 <HAL_DAC_Start_DMA+0x180>)
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4a51      	ldr	r2, [pc, #324]	@ (8004cb4 <HAL_DAC_Start_DMA+0x184>)
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4a50      	ldr	r2, [pc, #320]	@ (8004cb8 <HAL_DAC_Start_DMA+0x188>)
 8004b76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b86:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d013      	beq.n	8004bb6 <HAL_DAC_Start_DMA+0x86>
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d845      	bhi.n	8004c20 <HAL_DAC_Start_DMA+0xf0>
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_DAC_Start_DMA+0x72>
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d005      	beq.n	8004bac <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ba0:	e03e      	b.n	8004c20 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	613b      	str	r3, [r7, #16]
        break;
 8004baa:	e03c      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	613b      	str	r3, [r7, #16]
        break;
 8004bb4:	e037      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3310      	adds	r3, #16
 8004bbc:	613b      	str	r3, [r7, #16]
        break;
 8004bbe:	e032      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004cbc <HAL_DAC_Start_DMA+0x18c>)
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc0 <HAL_DAC_Start_DMA+0x190>)
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8004cc4 <HAL_DAC_Start_DMA+0x194>)
 8004bd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d013      	beq.n	8004c16 <HAL_DAC_Start_DMA+0xe6>
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d817      	bhi.n	8004c24 <HAL_DAC_Start_DMA+0xf4>
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_DAC_Start_DMA+0xd2>
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d005      	beq.n	8004c0c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004c00:	e010      	b.n	8004c24 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	613b      	str	r3, [r7, #16]
        break;
 8004c0a:	e00c      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3318      	adds	r3, #24
 8004c12:	613b      	str	r3, [r7, #16]
        break;
 8004c14:	e007      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	331c      	adds	r3, #28
 8004c1c:	613b      	str	r3, [r7, #16]
        break;
 8004c1e:	e002      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004c20:	bf00      	nop
 8004c22:	e000      	b.n	8004c26 <HAL_DAC_Start_DMA+0xf6>
        break;
 8004c24:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6898      	ldr	r0, [r3, #8]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	f000 faeb 	bl	8005220 <HAL_DMA_Start_IT>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	75fb      	strb	r3, [r7, #23]
 8004c4e:	e010      	b.n	8004c72 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	68d8      	ldr	r0, [r3, #12]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	f000 fad9 	bl	8005220 <HAL_DMA_Start_IT>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6819      	ldr	r1, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e005      	b.n	8004ca4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	08004f9d 	.word	0x08004f9d
 8004cb4:	08004fbf 	.word	0x08004fbf
 8004cb8:	08004fdb 	.word	0x08004fdb
 8004cbc:	08005045 	.word	0x08005045
 8004cc0:	08005067 	.word	0x08005067
 8004cc4:	08005083 	.word	0x08005083

08004cc8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d105      	bne.n	8004cf2 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	3308      	adds	r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	e004      	b.n	8004cfc <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b088      	sub	sp, #32
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	795b      	ldrb	r3, [r3, #5]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_DAC_ConfigChannel+0x1c>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e114      	b.n	8004f94 <HAL_DAC_ConfigChannel+0x246>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2202      	movs	r2, #2
 8004d74:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	f040 8081 	bne.w	8004e82 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004d80:	f7fd fd18 	bl	80027b4 <HAL_GetTick>
 8004d84:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d140      	bne.n	8004e0e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d8c:	e018      	b.n	8004dc0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d8e:	f7fd fd11 	bl	80027b4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d911      	bls.n	8004dc0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f043 0208 	orr.w	r2, r3, #8
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2203      	movs	r2, #3
 8004dba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0e9      	b.n	8004f94 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1df      	bne.n	8004d8e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7fd fcfc 	bl	80027cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	6992      	ldr	r2, [r2, #24]
 8004ddc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004dde:	e023      	b.n	8004e28 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004de0:	f7fd fce8 	bl	80027b4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d90f      	bls.n	8004e0e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da0a      	bge.n	8004e0e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f043 0208 	orr.w	r2, r3, #8
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2203      	movs	r2, #3
 8004e08:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0c2      	b.n	8004f94 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dbe3      	blt.n	8004de0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7fd fcd7 	bl	80027cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	6992      	ldr	r2, [r2, #24]
 8004e26:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	ea02 0103 	and.w	r1, r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	69da      	ldr	r2, [r3, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	21ff      	movs	r1, #255	@ 0xff
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	ea02 0103 	and.w	r1, r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d11d      	bne.n	8004ec6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	221f      	movs	r2, #31
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43da      	mvns	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	400a      	ands	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	22c0      	movs	r2, #192	@ 0xc0
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	400a      	ands	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff feb1 	bl	8004d12 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	711a      	strb	r2, [r3, #4]
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff feaa 	bl	8004d26 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff fea0 	bl	8004d3a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	711a      	strb	r2, [r3, #4]
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffd8 	bl	8005008 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	711a      	strb	r2, [r3, #4]
}
 800505e:	bf00      	nop
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005072:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ffd1 	bl	800501c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f043 0204 	orr.w	r2, r3, #4
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ffc7 	bl	8005030 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	711a      	strb	r2, [r3, #4]
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e098      	b.n	80051f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005200 <HAL_DMA_Init+0x150>)
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d80f      	bhi.n	80050ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005204 <HAL_DMA_Init+0x154>)
 80050d6:	4413      	add	r3, r2
 80050d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005208 <HAL_DMA_Init+0x158>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	009a      	lsls	r2, r3, #2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a48      	ldr	r2, [pc, #288]	@ (800520c <HAL_DMA_Init+0x15c>)
 80050ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80050ec:	e00e      	b.n	800510c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b46      	ldr	r3, [pc, #280]	@ (8005210 <HAL_DMA_Init+0x160>)
 80050f6:	4413      	add	r3, r2
 80050f8:	4a43      	ldr	r2, [pc, #268]	@ (8005208 <HAL_DMA_Init+0x158>)
 80050fa:	fba2 2303 	umull	r2, r3, r2, r3
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	009a      	lsls	r2, r3, #2
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a42      	ldr	r2, [pc, #264]	@ (8005214 <HAL_DMA_Init+0x164>)
 800510a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800513c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005166:	d039      	beq.n	80051dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_DMA_Init+0x15c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d11a      	bne.n	80051a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <HAL_DMA_Init+0x168>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	f003 031c 	and.w	r3, r3, #28
 800517e:	210f      	movs	r1, #15
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	43db      	mvns	r3, r3
 8005186:	4924      	ldr	r1, [pc, #144]	@ (8005218 <HAL_DMA_Init+0x168>)
 8005188:	4013      	ands	r3, r2
 800518a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800518c:	4b22      	ldr	r3, [pc, #136]	@ (8005218 <HAL_DMA_Init+0x168>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6859      	ldr	r1, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005198:	f003 031c 	and.w	r3, r3, #28
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	491d      	ldr	r1, [pc, #116]	@ (8005218 <HAL_DMA_Init+0x168>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]
 80051a6:	e019      	b.n	80051dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80051a8:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <HAL_DMA_Init+0x16c>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	f003 031c 	and.w	r3, r3, #28
 80051b4:	210f      	movs	r1, #15
 80051b6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	4917      	ldr	r1, [pc, #92]	@ (800521c <HAL_DMA_Init+0x16c>)
 80051be:	4013      	ands	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80051c2:	4b16      	ldr	r3, [pc, #88]	@ (800521c <HAL_DMA_Init+0x16c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f003 031c 	and.w	r3, r3, #28
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	4911      	ldr	r1, [pc, #68]	@ (800521c <HAL_DMA_Init+0x16c>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40020407 	.word	0x40020407
 8005204:	bffdfff8 	.word	0xbffdfff8
 8005208:	cccccccd 	.word	0xcccccccd
 800520c:	40020000 	.word	0x40020000
 8005210:	bffdfbf8 	.word	0xbffdfbf8
 8005214:	40020400 	.word	0x40020400
 8005218:	400200a8 	.word	0x400200a8
 800521c:	400204a8 	.word	0x400204a8

08005220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_DMA_Start_IT+0x20>
 800523c:	2302      	movs	r3, #2
 800523e:	e04b      	b.n	80052d8 <HAL_DMA_Start_IT+0xb8>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d13a      	bne.n	80052ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8e0 	bl	800543e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 020e 	orr.w	r2, r2, #14
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e00f      	b.n	80052b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0204 	bic.w	r2, r2, #4
 80052a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 020a 	orr.w	r2, r2, #10
 80052b6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	e005      	b.n	80052d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
 80052d4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fc:	f003 031c 	and.w	r3, r3, #28
 8005300:	2204      	movs	r2, #4
 8005302:	409a      	lsls	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d026      	beq.n	800535a <HAL_DMA_IRQHandler+0x7a>
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d021      	beq.n	800535a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d107      	bne.n	8005334 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0204 	bic.w	r2, r2, #4
 8005332:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005338:	f003 021c 	and.w	r2, r3, #28
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	2104      	movs	r1, #4
 8005342:	fa01 f202 	lsl.w	r2, r1, r2
 8005346:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d071      	beq.n	8005434 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005358:	e06c      	b.n	8005434 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f003 031c 	and.w	r3, r3, #28
 8005362:	2202      	movs	r2, #2
 8005364:	409a      	lsls	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d02e      	beq.n	80053cc <HAL_DMA_IRQHandler+0xec>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d029      	beq.n	80053cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 020a 	bic.w	r2, r2, #10
 8005394:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	f003 021c 	and.w	r2, r3, #28
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	2102      	movs	r1, #2
 80053ac:	fa01 f202 	lsl.w	r2, r1, r2
 80053b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d038      	beq.n	8005434 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80053ca:	e033      	b.n	8005434 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d0:	f003 031c 	and.w	r3, r3, #28
 80053d4:	2208      	movs	r2, #8
 80053d6:	409a      	lsls	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02a      	beq.n	8005436 <HAL_DMA_IRQHandler+0x156>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d025      	beq.n	8005436 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 020e 	bic.w	r2, r2, #14
 80053f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	f003 021c 	and.w	r2, r3, #28
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005406:	2101      	movs	r1, #1
 8005408:	fa01 f202 	lsl.w	r2, r1, r2
 800540c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005434:	bf00      	nop
 8005436:	bf00      	nop
}
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005450:	f003 021c 	and.w	r2, r3, #28
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	2101      	movs	r1, #1
 800545a:	fa01 f202 	lsl.w	r2, r1, r2
 800545e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b10      	cmp	r3, #16
 800546e:	d108      	bne.n	8005482 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005480:	e007      	b.n	8005492 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ae:	e17f      	b.n	80057b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	fa01 f303 	lsl.w	r3, r1, r3
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 8171 	beq.w	80057aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d005      	beq.n	80054e0 <HAL_GPIO_Init+0x40>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d130      	bne.n	8005542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2203      	movs	r2, #3
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4013      	ands	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005516:	2201      	movs	r2, #1
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	f003 0201 	and.w	r2, r3, #1
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b03      	cmp	r3, #3
 800554c:	d118      	bne.n	8005580 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005554:	2201      	movs	r2, #1
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	f003 0201 	and.w	r2, r3, #1
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d017      	beq.n	80055bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2203      	movs	r2, #3
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d123      	bne.n	8005610 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	08da      	lsrs	r2, r3, #3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3208      	adds	r2, #8
 80055d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	220f      	movs	r2, #15
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4013      	ands	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	08da      	lsrs	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3208      	adds	r2, #8
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0203 	and.w	r2, r3, #3
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80ac 	beq.w	80057aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005652:	4b5f      	ldr	r3, [pc, #380]	@ (80057d0 <HAL_GPIO_Init+0x330>)
 8005654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005656:	4a5e      	ldr	r2, [pc, #376]	@ (80057d0 <HAL_GPIO_Init+0x330>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6613      	str	r3, [r2, #96]	@ 0x60
 800565e:	4b5c      	ldr	r3, [pc, #368]	@ (80057d0 <HAL_GPIO_Init+0x330>)
 8005660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800566a:	4a5a      	ldr	r2, [pc, #360]	@ (80057d4 <HAL_GPIO_Init+0x334>)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	3302      	adds	r3, #2
 8005672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005676:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	220f      	movs	r2, #15
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4013      	ands	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005694:	d025      	beq.n	80056e2 <HAL_GPIO_Init+0x242>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4f      	ldr	r2, [pc, #316]	@ (80057d8 <HAL_GPIO_Init+0x338>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01f      	beq.n	80056de <HAL_GPIO_Init+0x23e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4e      	ldr	r2, [pc, #312]	@ (80057dc <HAL_GPIO_Init+0x33c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d019      	beq.n	80056da <HAL_GPIO_Init+0x23a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a4d      	ldr	r2, [pc, #308]	@ (80057e0 <HAL_GPIO_Init+0x340>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_GPIO_Init+0x236>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a4c      	ldr	r2, [pc, #304]	@ (80057e4 <HAL_GPIO_Init+0x344>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00d      	beq.n	80056d2 <HAL_GPIO_Init+0x232>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4b      	ldr	r2, [pc, #300]	@ (80057e8 <HAL_GPIO_Init+0x348>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <HAL_GPIO_Init+0x22e>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4a      	ldr	r2, [pc, #296]	@ (80057ec <HAL_GPIO_Init+0x34c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_GPIO_Init+0x22a>
 80056c6:	2306      	movs	r3, #6
 80056c8:	e00c      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056ca:	2307      	movs	r3, #7
 80056cc:	e00a      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056ce:	2305      	movs	r3, #5
 80056d0:	e008      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056d2:	2304      	movs	r3, #4
 80056d4:	e006      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056d6:	2303      	movs	r3, #3
 80056d8:	e004      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056da:	2302      	movs	r3, #2
 80056dc:	e002      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <HAL_GPIO_Init+0x244>
 80056e2:	2300      	movs	r3, #0
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	f002 0203 	and.w	r2, r2, #3
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	4093      	lsls	r3, r2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056f4:	4937      	ldr	r1, [pc, #220]	@ (80057d4 <HAL_GPIO_Init+0x334>)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	3302      	adds	r3, #2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005702:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	43db      	mvns	r3, r3
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4013      	ands	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005726:	4a32      	ldr	r2, [pc, #200]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800572c:	4b30      	ldr	r3, [pc, #192]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	43db      	mvns	r3, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005750:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005756:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	43db      	mvns	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800577a:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057a4:	4a12      	ldr	r2, [pc, #72]	@ (80057f0 <HAL_GPIO_Init+0x350>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	3301      	adds	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f47f ae78 	bne.w	80054b0 <HAL_GPIO_Init+0x10>
  }
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40010000 	.word	0x40010000
 80057d8:	48000400 	.word	0x48000400
 80057dc:	48000800 	.word	0x48000800
 80057e0:	48000c00 	.word	0x48000c00
 80057e4:	48001000 	.word	0x48001000
 80057e8:	48001400 	.word	0x48001400
 80057ec:	48001800 	.word	0x48001800
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057f8:	4b04      	ldr	r3, [pc, #16]	@ (800580c <HAL_PWREx_GetVoltageRange+0x18>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40007000 	.word	0x40007000

08005810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581e:	d130      	bne.n	8005882 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005820:	4b23      	ldr	r3, [pc, #140]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800582c:	d038      	beq.n	80058a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800582e:	4b20      	ldr	r3, [pc, #128]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005838:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800583c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800583e:	4b1d      	ldr	r3, [pc, #116]	@ (80058b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2232      	movs	r2, #50	@ 0x32
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	4a1b      	ldr	r2, [pc, #108]	@ (80058b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0c9b      	lsrs	r3, r3, #18
 8005850:	3301      	adds	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005854:	e002      	b.n	800585c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b01      	subs	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800585c:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005868:	d102      	bne.n	8005870 <HAL_PWREx_ControlVoltageScaling+0x60>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f2      	bne.n	8005856 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005870:	4b0f      	ldr	r3, [pc, #60]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800587c:	d110      	bne.n	80058a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e00f      	b.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005882:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800588e:	d007      	beq.n	80058a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005898:	4a05      	ldr	r2, [pc, #20]	@ (80058b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800589a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800589e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40007000 	.word	0x40007000
 80058b4:	20000004 	.word	0x20000004
 80058b8:	431bde83 	.word	0x431bde83

080058bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e3ca      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ce:	4b97      	ldr	r3, [pc, #604]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 030c 	and.w	r3, r3, #12
 80058d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d8:	4b94      	ldr	r3, [pc, #592]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80e4 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_RCC_OscConfig+0x4a>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	f040 808b 	bne.w	8005a14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b01      	cmp	r3, #1
 8005902:	f040 8087 	bne.w	8005a14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005906:	4b89      	ldr	r3, [pc, #548]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_RCC_OscConfig+0x62>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e3a2      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	4b82      	ldr	r3, [pc, #520]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_RCC_OscConfig+0x7c>
 800592e:	4b7f      	ldr	r3, [pc, #508]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005936:	e005      	b.n	8005944 <HAL_RCC_OscConfig+0x88>
 8005938:	4b7c      	ldr	r3, [pc, #496]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800593a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005944:	4293      	cmp	r3, r2
 8005946:	d223      	bcs.n	8005990 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fd55 	bl	80063fc <RCC_SetFlashLatencyFromMSIRange>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e383      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800595c:	4b73      	ldr	r3, [pc, #460]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a72      	ldr	r2, [pc, #456]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005962:	f043 0308 	orr.w	r3, r3, #8
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	4b70      	ldr	r3, [pc, #448]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	496d      	ldr	r1, [pc, #436]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800597a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	4968      	ldr	r1, [pc, #416]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
 800598e:	e025      	b.n	80059dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005990:	4b66      	ldr	r3, [pc, #408]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a65      	ldr	r2, [pc, #404]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005996:	f043 0308 	orr.w	r3, r3, #8
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	4b63      	ldr	r3, [pc, #396]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4960      	ldr	r1, [pc, #384]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ae:	4b5f      	ldr	r3, [pc, #380]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	495b      	ldr	r1, [pc, #364]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d109      	bne.n	80059dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fd15 	bl	80063fc <RCC_SetFlashLatencyFromMSIRange>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e343      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059dc:	f000 fc4a 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b52      	ldr	r3, [pc, #328]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	4950      	ldr	r1, [pc, #320]	@ (8005b30 <HAL_RCC_OscConfig+0x274>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	4a4e      	ldr	r2, [pc, #312]	@ (8005b34 <HAL_RCC_OscConfig+0x278>)
 80059fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005b38 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fc fe87 	bl	8002714 <HAL_InitTick>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d052      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	e327      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d032      	beq.n	8005a82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a1c:	4b43      	ldr	r3, [pc, #268]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a42      	ldr	r2, [pc, #264]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a28:	f7fc fec4 	bl	80027b4 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a30:	f7fc fec0 	bl	80027b4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e310      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a42:	4b3a      	ldr	r3, [pc, #232]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a4e:	4b37      	ldr	r3, [pc, #220]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a36      	ldr	r2, [pc, #216]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a54:	f043 0308 	orr.w	r3, r3, #8
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4b34      	ldr	r3, [pc, #208]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4931      	ldr	r1, [pc, #196]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	492c      	ldr	r1, [pc, #176]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	e01a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a82:	4b2a      	ldr	r3, [pc, #168]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a29      	ldr	r2, [pc, #164]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a8e:	f7fc fe91 	bl	80027b4 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a96:	f7fc fe8d 	bl	80027b4 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e2dd      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aa8:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x1da>
 8005ab4:	e000      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ab6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d074      	beq.n	8005bae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d005      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x21a>
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d10e      	bne.n	8005aee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d10b      	bne.n	8005aee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	4b15      	ldr	r3, [pc, #84]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d064      	beq.n	8005bac <HAL_RCC_OscConfig+0x2f0>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d160      	bne.n	8005bac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e2ba      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af6:	d106      	bne.n	8005b06 <HAL_RCC_OscConfig+0x24a>
 8005af8:	4b0c      	ldr	r3, [pc, #48]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a0b      	ldr	r2, [pc, #44]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e026      	b.n	8005b54 <HAL_RCC_OscConfig+0x298>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b0e:	d115      	bne.n	8005b3c <HAL_RCC_OscConfig+0x280>
 8005b10:	4b06      	ldr	r3, [pc, #24]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a05      	ldr	r2, [pc, #20]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005b16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a02      	ldr	r2, [pc, #8]	@ (8005b2c <HAL_RCC_OscConfig+0x270>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e014      	b.n	8005b54 <HAL_RCC_OscConfig+0x298>
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	0800b578 	.word	0x0800b578
 8005b34:	20000004 	.word	0x20000004
 8005b38:	20000008 	.word	0x20000008
 8005b3c:	4ba0      	ldr	r3, [pc, #640]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a9f      	ldr	r2, [pc, #636]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	4b9d      	ldr	r3, [pc, #628]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a9c      	ldr	r2, [pc, #624]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d013      	beq.n	8005b84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fc fe2a 	bl	80027b4 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fc fe26 	bl	80027b4 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	@ 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e276      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b76:	4b92      	ldr	r3, [pc, #584]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2a8>
 8005b82:	e014      	b.n	8005bae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc fe16 	bl	80027b4 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fc fe12 	bl	80027b4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	@ 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e262      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b9e:	4b88      	ldr	r3, [pc, #544]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2d0>
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d060      	beq.n	8005c7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d005      	beq.n	8005bcc <HAL_RCC_OscConfig+0x310>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b0c      	cmp	r3, #12
 8005bc4:	d119      	bne.n	8005bfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d116      	bne.n	8005bfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_OscConfig+0x328>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e23f      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be4:	4b76      	ldr	r3, [pc, #472]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	061b      	lsls	r3, r3, #24
 8005bf2:	4973      	ldr	r1, [pc, #460]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf8:	e040      	b.n	8005c7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d023      	beq.n	8005c4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c02:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0e:	f7fc fdd1 	bl	80027b4 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c16:	f7fc fdcd 	bl	80027b4 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e21d      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c28:	4b65      	ldr	r3, [pc, #404]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	4b62      	ldr	r3, [pc, #392]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	495f      	ldr	r1, [pc, #380]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
 8005c48:	e018      	b.n	8005c7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5c      	ldr	r2, [pc, #368]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fc fdad 	bl	80027b4 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fc fda9 	bl	80027b4 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e1f9      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c70:	4b53      	ldr	r3, [pc, #332]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f0      	bne.n	8005c5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d03c      	beq.n	8005d02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01c      	beq.n	8005cca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c90:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c96:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fc fd88 	bl	80027b4 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fc fd84 	bl	80027b4 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e1d4      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cba:	4b41      	ldr	r3, [pc, #260]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0ef      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x3ec>
 8005cc8:	e01b      	b.n	8005d02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cca:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cda:	f7fc fd6b 	bl	80027b4 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce2:	f7fc fd67 	bl	80027b4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e1b7      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cf4:	4b32      	ldr	r3, [pc, #200]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ef      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80a6 	beq.w	8005e5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d10:	2300      	movs	r3, #0
 8005d12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d14:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d20:	4b27      	ldr	r3, [pc, #156]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d24:	4a26      	ldr	r2, [pc, #152]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d3c:	4b21      	ldr	r3, [pc, #132]	@ (8005dc4 <HAL_RCC_OscConfig+0x508>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d118      	bne.n	8005d7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d48:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc4 <HAL_RCC_OscConfig+0x508>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc4 <HAL_RCC_OscConfig+0x508>)
 8005d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d54:	f7fc fd2e 	bl	80027b4 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5c:	f7fc fd2a 	bl	80027b4 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e17a      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d6e:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <HAL_RCC_OscConfig+0x508>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d108      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4d8>
 8005d82:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d88:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d92:	e029      	b.n	8005de8 <HAL_RCC_OscConfig+0x52c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	d115      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x50c>
 8005d9c:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da2:	4a07      	ldr	r2, [pc, #28]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005da4:	f043 0304 	orr.w	r3, r3, #4
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db2:	4a03      	ldr	r2, [pc, #12]	@ (8005dc0 <HAL_RCC_OscConfig+0x504>)
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dbc:	e014      	b.n	8005de8 <HAL_RCC_OscConfig+0x52c>
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	4b9c      	ldr	r3, [pc, #624]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dce:	4a9b      	ldr	r2, [pc, #620]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005dd8:	4b98      	ldr	r3, [pc, #608]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dde:	4a97      	ldr	r2, [pc, #604]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005de0:	f023 0304 	bic.w	r3, r3, #4
 8005de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d016      	beq.n	8005e1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df0:	f7fc fce0 	bl	80027b4 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fc fcdc 	bl	80027b4 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e12a      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e0e:	4b8b      	ldr	r3, [pc, #556]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ed      	beq.n	8005df8 <HAL_RCC_OscConfig+0x53c>
 8005e1c:	e015      	b.n	8005e4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1e:	f7fc fcc9 	bl	80027b4 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f7fc fcc5 	bl	80027b4 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e113      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e3c:	4b7f      	ldr	r3, [pc, #508]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1ed      	bne.n	8005e26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e4a:	7ffb      	ldrb	r3, [r7, #31]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d105      	bne.n	8005e5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e50:	4b7a      	ldr	r3, [pc, #488]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e54:	4a79      	ldr	r2, [pc, #484]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e5a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 80fe 	beq.w	8006062 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	f040 80d0 	bne.w	8006010 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e70:	4b72      	ldr	r3, [pc, #456]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0203 	and.w	r2, r3, #3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d130      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d127      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ea0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d11f      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005eb0:	2a07      	cmp	r2, #7
 8005eb2:	bf14      	ite	ne
 8005eb4:	2201      	movne	r2, #1
 8005eb6:	2200      	moveq	r2, #0
 8005eb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d113      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d06e      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d069      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005eec:	4b53      	ldr	r3, [pc, #332]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ef8:	4b50      	ldr	r3, [pc, #320]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0ad      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f08:	4b4c      	ldr	r3, [pc, #304]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f14:	f7fc fc4e 	bl	80027b4 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fc fc4a 	bl	80027b4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e09a      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2e:	4b43      	ldr	r3, [pc, #268]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f3a:	4b40      	ldr	r3, [pc, #256]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <HAL_RCC_OscConfig+0x784>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f4a:	3a01      	subs	r2, #1
 8005f4c:	0112      	lsls	r2, r2, #4
 8005f4e:	4311      	orrs	r1, r2
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f54:	0212      	lsls	r2, r2, #8
 8005f56:	4311      	orrs	r1, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f5c:	0852      	lsrs	r2, r2, #1
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	0552      	lsls	r2, r2, #21
 8005f62:	4311      	orrs	r1, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005f68:	0852      	lsrs	r2, r2, #1
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	0652      	lsls	r2, r2, #25
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f74:	0912      	lsrs	r2, r2, #4
 8005f76:	0452      	lsls	r2, r2, #17
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	4930      	ldr	r1, [pc, #192]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f80:	4b2e      	ldr	r3, [pc, #184]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2d      	ldr	r2, [pc, #180]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a2a      	ldr	r2, [pc, #168]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f98:	f7fc fc0c 	bl	80027b4 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fc fc08 	bl	80027b4 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e058      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb2:	4b22      	ldr	r3, [pc, #136]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fbe:	e050      	b.n	8006062 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e04f      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d148      	bne.n	8006062 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a19      	ldr	r2, [pc, #100]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fdc:	4b17      	ldr	r3, [pc, #92]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4a16      	ldr	r2, [pc, #88]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8005fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fe8:	f7fc fbe4 	bl	80027b4 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fc fbe0 	bl	80027b4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e030      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x734>
 800600e:	e028      	b.n	8006062 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d023      	beq.n	800605e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b09      	ldr	r3, [pc, #36]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a08      	ldr	r2, [pc, #32]	@ (800603c <HAL_RCC_OscConfig+0x780>)
 800601c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006022:	f7fc fbc7 	bl	80027b4 <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006028:	e00c      	b.n	8006044 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602a:	f7fc fbc3 	bl	80027b4 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d905      	bls.n	8006044 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e013      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
 800603c:	40021000 	.word	0x40021000
 8006040:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006044:	4b09      	ldr	r3, [pc, #36]	@ (800606c <HAL_RCC_OscConfig+0x7b0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1ec      	bne.n	800602a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <HAL_RCC_OscConfig+0x7b0>)
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	4905      	ldr	r1, [pc, #20]	@ (800606c <HAL_RCC_OscConfig+0x7b0>)
 8006056:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <HAL_RCC_OscConfig+0x7b4>)
 8006058:	4013      	ands	r3, r2
 800605a:	60cb      	str	r3, [r1, #12]
 800605c:	e001      	b.n	8006062 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3720      	adds	r7, #32
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	feeefffc 	.word	0xfeeefffc

08006074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0e7      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006088:	4b75      	ldr	r3, [pc, #468]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d910      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006096:	4b72      	ldr	r3, [pc, #456]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 0207 	bic.w	r2, r3, #7
 800609e:	4970      	ldr	r1, [pc, #448]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b6e      	ldr	r3, [pc, #440]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0cf      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	4b66      	ldr	r3, [pc, #408]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d908      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d4:	4b63      	ldr	r3, [pc, #396]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	4960      	ldr	r1, [pc, #384]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d04c      	beq.n	800618c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d107      	bne.n	800610a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d121      	bne.n	800614a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e0a6      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d107      	bne.n	8006122 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006112:	4b54      	ldr	r3, [pc, #336]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d115      	bne.n	800614a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e09a      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800612a:	4b4e      	ldr	r3, [pc, #312]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e08e      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800613a:	4b4a      	ldr	r3, [pc, #296]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e086      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800614a:	4b46      	ldr	r3, [pc, #280]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f023 0203 	bic.w	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4943      	ldr	r1, [pc, #268]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615c:	f7fc fb2a 	bl	80027b4 <HAL_GetTick>
 8006160:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006162:	e00a      	b.n	800617a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006164:	f7fc fb26 	bl	80027b4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e06e      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617a:	4b3a      	ldr	r3, [pc, #232]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 020c 	and.w	r2, r3, #12
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	429a      	cmp	r2, r3
 800618a:	d1eb      	bne.n	8006164 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d010      	beq.n	80061ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	4b31      	ldr	r3, [pc, #196]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d208      	bcs.n	80061ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a8:	4b2e      	ldr	r3, [pc, #184]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	492b      	ldr	r1, [pc, #172]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ba:	4b29      	ldr	r3, [pc, #164]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d210      	bcs.n	80061ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c8:	4b25      	ldr	r3, [pc, #148]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f023 0207 	bic.w	r2, r3, #7
 80061d0:	4923      	ldr	r1, [pc, #140]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d8:	4b21      	ldr	r3, [pc, #132]	@ (8006260 <HAL_RCC_ClockConfig+0x1ec>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e036      	b.n	8006258 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	4918      	ldr	r1, [pc, #96]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006204:	4313      	orrs	r3, r2
 8006206:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006214:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4910      	ldr	r1, [pc, #64]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006224:	4313      	orrs	r3, r2
 8006226:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006228:	f000 f824 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <HAL_RCC_ClockConfig+0x1f0>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	091b      	lsrs	r3, r3, #4
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	490b      	ldr	r1, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x1f4>)
 800623a:	5ccb      	ldrb	r3, [r1, r3]
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
 8006244:	4a09      	ldr	r2, [pc, #36]	@ (800626c <HAL_RCC_ClockConfig+0x1f8>)
 8006246:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006248:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <HAL_RCC_ClockConfig+0x1fc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f7fc fa61 	bl	8002714 <HAL_InitTick>
 8006252:	4603      	mov	r3, r0
 8006254:	72fb      	strb	r3, [r7, #11]

  return status;
 8006256:	7afb      	ldrb	r3, [r7, #11]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40022000 	.word	0x40022000
 8006264:	40021000 	.word	0x40021000
 8006268:	0800b578 	.word	0x0800b578
 800626c:	20000004 	.word	0x20000004
 8006270:	20000008 	.word	0x20000008

08006274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	@ 0x24
 8006278:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006282:	4b3e      	ldr	r3, [pc, #248]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 030c 	and.w	r3, r3, #12
 800628a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800628c:	4b3b      	ldr	r3, [pc, #236]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d005      	beq.n	80062a8 <HAL_RCC_GetSysClockFreq+0x34>
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b0c      	cmp	r3, #12
 80062a0:	d121      	bne.n	80062e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d11e      	bne.n	80062e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062a8:	4b34      	ldr	r3, [pc, #208]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0308 	and.w	r3, r3, #8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062b4:	4b31      	ldr	r3, [pc, #196]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 80062b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e005      	b.n	80062d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062c4:	4b2d      	ldr	r3, [pc, #180]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006380 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062e4:	e00a      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d102      	bne.n	80062f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062ec:	4b25      	ldr	r3, [pc, #148]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x110>)
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e004      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d101      	bne.n	80062fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062f8:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x114>)
 80062fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b0c      	cmp	r3, #12
 8006300:	d134      	bne.n	800636c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006302:	4b1e      	ldr	r3, [pc, #120]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d003      	beq.n	800631a <HAL_RCC_GetSysClockFreq+0xa6>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b03      	cmp	r3, #3
 8006316:	d003      	beq.n	8006320 <HAL_RCC_GetSysClockFreq+0xac>
 8006318:	e005      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800631a:	4b1a      	ldr	r3, [pc, #104]	@ (8006384 <HAL_RCC_GetSysClockFreq+0x110>)
 800631c:	617b      	str	r3, [r7, #20]
      break;
 800631e:	e005      	b.n	800632c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006320:	4b19      	ldr	r3, [pc, #100]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x114>)
 8006322:	617b      	str	r3, [r7, #20]
      break;
 8006324:	e002      	b.n	800632c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	617b      	str	r3, [r7, #20]
      break;
 800632a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	3301      	adds	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800633a:	4b10      	ldr	r3, [pc, #64]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	fb03 f202 	mul.w	r2, r3, r2
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006352:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <HAL_RCC_GetSysClockFreq+0x108>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	0e5b      	lsrs	r3, r3, #25
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	3301      	adds	r3, #1
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	fbb2 f3f3 	udiv	r3, r2, r3
 800636a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800636c:	69bb      	ldr	r3, [r7, #24]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3724      	adds	r7, #36	@ 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	0800b590 	.word	0x0800b590
 8006384:	00f42400 	.word	0x00f42400
 8006388:	007a1200 	.word	0x007a1200

0800638c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006390:	4b03      	ldr	r3, [pc, #12]	@ (80063a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006392:	681b      	ldr	r3, [r3, #0]
}
 8006394:	4618      	mov	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000004 	.word	0x20000004

080063a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063a8:	f7ff fff0 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b06      	ldr	r3, [pc, #24]	@ (80063c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	0a1b      	lsrs	r3, r3, #8
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	4904      	ldr	r1, [pc, #16]	@ (80063cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40021000 	.word	0x40021000
 80063cc:	0800b588 	.word	0x0800b588

080063d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063d4:	f7ff ffda 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b06      	ldr	r3, [pc, #24]	@ (80063f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	0adb      	lsrs	r3, r3, #11
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4904      	ldr	r1, [pc, #16]	@ (80063f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40021000 	.word	0x40021000
 80063f8:	0800b588 	.word	0x0800b588

080063fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006408:	4b2a      	ldr	r3, [pc, #168]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800640a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800640c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006414:	f7ff f9ee 	bl	80057f4 <HAL_PWREx_GetVoltageRange>
 8006418:	6178      	str	r0, [r7, #20]
 800641a:	e014      	b.n	8006446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800641c:	4b25      	ldr	r3, [pc, #148]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006420:	4a24      	ldr	r2, [pc, #144]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006426:	6593      	str	r3, [r2, #88]	@ 0x58
 8006428:	4b22      	ldr	r3, [pc, #136]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006434:	f7ff f9de 	bl	80057f4 <HAL_PWREx_GetVoltageRange>
 8006438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800643a:	4b1e      	ldr	r3, [pc, #120]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006440:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006444:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800644c:	d10b      	bne.n	8006466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b80      	cmp	r3, #128	@ 0x80
 8006452:	d919      	bls.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2ba0      	cmp	r3, #160	@ 0xa0
 8006458:	d902      	bls.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800645a:	2302      	movs	r3, #2
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	e013      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006460:	2301      	movs	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	e010      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b80      	cmp	r3, #128	@ 0x80
 800646a:	d902      	bls.n	8006472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800646c:	2303      	movs	r3, #3
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e00a      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b80      	cmp	r3, #128	@ 0x80
 8006476:	d102      	bne.n	800647e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006478:	2302      	movs	r3, #2
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e004      	b.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b70      	cmp	r3, #112	@ 0x70
 8006482:	d101      	bne.n	8006488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006484:	2301      	movs	r3, #1
 8006486:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006488:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 0207 	bic.w	r2, r3, #7
 8006490:	4909      	ldr	r1, [pc, #36]	@ (80064b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006498:	4b07      	ldr	r3, [pc, #28]	@ (80064b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0307 	and.w	r3, r3, #7
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d001      	beq.n	80064aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40021000 	.word	0x40021000
 80064b8:	40022000 	.word	0x40022000

080064bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064c4:	2300      	movs	r3, #0
 80064c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064c8:	2300      	movs	r3, #0
 80064ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d041      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064e0:	d02a      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80064e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064e6:	d824      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064ec:	d008      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064f2:	d81e      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064fc:	d010      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064fe:	e018      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006500:	4b86      	ldr	r3, [pc, #536]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	4a85      	ldr	r2, [pc, #532]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800650c:	e015      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fabb 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800651e:	e00c      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3320      	adds	r3, #32
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fba6 	bl	8006c78 <RCCEx_PLLSAI2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	74fb      	strb	r3, [r7, #19]
      break;
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800653a:	7cfb      	ldrb	r3, [r7, #19]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006540:	4b76      	ldr	r3, [pc, #472]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006546:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800654e:	4973      	ldr	r1, [pc, #460]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006556:	e001      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d041      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800656c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006570:	d02a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006572:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006576:	d824      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800657c:	d008      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800657e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006582:	d81e      	bhi.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658c:	d010      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800658e:	e018      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006590:	4b62      	ldr	r3, [pc, #392]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a61      	ldr	r2, [pc, #388]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800659c:	e015      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3304      	adds	r3, #4
 80065a2:	2100      	movs	r1, #0
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fa73 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 80065aa:	4603      	mov	r3, r0
 80065ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ae:	e00c      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3320      	adds	r3, #32
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fb5e 	bl	8006c78 <RCCEx_PLLSAI2_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	74fb      	strb	r3, [r7, #19]
      break;
 80065c6:	e000      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80065c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ca:	7cfb      	ldrb	r3, [r7, #19]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065d0:	4b52      	ldr	r3, [pc, #328]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065de:	494f      	ldr	r1, [pc, #316]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80065e6:	e001      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80a0 	beq.w	800673a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065fa:	2300      	movs	r3, #0
 80065fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80065fe:	4b47      	ldr	r3, [pc, #284]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800660e:	2300      	movs	r3, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006614:	4b41      	ldr	r3, [pc, #260]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006618:	4a40      	ldr	r2, [pc, #256]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006620:	4b3e      	ldr	r3, [pc, #248]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662c:	2301      	movs	r3, #1
 800662e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006630:	4b3b      	ldr	r3, [pc, #236]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3a      	ldr	r2, [pc, #232]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800663c:	f7fc f8ba 	bl	80027b4 <HAL_GetTick>
 8006640:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006642:	e009      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006644:	f7fc f8b6 	bl	80027b4 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d902      	bls.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	74fb      	strb	r3, [r7, #19]
        break;
 8006656:	e005      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006658:	4b31      	ldr	r3, [pc, #196]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0ef      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006664:	7cfb      	ldrb	r3, [r7, #19]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d15c      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800666a:	4b2c      	ldr	r3, [pc, #176]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006674:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	429a      	cmp	r2, r3
 8006686:	d019      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006688:	4b24      	ldr	r3, [pc, #144]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006692:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006694:	4b21      	ldr	r3, [pc, #132]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669a:	4a20      	ldr	r2, [pc, #128]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a4:	4b1d      	ldr	r3, [pc, #116]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066aa:	4a1c      	ldr	r2, [pc, #112]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d016      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fc f875 	bl	80027b4 <HAL_GetTick>
 80066ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066cc:	e00b      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fc f871 	bl	80027b4 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d902      	bls.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	74fb      	strb	r3, [r7, #19]
            break;
 80066e4:	e006      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ec      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80066f4:	7cfb      	ldrb	r3, [r7, #19]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10c      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670a:	4904      	ldr	r1, [pc, #16]	@ (800671c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006712:	e009      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006714:	7cfb      	ldrb	r3, [r7, #19]
 8006716:	74bb      	strb	r3, [r7, #18]
 8006718:	e006      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800671a:	bf00      	nop
 800671c:	40021000 	.word	0x40021000
 8006720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	7cfb      	ldrb	r3, [r7, #19]
 8006726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006728:	7c7b      	ldrb	r3, [r7, #17]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d105      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672e:	4b9e      	ldr	r3, [pc, #632]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	4a9d      	ldr	r2, [pc, #628]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006746:	4b98      	ldr	r3, [pc, #608]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674c:	f023 0203 	bic.w	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	4994      	ldr	r1, [pc, #592]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006768:	4b8f      	ldr	r3, [pc, #572]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676e:	f023 020c 	bic.w	r2, r3, #12
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006776:	498c      	ldr	r1, [pc, #560]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800678a:	4b87      	ldr	r3, [pc, #540]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	4983      	ldr	r1, [pc, #524]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067ac:	4b7e      	ldr	r3, [pc, #504]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ba:	497b      	ldr	r1, [pc, #492]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0310 	and.w	r3, r3, #16
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067ce:	4b76      	ldr	r3, [pc, #472]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067dc:	4972      	ldr	r1, [pc, #456]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0320 	and.w	r3, r3, #32
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067f0:	4b6d      	ldr	r3, [pc, #436]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067fe:	496a      	ldr	r1, [pc, #424]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006812:	4b65      	ldr	r3, [pc, #404]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006820:	4961      	ldr	r1, [pc, #388]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006834:	4b5c      	ldr	r3, [pc, #368]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006842:	4959      	ldr	r1, [pc, #356]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006856:	4b54      	ldr	r3, [pc, #336]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006864:	4950      	ldr	r1, [pc, #320]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006878:	4b4b      	ldr	r3, [pc, #300]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006886:	4948      	ldr	r1, [pc, #288]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800689a:	4b43      	ldr	r3, [pc, #268]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a8:	493f      	ldr	r1, [pc, #252]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d028      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068bc:	4b3a      	ldr	r3, [pc, #232]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ca:	4937      	ldr	r1, [pc, #220]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068dc:	4b32      	ldr	r3, [pc, #200]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a31      	ldr	r2, [pc, #196]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068e6:	60d3      	str	r3, [r2, #12]
 80068e8:	e011      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068f2:	d10c      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3304      	adds	r3, #4
 80068f8:	2101      	movs	r1, #1
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 f8c8 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 8006900:	4603      	mov	r3, r0
 8006902:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006904:	7cfb      	ldrb	r3, [r7, #19]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800690a:	7cfb      	ldrb	r3, [r7, #19]
 800690c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d028      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800691a:	4b23      	ldr	r3, [pc, #140]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006920:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006928:	491f      	ldr	r1, [pc, #124]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006938:	d106      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800693a:	4b1b      	ldr	r3, [pc, #108]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006940:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006944:	60d3      	str	r3, [r2, #12]
 8006946:	e011      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006950:	d10c      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f899 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006968:	7cfb      	ldrb	r3, [r7, #19]
 800696a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d02b      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006978:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006986:	4908      	ldr	r1, [pc, #32]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006996:	d109      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006998:	4b03      	ldr	r3, [pc, #12]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4a02      	ldr	r2, [pc, #8]	@ (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069a2:	60d3      	str	r3, [r2, #12]
 80069a4:	e014      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069b4:	d10c      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f867 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069c6:	7cfb      	ldrb	r3, [r7, #19]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d02f      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069dc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069ea:	4928      	ldr	r1, [pc, #160]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	2102      	movs	r1, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f844 	bl	8006a90 <RCCEx_PLLSAI1_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a0c:	7cfb      	ldrb	r3, [r7, #19]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d014      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	74bb      	strb	r3, [r7, #18]
 8006a16:	e011      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a20:	d10c      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3320      	adds	r3, #32
 8006a26:	2102      	movs	r1, #2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f925 	bl	8006c78 <RCCEx_PLLSAI2_Config>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a32:	7cfb      	ldrb	r3, [r7, #19]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a48:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a56:	490d      	ldr	r1, [pc, #52]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a6a:	4b08      	ldr	r3, [pc, #32]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7a:	4904      	ldr	r1, [pc, #16]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a82:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40021000 	.word	0x40021000

08006a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a9e:	4b75      	ldr	r3, [pc, #468]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d018      	beq.n	8006adc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006aaa:	4b72      	ldr	r3, [pc, #456]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0203 	and.w	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d10d      	bne.n	8006ad6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
       ||
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ac2:	4b6c      	ldr	r3, [pc, #432]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	091b      	lsrs	r3, r3, #4
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
       ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d047      	beq.n	8006b66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	73fb      	strb	r3, [r7, #15]
 8006ada:	e044      	b.n	8006b66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d018      	beq.n	8006b16 <RCCEx_PLLSAI1_Config+0x86>
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d825      	bhi.n	8006b34 <RCCEx_PLLSAI1_Config+0xa4>
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d002      	beq.n	8006af2 <RCCEx_PLLSAI1_Config+0x62>
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d009      	beq.n	8006b04 <RCCEx_PLLSAI1_Config+0x74>
 8006af0:	e020      	b.n	8006b34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006af2:	4b60      	ldr	r3, [pc, #384]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0302 	and.w	r3, r3, #2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11d      	bne.n	8006b3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b02:	e01a      	b.n	8006b3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b04:	4b5b      	ldr	r3, [pc, #364]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d116      	bne.n	8006b3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b14:	e013      	b.n	8006b3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b16:	4b57      	ldr	r3, [pc, #348]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10f      	bne.n	8006b42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b22:	4b54      	ldr	r3, [pc, #336]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d109      	bne.n	8006b42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b32:	e006      	b.n	8006b42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	e004      	b.n	8006b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b3a:	bf00      	nop
 8006b3c:	e002      	b.n	8006b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b42:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10d      	bne.n	8006b66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6819      	ldr	r1, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	4944      	ldr	r1, [pc, #272]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d17d      	bne.n	8006c68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b6c:	4b41      	ldr	r3, [pc, #260]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a40      	ldr	r2, [pc, #256]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b78:	f7fb fe1c 	bl	80027b4 <HAL_GetTick>
 8006b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b7e:	e009      	b.n	8006b94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b80:	f7fb fe18 	bl	80027b4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d902      	bls.n	8006b94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	73fb      	strb	r3, [r7, #15]
        break;
 8006b92:	e005      	b.n	8006ba0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b94:	4b37      	ldr	r3, [pc, #220]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1ef      	bne.n	8006b80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d160      	bne.n	8006c68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d111      	bne.n	8006bd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bac:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6892      	ldr	r2, [r2, #8]
 8006bbc:	0211      	lsls	r1, r2, #8
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68d2      	ldr	r2, [r2, #12]
 8006bc2:	0912      	lsrs	r2, r2, #4
 8006bc4:	0452      	lsls	r2, r2, #17
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	492a      	ldr	r1, [pc, #168]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	610b      	str	r3, [r1, #16]
 8006bce:	e027      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d112      	bne.n	8006bfc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bd6:	4b27      	ldr	r3, [pc, #156]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006bde:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6892      	ldr	r2, [r2, #8]
 8006be6:	0211      	lsls	r1, r2, #8
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6912      	ldr	r2, [r2, #16]
 8006bec:	0852      	lsrs	r2, r2, #1
 8006bee:	3a01      	subs	r2, #1
 8006bf0:	0552      	lsls	r2, r2, #21
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	491f      	ldr	r1, [pc, #124]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	610b      	str	r3, [r1, #16]
 8006bfa:	e011      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6892      	ldr	r2, [r2, #8]
 8006c0c:	0211      	lsls	r1, r2, #8
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6952      	ldr	r2, [r2, #20]
 8006c12:	0852      	lsrs	r2, r2, #1
 8006c14:	3a01      	subs	r2, #1
 8006c16:	0652      	lsls	r2, r2, #25
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	4916      	ldr	r1, [pc, #88]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c20:	4b14      	ldr	r3, [pc, #80]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a13      	ldr	r2, [pc, #76]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2c:	f7fb fdc2 	bl	80027b4 <HAL_GetTick>
 8006c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c32:	e009      	b.n	8006c48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c34:	f7fb fdbe 	bl	80027b4 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d902      	bls.n	8006c48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	73fb      	strb	r3, [r7, #15]
          break;
 8006c46:	e005      	b.n	8006c54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c48:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ef      	beq.n	8006c34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c5a:	4b06      	ldr	r3, [pc, #24]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	4904      	ldr	r1, [pc, #16]	@ (8006c74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000

08006c78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c86:	4b6a      	ldr	r3, [pc, #424]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c92:	4b67      	ldr	r3, [pc, #412]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0203 	and.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d10d      	bne.n	8006cbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006caa:	4b61      	ldr	r3, [pc, #388]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d047      	beq.n	8006d4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e044      	b.n	8006d4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d018      	beq.n	8006cfe <RCCEx_PLLSAI2_Config+0x86>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d825      	bhi.n	8006d1c <RCCEx_PLLSAI2_Config+0xa4>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d002      	beq.n	8006cda <RCCEx_PLLSAI2_Config+0x62>
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d009      	beq.n	8006cec <RCCEx_PLLSAI2_Config+0x74>
 8006cd8:	e020      	b.n	8006d1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cda:	4b55      	ldr	r3, [pc, #340]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11d      	bne.n	8006d22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cea:	e01a      	b.n	8006d22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cec:	4b50      	ldr	r3, [pc, #320]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cfc:	e013      	b.n	8006d26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d0a:	4b49      	ldr	r3, [pc, #292]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d1a:	e006      	b.n	8006d2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e004      	b.n	8006d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d32:	4b3f      	ldr	r3, [pc, #252]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6819      	ldr	r1, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	430b      	orrs	r3, r1
 8006d48:	4939      	ldr	r1, [pc, #228]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d167      	bne.n	8006e24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d54:	4b36      	ldr	r3, [pc, #216]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a35      	ldr	r2, [pc, #212]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d60:	f7fb fd28 	bl	80027b4 <HAL_GetTick>
 8006d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d66:	e009      	b.n	8006d7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d68:	f7fb fd24 	bl	80027b4 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d902      	bls.n	8006d7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
        break;
 8006d7a:	e005      	b.n	8006d88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ef      	bne.n	8006d68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d14a      	bne.n	8006e24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d111      	bne.n	8006db8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d94:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6892      	ldr	r2, [r2, #8]
 8006da4:	0211      	lsls	r1, r2, #8
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68d2      	ldr	r2, [r2, #12]
 8006daa:	0912      	lsrs	r2, r2, #4
 8006dac:	0452      	lsls	r2, r2, #17
 8006dae:	430a      	orrs	r2, r1
 8006db0:	491f      	ldr	r1, [pc, #124]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	614b      	str	r3, [r1, #20]
 8006db6:	e011      	b.n	8006ddc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006db8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006dc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6892      	ldr	r2, [r2, #8]
 8006dc8:	0211      	lsls	r1, r2, #8
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6912      	ldr	r2, [r2, #16]
 8006dce:	0852      	lsrs	r2, r2, #1
 8006dd0:	3a01      	subs	r2, #1
 8006dd2:	0652      	lsls	r2, r2, #25
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	4916      	ldr	r1, [pc, #88]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ddc:	4b14      	ldr	r3, [pc, #80]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a13      	ldr	r2, [pc, #76]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de8:	f7fb fce4 	bl	80027b4 <HAL_GetTick>
 8006dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006dee:	e009      	b.n	8006e04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006df0:	f7fb fce0 	bl	80027b4 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d902      	bls.n	8006e04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	73fb      	strb	r3, [r7, #15]
          break;
 8006e02:	e005      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e04:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0ef      	beq.n	8006df0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	4904      	ldr	r1, [pc, #16]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40021000 	.word	0x40021000

08006e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e049      	b.n	8006eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d106      	bne.n	8006e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fb faea 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4619      	mov	r1, r3
 8006e72:	4610      	mov	r0, r2
 8006e74:	f000 f968 	bl	8007148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d001      	beq.n	8006efc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e047      	b.n	8006f8c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a23      	ldr	r2, [pc, #140]	@ (8006f98 <HAL_TIM_Base_Start+0xb4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d01d      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f16:	d018      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006f9c <HAL_TIM_Base_Start+0xb8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa0 <HAL_TIM_Base_Start+0xbc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa4 <HAL_TIM_Base_Start+0xc0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa8 <HAL_TIM_Base_Start+0xc4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_TIM_Base_Start+0x66>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a19      	ldr	r2, [pc, #100]	@ (8006fac <HAL_TIM_Base_Start+0xc8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d115      	bne.n	8006f76 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	4b17      	ldr	r3, [pc, #92]	@ (8006fb0 <HAL_TIM_Base_Start+0xcc>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d015      	beq.n	8006f88 <HAL_TIM_Base_Start+0xa4>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f62:	d011      	beq.n	8006f88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f74:	e008      	b.n	8006f88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e000      	b.n	8006f8a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40000400 	.word	0x40000400
 8006fa0:	40000800 	.word	0x40000800
 8006fa4:	40000c00 	.word	0x40000c00
 8006fa8:	40013400 	.word	0x40013400
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	00010007 	.word	0x00010007

08006fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0b6      	b.n	800713e <HAL_TIM_ConfigClockSource+0x18a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700c:	d03e      	beq.n	800708c <HAL_TIM_ConfigClockSource+0xd8>
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007012:	f200 8087 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x170>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701a:	f000 8086 	beq.w	800712a <HAL_TIM_ConfigClockSource+0x176>
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007022:	d87f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 8007024:	2b70      	cmp	r3, #112	@ 0x70
 8007026:	d01a      	beq.n	800705e <HAL_TIM_ConfigClockSource+0xaa>
 8007028:	2b70      	cmp	r3, #112	@ 0x70
 800702a:	d87b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 800702c:	2b60      	cmp	r3, #96	@ 0x60
 800702e:	d050      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x11e>
 8007030:	2b60      	cmp	r3, #96	@ 0x60
 8007032:	d877      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 8007034:	2b50      	cmp	r3, #80	@ 0x50
 8007036:	d03c      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0xfe>
 8007038:	2b50      	cmp	r3, #80	@ 0x50
 800703a:	d873      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 800703c:	2b40      	cmp	r3, #64	@ 0x40
 800703e:	d058      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x13e>
 8007040:	2b40      	cmp	r3, #64	@ 0x40
 8007042:	d86f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 8007044:	2b30      	cmp	r3, #48	@ 0x30
 8007046:	d064      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15e>
 8007048:	2b30      	cmp	r3, #48	@ 0x30
 800704a:	d86b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d060      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15e>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d867      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05c      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15e>
 8007058:	2b10      	cmp	r3, #16
 800705a:	d05a      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15e>
 800705c:	e062      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800706e:	f000 f98b 	bl	8007388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	609a      	str	r2, [r3, #8]
      break;
 800708a:	e04f      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800709c:	f000 f974 	bl	8007388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ae:	609a      	str	r2, [r3, #8]
      break;
 80070b0:	e03c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 f8e8 	bl	8007294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2150      	movs	r1, #80	@ 0x50
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f941 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 80070d0:	e02c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 f907 	bl	80072f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2160      	movs	r1, #96	@ 0x60
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f931 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 80070f0:	e01c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070fe:	461a      	mov	r2, r3
 8007100:	f000 f8c8 	bl	8007294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2140      	movs	r1, #64	@ 0x40
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f921 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 8007110:	e00c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f000 f918 	bl	8007352 <TIM_ITRx_SetConfig>
      break;
 8007122:	e003      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e000      	b.n	800712c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800712a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a46      	ldr	r2, [pc, #280]	@ (8007274 <TIM_Base_SetConfig+0x12c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007166:	d00f      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a43      	ldr	r2, [pc, #268]	@ (8007278 <TIM_Base_SetConfig+0x130>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00b      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a42      	ldr	r2, [pc, #264]	@ (800727c <TIM_Base_SetConfig+0x134>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d007      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a41      	ldr	r2, [pc, #260]	@ (8007280 <TIM_Base_SetConfig+0x138>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d003      	beq.n	8007188 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a40      	ldr	r2, [pc, #256]	@ (8007284 <TIM_Base_SetConfig+0x13c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d108      	bne.n	800719a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800718e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a35      	ldr	r2, [pc, #212]	@ (8007274 <TIM_Base_SetConfig+0x12c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01f      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a8:	d01b      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a32      	ldr	r2, [pc, #200]	@ (8007278 <TIM_Base_SetConfig+0x130>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d017      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a31      	ldr	r2, [pc, #196]	@ (800727c <TIM_Base_SetConfig+0x134>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a30      	ldr	r2, [pc, #192]	@ (8007280 <TIM_Base_SetConfig+0x138>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a2f      	ldr	r2, [pc, #188]	@ (8007284 <TIM_Base_SetConfig+0x13c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007288 <TIM_Base_SetConfig+0x140>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2d      	ldr	r2, [pc, #180]	@ (800728c <TIM_Base_SetConfig+0x144>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_Base_SetConfig+0x9a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007290 <TIM_Base_SetConfig+0x148>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d108      	bne.n	80071f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a16      	ldr	r2, [pc, #88]	@ (8007274 <TIM_Base_SetConfig+0x12c>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00f      	beq.n	8007240 <TIM_Base_SetConfig+0xf8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a18      	ldr	r2, [pc, #96]	@ (8007284 <TIM_Base_SetConfig+0x13c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_Base_SetConfig+0xf8>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a17      	ldr	r2, [pc, #92]	@ (8007288 <TIM_Base_SetConfig+0x140>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0xf8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a16      	ldr	r2, [pc, #88]	@ (800728c <TIM_Base_SetConfig+0x144>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0xf8>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <TIM_Base_SetConfig+0x148>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d105      	bne.n	8007266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	611a      	str	r2, [r3, #16]
  }
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40013400 	.word	0x40013400
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800

08007294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1b      	ldr	r3, [r3, #32]
 80072a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0201 	bic.w	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f023 030a 	bic.w	r3, r3, #10
 80072d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b087      	sub	sp, #28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f023 0210 	bic.w	r2, r3, #16
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800731c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	031b      	lsls	r3, r3, #12
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800732e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	f043 0307 	orr.w	r3, r3, #7
 8007374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	021a      	lsls	r2, r3, #8
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	609a      	str	r2, [r3, #8]
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e068      	b.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2e      	ldr	r2, [pc, #184]	@ (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a2d      	ldr	r2, [pc, #180]	@ (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d108      	bne.n	8007426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800741a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800742c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d01d      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007452:	d018      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1b      	ldr	r2, [pc, #108]	@ (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d013      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a1a      	ldr	r2, [pc, #104]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00e      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a18      	ldr	r2, [pc, #96]	@ (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d009      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a13      	ldr	r2, [pc, #76]	@ (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d004      	beq.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a14      	ldr	r2, [pc, #80]	@ (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d10c      	bne.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800748c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	4313      	orrs	r3, r2
 8007496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40012c00 	.word	0x40012c00
 80074c4:	40013400 	.word	0x40013400
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40000c00 	.word	0x40000c00
 80074d4:	40014000 	.word	0x40014000

080074d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e040      	b.n	800756c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7fa ffce 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2224      	movs	r2, #36	@ 0x24
 8007504:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fb6a 	bl	8007bf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8af 	bl	8007688 <UART_SetConfig>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e01b      	b.n	800756c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0201 	orr.w	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fbe9 	bl	8007d3c <UART_CheckIdleState>
 800756a:	4603      	mov	r3, r0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08a      	sub	sp, #40	@ 0x28
 8007578:	af02      	add	r7, sp, #8
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4613      	mov	r3, r2
 8007582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007588:	2b20      	cmp	r3, #32
 800758a:	d177      	bne.n	800767c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_UART_Transmit+0x24>
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e070      	b.n	800767e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2221      	movs	r2, #33	@ 0x21
 80075a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075aa:	f7fb f903 	bl	80027b4 <HAL_GetTick>
 80075ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	88fa      	ldrh	r2, [r7, #6]
 80075bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c8:	d108      	bne.n	80075dc <HAL_UART_Transmit+0x68>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e003      	b.n	80075e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075e4:	e02f      	b.n	8007646 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2180      	movs	r1, #128	@ 0x80
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fc4b 	bl	8007e8c <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e03b      	b.n	800767e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	881a      	ldrh	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007618:	b292      	uxth	r2, r2
 800761a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	3302      	adds	r3, #2
 8007620:	61bb      	str	r3, [r7, #24]
 8007622:	e007      	b.n	8007634 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	3301      	adds	r3, #1
 8007632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1c9      	bne.n	80075e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2200      	movs	r2, #0
 800765a:	2140      	movs	r1, #64	@ 0x40
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fc15 	bl	8007e8c <UART_WaitOnFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e005      	b.n	800767e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2220      	movs	r2, #32
 8007676:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800768c:	b08a      	sub	sp, #40	@ 0x28
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4ba4      	ldr	r3, [pc, #656]	@ (8007948 <UART_SetConfig+0x2c0>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a99      	ldr	r2, [pc, #612]	@ (800794c <UART_SetConfig+0x2c4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f0:	4313      	orrs	r3, r2
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a90      	ldr	r2, [pc, #576]	@ (8007950 <UART_SetConfig+0x2c8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d126      	bne.n	8007760 <UART_SetConfig+0xd8>
 8007712:	4b90      	ldr	r3, [pc, #576]	@ (8007954 <UART_SetConfig+0x2cc>)
 8007714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007718:	f003 0303 	and.w	r3, r3, #3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d81b      	bhi.n	8007758 <UART_SetConfig+0xd0>
 8007720:	a201      	add	r2, pc, #4	@ (adr r2, 8007728 <UART_SetConfig+0xa0>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007739 	.word	0x08007739
 800772c:	08007749 	.word	0x08007749
 8007730:	08007741 	.word	0x08007741
 8007734:	08007751 	.word	0x08007751
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773e:	e116      	b.n	800796e <UART_SetConfig+0x2e6>
 8007740:	2302      	movs	r3, #2
 8007742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007746:	e112      	b.n	800796e <UART_SetConfig+0x2e6>
 8007748:	2304      	movs	r3, #4
 800774a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774e:	e10e      	b.n	800796e <UART_SetConfig+0x2e6>
 8007750:	2308      	movs	r3, #8
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007756:	e10a      	b.n	800796e <UART_SetConfig+0x2e6>
 8007758:	2310      	movs	r3, #16
 800775a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775e:	e106      	b.n	800796e <UART_SetConfig+0x2e6>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a7c      	ldr	r2, [pc, #496]	@ (8007958 <UART_SetConfig+0x2d0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d138      	bne.n	80077dc <UART_SetConfig+0x154>
 800776a:	4b7a      	ldr	r3, [pc, #488]	@ (8007954 <UART_SetConfig+0x2cc>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b0c      	cmp	r3, #12
 8007776:	d82d      	bhi.n	80077d4 <UART_SetConfig+0x14c>
 8007778:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <UART_SetConfig+0xf8>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080077d5 	.word	0x080077d5
 8007788:	080077d5 	.word	0x080077d5
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077c5 	.word	0x080077c5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077d5 	.word	0x080077d5
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	080077d5 	.word	0x080077d5
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077cd 	.word	0x080077cd
 80077b4:	2300      	movs	r3, #0
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ba:	e0d8      	b.n	800796e <UART_SetConfig+0x2e6>
 80077bc:	2302      	movs	r3, #2
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077c2:	e0d4      	b.n	800796e <UART_SetConfig+0x2e6>
 80077c4:	2304      	movs	r3, #4
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ca:	e0d0      	b.n	800796e <UART_SetConfig+0x2e6>
 80077cc:	2308      	movs	r3, #8
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077d2:	e0cc      	b.n	800796e <UART_SetConfig+0x2e6>
 80077d4:	2310      	movs	r3, #16
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077da:	e0c8      	b.n	800796e <UART_SetConfig+0x2e6>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a5e      	ldr	r2, [pc, #376]	@ (800795c <UART_SetConfig+0x2d4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d125      	bne.n	8007832 <UART_SetConfig+0x1aa>
 80077e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007954 <UART_SetConfig+0x2cc>)
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077f0:	2b30      	cmp	r3, #48	@ 0x30
 80077f2:	d016      	beq.n	8007822 <UART_SetConfig+0x19a>
 80077f4:	2b30      	cmp	r3, #48	@ 0x30
 80077f6:	d818      	bhi.n	800782a <UART_SetConfig+0x1a2>
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d00a      	beq.n	8007812 <UART_SetConfig+0x18a>
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d814      	bhi.n	800782a <UART_SetConfig+0x1a2>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <UART_SetConfig+0x182>
 8007804:	2b10      	cmp	r3, #16
 8007806:	d008      	beq.n	800781a <UART_SetConfig+0x192>
 8007808:	e00f      	b.n	800782a <UART_SetConfig+0x1a2>
 800780a:	2300      	movs	r3, #0
 800780c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007810:	e0ad      	b.n	800796e <UART_SetConfig+0x2e6>
 8007812:	2302      	movs	r3, #2
 8007814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007818:	e0a9      	b.n	800796e <UART_SetConfig+0x2e6>
 800781a:	2304      	movs	r3, #4
 800781c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007820:	e0a5      	b.n	800796e <UART_SetConfig+0x2e6>
 8007822:	2308      	movs	r3, #8
 8007824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007828:	e0a1      	b.n	800796e <UART_SetConfig+0x2e6>
 800782a:	2310      	movs	r3, #16
 800782c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007830:	e09d      	b.n	800796e <UART_SetConfig+0x2e6>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a4a      	ldr	r2, [pc, #296]	@ (8007960 <UART_SetConfig+0x2d8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d125      	bne.n	8007888 <UART_SetConfig+0x200>
 800783c:	4b45      	ldr	r3, [pc, #276]	@ (8007954 <UART_SetConfig+0x2cc>)
 800783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007842:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007846:	2bc0      	cmp	r3, #192	@ 0xc0
 8007848:	d016      	beq.n	8007878 <UART_SetConfig+0x1f0>
 800784a:	2bc0      	cmp	r3, #192	@ 0xc0
 800784c:	d818      	bhi.n	8007880 <UART_SetConfig+0x1f8>
 800784e:	2b80      	cmp	r3, #128	@ 0x80
 8007850:	d00a      	beq.n	8007868 <UART_SetConfig+0x1e0>
 8007852:	2b80      	cmp	r3, #128	@ 0x80
 8007854:	d814      	bhi.n	8007880 <UART_SetConfig+0x1f8>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <UART_SetConfig+0x1d8>
 800785a:	2b40      	cmp	r3, #64	@ 0x40
 800785c:	d008      	beq.n	8007870 <UART_SetConfig+0x1e8>
 800785e:	e00f      	b.n	8007880 <UART_SetConfig+0x1f8>
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007866:	e082      	b.n	800796e <UART_SetConfig+0x2e6>
 8007868:	2302      	movs	r3, #2
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786e:	e07e      	b.n	800796e <UART_SetConfig+0x2e6>
 8007870:	2304      	movs	r3, #4
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007876:	e07a      	b.n	800796e <UART_SetConfig+0x2e6>
 8007878:	2308      	movs	r3, #8
 800787a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787e:	e076      	b.n	800796e <UART_SetConfig+0x2e6>
 8007880:	2310      	movs	r3, #16
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e072      	b.n	800796e <UART_SetConfig+0x2e6>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a35      	ldr	r2, [pc, #212]	@ (8007964 <UART_SetConfig+0x2dc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d12a      	bne.n	80078e8 <UART_SetConfig+0x260>
 8007892:	4b30      	ldr	r3, [pc, #192]	@ (8007954 <UART_SetConfig+0x2cc>)
 8007894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a0:	d01a      	beq.n	80078d8 <UART_SetConfig+0x250>
 80078a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a6:	d81b      	bhi.n	80078e0 <UART_SetConfig+0x258>
 80078a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078ac:	d00c      	beq.n	80078c8 <UART_SetConfig+0x240>
 80078ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b2:	d815      	bhi.n	80078e0 <UART_SetConfig+0x258>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <UART_SetConfig+0x238>
 80078b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078bc:	d008      	beq.n	80078d0 <UART_SetConfig+0x248>
 80078be:	e00f      	b.n	80078e0 <UART_SetConfig+0x258>
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078c6:	e052      	b.n	800796e <UART_SetConfig+0x2e6>
 80078c8:	2302      	movs	r3, #2
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ce:	e04e      	b.n	800796e <UART_SetConfig+0x2e6>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d6:	e04a      	b.n	800796e <UART_SetConfig+0x2e6>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078de:	e046      	b.n	800796e <UART_SetConfig+0x2e6>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e6:	e042      	b.n	800796e <UART_SetConfig+0x2e6>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a17      	ldr	r2, [pc, #92]	@ (800794c <UART_SetConfig+0x2c4>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d13a      	bne.n	8007968 <UART_SetConfig+0x2e0>
 80078f2:	4b18      	ldr	r3, [pc, #96]	@ (8007954 <UART_SetConfig+0x2cc>)
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007900:	d01a      	beq.n	8007938 <UART_SetConfig+0x2b0>
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007906:	d81b      	bhi.n	8007940 <UART_SetConfig+0x2b8>
 8007908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800790c:	d00c      	beq.n	8007928 <UART_SetConfig+0x2a0>
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007912:	d815      	bhi.n	8007940 <UART_SetConfig+0x2b8>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <UART_SetConfig+0x298>
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0x2a8>
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x2b8>
 8007920:	2300      	movs	r3, #0
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007926:	e022      	b.n	800796e <UART_SetConfig+0x2e6>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792e:	e01e      	b.n	800796e <UART_SetConfig+0x2e6>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007936:	e01a      	b.n	800796e <UART_SetConfig+0x2e6>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793e:	e016      	b.n	800796e <UART_SetConfig+0x2e6>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007946:	e012      	b.n	800796e <UART_SetConfig+0x2e6>
 8007948:	efff69f3 	.word	0xefff69f3
 800794c:	40008000 	.word	0x40008000
 8007950:	40013800 	.word	0x40013800
 8007954:	40021000 	.word	0x40021000
 8007958:	40004400 	.word	0x40004400
 800795c:	40004800 	.word	0x40004800
 8007960:	40004c00 	.word	0x40004c00
 8007964:	40005000 	.word	0x40005000
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a9f      	ldr	r2, [pc, #636]	@ (8007bf0 <UART_SetConfig+0x568>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d17a      	bne.n	8007a6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007978:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800797c:	2b08      	cmp	r3, #8
 800797e:	d824      	bhi.n	80079ca <UART_SetConfig+0x342>
 8007980:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <UART_SetConfig+0x300>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079cb 	.word	0x080079cb
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079cb 	.word	0x080079cb
 8007998:	080079bb 	.word	0x080079bb
 800799c:	080079cb 	.word	0x080079cb
 80079a0:	080079cb 	.word	0x080079cb
 80079a4:	080079cb 	.word	0x080079cb
 80079a8:	080079c3 	.word	0x080079c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ac:	f7fe fcfa 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
 80079b0:	61f8      	str	r0, [r7, #28]
        break;
 80079b2:	e010      	b.n	80079d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079b4:	4b8f      	ldr	r3, [pc, #572]	@ (8007bf4 <UART_SetConfig+0x56c>)
 80079b6:	61fb      	str	r3, [r7, #28]
        break;
 80079b8:	e00d      	b.n	80079d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ba:	f7fe fc5b 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 80079be:	61f8      	str	r0, [r7, #28]
        break;
 80079c0:	e009      	b.n	80079d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079c6:	61fb      	str	r3, [r7, #28]
        break;
 80079c8:	e005      	b.n	80079d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80fb 	beq.w	8007bd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d305      	bcc.n	80079fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d903      	bls.n	8007a02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a00:	e0e8      	b.n	8007bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2200      	movs	r2, #0
 8007a06:	461c      	mov	r4, r3
 8007a08:	4615      	mov	r5, r2
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	022b      	lsls	r3, r5, #8
 8007a14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a18:	0222      	lsls	r2, r4, #8
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	6849      	ldr	r1, [r1, #4]
 8007a1e:	0849      	lsrs	r1, r1, #1
 8007a20:	2000      	movs	r0, #0
 8007a22:	4688      	mov	r8, r1
 8007a24:	4681      	mov	r9, r0
 8007a26:	eb12 0a08 	adds.w	sl, r2, r8
 8007a2a:	eb43 0b09 	adc.w	fp, r3, r9
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	4650      	mov	r0, sl
 8007a3e:	4659      	mov	r1, fp
 8007a40:	f7f9 fbca 	bl	80011d8 <__aeabi_uldivmod>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4613      	mov	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a52:	d308      	bcc.n	8007a66 <UART_SetConfig+0x3de>
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a5a:	d204      	bcs.n	8007a66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	60da      	str	r2, [r3, #12]
 8007a64:	e0b6      	b.n	8007bd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a6c:	e0b2      	b.n	8007bd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a76:	d15e      	bne.n	8007b36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007a78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d828      	bhi.n	8007ad2 <UART_SetConfig+0x44a>
 8007a80:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <UART_SetConfig+0x400>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007abd 	.word	0x08007abd
 8007a94:	08007ad3 	.word	0x08007ad3
 8007a98:	08007ac3 	.word	0x08007ac3
 8007a9c:	08007ad3 	.word	0x08007ad3
 8007aa0:	08007ad3 	.word	0x08007ad3
 8007aa4:	08007ad3 	.word	0x08007ad3
 8007aa8:	08007acb 	.word	0x08007acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aac:	f7fe fc7a 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
 8007ab0:	61f8      	str	r0, [r7, #28]
        break;
 8007ab2:	e014      	b.n	8007ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab4:	f7fe fc8c 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 8007ab8:	61f8      	str	r0, [r7, #28]
        break;
 8007aba:	e010      	b.n	8007ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007abc:	4b4d      	ldr	r3, [pc, #308]	@ (8007bf4 <UART_SetConfig+0x56c>)
 8007abe:	61fb      	str	r3, [r7, #28]
        break;
 8007ac0:	e00d      	b.n	8007ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac2:	f7fe fbd7 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 8007ac6:	61f8      	str	r0, [r7, #28]
        break;
 8007ac8:	e009      	b.n	8007ade <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ace:	61fb      	str	r3, [r7, #28]
        break;
 8007ad0:	e005      	b.n	8007ade <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d077      	beq.n	8007bd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	005a      	lsls	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	085b      	lsrs	r3, r3, #1
 8007aee:	441a      	add	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2b0f      	cmp	r3, #15
 8007afe:	d916      	bls.n	8007b2e <UART_SetConfig+0x4a6>
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b06:	d212      	bcs.n	8007b2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f023 030f 	bic.w	r3, r3, #15
 8007b10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	8afb      	ldrh	r3, [r7, #22]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	8afa      	ldrh	r2, [r7, #22]
 8007b2a:	60da      	str	r2, [r3, #12]
 8007b2c:	e052      	b.n	8007bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b34:	e04e      	b.n	8007bd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d827      	bhi.n	8007b8e <UART_SetConfig+0x506>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <UART_SetConfig+0x4bc>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b69 	.word	0x08007b69
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b79 	.word	0x08007b79
 8007b50:	08007b8f 	.word	0x08007b8f
 8007b54:	08007b7f 	.word	0x08007b7f
 8007b58:	08007b8f 	.word	0x08007b8f
 8007b5c:	08007b8f 	.word	0x08007b8f
 8007b60:	08007b8f 	.word	0x08007b8f
 8007b64:	08007b87 	.word	0x08007b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b68:	f7fe fc1c 	bl	80063a4 <HAL_RCC_GetPCLK1Freq>
 8007b6c:	61f8      	str	r0, [r7, #28]
        break;
 8007b6e:	e014      	b.n	8007b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b70:	f7fe fc2e 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 8007b74:	61f8      	str	r0, [r7, #28]
        break;
 8007b76:	e010      	b.n	8007b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b78:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf4 <UART_SetConfig+0x56c>)
 8007b7a:	61fb      	str	r3, [r7, #28]
        break;
 8007b7c:	e00d      	b.n	8007b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b7e:	f7fe fb79 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 8007b82:	61f8      	str	r0, [r7, #28]
        break;
 8007b84:	e009      	b.n	8007b9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b8a:	61fb      	str	r3, [r7, #28]
        break;
 8007b8c:	e005      	b.n	8007b9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b98:	bf00      	nop
    }

    if (pclk != 0U)
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d019      	beq.n	8007bd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	085a      	lsrs	r2, r3, #1
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	441a      	add	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d909      	bls.n	8007bce <UART_SetConfig+0x546>
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc0:	d205      	bcs.n	8007bce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	e002      	b.n	8007bd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007be0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3728      	adds	r7, #40	@ 0x28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bee:	bf00      	nop
 8007bf0:	40008000 	.word	0x40008000
 8007bf4:	00f42400 	.word	0x00f42400

08007bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c48:	f003 0302 	and.w	r3, r3, #2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d01a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cf6:	d10a      	bne.n	8007d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b098      	sub	sp, #96	@ 0x60
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d4c:	f7fa fd32 	bl	80027b4 <HAL_GetTick>
 8007d50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d12e      	bne.n	8007dbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f88c 	bl	8007e8c <UART_WaitOnFlagUntilTimeout>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d021      	beq.n	8007dbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e6      	bne.n	8007d7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e062      	b.n	8007e84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d149      	bne.n	8007e60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f856 	bl	8007e8c <UART_WaitOnFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d03c      	beq.n	8007e60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	623b      	str	r3, [r7, #32]
   return(result);
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e6      	bne.n	8007de6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0301 	bic.w	r3, r3, #1
 8007e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e38:	61fa      	str	r2, [r7, #28]
 8007e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e5      	bne.n	8007e18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e011      	b.n	8007e84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3758      	adds	r7, #88	@ 0x58
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e9c:	e04f      	b.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d04b      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea6:	f7fa fc85 	bl	80027b4 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d302      	bcc.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e04e      	b.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d037      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b80      	cmp	r3, #128	@ 0x80
 8007ed2:	d034      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b40      	cmp	r3, #64	@ 0x40
 8007ed8:	d031      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	f003 0308 	and.w	r3, r3, #8
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d110      	bne.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2208      	movs	r2, #8
 8007eee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 f838 	bl	8007f66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e029      	b.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f18:	d111      	bne.n	8007f3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f000 f81e 	bl	8007f66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e00f      	b.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	69da      	ldr	r2, [r3, #28]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4013      	ands	r3, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	bf0c      	ite	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	2300      	movne	r3, #0
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d0a0      	beq.n	8007e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b095      	sub	sp, #84	@ 0x54
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f94:	e841 2300 	strex	r3, r2, [r1]
 8007f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1e6      	bne.n	8007f6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	e853 3f00 	ldrex	r3, [r3]
 8007fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f023 0301 	bic.w	r3, r3, #1
 8007fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e5      	bne.n	8007fa0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d118      	bne.n	800800e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f023 0310 	bic.w	r3, r3, #16
 8007ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6979      	ldr	r1, [r7, #20]
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	613b      	str	r3, [r7, #16]
   return(result);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e6      	bne.n	8007fdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008022:	bf00      	nop
 8008024:	3754      	adds	r7, #84	@ 0x54
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <arm_rfft_fast_init_f32>:
 8008030:	084b      	lsrs	r3, r1, #1
 8008032:	2b80      	cmp	r3, #128	@ 0x80
 8008034:	b410      	push	{r4}
 8008036:	8201      	strh	r1, [r0, #16]
 8008038:	8003      	strh	r3, [r0, #0]
 800803a:	d047      	beq.n	80080cc <arm_rfft_fast_init_f32+0x9c>
 800803c:	d917      	bls.n	800806e <arm_rfft_fast_init_f32+0x3e>
 800803e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008042:	d03d      	beq.n	80080c0 <arm_rfft_fast_init_f32+0x90>
 8008044:	d929      	bls.n	800809a <arm_rfft_fast_init_f32+0x6a>
 8008046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804a:	d020      	beq.n	800808e <arm_rfft_fast_init_f32+0x5e>
 800804c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008050:	d113      	bne.n	800807a <arm_rfft_fast_init_f32+0x4a>
 8008052:	4921      	ldr	r1, [pc, #132]	@ (80080d8 <arm_rfft_fast_init_f32+0xa8>)
 8008054:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <arm_rfft_fast_init_f32+0xac>)
 8008056:	4b22      	ldr	r3, [pc, #136]	@ (80080e0 <arm_rfft_fast_init_f32+0xb0>)
 8008058:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800805c:	8184      	strh	r4, [r0, #12]
 800805e:	6081      	str	r1, [r0, #8]
 8008060:	6042      	str	r2, [r0, #4]
 8008062:	6143      	str	r3, [r0, #20]
 8008064:	2000      	movs	r0, #0
 8008066:	b240      	sxtb	r0, r0
 8008068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	2b20      	cmp	r3, #32
 8008070:	d01c      	beq.n	80080ac <arm_rfft_fast_init_f32+0x7c>
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	d006      	beq.n	8008084 <arm_rfft_fast_init_f32+0x54>
 8008076:	2b10      	cmp	r3, #16
 8008078:	d01d      	beq.n	80080b6 <arm_rfft_fast_init_f32+0x86>
 800807a:	20ff      	movs	r0, #255	@ 0xff
 800807c:	b240      	sxtb	r0, r0
 800807e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	2438      	movs	r4, #56	@ 0x38
 8008086:	4917      	ldr	r1, [pc, #92]	@ (80080e4 <arm_rfft_fast_init_f32+0xb4>)
 8008088:	4a17      	ldr	r2, [pc, #92]	@ (80080e8 <arm_rfft_fast_init_f32+0xb8>)
 800808a:	4b18      	ldr	r3, [pc, #96]	@ (80080ec <arm_rfft_fast_init_f32+0xbc>)
 800808c:	e7e6      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 800808e:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8008092:	4917      	ldr	r1, [pc, #92]	@ (80080f0 <arm_rfft_fast_init_f32+0xc0>)
 8008094:	4a17      	ldr	r2, [pc, #92]	@ (80080f4 <arm_rfft_fast_init_f32+0xc4>)
 8008096:	4b18      	ldr	r3, [pc, #96]	@ (80080f8 <arm_rfft_fast_init_f32+0xc8>)
 8008098:	e7e0      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 800809a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809e:	d1ec      	bne.n	800807a <arm_rfft_fast_init_f32+0x4a>
 80080a0:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80080a4:	4915      	ldr	r1, [pc, #84]	@ (80080fc <arm_rfft_fast_init_f32+0xcc>)
 80080a6:	4a16      	ldr	r2, [pc, #88]	@ (8008100 <arm_rfft_fast_init_f32+0xd0>)
 80080a8:	4b16      	ldr	r3, [pc, #88]	@ (8008104 <arm_rfft_fast_init_f32+0xd4>)
 80080aa:	e7d7      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 80080ac:	2430      	movs	r4, #48	@ 0x30
 80080ae:	4916      	ldr	r1, [pc, #88]	@ (8008108 <arm_rfft_fast_init_f32+0xd8>)
 80080b0:	4a16      	ldr	r2, [pc, #88]	@ (800810c <arm_rfft_fast_init_f32+0xdc>)
 80080b2:	4b17      	ldr	r3, [pc, #92]	@ (8008110 <arm_rfft_fast_init_f32+0xe0>)
 80080b4:	e7d2      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 80080b6:	2414      	movs	r4, #20
 80080b8:	4916      	ldr	r1, [pc, #88]	@ (8008114 <arm_rfft_fast_init_f32+0xe4>)
 80080ba:	4a17      	ldr	r2, [pc, #92]	@ (8008118 <arm_rfft_fast_init_f32+0xe8>)
 80080bc:	4b17      	ldr	r3, [pc, #92]	@ (800811c <arm_rfft_fast_init_f32+0xec>)
 80080be:	e7cd      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 80080c0:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80080c4:	4916      	ldr	r1, [pc, #88]	@ (8008120 <arm_rfft_fast_init_f32+0xf0>)
 80080c6:	4a17      	ldr	r2, [pc, #92]	@ (8008124 <arm_rfft_fast_init_f32+0xf4>)
 80080c8:	4b17      	ldr	r3, [pc, #92]	@ (8008128 <arm_rfft_fast_init_f32+0xf8>)
 80080ca:	e7c7      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 80080cc:	24d0      	movs	r4, #208	@ 0xd0
 80080ce:	4917      	ldr	r1, [pc, #92]	@ (800812c <arm_rfft_fast_init_f32+0xfc>)
 80080d0:	4a17      	ldr	r2, [pc, #92]	@ (8008130 <arm_rfft_fast_init_f32+0x100>)
 80080d2:	4b18      	ldr	r3, [pc, #96]	@ (8008134 <arm_rfft_fast_init_f32+0x104>)
 80080d4:	e7c2      	b.n	800805c <arm_rfft_fast_init_f32+0x2c>
 80080d6:	bf00      	nop
 80080d8:	0801a3c8 	.word	0x0801a3c8
 80080dc:	0800b5c0 	.word	0x0800b5c0
 80080e0:	08011730 	.word	0x08011730
 80080e4:	0800f6c0 	.word	0x0800f6c0
 80080e8:	0801c188 	.word	0x0801c188
 80080ec:	0801e678 	.word	0x0801e678
 80080f0:	080180b0 	.word	0x080180b0
 80080f4:	08015fb0 	.word	0x08015fb0
 80080f8:	0800f730 	.word	0x0800f730
 80080fc:	0801e308 	.word	0x0801e308
 8008100:	08015730 	.word	0x08015730
 8008104:	0801c388 	.word	0x0801c388
 8008108:	08018f68 	.word	0x08018f68
 800810c:	08017fb0 	.word	0x08017fb0
 8008110:	0800f5c0 	.word	0x0800f5c0
 8008114:	08018ec0 	.word	0x08018ec0
 8008118:	08015f30 	.word	0x08015f30
 800811c:	08018ee8 	.word	0x08018ee8
 8008120:	0801cb88 	.word	0x0801cb88
 8008124:	080193c8 	.word	0x080193c8
 8008128:	0801cf08 	.word	0x0801cf08
 800812c:	0801e878 	.word	0x0801e878
 8008130:	08018fc8 	.word	0x08018fc8
 8008134:	0801df08 	.word	0x0801df08

08008138 <arm_rfft_fast_f32>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	b089      	sub	sp, #36	@ 0x24
 800813e:	460e      	mov	r6, r1
 8008140:	9205      	str	r2, [sp, #20]
 8008142:	8a02      	ldrh	r2, [r0, #16]
 8008144:	9006      	str	r0, [sp, #24]
 8008146:	0852      	lsrs	r2, r2, #1
 8008148:	8002      	strh	r2, [r0, #0]
 800814a:	9307      	str	r3, [sp, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 8097 	bne.w	8008280 <arm_rfft_fast_f32+0x148>
 8008152:	461a      	mov	r2, r3
 8008154:	2301      	movs	r3, #1
 8008156:	f000 fe35 	bl	8008dc4 <arm_cfft_f32>
 800815a:	9a06      	ldr	r2, [sp, #24]
 800815c:	6830      	ldr	r0, [r6, #0]
 800815e:	8813      	ldrh	r3, [r2, #0]
 8008160:	6954      	ldr	r4, [r2, #20]
 8008162:	3b01      	subs	r3, #1
 8008164:	4601      	mov	r1, r0
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	f7f8 fdde 	bl	8000d28 <__addsf3>
 800816c:	4605      	mov	r5, r0
 800816e:	6870      	ldr	r0, [r6, #4]
 8008170:	4601      	mov	r1, r0
 8008172:	f7f8 fdd9 	bl	8000d28 <__addsf3>
 8008176:	4607      	mov	r7, r0
 8008178:	4639      	mov	r1, r7
 800817a:	4628      	mov	r0, r5
 800817c:	f7f8 fdd4 	bl	8000d28 <__addsf3>
 8008180:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008184:	f7f8 fed8 	bl	8000f38 <__aeabi_fmul>
 8008188:	4639      	mov	r1, r7
 800818a:	9f05      	ldr	r7, [sp, #20]
 800818c:	6038      	str	r0, [r7, #0]
 800818e:	4628      	mov	r0, r5
 8008190:	f7f8 fdc8 	bl	8000d24 <__aeabi_fsub>
 8008194:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008198:	f7f8 fece 	bl	8000f38 <__aeabi_fmul>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80081a4:	f106 0210 	add.w	r2, r6, #16
 80081a8:	f1a3 0c08 	sub.w	ip, r3, #8
 80081ac:	f107 0510 	add.w	r5, r7, #16
 80081b0:	3410      	adds	r4, #16
 80081b2:	4666      	mov	r6, ip
 80081b4:	4617      	mov	r7, r2
 80081b6:	68f1      	ldr	r1, [r6, #12]
 80081b8:	68b2      	ldr	r2, [r6, #8]
 80081ba:	f857 3c08 	ldr.w	r3, [r7, #-8]
 80081be:	9206      	str	r2, [sp, #24]
 80081c0:	4688      	mov	r8, r1
 80081c2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80081c6:	9100      	str	r1, [sp, #0]
 80081c8:	4610      	mov	r0, r2
 80081ca:	4619      	mov	r1, r3
 80081cc:	9305      	str	r3, [sp, #20]
 80081ce:	f7f8 fda9 	bl	8000d24 <__aeabi_fsub>
 80081d2:	9900      	ldr	r1, [sp, #0]
 80081d4:	f8cd 8008 	str.w	r8, [sp, #8]
 80081d8:	4683      	mov	fp, r0
 80081da:	4640      	mov	r0, r8
 80081dc:	f7f8 fda4 	bl	8000d28 <__addsf3>
 80081e0:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80081e4:	f854 9c08 	ldr.w	r9, [r4, #-8]
 80081e8:	4680      	mov	r8, r0
 80081ea:	4641      	mov	r1, r8
 80081ec:	4650      	mov	r0, sl
 80081ee:	f7f8 fea3 	bl	8000f38 <__aeabi_fmul>
 80081f2:	4659      	mov	r1, fp
 80081f4:	9003      	str	r0, [sp, #12]
 80081f6:	4648      	mov	r0, r9
 80081f8:	f7f8 fe9e 	bl	8000f38 <__aeabi_fmul>
 80081fc:	9b05      	ldr	r3, [sp, #20]
 80081fe:	9a06      	ldr	r2, [sp, #24]
 8008200:	9004      	str	r0, [sp, #16]
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7f8 fd8f 	bl	8000d28 <__addsf3>
 800820a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800820e:	4601      	mov	r1, r0
 8008210:	4660      	mov	r0, ip
 8008212:	f7f8 fd89 	bl	8000d28 <__addsf3>
 8008216:	4601      	mov	r1, r0
 8008218:	9803      	ldr	r0, [sp, #12]
 800821a:	f7f8 fd85 	bl	8000d28 <__addsf3>
 800821e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008222:	f7f8 fe89 	bl	8000f38 <__aeabi_fmul>
 8008226:	4659      	mov	r1, fp
 8008228:	f845 0c08 	str.w	r0, [r5, #-8]
 800822c:	4650      	mov	r0, sl
 800822e:	f7f8 fe83 	bl	8000f38 <__aeabi_fmul>
 8008232:	9902      	ldr	r1, [sp, #8]
 8008234:	4682      	mov	sl, r0
 8008236:	9800      	ldr	r0, [sp, #0]
 8008238:	f7f8 fd74 	bl	8000d24 <__aeabi_fsub>
 800823c:	4601      	mov	r1, r0
 800823e:	4650      	mov	r0, sl
 8008240:	f7f8 fd72 	bl	8000d28 <__addsf3>
 8008244:	4641      	mov	r1, r8
 8008246:	4682      	mov	sl, r0
 8008248:	4648      	mov	r0, r9
 800824a:	f7f8 fe75 	bl	8000f38 <__aeabi_fmul>
 800824e:	4601      	mov	r1, r0
 8008250:	4650      	mov	r0, sl
 8008252:	f7f8 fd67 	bl	8000d24 <__aeabi_fsub>
 8008256:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800825a:	f7f8 fe6d 	bl	8000f38 <__aeabi_fmul>
 800825e:	9b01      	ldr	r3, [sp, #4]
 8008260:	f845 0c04 	str.w	r0, [r5, #-4]
 8008264:	3b01      	subs	r3, #1
 8008266:	f1a6 0608 	sub.w	r6, r6, #8
 800826a:	f107 0708 	add.w	r7, r7, #8
 800826e:	f104 0408 	add.w	r4, r4, #8
 8008272:	f105 0508 	add.w	r5, r5, #8
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	d19d      	bne.n	80081b6 <arm_rfft_fast_f32+0x7e>
 800827a:	b009      	add	sp, #36	@ 0x24
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	680d      	ldr	r5, [r1, #0]
 8008282:	684f      	ldr	r7, [r1, #4]
 8008284:	6944      	ldr	r4, [r0, #20]
 8008286:	1e53      	subs	r3, r2, #1
 8008288:	4639      	mov	r1, r7
 800828a:	4628      	mov	r0, r5
 800828c:	9302      	str	r3, [sp, #8]
 800828e:	f7f8 fd4b 	bl	8000d28 <__addsf3>
 8008292:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008296:	f7f8 fe4f 	bl	8000f38 <__aeabi_fmul>
 800829a:	4639      	mov	r1, r7
 800829c:	9f05      	ldr	r7, [sp, #20]
 800829e:	6038      	str	r0, [r7, #0]
 80082a0:	4628      	mov	r0, r5
 80082a2:	f7f8 fd3f 	bl	8000d24 <__aeabi_fsub>
 80082a6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80082aa:	f7f8 fe45 	bl	8000f38 <__aeabi_fmul>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	00dd      	lsls	r5, r3, #3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d06b      	beq.n	8008390 <arm_rfft_fast_f32+0x258>
 80082b8:	3d08      	subs	r5, #8
 80082ba:	f104 0310 	add.w	r3, r4, #16
 80082be:	4435      	add	r5, r6
 80082c0:	f106 0410 	add.w	r4, r6, #16
 80082c4:	f107 0610 	add.w	r6, r7, #16
 80082c8:	46b0      	mov	r8, r6
 80082ca:	461f      	mov	r7, r3
 80082cc:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80082d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80082d4:	68eb      	ldr	r3, [r5, #12]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	4661      	mov	r1, ip
 80082da:	4610      	mov	r0, r2
 80082dc:	f8cd c010 	str.w	ip, [sp, #16]
 80082e0:	9203      	str	r2, [sp, #12]
 80082e2:	f7f8 fd1f 	bl	8000d24 <__aeabi_fsub>
 80082e6:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80082ea:	f857 9c08 	ldr.w	r9, [r7, #-8]
 80082ee:	f857 bc04 	ldr.w	fp, [r7, #-4]
 80082f2:	4606      	mov	r6, r0
 80082f4:	4651      	mov	r1, sl
 80082f6:	9800      	ldr	r0, [sp, #0]
 80082f8:	f7f8 fd16 	bl	8000d28 <__addsf3>
 80082fc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008300:	9a03      	ldr	r2, [sp, #12]
 8008302:	9001      	str	r0, [sp, #4]
 8008304:	4611      	mov	r1, r2
 8008306:	4660      	mov	r0, ip
 8008308:	f7f8 fd0e 	bl	8000d28 <__addsf3>
 800830c:	4631      	mov	r1, r6
 800830e:	9003      	str	r0, [sp, #12]
 8008310:	4648      	mov	r0, r9
 8008312:	f7f8 fe11 	bl	8000f38 <__aeabi_fmul>
 8008316:	9a03      	ldr	r2, [sp, #12]
 8008318:	4601      	mov	r1, r0
 800831a:	4610      	mov	r0, r2
 800831c:	f7f8 fd02 	bl	8000d24 <__aeabi_fsub>
 8008320:	9901      	ldr	r1, [sp, #4]
 8008322:	9003      	str	r0, [sp, #12]
 8008324:	4658      	mov	r0, fp
 8008326:	f7f8 fe07 	bl	8000f38 <__aeabi_fmul>
 800832a:	9a03      	ldr	r2, [sp, #12]
 800832c:	4601      	mov	r1, r0
 800832e:	4610      	mov	r0, r2
 8008330:	f7f8 fcf8 	bl	8000d24 <__aeabi_fsub>
 8008334:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008338:	f7f8 fdfe 	bl	8000f38 <__aeabi_fmul>
 800833c:	4631      	mov	r1, r6
 800833e:	f848 0c08 	str.w	r0, [r8, #-8]
 8008342:	4658      	mov	r0, fp
 8008344:	f7f8 fdf8 	bl	8000f38 <__aeabi_fmul>
 8008348:	9900      	ldr	r1, [sp, #0]
 800834a:	4606      	mov	r6, r0
 800834c:	4650      	mov	r0, sl
 800834e:	f7f8 fce9 	bl	8000d24 <__aeabi_fsub>
 8008352:	4601      	mov	r1, r0
 8008354:	4630      	mov	r0, r6
 8008356:	f7f8 fce7 	bl	8000d28 <__addsf3>
 800835a:	9901      	ldr	r1, [sp, #4]
 800835c:	4606      	mov	r6, r0
 800835e:	4648      	mov	r0, r9
 8008360:	f7f8 fdea 	bl	8000f38 <__aeabi_fmul>
 8008364:	4601      	mov	r1, r0
 8008366:	4630      	mov	r0, r6
 8008368:	f7f8 fcdc 	bl	8000d24 <__aeabi_fsub>
 800836c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008370:	f7f8 fde2 	bl	8000f38 <__aeabi_fmul>
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	f848 0c04 	str.w	r0, [r8, #-4]
 800837a:	3b01      	subs	r3, #1
 800837c:	f1a5 0508 	sub.w	r5, r5, #8
 8008380:	f104 0408 	add.w	r4, r4, #8
 8008384:	f107 0708 	add.w	r7, r7, #8
 8008388:	f108 0808 	add.w	r8, r8, #8
 800838c:	9302      	str	r3, [sp, #8]
 800838e:	d19d      	bne.n	80082cc <arm_rfft_fast_f32+0x194>
 8008390:	9806      	ldr	r0, [sp, #24]
 8008392:	9905      	ldr	r1, [sp, #20]
 8008394:	9a07      	ldr	r2, [sp, #28]
 8008396:	2301      	movs	r3, #1
 8008398:	b009      	add	sp, #36	@ 0x24
 800839a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839e:	f000 bd11 	b.w	8008dc4 <arm_cfft_f32>
 80083a2:	bf00      	nop

080083a4 <arm_cfft_radix8by2_f32>:
 80083a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a8:	4602      	mov	r2, r0
 80083aa:	b093      	sub	sp, #76	@ 0x4c
 80083ac:	8813      	ldrh	r3, [r2, #0]
 80083ae:	900e      	str	r0, [sp, #56]	@ 0x38
 80083b0:	085c      	lsrs	r4, r3, #1
 80083b2:	4608      	mov	r0, r1
 80083b4:	9111      	str	r1, [sp, #68]	@ 0x44
 80083b6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80083ba:	08db      	lsrs	r3, r3, #3
 80083bc:	6852      	ldr	r2, [r2, #4]
 80083be:	9410      	str	r4, [sp, #64]	@ 0x40
 80083c0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083c4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80083c6:	f000 8137 	beq.w	8008638 <arm_cfft_radix8by2_f32+0x294>
 80083ca:	f10c 0c10 	add.w	ip, ip, #16
 80083ce:	eb00 070c 	add.w	r7, r0, ip
 80083d2:	f101 0910 	add.w	r9, r1, #16
 80083d6:	3210      	adds	r2, #16
 80083d8:	448c      	add	ip, r1
 80083da:	46ca      	mov	sl, r9
 80083dc:	9200      	str	r2, [sp, #0]
 80083de:	f100 0610 	add.w	r6, r0, #16
 80083e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083e4:	46e1      	mov	r9, ip
 80083e6:	46bb      	mov	fp, r7
 80083e8:	f85a cc10 	ldr.w	ip, [sl, #-16]
 80083ec:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 80083f0:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 80083f4:	f856 4c10 	ldr.w	r4, [r6, #-16]
 80083f8:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 80083fc:	f85b ec08 	ldr.w	lr, [fp, #-8]
 8008400:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8008404:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008406:	900c      	str	r0, [sp, #48]	@ 0x30
 8008408:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 800840c:	f859 0c08 	ldr.w	r0, [r9, #-8]
 8008410:	f856 8c08 	ldr.w	r8, [r6, #-8]
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	9203      	str	r2, [sp, #12]
 8008418:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800841c:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8008420:	f8cd e010 	str.w	lr, [sp, #16]
 8008424:	9107      	str	r1, [sp, #28]
 8008426:	f859 ec04 	ldr.w	lr, [r9, #-4]
 800842a:	9008      	str	r0, [sp, #32]
 800842c:	4661      	mov	r1, ip
 800842e:	4620      	mov	r0, r4
 8008430:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	9206      	str	r2, [sp, #24]
 8008438:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800843c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008440:	f7f8 fc72 	bl	8000d28 <__addsf3>
 8008444:	f85a 7c0c 	ldr.w	r7, [sl, #-12]
 8008448:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800844c:	f846 0c10 	str.w	r0, [r6, #-16]
 8008450:	4639      	mov	r1, r7
 8008452:	9801      	ldr	r0, [sp, #4]
 8008454:	f856 8c04 	ldr.w	r8, [r6, #-4]
 8008458:	f7f8 fc66 	bl	8000d28 <__addsf3>
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	f846 0c0c 	str.w	r0, [r6, #-12]
 8008462:	9802      	ldr	r0, [sp, #8]
 8008464:	f7f8 fc60 	bl	8000d28 <__addsf3>
 8008468:	4629      	mov	r1, r5
 800846a:	f846 0c08 	str.w	r0, [r6, #-8]
 800846e:	4640      	mov	r0, r8
 8008470:	f7f8 fc5a 	bl	8000d28 <__addsf3>
 8008474:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8008478:	f846 0c04 	str.w	r0, [r6, #-4]
 800847c:	4661      	mov	r1, ip
 800847e:	4620      	mov	r0, r4
 8008480:	f7f8 fc50 	bl	8000d24 <__aeabi_fsub>
 8008484:	4639      	mov	r1, r7
 8008486:	4604      	mov	r4, r0
 8008488:	9801      	ldr	r0, [sp, #4]
 800848a:	f7f8 fc4b 	bl	8000d24 <__aeabi_fsub>
 800848e:	9903      	ldr	r1, [sp, #12]
 8008490:	4607      	mov	r7, r0
 8008492:	9802      	ldr	r0, [sp, #8]
 8008494:	f7f8 fc46 	bl	8000d24 <__aeabi_fsub>
 8008498:	4629      	mov	r1, r5
 800849a:	9001      	str	r0, [sp, #4]
 800849c:	4640      	mov	r0, r8
 800849e:	f7f8 fc41 	bl	8000d24 <__aeabi_fsub>
 80084a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80084a4:	900d      	str	r0, [sp, #52]	@ 0x34
 80084a6:	9906      	ldr	r1, [sp, #24]
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7f8 fc3d 	bl	8000d28 <__addsf3>
 80084ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80084b2:	9907      	ldr	r1, [sp, #28]
 80084b4:	f84b 0c10 	str.w	r0, [fp, #-16]
 80084b8:	4640      	mov	r0, r8
 80084ba:	f7f8 fc35 	bl	8000d28 <__addsf3>
 80084be:	9908      	ldr	r1, [sp, #32]
 80084c0:	f84b 0c0c 	str.w	r0, [fp, #-12]
 80084c4:	9804      	ldr	r0, [sp, #16]
 80084c6:	f7f8 fc2f 	bl	8000d28 <__addsf3>
 80084ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084cc:	f84b 0c08 	str.w	r0, [fp, #-8]
 80084d0:	9805      	ldr	r0, [sp, #20]
 80084d2:	f7f8 fc29 	bl	8000d28 <__addsf3>
 80084d6:	4629      	mov	r1, r5
 80084d8:	f84b 0c04 	str.w	r0, [fp, #-4]
 80084dc:	9806      	ldr	r0, [sp, #24]
 80084de:	f7f8 fc21 	bl	8000d24 <__aeabi_fsub>
 80084e2:	4641      	mov	r1, r8
 80084e4:	9002      	str	r0, [sp, #8]
 80084e6:	9807      	ldr	r0, [sp, #28]
 80084e8:	f7f8 fc1c 	bl	8000d24 <__aeabi_fsub>
 80084ec:	9904      	ldr	r1, [sp, #16]
 80084ee:	9006      	str	r0, [sp, #24]
 80084f0:	9808      	ldr	r0, [sp, #32]
 80084f2:	f7f8 fc17 	bl	8000d24 <__aeabi_fsub>
 80084f6:	9905      	ldr	r1, [sp, #20]
 80084f8:	9003      	str	r0, [sp, #12]
 80084fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084fc:	f7f8 fc12 	bl	8000d24 <__aeabi_fsub>
 8008500:	9a00      	ldr	r2, [sp, #0]
 8008502:	9004      	str	r0, [sp, #16]
 8008504:	f852 5c10 	ldr.w	r5, [r2, #-16]
 8008508:	f852 8c0c 	ldr.w	r8, [r2, #-12]
 800850c:	4629      	mov	r1, r5
 800850e:	4620      	mov	r0, r4
 8008510:	f7f8 fd12 	bl	8000f38 <__aeabi_fmul>
 8008514:	4641      	mov	r1, r8
 8008516:	9005      	str	r0, [sp, #20]
 8008518:	4638      	mov	r0, r7
 800851a:	f7f8 fd0d 	bl	8000f38 <__aeabi_fmul>
 800851e:	9b05      	ldr	r3, [sp, #20]
 8008520:	4601      	mov	r1, r0
 8008522:	4618      	mov	r0, r3
 8008524:	f7f8 fc00 	bl	8000d28 <__addsf3>
 8008528:	4629      	mov	r1, r5
 800852a:	f84a 0c10 	str.w	r0, [sl, #-16]
 800852e:	4638      	mov	r0, r7
 8008530:	f7f8 fd02 	bl	8000f38 <__aeabi_fmul>
 8008534:	4641      	mov	r1, r8
 8008536:	4607      	mov	r7, r0
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcfd 	bl	8000f38 <__aeabi_fmul>
 800853e:	4601      	mov	r1, r0
 8008540:	4638      	mov	r0, r7
 8008542:	f7f8 fbef 	bl	8000d24 <__aeabi_fsub>
 8008546:	4641      	mov	r1, r8
 8008548:	f84a 0c0c 	str.w	r0, [sl, #-12]
 800854c:	9802      	ldr	r0, [sp, #8]
 800854e:	f7f8 fcf3 	bl	8000f38 <__aeabi_fmul>
 8008552:	9f06      	ldr	r7, [sp, #24]
 8008554:	4604      	mov	r4, r0
 8008556:	4629      	mov	r1, r5
 8008558:	4638      	mov	r0, r7
 800855a:	f7f8 fced 	bl	8000f38 <__aeabi_fmul>
 800855e:	4601      	mov	r1, r0
 8008560:	4620      	mov	r0, r4
 8008562:	f7f8 fbdf 	bl	8000d24 <__aeabi_fsub>
 8008566:	4641      	mov	r1, r8
 8008568:	f849 0c10 	str.w	r0, [r9, #-16]
 800856c:	4638      	mov	r0, r7
 800856e:	f7f8 fce3 	bl	8000f38 <__aeabi_fmul>
 8008572:	4629      	mov	r1, r5
 8008574:	4604      	mov	r4, r0
 8008576:	9802      	ldr	r0, [sp, #8]
 8008578:	f7f8 fcde 	bl	8000f38 <__aeabi_fmul>
 800857c:	4601      	mov	r1, r0
 800857e:	4620      	mov	r0, r4
 8008580:	f7f8 fbd2 	bl	8000d28 <__addsf3>
 8008584:	9a00      	ldr	r2, [sp, #0]
 8008586:	f849 0c0c 	str.w	r0, [r9, #-12]
 800858a:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800858e:	9801      	ldr	r0, [sp, #4]
 8008590:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008594:	4621      	mov	r1, r4
 8008596:	f7f8 fccf 	bl	8000f38 <__aeabi_fmul>
 800859a:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800859e:	4607      	mov	r7, r0
 80085a0:	4629      	mov	r1, r5
 80085a2:	4640      	mov	r0, r8
 80085a4:	f7f8 fcc8 	bl	8000f38 <__aeabi_fmul>
 80085a8:	4601      	mov	r1, r0
 80085aa:	4638      	mov	r0, r7
 80085ac:	f7f8 fbbc 	bl	8000d28 <__addsf3>
 80085b0:	4621      	mov	r1, r4
 80085b2:	f84a 0c08 	str.w	r0, [sl, #-8]
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7f8 fcbe 	bl	8000f38 <__aeabi_fmul>
 80085bc:	4629      	mov	r1, r5
 80085be:	4607      	mov	r7, r0
 80085c0:	9801      	ldr	r0, [sp, #4]
 80085c2:	f7f8 fcb9 	bl	8000f38 <__aeabi_fmul>
 80085c6:	4601      	mov	r1, r0
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7f8 fbab 	bl	8000d24 <__aeabi_fsub>
 80085ce:	4629      	mov	r1, r5
 80085d0:	f84a 0c04 	str.w	r0, [sl, #-4]
 80085d4:	9803      	ldr	r0, [sp, #12]
 80085d6:	f7f8 fcaf 	bl	8000f38 <__aeabi_fmul>
 80085da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80085de:	4607      	mov	r7, r0
 80085e0:	4621      	mov	r1, r4
 80085e2:	4640      	mov	r0, r8
 80085e4:	f7f8 fca8 	bl	8000f38 <__aeabi_fmul>
 80085e8:	4601      	mov	r1, r0
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7f8 fb9a 	bl	8000d24 <__aeabi_fsub>
 80085f0:	4629      	mov	r1, r5
 80085f2:	f849 0c08 	str.w	r0, [r9, #-8]
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7f8 fc9e 	bl	8000f38 <__aeabi_fmul>
 80085fc:	4621      	mov	r1, r4
 80085fe:	4605      	mov	r5, r0
 8008600:	9803      	ldr	r0, [sp, #12]
 8008602:	f7f8 fc99 	bl	8000f38 <__aeabi_fmul>
 8008606:	4601      	mov	r1, r0
 8008608:	4628      	mov	r0, r5
 800860a:	f7f8 fb8d 	bl	8000d28 <__addsf3>
 800860e:	9b00      	ldr	r3, [sp, #0]
 8008610:	f849 0c04 	str.w	r0, [r9, #-4]
 8008614:	3310      	adds	r3, #16
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800861a:	3b01      	subs	r3, #1
 800861c:	f106 0610 	add.w	r6, r6, #16
 8008620:	f10b 0b10 	add.w	fp, fp, #16
 8008624:	f10a 0a10 	add.w	sl, sl, #16
 8008628:	f109 0910 	add.w	r9, r9, #16
 800862c:	930a      	str	r3, [sp, #40]	@ 0x28
 800862e:	f47f aedb 	bne.w	80083e8 <arm_cfft_radix8by2_f32+0x44>
 8008632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008634:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 800863c:	2302      	movs	r3, #2
 800863e:	4621      	mov	r1, r4
 8008640:	f000 fc3e 	bl	8008ec0 <arm_radix8_butterfly_f32>
 8008644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008646:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	4621      	mov	r1, r4
 800864c:	2302      	movs	r3, #2
 800864e:	b013      	add	sp, #76	@ 0x4c
 8008650:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008654:	f000 bc34 	b.w	8008ec0 <arm_radix8_butterfly_f32>

08008658 <arm_cfft_radix8by4_f32>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	8804      	ldrh	r4, [r0, #0]
 800865e:	6843      	ldr	r3, [r0, #4]
 8008660:	680e      	ldr	r6, [r1, #0]
 8008662:	b0a7      	sub	sp, #156	@ 0x9c
 8008664:	0864      	lsrs	r4, r4, #1
 8008666:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800866a:	9302      	str	r3, [sp, #8]
 800866c:	eb01 0309 	add.w	r3, r1, r9
 8008670:	461f      	mov	r7, r3
 8008672:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8008676:	9025      	str	r0, [sp, #148]	@ 0x94
 8008678:	911a      	str	r1, [sp, #104]	@ 0x68
 800867a:	9318      	str	r3, [sp, #96]	@ 0x60
 800867c:	4629      	mov	r1, r5
 800867e:	444b      	add	r3, r9
 8008680:	4630      	mov	r0, r6
 8008682:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008684:	f7f8 fb50 	bl	8000d28 <__addsf3>
 8008688:	4629      	mov	r1, r5
 800868a:	4683      	mov	fp, r0
 800868c:	4630      	mov	r0, r6
 800868e:	f7f8 fb49 	bl	8000d24 <__aeabi_fsub>
 8008692:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008694:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008696:	6855      	ldr	r5, [r2, #4]
 8008698:	684e      	ldr	r6, [r1, #4]
 800869a:	9000      	str	r0, [sp, #0]
 800869c:	4629      	mov	r1, r5
 800869e:	4630      	mov	r0, r6
 80086a0:	f7f8 fb42 	bl	8000d28 <__addsf3>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4682      	mov	sl, r0
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7f8 fb3b 	bl	8000d24 <__aeabi_fsub>
 80086ae:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80086b0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80086b2:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80086b6:	9001      	str	r0, [sp, #4]
 80086b8:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 80086bc:	9718      	str	r7, [sp, #96]	@ 0x60
 80086be:	4631      	mov	r1, r6
 80086c0:	4658      	mov	r0, fp
 80086c2:	f7f8 fb31 	bl	8000d28 <__addsf3>
 80086c6:	4601      	mov	r1, r0
 80086c8:	4628      	mov	r0, r5
 80086ca:	f7f8 fb2d 	bl	8000d28 <__addsf3>
 80086ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80086d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086d2:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80086d6:	468e      	mov	lr, r1
 80086d8:	eb02 0709 	add.w	r7, r2, r9
 80086dc:	9719      	str	r7, [sp, #100]	@ 0x64
 80086de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80086e0:	687f      	ldr	r7, [r7, #4]
 80086e2:	f84e 0b08 	str.w	r0, [lr], #8
 80086e6:	4650      	mov	r0, sl
 80086e8:	6851      	ldr	r1, [r2, #4]
 80086ea:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
 80086ee:	f7f8 fb1b 	bl	8000d28 <__addsf3>
 80086f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086f4:	6859      	ldr	r1, [r3, #4]
 80086f6:	f7f8 fb17 	bl	8000d28 <__addsf3>
 80086fa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80086fc:	9900      	ldr	r1, [sp, #0]
 80086fe:	6058      	str	r0, [r3, #4]
 8008700:	4640      	mov	r0, r8
 8008702:	f7f8 fb11 	bl	8000d28 <__addsf3>
 8008706:	4639      	mov	r1, r7
 8008708:	f7f8 fb0c 	bl	8000d24 <__aeabi_fsub>
 800870c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800870e:	4631      	mov	r1, r6
 8008710:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008714:	9801      	ldr	r0, [sp, #4]
 8008716:	f7f8 fb05 	bl	8000d24 <__aeabi_fsub>
 800871a:	4629      	mov	r1, r5
 800871c:	f7f8 fb04 	bl	8000d28 <__addsf3>
 8008720:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008722:	4631      	mov	r1, r6
 8008724:	6058      	str	r0, [r3, #4]
 8008726:	4658      	mov	r0, fp
 8008728:	f7f8 fafc 	bl	8000d24 <__aeabi_fsub>
 800872c:	4629      	mov	r1, r5
 800872e:	f7f8 faf9 	bl	8000d24 <__aeabi_fsub>
 8008732:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008734:	4641      	mov	r1, r8
 8008736:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800873a:	4650      	mov	r0, sl
 800873c:	f7f8 faf2 	bl	8000d24 <__aeabi_fsub>
 8008740:	4639      	mov	r1, r7
 8008742:	f7f8 faef 	bl	8000d24 <__aeabi_fsub>
 8008746:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008748:	4641      	mov	r1, r8
 800874a:	6058      	str	r0, [r3, #4]
 800874c:	9800      	ldr	r0, [sp, #0]
 800874e:	f7f8 fae9 	bl	8000d24 <__aeabi_fsub>
 8008752:	4601      	mov	r1, r0
 8008754:	4638      	mov	r0, r7
 8008756:	f7f8 fae7 	bl	8000d28 <__addsf3>
 800875a:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 800875c:	4631      	mov	r1, r6
 800875e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8008762:	9801      	ldr	r0, [sp, #4]
 8008764:	f7f8 fae0 	bl	8000d28 <__addsf3>
 8008768:	4629      	mov	r1, r5
 800876a:	f7f8 fadb 	bl	8000d24 <__aeabi_fsub>
 800876e:	0866      	lsrs	r6, r4, #1
 8008770:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	9624      	str	r6, [sp, #144]	@ 0x90
 8008776:	1eb1      	subs	r1, r6, #2
 8008778:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800877a:	f104 0208 	add.w	r2, r4, #8
 800877e:	6070      	str	r0, [r6, #4]
 8008780:	921e      	str	r2, [sp, #120]	@ 0x78
 8008782:	4630      	mov	r0, r6
 8008784:	f103 0208 	add.w	r2, r3, #8
 8008788:	3008      	adds	r0, #8
 800878a:	9220      	str	r2, [sp, #128]	@ 0x80
 800878c:	f103 0210 	add.w	r2, r3, #16
 8008790:	4635      	mov	r5, r6
 8008792:	901c      	str	r0, [sp, #112]	@ 0x70
 8008794:	463e      	mov	r6, r7
 8008796:	4638      	mov	r0, r7
 8008798:	9221      	str	r2, [sp, #132]	@ 0x84
 800879a:	4617      	mov	r7, r2
 800879c:	f103 0218 	add.w	r2, r3, #24
 80087a0:	3008      	adds	r0, #8
 80087a2:	9222      	str	r2, [sp, #136]	@ 0x88
 80087a4:	084a      	lsrs	r2, r1, #1
 80087a6:	901f      	str	r0, [sp, #124]	@ 0x7c
 80087a8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80087aa:	f000 821d 	beq.w	8008be8 <arm_cfft_radix8by4_f32+0x590>
 80087ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087b0:	9706      	str	r7, [sp, #24]
 80087b2:	3110      	adds	r1, #16
 80087b4:	4694      	mov	ip, r2
 80087b6:	4628      	mov	r0, r5
 80087b8:	f1a9 020c 	sub.w	r2, r9, #12
 80087bc:	9102      	str	r1, [sp, #8]
 80087be:	f103 0120 	add.w	r1, r3, #32
 80087c2:	3330      	adds	r3, #48	@ 0x30
 80087c4:	4410      	add	r0, r2
 80087c6:	9304      	str	r3, [sp, #16]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f106 0310 	add.w	r3, r6, #16
 80087ce:	f104 0910 	add.w	r9, r4, #16
 80087d2:	f1a6 0b0c 	sub.w	fp, r6, #12
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	f105 0810 	add.w	r8, r5, #16
 80087dc:	4613      	mov	r3, r2
 80087de:	46ca      	mov	sl, r9
 80087e0:	4662      	mov	r2, ip
 80087e2:	9003      	str	r0, [sp, #12]
 80087e4:	9105      	str	r1, [sp, #20]
 80087e6:	46d9      	mov	r9, fp
 80087e8:	f8cd 8000 	str.w	r8, [sp]
 80087ec:	469c      	mov	ip, r3
 80087ee:	9e02      	ldr	r6, [sp, #8]
 80087f0:	9f01      	ldr	r7, [sp, #4]
 80087f2:	f856 5c08 	ldr.w	r5, [r6, #-8]
 80087f6:	f857 4c08 	ldr.w	r4, [r7, #-8]
 80087fa:	9217      	str	r2, [sp, #92]	@ 0x5c
 80087fc:	4621      	mov	r1, r4
 80087fe:	4628      	mov	r0, r5
 8008800:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8008804:	f7f8 fa90 	bl	8000d28 <__addsf3>
 8008808:	4621      	mov	r1, r4
 800880a:	4680      	mov	r8, r0
 800880c:	4628      	mov	r0, r5
 800880e:	f7f8 fa89 	bl	8000d24 <__aeabi_fsub>
 8008812:	f856 5c04 	ldr.w	r5, [r6, #-4]
 8008816:	f857 4c04 	ldr.w	r4, [r7, #-4]
 800881a:	9007      	str	r0, [sp, #28]
 800881c:	4621      	mov	r1, r4
 800881e:	4628      	mov	r0, r5
 8008820:	9602      	str	r6, [sp, #8]
 8008822:	9701      	str	r7, [sp, #4]
 8008824:	f7f8 fa80 	bl	8000d28 <__addsf3>
 8008828:	4621      	mov	r1, r4
 800882a:	4607      	mov	r7, r0
 800882c:	4628      	mov	r0, r5
 800882e:	f7f8 fa79 	bl	8000d24 <__aeabi_fsub>
 8008832:	9c00      	ldr	r4, [sp, #0]
 8008834:	f85a bc04 	ldr.w	fp, [sl, #-4]
 8008838:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800883c:	9907      	ldr	r1, [sp, #28]
 800883e:	9008      	str	r0, [sp, #32]
 8008840:	4658      	mov	r0, fp
 8008842:	f7f8 fa71 	bl	8000d28 <__addsf3>
 8008846:	4631      	mov	r1, r6
 8008848:	f7f8 fa6c 	bl	8000d24 <__aeabi_fsub>
 800884c:	f85a 5c08 	ldr.w	r5, [sl, #-8]
 8008850:	9400      	str	r4, [sp, #0]
 8008852:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8008856:	9009      	str	r0, [sp, #36]	@ 0x24
 8008858:	4629      	mov	r1, r5
 800885a:	9808      	ldr	r0, [sp, #32]
 800885c:	f7f8 fa62 	bl	8000d24 <__aeabi_fsub>
 8008860:	4621      	mov	r1, r4
 8008862:	f7f8 fa61 	bl	8000d28 <__addsf3>
 8008866:	4629      	mov	r1, r5
 8008868:	9010      	str	r0, [sp, #64]	@ 0x40
 800886a:	4640      	mov	r0, r8
 800886c:	f7f8 fa5a 	bl	8000d24 <__aeabi_fsub>
 8008870:	4621      	mov	r1, r4
 8008872:	f7f8 fa57 	bl	8000d24 <__aeabi_fsub>
 8008876:	4659      	mov	r1, fp
 8008878:	900a      	str	r0, [sp, #40]	@ 0x28
 800887a:	4638      	mov	r0, r7
 800887c:	f7f8 fa52 	bl	8000d24 <__aeabi_fsub>
 8008880:	4631      	mov	r1, r6
 8008882:	f7f8 fa4f 	bl	8000d24 <__aeabi_fsub>
 8008886:	4659      	mov	r1, fp
 8008888:	9011      	str	r0, [sp, #68]	@ 0x44
 800888a:	9807      	ldr	r0, [sp, #28]
 800888c:	f7f8 fa4a 	bl	8000d24 <__aeabi_fsub>
 8008890:	4601      	mov	r1, r0
 8008892:	4630      	mov	r0, r6
 8008894:	f7f8 fa48 	bl	8000d28 <__addsf3>
 8008898:	4629      	mov	r1, r5
 800889a:	9007      	str	r0, [sp, #28]
 800889c:	9808      	ldr	r0, [sp, #32]
 800889e:	f7f8 fa43 	bl	8000d28 <__addsf3>
 80088a2:	4621      	mov	r1, r4
 80088a4:	f7f8 fa3e 	bl	8000d24 <__aeabi_fsub>
 80088a8:	4629      	mov	r1, r5
 80088aa:	9012      	str	r0, [sp, #72]	@ 0x48
 80088ac:	4640      	mov	r0, r8
 80088ae:	f7f8 fa3b 	bl	8000d28 <__addsf3>
 80088b2:	4601      	mov	r1, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7f8 fa37 	bl	8000d28 <__addsf3>
 80088ba:	9d02      	ldr	r5, [sp, #8]
 80088bc:	f845 0c08 	str.w	r0, [r5, #-8]
 80088c0:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7f8 fa2f 	bl	8000d28 <__addsf3>
 80088ca:	9900      	ldr	r1, [sp, #0]
 80088cc:	f851 1c04 	ldr.w	r1, [r1, #-4]
 80088d0:	f7f8 fa2a 	bl	8000d28 <__addsf3>
 80088d4:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 80088d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80088da:	f845 0c04 	str.w	r0, [r5, #-4]
 80088de:	eb03 040c 	add.w	r4, r3, ip
 80088e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e4:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80088e8:	9502      	str	r5, [sp, #8]
 80088ea:	4463      	add	r3, ip
 80088ec:	461f      	mov	r7, r3
 80088ee:	4630      	mov	r0, r6
 80088f0:	f857 5c08 	ldr.w	r5, [r7, #-8]
 80088f4:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f8 fa15 	bl	8000d28 <__addsf3>
 80088fe:	4629      	mov	r1, r5
 8008900:	9008      	str	r0, [sp, #32]
 8008902:	4630      	mov	r0, r6
 8008904:	f7f8 fa0e 	bl	8000d24 <__aeabi_fsub>
 8008908:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800890c:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8008910:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008912:	4683      	mov	fp, r0
 8008914:	4629      	mov	r1, r5
 8008916:	4630      	mov	r0, r6
 8008918:	f7f8 fa06 	bl	8000d28 <__addsf3>
 800891c:	4629      	mov	r1, r5
 800891e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008920:	4630      	mov	r0, r6
 8008922:	f7f8 f9ff 	bl	8000d24 <__aeabi_fsub>
 8008926:	9e03      	ldr	r6, [sp, #12]
 8008928:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800892c:	68b5      	ldr	r5, [r6, #8]
 800892e:	900c      	str	r0, [sp, #48]	@ 0x30
 8008930:	4629      	mov	r1, r5
 8008932:	4638      	mov	r0, r7
 8008934:	f7f8 f9f6 	bl	8000d24 <__aeabi_fsub>
 8008938:	4659      	mov	r1, fp
 800893a:	9015      	str	r0, [sp, #84]	@ 0x54
 800893c:	f7f8 f9f4 	bl	8000d28 <__addsf3>
 8008940:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8008944:	9603      	str	r6, [sp, #12]
 8008946:	6876      	ldr	r6, [r6, #4]
 8008948:	9013      	str	r0, [sp, #76]	@ 0x4c
 800894a:	4641      	mov	r1, r8
 800894c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800894e:	f7f8 f9e9 	bl	8000d24 <__aeabi_fsub>
 8008952:	4631      	mov	r1, r6
 8008954:	f7f8 f9e8 	bl	8000d28 <__addsf3>
 8008958:	4641      	mov	r1, r8
 800895a:	900d      	str	r0, [sp, #52]	@ 0x34
 800895c:	9808      	ldr	r0, [sp, #32]
 800895e:	f7f8 f9e1 	bl	8000d24 <__aeabi_fsub>
 8008962:	4631      	mov	r1, r6
 8008964:	f7f8 f9de 	bl	8000d24 <__aeabi_fsub>
 8008968:	4639      	mov	r1, r7
 800896a:	9014      	str	r0, [sp, #80]	@ 0x50
 800896c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800896e:	f7f8 f9d9 	bl	8000d24 <__aeabi_fsub>
 8008972:	4629      	mov	r1, r5
 8008974:	f7f8 f9d6 	bl	8000d24 <__aeabi_fsub>
 8008978:	900e      	str	r0, [sp, #56]	@ 0x38
 800897a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800897c:	4659      	mov	r1, fp
 800897e:	4618      	mov	r0, r3
 8008980:	f7f8 f9d0 	bl	8000d24 <__aeabi_fsub>
 8008984:	4641      	mov	r1, r8
 8008986:	4683      	mov	fp, r0
 8008988:	4630      	mov	r0, r6
 800898a:	f7f8 f9cb 	bl	8000d24 <__aeabi_fsub>
 800898e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008990:	f7f8 f9c8 	bl	8000d24 <__aeabi_fsub>
 8008994:	4639      	mov	r1, r7
 8008996:	4606      	mov	r6, r0
 8008998:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800899a:	f7f8 f9c5 	bl	8000d28 <__addsf3>
 800899e:	4601      	mov	r1, r0
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7f8 f9c1 	bl	8000d28 <__addsf3>
 80089a6:	f844 0c04 	str.w	r0, [r4, #-4]
 80089aa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089ae:	9808      	ldr	r0, [sp, #32]
 80089b0:	f7f8 f9ba 	bl	8000d28 <__addsf3>
 80089b4:	9d03      	ldr	r5, [sp, #12]
 80089b6:	6869      	ldr	r1, [r5, #4]
 80089b8:	f7f8 f9b6 	bl	8000d28 <__addsf3>
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	f844 0c08 	str.w	r0, [r4, #-8]
 80089c2:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80089c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c8:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7f8 fab3 	bl	8000f38 <__aeabi_fmul>
 80089d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80089d4:	4680      	mov	r8, r0
 80089d6:	4629      	mov	r1, r5
 80089d8:	4638      	mov	r0, r7
 80089da:	f7f8 faad 	bl	8000f38 <__aeabi_fmul>
 80089de:	4601      	mov	r1, r0
 80089e0:	4640      	mov	r0, r8
 80089e2:	f7f8 f9a1 	bl	8000d28 <__addsf3>
 80089e6:	4621      	mov	r1, r4
 80089e8:	f84a 0c08 	str.w	r0, [sl, #-8]
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7f8 faa3 	bl	8000f38 <__aeabi_fmul>
 80089f2:	4629      	mov	r1, r5
 80089f4:	4680      	mov	r8, r0
 80089f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089f8:	f7f8 fa9e 	bl	8000f38 <__aeabi_fmul>
 80089fc:	4601      	mov	r1, r0
 80089fe:	4640      	mov	r0, r8
 8008a00:	f7f8 f990 	bl	8000d24 <__aeabi_fsub>
 8008a04:	4629      	mov	r1, r5
 8008a06:	f84a 0c04 	str.w	r0, [sl, #-4]
 8008a0a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008a0c:	f7f8 fa94 	bl	8000f38 <__aeabi_fmul>
 8008a10:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008a12:	4680      	mov	r8, r0
 8008a14:	4621      	mov	r1, r4
 8008a16:	4638      	mov	r0, r7
 8008a18:	f7f8 fa8e 	bl	8000f38 <__aeabi_fmul>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4640      	mov	r0, r8
 8008a20:	f7f8 f980 	bl	8000d24 <__aeabi_fsub>
 8008a24:	4629      	mov	r1, r5
 8008a26:	f8c9 0008 	str.w	r0, [r9, #8]
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7f8 fa84 	bl	8000f38 <__aeabi_fmul>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4605      	mov	r5, r0
 8008a34:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008a36:	f7f8 fa7f 	bl	8000f38 <__aeabi_fmul>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f7f8 f973 	bl	8000d28 <__addsf3>
 8008a42:	9d05      	ldr	r5, [sp, #20]
 8008a44:	f8c9 0004 	str.w	r0, [r9, #4]
 8008a48:	f855 4c10 	ldr.w	r4, [r5, #-16]
 8008a4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a4e:	f855 5c0c 	ldr.w	r5, [r5, #-12]
 8008a52:	4621      	mov	r1, r4
 8008a54:	f7f8 fa70 	bl	8000f38 <__aeabi_fmul>
 8008a58:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	4629      	mov	r1, r5
 8008a60:	4640      	mov	r0, r8
 8008a62:	f7f8 fa69 	bl	8000f38 <__aeabi_fmul>
 8008a66:	4601      	mov	r1, r0
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7f8 f95d 	bl	8000d28 <__addsf3>
 8008a6e:	9f01      	ldr	r7, [sp, #4]
 8008a70:	4621      	mov	r1, r4
 8008a72:	f847 0c08 	str.w	r0, [r7, #-8]
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7f8 fa5e 	bl	8000f38 <__aeabi_fmul>
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4607      	mov	r7, r0
 8008a80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a82:	f7f8 fa59 	bl	8000f38 <__aeabi_fmul>
 8008a86:	4601      	mov	r1, r0
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7f8 f94b 	bl	8000d24 <__aeabi_fsub>
 8008a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a90:	9f01      	ldr	r7, [sp, #4]
 8008a92:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8008a96:	f847 0c04 	str.w	r0, [r7, #-4]
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7f8 fa4b 	bl	8000f38 <__aeabi_fmul>
 8008aa2:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8008aa6:	4607      	mov	r7, r0
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4640      	mov	r0, r8
 8008aac:	f7f8 fa44 	bl	8000f38 <__aeabi_fmul>
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	f7f8 f936 	bl	8000d24 <__aeabi_fsub>
 8008ab8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8008aba:	4629      	mov	r1, r5
 8008abc:	f847 0c04 	str.w	r0, [r7, #-4]
 8008ac0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008ac2:	f7f8 fa39 	bl	8000f38 <__aeabi_fmul>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7f8 fa34 	bl	8000f38 <__aeabi_fmul>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7f8 f926 	bl	8000d24 <__aeabi_fsub>
 8008ad8:	f847 0c08 	str.w	r0, [r7, #-8]
 8008adc:	9f04      	ldr	r7, [sp, #16]
 8008ade:	9807      	ldr	r0, [sp, #28]
 8008ae0:	f857 4c18 	ldr.w	r4, [r7, #-24]
 8008ae4:	f857 5c14 	ldr.w	r5, [r7, #-20]
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f7f8 fa25 	bl	8000f38 <__aeabi_fmul>
 8008aee:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8008af2:	4607      	mov	r7, r0
 8008af4:	4629      	mov	r1, r5
 8008af6:	4640      	mov	r0, r8
 8008af8:	f7f8 fa1e 	bl	8000f38 <__aeabi_fmul>
 8008afc:	4601      	mov	r1, r0
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7f8 f912 	bl	8000d28 <__addsf3>
 8008b04:	9b00      	ldr	r3, [sp, #0]
 8008b06:	4621      	mov	r1, r4
 8008b08:	f843 0c08 	str.w	r0, [r3, #-8]
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f7f8 fa13 	bl	8000f38 <__aeabi_fmul>
 8008b12:	4629      	mov	r1, r5
 8008b14:	4607      	mov	r7, r0
 8008b16:	9807      	ldr	r0, [sp, #28]
 8008b18:	f7f8 fa0e 	bl	8000f38 <__aeabi_fmul>
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7f8 f900 	bl	8000d24 <__aeabi_fsub>
 8008b24:	9a00      	ldr	r2, [sp, #0]
 8008b26:	4629      	mov	r1, r5
 8008b28:	f842 0c04 	str.w	r0, [r2, #-4]
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7f8 fa03 	bl	8000f38 <__aeabi_fmul>
 8008b32:	4621      	mov	r1, r4
 8008b34:	4607      	mov	r7, r0
 8008b36:	4658      	mov	r0, fp
 8008b38:	f7f8 f9fe 	bl	8000f38 <__aeabi_fmul>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7f8 f8f0 	bl	8000d24 <__aeabi_fsub>
 8008b44:	9f03      	ldr	r7, [sp, #12]
 8008b46:	4629      	mov	r1, r5
 8008b48:	60b8      	str	r0, [r7, #8]
 8008b4a:	4658      	mov	r0, fp
 8008b4c:	f7f8 f9f4 	bl	8000f38 <__aeabi_fmul>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4605      	mov	r5, r0
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7f8 f9ef 	bl	8000f38 <__aeabi_fmul>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f7f8 f8e3 	bl	8000d28 <__addsf3>
 8008b62:	9902      	ldr	r1, [sp, #8]
 8008b64:	9c06      	ldr	r4, [sp, #24]
 8008b66:	9b05      	ldr	r3, [sp, #20]
 8008b68:	9a00      	ldr	r2, [sp, #0]
 8008b6a:	9f03      	ldr	r7, [sp, #12]
 8008b6c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460e      	mov	r6, r1
 8008b74:	3608      	adds	r6, #8
 8008b76:	9602      	str	r6, [sp, #8]
 8008b78:	4626      	mov	r6, r4
 8008b7a:	3608      	adds	r6, #8
 8008b7c:	9901      	ldr	r1, [sp, #4]
 8008b7e:	9c04      	ldr	r4, [sp, #16]
 8008b80:	9606      	str	r6, [sp, #24]
 8008b82:	f103 0610 	add.w	r6, r3, #16
 8008b86:	f102 0308 	add.w	r3, r2, #8
 8008b8a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	3108      	adds	r1, #8
 8008b90:	9101      	str	r1, [sp, #4]
 8008b92:	f1a7 0308 	sub.w	r3, r7, #8
 8008b96:	f104 0118 	add.w	r1, r4, #24
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	f1ac 0c08 	sub.w	ip, ip, #8
 8008ba0:	f10a 0a08 	add.w	sl, sl, #8
 8008ba4:	f1a9 0908 	sub.w	r9, r9, #8
 8008ba8:	9605      	str	r6, [sp, #20]
 8008baa:	9104      	str	r1, [sp, #16]
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	f47f ae1e 	bne.w	80087ee <arm_cfft_radix8by4_f32+0x196>
 8008bb2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008bb4:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8008bb6:	00cb      	lsls	r3, r1, #3
 8008bb8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008bbc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008bc0:	9121      	str	r1, [sp, #132]	@ 0x84
 8008bc2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8008bc4:	4419      	add	r1, r3
 8008bc6:	911d      	str	r1, [sp, #116]	@ 0x74
 8008bc8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008bca:	4419      	add	r1, r3
 8008bcc:	9120      	str	r1, [sp, #128]	@ 0x80
 8008bce:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008bd0:	4419      	add	r1, r3
 8008bd2:	911e      	str	r1, [sp, #120]	@ 0x78
 8008bd4:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8008bd6:	4419      	add	r1, r3
 8008bd8:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008bda:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008bdc:	4419      	add	r1, r3
 8008bde:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008be0:	911c      	str	r1, [sp, #112]	@ 0x70
 8008be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008be6:	9322      	str	r3, [sp, #136]	@ 0x88
 8008be8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8008bea:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008bec:	6835      	ldr	r5, [r6, #0]
 8008bee:	683c      	ldr	r4, [r7, #0]
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	f7f8 f898 	bl	8000d28 <__addsf3>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4681      	mov	r9, r0
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f7f8 f891 	bl	8000d24 <__aeabi_fsub>
 8008c02:	6875      	ldr	r5, [r6, #4]
 8008c04:	687c      	ldr	r4, [r7, #4]
 8008c06:	961d      	str	r6, [sp, #116]	@ 0x74
 8008c08:	4683      	mov	fp, r0
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	971f      	str	r7, [sp, #124]	@ 0x7c
 8008c10:	f7f8 f88a 	bl	8000d28 <__addsf3>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4680      	mov	r8, r0
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f7f8 f883 	bl	8000d24 <__aeabi_fsub>
 8008c1e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8008c20:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008c22:	6867      	ldr	r7, [r4, #4]
 8008c24:	685e      	ldr	r6, [r3, #4]
 8008c26:	4682      	mov	sl, r0
 8008c28:	4659      	mov	r1, fp
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7f8 f87c 	bl	8000d28 <__addsf3>
 8008c30:	4631      	mov	r1, r6
 8008c32:	f7f8 f877 	bl	8000d24 <__aeabi_fsub>
 8008c36:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	941e      	str	r4, [sp, #120]	@ 0x78
 8008c3c:	680c      	ldr	r4, [r1, #0]
 8008c3e:	9000      	str	r0, [sp, #0]
 8008c40:	4629      	mov	r1, r5
 8008c42:	4650      	mov	r0, sl
 8008c44:	f7f8 f86e 	bl	8000d24 <__aeabi_fsub>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	f7f8 f86d 	bl	8000d28 <__addsf3>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	9001      	str	r0, [sp, #4]
 8008c52:	4648      	mov	r0, r9
 8008c54:	f7f8 f866 	bl	8000d24 <__aeabi_fsub>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f7f8 f863 	bl	8000d24 <__aeabi_fsub>
 8008c5e:	4639      	mov	r1, r7
 8008c60:	9002      	str	r0, [sp, #8]
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7f8 f85e 	bl	8000d24 <__aeabi_fsub>
 8008c68:	4631      	mov	r1, r6
 8008c6a:	f7f8 f85b 	bl	8000d24 <__aeabi_fsub>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	9003      	str	r0, [sp, #12]
 8008c72:	4658      	mov	r0, fp
 8008c74:	f7f8 f856 	bl	8000d24 <__aeabi_fsub>
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7f8 f854 	bl	8000d28 <__addsf3>
 8008c80:	4629      	mov	r1, r5
 8008c82:	4606      	mov	r6, r0
 8008c84:	4650      	mov	r0, sl
 8008c86:	f7f8 f84f 	bl	8000d28 <__addsf3>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f7f8 f84a 	bl	8000d24 <__aeabi_fsub>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4682      	mov	sl, r0
 8008c94:	4648      	mov	r0, r9
 8008c96:	f7f8 f847 	bl	8000d28 <__addsf3>
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7f8 f843 	bl	8000d28 <__addsf3>
 8008ca2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008ca4:	6028      	str	r0, [r5, #0]
 8008ca6:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8008ca8:	4640      	mov	r0, r8
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	f7f8 f83c 	bl	8000d28 <__addsf3>
 8008cb0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008cb2:	6851      	ldr	r1, [r2, #4]
 8008cb4:	f7f8 f838 	bl	8000d28 <__addsf3>
 8008cb8:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8008cba:	6068      	str	r0, [r5, #4]
 8008cbc:	6825      	ldr	r5, [r4, #0]
 8008cbe:	f8dd 9000 	ldr.w	r9, [sp]
 8008cc2:	6864      	ldr	r4, [r4, #4]
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	f7f8 f936 	bl	8000f38 <__aeabi_fmul>
 8008ccc:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f7f8 f92f 	bl	8000f38 <__aeabi_fmul>
 8008cda:	4601      	mov	r1, r0
 8008cdc:	4640      	mov	r0, r8
 8008cde:	f7f8 f823 	bl	8000d28 <__addsf3>
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	6038      	str	r0, [r7, #0]
 8008ce6:	4658      	mov	r0, fp
 8008ce8:	f7f8 f926 	bl	8000f38 <__aeabi_fmul>
 8008cec:	4621      	mov	r1, r4
 8008cee:	4605      	mov	r5, r0
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f7f8 f921 	bl	8000f38 <__aeabi_fmul>
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f7f8 f813 	bl	8000d24 <__aeabi_fsub>
 8008cfe:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6825      	ldr	r5, [r4, #0]
 8008d04:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008d08:	6864      	ldr	r4, [r4, #4]
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4648      	mov	r0, r9
 8008d0e:	f7f8 f913 	bl	8000f38 <__aeabi_fmul>
 8008d12:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d16:	4607      	mov	r7, r0
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7f8 f90c 	bl	8000f38 <__aeabi_fmul>
 8008d20:	4601      	mov	r1, r0
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7f8 f800 	bl	8000d28 <__addsf3>
 8008d28:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	6038      	str	r0, [r7, #0]
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f7f8 f902 	bl	8000f38 <__aeabi_fmul>
 8008d34:	4621      	mov	r1, r4
 8008d36:	4605      	mov	r5, r0
 8008d38:	4648      	mov	r0, r9
 8008d3a:	f7f8 f8fd 	bl	8000f38 <__aeabi_fmul>
 8008d3e:	4601      	mov	r1, r0
 8008d40:	4628      	mov	r0, r5
 8008d42:	f7f7 ffef 	bl	8000d24 <__aeabi_fsub>
 8008d46:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	680d      	ldr	r5, [r1, #0]
 8008d4c:	684c      	ldr	r4, [r1, #4]
 8008d4e:	4630      	mov	r0, r6
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f8 f8f1 	bl	8000f38 <__aeabi_fmul>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4607      	mov	r7, r0
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f7f8 f8ec 	bl	8000f38 <__aeabi_fmul>
 8008d60:	4601      	mov	r1, r0
 8008d62:	4638      	mov	r0, r7
 8008d64:	f7f7 ffe0 	bl	8000d28 <__addsf3>
 8008d68:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	6038      	str	r0, [r7, #0]
 8008d6e:	4650      	mov	r0, sl
 8008d70:	f7f8 f8e2 	bl	8000f38 <__aeabi_fmul>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4605      	mov	r5, r0
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7f8 f8dd 	bl	8000f38 <__aeabi_fmul>
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4628      	mov	r0, r5
 8008d82:	f7f7 ffcf 	bl	8000d24 <__aeabi_fsub>
 8008d86:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 8008d8a:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6872      	ldr	r2, [r6, #4]
 8008d90:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8008d92:	4621      	mov	r1, r4
 8008d94:	2304      	movs	r3, #4
 8008d96:	f000 f893 	bl	8008ec0 <arm_radix8_butterfly_f32>
 8008d9a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8008d9c:	6872      	ldr	r2, [r6, #4]
 8008d9e:	4621      	mov	r1, r4
 8008da0:	2304      	movs	r3, #4
 8008da2:	f000 f88d 	bl	8008ec0 <arm_radix8_butterfly_f32>
 8008da6:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8008da8:	6872      	ldr	r2, [r6, #4]
 8008daa:	4621      	mov	r1, r4
 8008dac:	2304      	movs	r3, #4
 8008dae:	f000 f887 	bl	8008ec0 <arm_radix8_butterfly_f32>
 8008db2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008db4:	6872      	ldr	r2, [r6, #4]
 8008db6:	4621      	mov	r1, r4
 8008db8:	2304      	movs	r3, #4
 8008dba:	b027      	add	sp, #156	@ 0x9c
 8008dbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc0:	f000 b87e 	b.w	8008ec0 <arm_radix8_butterfly_f32>

08008dc4 <arm_cfft_f32>:
 8008dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc8:	2a01      	cmp	r2, #1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	4617      	mov	r7, r2
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4698      	mov	r8, r3
 8008dd2:	8805      	ldrh	r5, [r0, #0]
 8008dd4:	d058      	beq.n	8008e88 <arm_cfft_f32+0xc4>
 8008dd6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8008dda:	d050      	beq.n	8008e7e <arm_cfft_f32+0xba>
 8008ddc:	d916      	bls.n	8008e0c <arm_cfft_f32+0x48>
 8008dde:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8008de2:	d01a      	beq.n	8008e1a <arm_cfft_f32+0x56>
 8008de4:	d960      	bls.n	8008ea8 <arm_cfft_f32+0xe4>
 8008de6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8008dea:	d048      	beq.n	8008e7e <arm_cfft_f32+0xba>
 8008dec:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8008df0:	d105      	bne.n	8008dfe <arm_cfft_f32+0x3a>
 8008df2:	4620      	mov	r0, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	6872      	ldr	r2, [r6, #4]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f000 f861 	bl	8008ec0 <arm_radix8_butterfly_f32>
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d111      	bne.n	8008e28 <arm_cfft_f32+0x64>
 8008e04:	2f01      	cmp	r7, #1
 8008e06:	d016      	beq.n	8008e36 <arm_cfft_f32+0x72>
 8008e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0c:	2d20      	cmp	r5, #32
 8008e0e:	d036      	beq.n	8008e7e <arm_cfft_f32+0xba>
 8008e10:	d94e      	bls.n	8008eb0 <arm_cfft_f32+0xec>
 8008e12:	2d40      	cmp	r5, #64	@ 0x40
 8008e14:	d0ed      	beq.n	8008df2 <arm_cfft_f32+0x2e>
 8008e16:	2d80      	cmp	r5, #128	@ 0x80
 8008e18:	d1f1      	bne.n	8008dfe <arm_cfft_f32+0x3a>
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4621      	mov	r1, r4
 8008e1e:	f7ff fac1 	bl	80083a4 <arm_cfft_radix8by2_f32>
 8008e22:	f1b8 0f00 	cmp.w	r8, #0
 8008e26:	d0ed      	beq.n	8008e04 <arm_cfft_f32+0x40>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	89b1      	ldrh	r1, [r6, #12]
 8008e2c:	68b2      	ldr	r2, [r6, #8]
 8008e2e:	f7f7 f9cf 	bl	80001d0 <arm_bitreversal_32>
 8008e32:	2f01      	cmp	r7, #1
 8008e34:	d1e8      	bne.n	8008e08 <arm_cfft_f32+0x44>
 8008e36:	4628      	mov	r0, r5
 8008e38:	f7f8 f826 	bl	8000e88 <__aeabi_ui2f>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008e42:	f7f8 f92d 	bl	80010a0 <__aeabi_fdiv>
 8008e46:	4607      	mov	r7, r0
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	d0dd      	beq.n	8008e08 <arm_cfft_f32+0x44>
 8008e4c:	3408      	adds	r4, #8
 8008e4e:	2600      	movs	r6, #0
 8008e50:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f8 f86f 	bl	8000f38 <__aeabi_fmul>
 8008e5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e5e:	f844 0c08 	str.w	r0, [r4, #-8]
 8008e62:	4639      	mov	r1, r7
 8008e64:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 8008e68:	f7f8 f866 	bl	8000f38 <__aeabi_fmul>
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	42b5      	cmp	r5, r6
 8008e70:	f844 0c04 	str.w	r0, [r4, #-4]
 8008e74:	f104 0408 	add.w	r4, r4, #8
 8008e78:	d1ea      	bne.n	8008e50 <arm_cfft_f32+0x8c>
 8008e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7e:	4630      	mov	r0, r6
 8008e80:	4621      	mov	r1, r4
 8008e82:	f7ff fbe9 	bl	8008658 <arm_cfft_radix8by4_f32>
 8008e86:	e7ba      	b.n	8008dfe <arm_cfft_f32+0x3a>
 8008e88:	b1ad      	cbz	r5, 8008eb6 <arm_cfft_f32+0xf2>
 8008e8a:	f101 030c 	add.w	r3, r1, #12
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8008e94:	3101      	adds	r1, #1
 8008e96:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8008e9a:	428d      	cmp	r5, r1
 8008e9c:	f843 2c08 	str.w	r2, [r3, #-8]
 8008ea0:	f103 0308 	add.w	r3, r3, #8
 8008ea4:	d1f4      	bne.n	8008e90 <arm_cfft_f32+0xcc>
 8008ea6:	e796      	b.n	8008dd6 <arm_cfft_f32+0x12>
 8008ea8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8008eac:	d0a1      	beq.n	8008df2 <arm_cfft_f32+0x2e>
 8008eae:	e7a6      	b.n	8008dfe <arm_cfft_f32+0x3a>
 8008eb0:	2d10      	cmp	r5, #16
 8008eb2:	d0b2      	beq.n	8008e1a <arm_cfft_f32+0x56>
 8008eb4:	e7a3      	b.n	8008dfe <arm_cfft_f32+0x3a>
 8008eb6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8008eba:	d890      	bhi.n	8008dde <arm_cfft_f32+0x1a>
 8008ebc:	e7a6      	b.n	8008e0c <arm_cfft_f32+0x48>
 8008ebe:	bf00      	nop

08008ec0 <arm_radix8_butterfly_f32>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	b0b1      	sub	sp, #196	@ 0xc4
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	932c      	str	r3, [sp, #176]	@ 0xb0
 8008eca:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ecc:	9029      	str	r0, [sp, #164]	@ 0xa4
 8008ece:	9225      	str	r2, [sp, #148]	@ 0x94
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	9118      	str	r1, [sp, #96]	@ 0x60
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	00d9      	lsls	r1, r3, #3
 8008ed8:	460c      	mov	r4, r1
 8008eda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008edc:	4639      	mov	r1, r7
 8008ede:	4421      	add	r1, r4
 8008ee0:	005a      	lsls	r2, r3, #1
 8008ee2:	9111      	str	r1, [sp, #68]	@ 0x44
 8008ee4:	461e      	mov	r6, r3
 8008ee6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008ee8:	9214      	str	r2, [sp, #80]	@ 0x50
 8008eea:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8008eec:	9322      	str	r3, [sp, #136]	@ 0x88
 8008eee:	441a      	add	r2, r3
 8008ef0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008ef4:	ebc6 7146 	rsb	r1, r6, r6, lsl #29
 8008ef8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008efc:	eb03 0446 	add.w	r4, r3, r6, lsl #1
 8008f00:	1828      	adds	r0, r5, r0
 8008f02:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8008f06:	00c9      	lsls	r1, r1, #3
 8008f08:	9008      	str	r0, [sp, #32]
 8008f0a:	9103      	str	r1, [sp, #12]
 8008f0c:	1d15      	adds	r5, r2, #4
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
 8008f14:	9201      	str	r2, [sp, #4]
 8008f16:	9c03      	ldr	r4, [sp, #12]
 8008f18:	9a08      	ldr	r2, [sp, #32]
 8008f1a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008f1c:	4422      	add	r2, r4
 8008f1e:	eba6 0086 	sub.w	r0, r6, r6, lsl #2
 8008f22:	ebc6 7106 	rsb	r1, r6, r6, lsl #28
 8008f26:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f28:	00c2      	lsls	r2, r0, #3
 8008f2a:	9204      	str	r2, [sp, #16]
 8008f2c:	010a      	lsls	r2, r1, #4
 8008f2e:	9205      	str	r2, [sp, #20]
 8008f30:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008f34:	0132      	lsls	r2, r6, #4
 8008f36:	2300      	movs	r3, #0
 8008f38:	46ba      	mov	sl, r7
 8008f3a:	9202      	str	r2, [sp, #8]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	462f      	mov	r7, r5
 8008f40:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8008f42:	9e00      	ldr	r6, [sp, #0]
 8008f44:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8008f48:	461a      	mov	r2, r3
 8008f4a:	9b04      	ldr	r3, [sp, #16]
 8008f4c:	f852 5036 	ldr.w	r5, [r2, r6, lsl #3]
 8008f50:	f85a 4003 	ldr.w	r4, [sl, r3]
 8008f54:	4628      	mov	r0, r5
 8008f56:	4621      	mov	r1, r4
 8008f58:	f7f7 fee6 	bl	8000d28 <__addsf3>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4683      	mov	fp, r0
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7f7 fedf 	bl	8000d24 <__aeabi_fsub>
 8008f66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8008f72:	f851 5036 	ldr.w	r5, [r1, r6, lsl #3]
 8008f76:	9600      	str	r6, [sp, #0]
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7f7 fed4 	bl	8000d28 <__addsf3>
 8008f80:	4621      	mov	r1, r4
 8008f82:	4606      	mov	r6, r0
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7f7 fecd 	bl	8000d24 <__aeabi_fsub>
 8008f8a:	9908      	ldr	r1, [sp, #32]
 8008f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f8e:	460c      	mov	r4, r1
 8008f90:	9900      	ldr	r1, [sp, #0]
 8008f92:	f854 8031 	ldr.w	r8, [r4, r1, lsl #3]
 8008f96:	9c03      	ldr	r4, [sp, #12]
 8008f98:	f85a 5004 	ldr.w	r5, [sl, r4]
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f7f7 fec2 	bl	8000d28 <__addsf3>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4604      	mov	r4, r0
 8008fa8:	4640      	mov	r0, r8
 8008faa:	f7f7 febb 	bl	8000d24 <__aeabi_fsub>
 8008fae:	f857 9c04 	ldr.w	r9, [r7, #-4]
 8008fb2:	f8da 8000 	ldr.w	r8, [sl]
 8008fb6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008fb8:	4641      	mov	r1, r8
 8008fba:	4648      	mov	r0, r9
 8008fbc:	f7f7 feb4 	bl	8000d28 <__addsf3>
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f7f7 fead 	bl	8000d24 <__aeabi_fsub>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	900c      	str	r0, [sp, #48]	@ 0x30
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f7f7 fea8 	bl	8000d24 <__aeabi_fsub>
 8008fd4:	46d8      	mov	r8, fp
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4683      	mov	fp, r0
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f7f7 fea4 	bl	8000d28 <__addsf3>
 8008fe0:	4629      	mov	r1, r5
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7f7 fe9d 	bl	8000d24 <__aeabi_fsub>
 8008fea:	4629      	mov	r1, r5
 8008fec:	900d      	str	r0, [sp, #52]	@ 0x34
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7f7 fe9a 	bl	8000d28 <__addsf3>
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f7f7 fe95 	bl	8000d28 <__addsf3>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 8009002:	4629      	mov	r1, r5
 8009004:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 8009008:	4620      	mov	r0, r4
 800900a:	f7f7 fe8b 	bl	8000d24 <__aeabi_fsub>
 800900e:	9d04      	ldr	r5, [sp, #16]
 8009010:	f84a 0005 	str.w	r0, [sl, r5]
 8009014:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8009016:	597d      	ldr	r5, [r7, r5]
 8009018:	f857 4031 	ldr.w	r4, [r7, r1, lsl #3]
 800901c:	4628      	mov	r0, r5
 800901e:	4621      	mov	r1, r4
 8009020:	f7f7 fe82 	bl	8000d28 <__addsf3>
 8009024:	4621      	mov	r1, r4
 8009026:	4680      	mov	r8, r0
 8009028:	4628      	mov	r0, r5
 800902a:	f7f7 fe7b 	bl	8000d24 <__aeabi_fsub>
 800902e:	9a02      	ldr	r2, [sp, #8]
 8009030:	9e05      	ldr	r6, [sp, #20]
 8009032:	58bc      	ldr	r4, [r7, r2]
 8009034:	59bd      	ldr	r5, [r7, r6]
 8009036:	900e      	str	r0, [sp, #56]	@ 0x38
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f7f7 fe74 	bl	8000d28 <__addsf3>
 8009040:	4621      	mov	r1, r4
 8009042:	9006      	str	r0, [sp, #24]
 8009044:	4628      	mov	r0, r5
 8009046:	f7f7 fe6d 	bl	8000d24 <__aeabi_fsub>
 800904a:	9a01      	ldr	r2, [sp, #4]
 800904c:	9e03      	ldr	r6, [sp, #12]
 800904e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8009050:	59bd      	ldr	r5, [r7, r6]
 8009052:	f852 4034 	ldr.w	r4, [r2, r4, lsl #3]
 8009056:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f7f7 fe64 	bl	8000d28 <__addsf3>
 8009060:	4621      	mov	r1, r4
 8009062:	4606      	mov	r6, r0
 8009064:	4628      	mov	r0, r5
 8009066:	f7f7 fe5d 	bl	8000d24 <__aeabi_fsub>
 800906a:	9c01      	ldr	r4, [sp, #4]
 800906c:	9905      	ldr	r1, [sp, #20]
 800906e:	9007      	str	r0, [sp, #28]
 8009070:	5865      	ldr	r5, [r4, r1]
 8009072:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009076:	4628      	mov	r0, r5
 8009078:	4621      	mov	r1, r4
 800907a:	f7f7 fe55 	bl	8000d28 <__addsf3>
 800907e:	4621      	mov	r1, r4
 8009080:	4681      	mov	r9, r0
 8009082:	4628      	mov	r0, r5
 8009084:	f7f7 fe4e 	bl	8000d24 <__aeabi_fsub>
 8009088:	4631      	mov	r1, r6
 800908a:	4605      	mov	r5, r0
 800908c:	4640      	mov	r0, r8
 800908e:	f7f7 fe49 	bl	8000d24 <__aeabi_fsub>
 8009092:	4631      	mov	r1, r6
 8009094:	4604      	mov	r4, r0
 8009096:	4640      	mov	r0, r8
 8009098:	f7f7 fe46 	bl	8000d28 <__addsf3>
 800909c:	4649      	mov	r1, r9
 800909e:	4680      	mov	r8, r0
 80090a0:	9806      	ldr	r0, [sp, #24]
 80090a2:	f7f7 fe3f 	bl	8000d24 <__aeabi_fsub>
 80090a6:	4649      	mov	r1, r9
 80090a8:	4606      	mov	r6, r0
 80090aa:	9806      	ldr	r0, [sp, #24]
 80090ac:	f7f7 fe3c 	bl	8000d28 <__addsf3>
 80090b0:	4681      	mov	r9, r0
 80090b2:	4649      	mov	r1, r9
 80090b4:	4640      	mov	r0, r8
 80090b6:	f7f7 fe37 	bl	8000d28 <__addsf3>
 80090ba:	9a04      	ldr	r2, [sp, #16]
 80090bc:	4649      	mov	r1, r9
 80090be:	50b8      	str	r0, [r7, r2]
 80090c0:	4640      	mov	r0, r8
 80090c2:	f7f7 fe2f 	bl	8000d24 <__aeabi_fsub>
 80090c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80090c8:	4631      	mov	r1, r6
 80090ca:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 80090ce:	4658      	mov	r0, fp
 80090d0:	f7f7 fe2a 	bl	8000d28 <__addsf3>
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	9a00      	ldr	r2, [sp, #0]
 80090d8:	469e      	mov	lr, r3
 80090da:	4631      	mov	r1, r6
 80090dc:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 80090e0:	4658      	mov	r0, fp
 80090e2:	f7f7 fe1f 	bl	8000d24 <__aeabi_fsub>
 80090e6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80090ea:	9e03      	ldr	r6, [sp, #12]
 80090ec:	4659      	mov	r1, fp
 80090ee:	f84a 0006 	str.w	r0, [sl, r6]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f7f7 fe16 	bl	8000d24 <__aeabi_fsub>
 80090f8:	9e03      	ldr	r6, [sp, #12]
 80090fa:	4659      	mov	r1, fp
 80090fc:	51b8      	str	r0, [r7, r6]
 80090fe:	4620      	mov	r0, r4
 8009100:	f7f7 fe12 	bl	8000d28 <__addsf3>
 8009104:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8009108:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800910c:	9e01      	ldr	r6, [sp, #4]
 800910e:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8009110:	4641      	mov	r1, r8
 8009112:	f846 0034 	str.w	r0, [r6, r4, lsl #3]
 8009116:	4658      	mov	r0, fp
 8009118:	f7f7 fe04 	bl	8000d24 <__aeabi_fsub>
 800911c:	497e      	ldr	r1, [pc, #504]	@ (8009318 <arm_radix8_butterfly_f32+0x458>)
 800911e:	f7f7 ff0b 	bl	8000f38 <__aeabi_fmul>
 8009122:	4641      	mov	r1, r8
 8009124:	4681      	mov	r9, r0
 8009126:	4658      	mov	r0, fp
 8009128:	f7f7 fdfe 	bl	8000d28 <__addsf3>
 800912c:	497a      	ldr	r1, [pc, #488]	@ (8009318 <arm_radix8_butterfly_f32+0x458>)
 800912e:	f7f7 ff03 	bl	8000f38 <__aeabi_fmul>
 8009132:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8009136:	4604      	mov	r4, r0
 8009138:	4629      	mov	r1, r5
 800913a:	4640      	mov	r0, r8
 800913c:	f7f7 fdf2 	bl	8000d24 <__aeabi_fsub>
 8009140:	4975      	ldr	r1, [pc, #468]	@ (8009318 <arm_radix8_butterfly_f32+0x458>)
 8009142:	f7f7 fef9 	bl	8000f38 <__aeabi_fmul>
 8009146:	4629      	mov	r1, r5
 8009148:	4606      	mov	r6, r0
 800914a:	4640      	mov	r0, r8
 800914c:	f7f7 fdec 	bl	8000d28 <__addsf3>
 8009150:	4971      	ldr	r1, [pc, #452]	@ (8009318 <arm_radix8_butterfly_f32+0x458>)
 8009152:	f7f7 fef1 	bl	8000f38 <__aeabi_fmul>
 8009156:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009158:	4683      	mov	fp, r0
 800915a:	4649      	mov	r1, r9
 800915c:	4628      	mov	r0, r5
 800915e:	f7f7 fde1 	bl	8000d24 <__aeabi_fsub>
 8009162:	4649      	mov	r1, r9
 8009164:	4680      	mov	r8, r0
 8009166:	4628      	mov	r0, r5
 8009168:	f7f7 fdde 	bl	8000d28 <__addsf3>
 800916c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8009170:	9006      	str	r0, [sp, #24]
 8009172:	4621      	mov	r1, r4
 8009174:	4648      	mov	r0, r9
 8009176:	f7f7 fdd5 	bl	8000d24 <__aeabi_fsub>
 800917a:	4621      	mov	r1, r4
 800917c:	4605      	mov	r5, r0
 800917e:	4648      	mov	r0, r9
 8009180:	f7f7 fdd2 	bl	8000d28 <__addsf3>
 8009184:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 8009188:	9009      	str	r0, [sp, #36]	@ 0x24
 800918a:	4631      	mov	r1, r6
 800918c:	4648      	mov	r0, r9
 800918e:	f7f7 fdc9 	bl	8000d24 <__aeabi_fsub>
 8009192:	4631      	mov	r1, r6
 8009194:	4604      	mov	r4, r0
 8009196:	4648      	mov	r0, r9
 8009198:	f7f7 fdc6 	bl	8000d28 <__addsf3>
 800919c:	4659      	mov	r1, fp
 800919e:	4606      	mov	r6, r0
 80091a0:	9807      	ldr	r0, [sp, #28]
 80091a2:	f7f7 fdbf 	bl	8000d24 <__aeabi_fsub>
 80091a6:	4659      	mov	r1, fp
 80091a8:	4681      	mov	r9, r0
 80091aa:	9807      	ldr	r0, [sp, #28]
 80091ac:	f7f7 fdbc 	bl	8000d28 <__addsf3>
 80091b0:	4683      	mov	fp, r0
 80091b2:	4659      	mov	r1, fp
 80091b4:	9806      	ldr	r0, [sp, #24]
 80091b6:	f7f7 fdb7 	bl	8000d28 <__addsf3>
 80091ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091bc:	469e      	mov	lr, r3
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	4659      	mov	r1, fp
 80091c2:	f84e 0033 	str.w	r0, [lr, r3, lsl #3]
 80091c6:	9806      	ldr	r0, [sp, #24]
 80091c8:	f7f7 fdac 	bl	8000d24 <__aeabi_fsub>
 80091cc:	4649      	mov	r1, r9
 80091ce:	f8ca 0000 	str.w	r0, [sl]
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7f7 fda8 	bl	8000d28 <__addsf3>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	4649      	mov	r1, r9
 80091dc:	f842 0c04 	str.w	r0, [r2, #-4]
 80091e0:	4640      	mov	r0, r8
 80091e2:	f7f7 fd9f 	bl	8000d24 <__aeabi_fsub>
 80091e6:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80091ea:	f847 0c04 	str.w	r0, [r7, #-4]
 80091ee:	4641      	mov	r1, r8
 80091f0:	4630      	mov	r0, r6
 80091f2:	f7f7 fd97 	bl	8000d24 <__aeabi_fsub>
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	4641      	mov	r1, r8
 80091fa:	50f8      	str	r0, [r7, r3]
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7f7 fd93 	bl	8000d28 <__addsf3>
 8009202:	4629      	mov	r1, r5
 8009204:	f8ca 0004 	str.w	r0, [sl, #4]
 8009208:	4620      	mov	r0, r4
 800920a:	f7f7 fd8b 	bl	8000d24 <__aeabi_fsub>
 800920e:	4629      	mov	r1, r5
 8009210:	9d02      	ldr	r5, [sp, #8]
 8009212:	5178      	str	r0, [r7, r5]
 8009214:	4620      	mov	r0, r4
 8009216:	f7f7 fd87 	bl	8000d28 <__addsf3>
 800921a:	9b00      	ldr	r3, [sp, #0]
 800921c:	9a01      	ldr	r2, [sp, #4]
 800921e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8009220:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 8009224:	9905      	ldr	r1, [sp, #20]
 8009226:	191c      	adds	r4, r3, r4
 8009228:	4613      	mov	r3, r2
 800922a:	4463      	add	r3, ip
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009230:	9400      	str	r4, [sp, #0]
 8009232:	42a3      	cmp	r3, r4
 8009234:	44e2      	add	sl, ip
 8009236:	5050      	str	r0, [r2, r1]
 8009238:	4467      	add	r7, ip
 800923a:	f63f ae81 	bhi.w	8008f40 <arm_radix8_butterfly_f32+0x80>
 800923e:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8009240:	2d07      	cmp	r5, #7
 8009242:	f240 82e8 	bls.w	8009816 <arm_radix8_butterfly_f32+0x956>
 8009246:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009248:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800924a:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800924c:	461a      	mov	r2, r3
 800924e:	1b73      	subs	r3, r6, r5
 8009250:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	1908      	adds	r0, r1, r4
 8009258:	442a      	add	r2, r5
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800925e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8009260:	00c9      	lsls	r1, r1, #3
 8009262:	00c0      	lsls	r0, r0, #3
 8009264:	0112      	lsls	r2, r2, #4
 8009266:	460f      	mov	r7, r1
 8009268:	912f      	str	r1, [sp, #188]	@ 0xbc
 800926a:	9206      	str	r2, [sp, #24]
 800926c:	4621      	mov	r1, r4
 800926e:	181a      	adds	r2, r3, r0
 8009270:	00e4      	lsls	r4, r4, #3
 8009272:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009274:	19da      	adds	r2, r3, r7
 8009276:	4423      	add	r3, r4
 8009278:	9326      	str	r3, [sp, #152]	@ 0x98
 800927a:	016b      	lsls	r3, r5, #5
 800927c:	942d      	str	r4, [sp, #180]	@ 0xb4
 800927e:	9304      	str	r3, [sp, #16]
 8009280:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8009282:	902e      	str	r0, [sp, #184]	@ 0xb8
 8009284:	2301      	movs	r3, #1
 8009286:	9227      	str	r2, [sp, #156]	@ 0x9c
 8009288:	9123      	str	r1, [sp, #140]	@ 0x8c
 800928a:	9324      	str	r3, [sp, #144]	@ 0x90
 800928c:	46b0      	mov	r8, r6
 800928e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009290:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8009292:	010f      	lsls	r7, r1, #4
 8009294:	19c6      	adds	r6, r0, r7
 8009296:	00cb      	lsls	r3, r1, #3
 8009298:	18f5      	adds	r5, r6, r3
 800929a:	eb05 0903 	add.w	r9, r5, r3
 800929e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80092a2:	1a5b      	subs	r3, r3, r1
 80092a4:	eb09 0ec2 	add.w	lr, r9, r2, lsl #3
 80092a8:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 80092ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80092ae:	0149      	lsls	r1, r1, #5
 80092b0:	f8de 3004 	ldr.w	r3, [lr, #4]
 80092b4:	686d      	ldr	r5, [r5, #4]
 80092b6:	9321      	str	r3, [sp, #132]	@ 0x84
 80092b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80092bc:	59c7      	ldr	r7, [r0, r7]
 80092be:	951e      	str	r5, [sp, #120]	@ 0x78
 80092c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80092c2:	4605      	mov	r5, r0
 80092c4:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
 80092c8:	5840      	ldr	r0, [r0, r1]
 80092ca:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80092cc:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80092ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80092d0:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
 80092d4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80092d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d8:	6813      	ldr	r3, [r2, #0]
 80092da:	931b      	str	r3, [sp, #108]	@ 0x6c
 80092dc:	680b      	ldr	r3, [r1, #0]
 80092de:	931c      	str	r3, [sp, #112]	@ 0x70
 80092e0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80092e2:	6876      	ldr	r6, [r6, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80092e8:	6853      	ldr	r3, [r2, #4]
 80092ea:	931f      	str	r3, [sp, #124]	@ 0x7c
 80092ec:	684b      	ldr	r3, [r1, #4]
 80092ee:	970a      	str	r7, [sp, #40]	@ 0x28
 80092f0:	f108 0208 	add.w	r2, r8, #8
 80092f4:	961d      	str	r6, [sp, #116]	@ 0x74
 80092f6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80092f8:	9320      	str	r3, [sp, #128]	@ 0x80
 80092fa:	f104 0308 	add.w	r3, r4, #8
 80092fe:	461f      	mov	r7, r3
 8009300:	932b      	str	r3, [sp, #172]	@ 0xac
 8009302:	922a      	str	r2, [sp, #168]	@ 0xa8
 8009304:	f104 010c 	add.w	r1, r4, #12
 8009308:	f108 030c 	add.w	r3, r8, #12
 800930c:	9201      	str	r2, [sp, #4]
 800930e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009310:	9100      	str	r1, [sp, #0]
 8009312:	9303      	str	r3, [sp, #12]
 8009314:	46bb      	mov	fp, r7
 8009316:	e001      	b.n	800931c <arm_radix8_butterfly_f32+0x45c>
 8009318:	3f3504f3 	.word	0x3f3504f3
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	9f04      	ldr	r7, [sp, #16]
 8009320:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8009324:	f85b 4007 	ldr.w	r4, [fp, r7]
 8009328:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
 800932c:	4621      	mov	r1, r4
 800932e:	4628      	mov	r0, r5
 8009330:	9216      	str	r2, [sp, #88]	@ 0x58
 8009332:	f7f7 fcf9 	bl	8000d28 <__addsf3>
 8009336:	4621      	mov	r1, r4
 8009338:	4606      	mov	r6, r0
 800933a:	4628      	mov	r0, r5
 800933c:	f7f7 fcf2 	bl	8000d24 <__aeabi_fsub>
 8009340:	9c01      	ldr	r4, [sp, #4]
 8009342:	9903      	ldr	r1, [sp, #12]
 8009344:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009346:	46a6      	mov	lr, r4
 8009348:	f851 5c04 	ldr.w	r5, [r1, #-4]
 800934c:	f85e 4007 	ldr.w	r4, [lr, r7]
 8009350:	9704      	str	r7, [sp, #16]
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f7f7 fce7 	bl	8000d28 <__addsf3>
 800935a:	4621      	mov	r1, r4
 800935c:	4607      	mov	r7, r0
 800935e:	4628      	mov	r0, r5
 8009360:	f7f7 fce0 	bl	8000d24 <__aeabi_fsub>
 8009364:	9902      	ldr	r1, [sp, #8]
 8009366:	9d06      	ldr	r5, [sp, #24]
 8009368:	f85b 8001 	ldr.w	r8, [fp, r1]
 800936c:	f85b 5005 	ldr.w	r5, [fp, r5]
 8009370:	9010      	str	r0, [sp, #64]	@ 0x40
 8009372:	4629      	mov	r1, r5
 8009374:	4640      	mov	r0, r8
 8009376:	f7f7 fcd7 	bl	8000d28 <__addsf3>
 800937a:	4629      	mov	r1, r5
 800937c:	4604      	mov	r4, r0
 800937e:	4640      	mov	r0, r8
 8009380:	f7f7 fcd0 	bl	8000d24 <__aeabi_fsub>
 8009384:	9d01      	ldr	r5, [sp, #4]
 8009386:	9a05      	ldr	r2, [sp, #20]
 8009388:	9011      	str	r0, [sp, #68]	@ 0x44
 800938a:	46ae      	mov	lr, r5
 800938c:	9d02      	ldr	r5, [sp, #8]
 800938e:	f85b 8002 	ldr.w	r8, [fp, r2]
 8009392:	f85e 9005 	ldr.w	r9, [lr, r5]
 8009396:	4641      	mov	r1, r8
 8009398:	4648      	mov	r0, r9
 800939a:	f7f7 fcc5 	bl	8000d28 <__addsf3>
 800939e:	4641      	mov	r1, r8
 80093a0:	4605      	mov	r5, r0
 80093a2:	4648      	mov	r0, r9
 80093a4:	f7f7 fcbe 	bl	8000d24 <__aeabi_fsub>
 80093a8:	4621      	mov	r1, r4
 80093aa:	9012      	str	r0, [sp, #72]	@ 0x48
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7f7 fcb9 	bl	8000d24 <__aeabi_fsub>
 80093b2:	4621      	mov	r1, r4
 80093b4:	9007      	str	r0, [sp, #28]
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7f7 fcb6 	bl	8000d28 <__addsf3>
 80093bc:	4629      	mov	r1, r5
 80093be:	4604      	mov	r4, r0
 80093c0:	4638      	mov	r0, r7
 80093c2:	f7f7 fcaf 	bl	8000d24 <__aeabi_fsub>
 80093c6:	4629      	mov	r1, r5
 80093c8:	4606      	mov	r6, r0
 80093ca:	4638      	mov	r0, r7
 80093cc:	f7f7 fcac 	bl	8000d28 <__addsf3>
 80093d0:	4605      	mov	r5, r0
 80093d2:	4629      	mov	r1, r5
 80093d4:	4620      	mov	r0, r4
 80093d6:	f7f7 fca7 	bl	8000d28 <__addsf3>
 80093da:	9a00      	ldr	r2, [sp, #0]
 80093dc:	4629      	mov	r1, r5
 80093de:	f842 0c04 	str.w	r0, [r2, #-4]
 80093e2:	4620      	mov	r0, r4
 80093e4:	f7f7 fc9e 	bl	8000d24 <__aeabi_fsub>
 80093e8:	f8db 7004 	ldr.w	r7, [fp, #4]
 80093ec:	9900      	ldr	r1, [sp, #0]
 80093ee:	9b04      	ldr	r3, [sp, #16]
 80093f0:	58cc      	ldr	r4, [r1, r3]
 80093f2:	4605      	mov	r5, r0
 80093f4:	4621      	mov	r1, r4
 80093f6:	4638      	mov	r0, r7
 80093f8:	f7f7 fc96 	bl	8000d28 <__addsf3>
 80093fc:	4621      	mov	r1, r4
 80093fe:	4682      	mov	sl, r0
 8009400:	4638      	mov	r0, r7
 8009402:	f7f7 fc8f 	bl	8000d24 <__aeabi_fsub>
 8009406:	9a03      	ldr	r2, [sp, #12]
 8009408:	9f01      	ldr	r7, [sp, #4]
 800940a:	9c04      	ldr	r4, [sp, #16]
 800940c:	687f      	ldr	r7, [r7, #4]
 800940e:	5914      	ldr	r4, [r2, r4]
 8009410:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009412:	4621      	mov	r1, r4
 8009414:	4638      	mov	r0, r7
 8009416:	f7f7 fc87 	bl	8000d28 <__addsf3>
 800941a:	4621      	mov	r1, r4
 800941c:	4681      	mov	r9, r0
 800941e:	4638      	mov	r0, r7
 8009420:	f7f7 fc80 	bl	8000d24 <__aeabi_fsub>
 8009424:	9a02      	ldr	r2, [sp, #8]
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	9900      	ldr	r1, [sp, #0]
 800942a:	9014      	str	r0, [sp, #80]	@ 0x50
 800942c:	588f      	ldr	r7, [r1, r2]
 800942e:	58cc      	ldr	r4, [r1, r3]
 8009430:	4638      	mov	r0, r7
 8009432:	4621      	mov	r1, r4
 8009434:	f7f7 fc78 	bl	8000d28 <__addsf3>
 8009438:	4621      	mov	r1, r4
 800943a:	4680      	mov	r8, r0
 800943c:	4638      	mov	r0, r7
 800943e:	f7f7 fc71 	bl	8000d24 <__aeabi_fsub>
 8009442:	9f03      	ldr	r7, [sp, #12]
 8009444:	9900      	ldr	r1, [sp, #0]
 8009446:	9c05      	ldr	r4, [sp, #20]
 8009448:	9008      	str	r0, [sp, #32]
 800944a:	46be      	mov	lr, r7
 800944c:	9f02      	ldr	r7, [sp, #8]
 800944e:	f85e 3007 	ldr.w	r3, [lr, r7]
 8009452:	590f      	ldr	r7, [r1, r4]
 8009454:	9315      	str	r3, [sp, #84]	@ 0x54
 8009456:	4639      	mov	r1, r7
 8009458:	4618      	mov	r0, r3
 800945a:	f7f7 fc65 	bl	8000d28 <__addsf3>
 800945e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009460:	4604      	mov	r4, r0
 8009462:	4639      	mov	r1, r7
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 fc5d 	bl	8000d24 <__aeabi_fsub>
 800946a:	4641      	mov	r1, r8
 800946c:	9015      	str	r0, [sp, #84]	@ 0x54
 800946e:	4650      	mov	r0, sl
 8009470:	f7f7 fc58 	bl	8000d24 <__aeabi_fsub>
 8009474:	4641      	mov	r1, r8
 8009476:	4607      	mov	r7, r0
 8009478:	4650      	mov	r0, sl
 800947a:	f7f7 fc55 	bl	8000d28 <__addsf3>
 800947e:	4621      	mov	r1, r4
 8009480:	4680      	mov	r8, r0
 8009482:	4648      	mov	r0, r9
 8009484:	f7f7 fc4e 	bl	8000d24 <__aeabi_fsub>
 8009488:	4621      	mov	r1, r4
 800948a:	4682      	mov	sl, r0
 800948c:	4648      	mov	r0, r9
 800948e:	f7f7 fc4b 	bl	8000d28 <__addsf3>
 8009492:	4651      	mov	r1, sl
 8009494:	4681      	mov	r9, r0
 8009496:	9807      	ldr	r0, [sp, #28]
 8009498:	f7f7 fc46 	bl	8000d28 <__addsf3>
 800949c:	4651      	mov	r1, sl
 800949e:	4604      	mov	r4, r0
 80094a0:	9807      	ldr	r0, [sp, #28]
 80094a2:	f7f7 fc3f 	bl	8000d24 <__aeabi_fsub>
 80094a6:	4649      	mov	r1, r9
 80094a8:	4682      	mov	sl, r0
 80094aa:	4640      	mov	r0, r8
 80094ac:	f7f7 fc3c 	bl	8000d28 <__addsf3>
 80094b0:	4649      	mov	r1, r9
 80094b2:	f8cb 0004 	str.w	r0, [fp, #4]
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7f7 fc34 	bl	8000d24 <__aeabi_fsub>
 80094bc:	4631      	mov	r1, r6
 80094be:	4681      	mov	r9, r0
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7f7 fc2f 	bl	8000d24 <__aeabi_fsub>
 80094c6:	4631      	mov	r1, r6
 80094c8:	4680      	mov	r8, r0
 80094ca:	4638      	mov	r0, r7
 80094cc:	f7f7 fc2c 	bl	8000d28 <__addsf3>
 80094d0:	4629      	mov	r1, r5
 80094d2:	4606      	mov	r6, r0
 80094d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80094d6:	f7f7 fd2f 	bl	8000f38 <__aeabi_fmul>
 80094da:	4649      	mov	r1, r9
 80094dc:	4607      	mov	r7, r0
 80094de:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80094e0:	f7f7 fd2a 	bl	8000f38 <__aeabi_fmul>
 80094e4:	4601      	mov	r1, r0
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7f7 fc1e 	bl	8000d28 <__addsf3>
 80094ec:	9a04      	ldr	r2, [sp, #16]
 80094ee:	4649      	mov	r1, r9
 80094f0:	f84b 0002 	str.w	r0, [fp, r2]
 80094f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80094f6:	f7f7 fd1f 	bl	8000f38 <__aeabi_fmul>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4607      	mov	r7, r0
 80094fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009500:	f7f7 fd1a 	bl	8000f38 <__aeabi_fmul>
 8009504:	4601      	mov	r1, r0
 8009506:	4638      	mov	r0, r7
 8009508:	f7f7 fc0c 	bl	8000d24 <__aeabi_fsub>
 800950c:	9f00      	ldr	r7, [sp, #0]
 800950e:	9d04      	ldr	r5, [sp, #16]
 8009510:	4621      	mov	r1, r4
 8009512:	5178      	str	r0, [r7, r5]
 8009514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009516:	f7f7 fd0f 	bl	8000f38 <__aeabi_fmul>
 800951a:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 800951e:	4605      	mov	r5, r0
 8009520:	4641      	mov	r1, r8
 8009522:	4648      	mov	r0, r9
 8009524:	f7f7 fd08 	bl	8000f38 <__aeabi_fmul>
 8009528:	4601      	mov	r1, r0
 800952a:	4628      	mov	r0, r5
 800952c:	f7f7 fbfc 	bl	8000d28 <__addsf3>
 8009530:	9b02      	ldr	r3, [sp, #8]
 8009532:	4641      	mov	r1, r8
 8009534:	f84b 0003 	str.w	r0, [fp, r3]
 8009538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800953a:	f7f7 fcfd 	bl	8000f38 <__aeabi_fmul>
 800953e:	4621      	mov	r1, r4
 8009540:	4605      	mov	r5, r0
 8009542:	4648      	mov	r0, r9
 8009544:	f7f7 fcf8 	bl	8000f38 <__aeabi_fmul>
 8009548:	4601      	mov	r1, r0
 800954a:	4628      	mov	r0, r5
 800954c:	f7f7 fbea 	bl	8000d24 <__aeabi_fsub>
 8009550:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8009554:	9c02      	ldr	r4, [sp, #8]
 8009556:	4651      	mov	r1, sl
 8009558:	5138      	str	r0, [r7, r4]
 800955a:	4640      	mov	r0, r8
 800955c:	f7f7 fcec 	bl	8000f38 <__aeabi_fmul>
 8009560:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 8009564:	4604      	mov	r4, r0
 8009566:	4631      	mov	r1, r6
 8009568:	4648      	mov	r0, r9
 800956a:	f7f7 fce5 	bl	8000f38 <__aeabi_fmul>
 800956e:	4601      	mov	r1, r0
 8009570:	4620      	mov	r0, r4
 8009572:	f7f7 fbd9 	bl	8000d28 <__addsf3>
 8009576:	4631      	mov	r1, r6
 8009578:	9e06      	ldr	r6, [sp, #24]
 800957a:	f84b 0006 	str.w	r0, [fp, r6]
 800957e:	4640      	mov	r0, r8
 8009580:	f7f7 fcda 	bl	8000f38 <__aeabi_fmul>
 8009584:	4651      	mov	r1, sl
 8009586:	4604      	mov	r4, r0
 8009588:	4648      	mov	r0, r9
 800958a:	f7f7 fcd5 	bl	8000f38 <__aeabi_fmul>
 800958e:	4601      	mov	r1, r0
 8009590:	4620      	mov	r0, r4
 8009592:	f7f7 fbc7 	bl	8000d24 <__aeabi_fsub>
 8009596:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800959a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800959e:	51b8      	str	r0, [r7, r6]
 80095a0:	4641      	mov	r1, r8
 80095a2:	4648      	mov	r0, r9
 80095a4:	9700      	str	r7, [sp, #0]
 80095a6:	f7f7 fbbd 	bl	8000d24 <__aeabi_fsub>
 80095aa:	499c      	ldr	r1, [pc, #624]	@ (800981c <arm_radix8_butterfly_f32+0x95c>)
 80095ac:	f7f7 fcc4 	bl	8000f38 <__aeabi_fmul>
 80095b0:	4641      	mov	r1, r8
 80095b2:	4604      	mov	r4, r0
 80095b4:	4648      	mov	r0, r9
 80095b6:	f7f7 fbb7 	bl	8000d28 <__addsf3>
 80095ba:	4998      	ldr	r1, [pc, #608]	@ (800981c <arm_radix8_butterfly_f32+0x95c>)
 80095bc:	f7f7 fcbc 	bl	8000f38 <__aeabi_fmul>
 80095c0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 80095c4:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 80095c8:	4607      	mov	r7, r0
 80095ca:	4641      	mov	r1, r8
 80095cc:	4650      	mov	r0, sl
 80095ce:	f7f7 fba9 	bl	8000d24 <__aeabi_fsub>
 80095d2:	4992      	ldr	r1, [pc, #584]	@ (800981c <arm_radix8_butterfly_f32+0x95c>)
 80095d4:	f7f7 fcb0 	bl	8000f38 <__aeabi_fmul>
 80095d8:	4641      	mov	r1, r8
 80095da:	4681      	mov	r9, r0
 80095dc:	4650      	mov	r0, sl
 80095de:	f7f7 fba3 	bl	8000d28 <__addsf3>
 80095e2:	498e      	ldr	r1, [pc, #568]	@ (800981c <arm_radix8_butterfly_f32+0x95c>)
 80095e4:	f7f7 fca8 	bl	8000f38 <__aeabi_fmul>
 80095e8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80095ea:	4605      	mov	r5, r0
 80095ec:	4621      	mov	r1, r4
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7f7 fb98 	bl	8000d24 <__aeabi_fsub>
 80095f4:	4621      	mov	r1, r4
 80095f6:	9007      	str	r0, [sp, #28]
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7f7 fb95 	bl	8000d28 <__addsf3>
 80095fe:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009602:	4604      	mov	r4, r0
 8009604:	4639      	mov	r1, r7
 8009606:	4640      	mov	r0, r8
 8009608:	f7f7 fb8c 	bl	8000d24 <__aeabi_fsub>
 800960c:	4639      	mov	r1, r7
 800960e:	4606      	mov	r6, r0
 8009610:	4640      	mov	r0, r8
 8009612:	f7f7 fb89 	bl	8000d28 <__addsf3>
 8009616:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800961a:	4680      	mov	r8, r0
 800961c:	4649      	mov	r1, r9
 800961e:	4650      	mov	r0, sl
 8009620:	f7f7 fb80 	bl	8000d24 <__aeabi_fsub>
 8009624:	4649      	mov	r1, r9
 8009626:	4607      	mov	r7, r0
 8009628:	4650      	mov	r0, sl
 800962a:	f7f7 fb7d 	bl	8000d28 <__addsf3>
 800962e:	4629      	mov	r1, r5
 8009630:	4681      	mov	r9, r0
 8009632:	9808      	ldr	r0, [sp, #32]
 8009634:	f7f7 fb76 	bl	8000d24 <__aeabi_fsub>
 8009638:	4629      	mov	r1, r5
 800963a:	4682      	mov	sl, r0
 800963c:	9808      	ldr	r0, [sp, #32]
 800963e:	f7f7 fb73 	bl	8000d28 <__addsf3>
 8009642:	4603      	mov	r3, r0
 8009644:	4619      	mov	r1, r3
 8009646:	4620      	mov	r0, r4
 8009648:	9308      	str	r3, [sp, #32]
 800964a:	f7f7 fb6d 	bl	8000d28 <__addsf3>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	4605      	mov	r5, r0
 8009652:	4619      	mov	r1, r3
 8009654:	4620      	mov	r0, r4
 8009656:	f7f7 fb65 	bl	8000d24 <__aeabi_fsub>
 800965a:	4651      	mov	r1, sl
 800965c:	4604      	mov	r4, r0
 800965e:	9807      	ldr	r0, [sp, #28]
 8009660:	f7f7 fb62 	bl	8000d28 <__addsf3>
 8009664:	4651      	mov	r1, sl
 8009666:	9008      	str	r0, [sp, #32]
 8009668:	9807      	ldr	r0, [sp, #28]
 800966a:	f7f7 fb5b 	bl	8000d24 <__aeabi_fsub>
 800966e:	4641      	mov	r1, r8
 8009670:	9007      	str	r0, [sp, #28]
 8009672:	4648      	mov	r0, r9
 8009674:	f7f7 fb56 	bl	8000d24 <__aeabi_fsub>
 8009678:	4641      	mov	r1, r8
 800967a:	4682      	mov	sl, r0
 800967c:	4648      	mov	r0, r9
 800967e:	f7f7 fb53 	bl	8000d28 <__addsf3>
 8009682:	4631      	mov	r1, r6
 8009684:	4681      	mov	r9, r0
 8009686:	4638      	mov	r0, r7
 8009688:	f7f7 fb4c 	bl	8000d24 <__aeabi_fsub>
 800968c:	4631      	mov	r1, r6
 800968e:	4680      	mov	r8, r0
 8009690:	4638      	mov	r0, r7
 8009692:	f7f7 fb49 	bl	8000d28 <__addsf3>
 8009696:	4629      	mov	r1, r5
 8009698:	4606      	mov	r6, r0
 800969a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800969c:	f7f7 fc4c 	bl	8000f38 <__aeabi_fmul>
 80096a0:	4651      	mov	r1, sl
 80096a2:	4607      	mov	r7, r0
 80096a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80096a6:	f7f7 fc47 	bl	8000f38 <__aeabi_fmul>
 80096aa:	4601      	mov	r1, r0
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7f7 fb3b 	bl	8000d28 <__addsf3>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	4651      	mov	r1, sl
 80096b6:	f843 0c04 	str.w	r0, [r3, #-4]
 80096ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096bc:	f7f7 fc3c 	bl	8000f38 <__aeabi_fmul>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4607      	mov	r7, r0
 80096c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80096c6:	f7f7 fc37 	bl	8000f38 <__aeabi_fmul>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4638      	mov	r0, r7
 80096ce:	f7f7 fb29 	bl	8000d24 <__aeabi_fsub>
 80096d2:	9f01      	ldr	r7, [sp, #4]
 80096d4:	4621      	mov	r1, r4
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80096da:	f7f7 fc2d 	bl	8000f38 <__aeabi_fmul>
 80096de:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 80096e2:	4605      	mov	r5, r0
 80096e4:	4649      	mov	r1, r9
 80096e6:	4650      	mov	r0, sl
 80096e8:	f7f7 fc26 	bl	8000f38 <__aeabi_fmul>
 80096ec:	4601      	mov	r1, r0
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7f7 fb1a 	bl	8000d28 <__addsf3>
 80096f4:	9a05      	ldr	r2, [sp, #20]
 80096f6:	4649      	mov	r1, r9
 80096f8:	f84b 0002 	str.w	r0, [fp, r2]
 80096fc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80096fe:	f7f7 fc1b 	bl	8000f38 <__aeabi_fmul>
 8009702:	4621      	mov	r1, r4
 8009704:	4605      	mov	r5, r0
 8009706:	4650      	mov	r0, sl
 8009708:	f7f7 fc16 	bl	8000f38 <__aeabi_fmul>
 800970c:	4601      	mov	r1, r0
 800970e:	4628      	mov	r0, r5
 8009710:	f7f7 fb08 	bl	8000d24 <__aeabi_fsub>
 8009714:	9908      	ldr	r1, [sp, #32]
 8009716:	9a05      	ldr	r2, [sp, #20]
 8009718:	9d00      	ldr	r5, [sp, #0]
 800971a:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 800971e:	50a8      	str	r0, [r5, r2]
 8009720:	4650      	mov	r0, sl
 8009722:	f7f7 fc09 	bl	8000f38 <__aeabi_fmul>
 8009726:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 800972a:	4604      	mov	r4, r0
 800972c:	4641      	mov	r1, r8
 800972e:	4648      	mov	r0, r9
 8009730:	f7f7 fc02 	bl	8000f38 <__aeabi_fmul>
 8009734:	4601      	mov	r1, r0
 8009736:	4620      	mov	r0, r4
 8009738:	f7f7 faf6 	bl	8000d28 <__addsf3>
 800973c:	463a      	mov	r2, r7
 800973e:	9701      	str	r7, [sp, #4]
 8009740:	9f04      	ldr	r7, [sp, #16]
 8009742:	4641      	mov	r1, r8
 8009744:	51d0      	str	r0, [r2, r7]
 8009746:	4650      	mov	r0, sl
 8009748:	f7f7 fbf6 	bl	8000f38 <__aeabi_fmul>
 800974c:	9908      	ldr	r1, [sp, #32]
 800974e:	4604      	mov	r4, r0
 8009750:	4648      	mov	r0, r9
 8009752:	f7f7 fbf1 	bl	8000f38 <__aeabi_fmul>
 8009756:	4601      	mov	r1, r0
 8009758:	4620      	mov	r0, r4
 800975a:	f7f7 fae3 	bl	8000d24 <__aeabi_fsub>
 800975e:	9a03      	ldr	r2, [sp, #12]
 8009760:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009764:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 8009768:	51d0      	str	r0, [r2, r7]
 800976a:	4651      	mov	r1, sl
 800976c:	4648      	mov	r0, r9
 800976e:	f7f7 fbe3 	bl	8000f38 <__aeabi_fmul>
 8009772:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 8009776:	4604      	mov	r4, r0
 8009778:	4631      	mov	r1, r6
 800977a:	4640      	mov	r0, r8
 800977c:	f7f7 fbdc 	bl	8000f38 <__aeabi_fmul>
 8009780:	4601      	mov	r1, r0
 8009782:	4620      	mov	r0, r4
 8009784:	f7f7 fad0 	bl	8000d28 <__addsf3>
 8009788:	9f01      	ldr	r7, [sp, #4]
 800978a:	4631      	mov	r1, r6
 800978c:	9e02      	ldr	r6, [sp, #8]
 800978e:	51b8      	str	r0, [r7, r6]
 8009790:	4648      	mov	r0, r9
 8009792:	f7f7 fbd1 	bl	8000f38 <__aeabi_fmul>
 8009796:	4651      	mov	r1, sl
 8009798:	4604      	mov	r4, r0
 800979a:	4640      	mov	r0, r8
 800979c:	f7f7 fbcc 	bl	8000f38 <__aeabi_fmul>
 80097a0:	4601      	mov	r1, r0
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7f7 fabe 	bl	8000d24 <__aeabi_fsub>
 80097a8:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 80097ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80097ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80097b0:	9f01      	ldr	r7, [sp, #4]
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	440a      	add	r2, r1
 80097b6:	eb05 010c 	add.w	r1, r5, ip
 80097ba:	9100      	str	r1, [sp, #0]
 80097bc:	5198      	str	r0, [r3, r6]
 80097be:	eb07 010c 	add.w	r1, r7, ip
 80097c2:	4463      	add	r3, ip
 80097c4:	9101      	str	r1, [sp, #4]
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097ca:	4293      	cmp	r3, r2
 80097cc:	44e3      	add	fp, ip
 80097ce:	f63f ada5 	bhi.w	800931c <arm_radix8_butterfly_f32+0x45c>
 80097d2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097d4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80097d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80097d8:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 80097da:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 80097de:	440a      	add	r2, r1
 80097e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80097e2:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80097e4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80097e6:	440a      	add	r2, r1
 80097e8:	9226      	str	r2, [sp, #152]	@ 0x98
 80097ea:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80097ec:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80097ee:	440a      	add	r2, r1
 80097f0:	9227      	str	r2, [sp, #156]	@ 0x9c
 80097f2:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80097f4:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80097f6:	440a      	add	r2, r1
 80097f8:	9228      	str	r2, [sp, #160]	@ 0xa0
 80097fa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80097fc:	3301      	adds	r3, #1
 80097fe:	4293      	cmp	r3, r2
 8009800:	9324      	str	r3, [sp, #144]	@ 0x90
 8009802:	f47f ad44 	bne.w	800928e <arm_radix8_butterfly_f32+0x3ce>
 8009806:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	@ 0xb4
 800980a:	932c      	str	r3, [sp, #176]	@ 0xb0
 800980c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800980e:	9318      	str	r3, [sp, #96]	@ 0x60
 8009810:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8009812:	f7ff bb5f 	b.w	8008ed4 <arm_radix8_butterfly_f32+0x14>
 8009816:	b031      	add	sp, #196	@ 0xc4
 8009818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	3f3504f3 	.word	0x3f3504f3

08009820 <siprintf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b500      	push	{lr}
 8009824:	b09c      	sub	sp, #112	@ 0x70
 8009826:	ab1d      	add	r3, sp, #116	@ 0x74
 8009828:	9002      	str	r0, [sp, #8]
 800982a:	9006      	str	r0, [sp, #24]
 800982c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009830:	4809      	ldr	r0, [pc, #36]	@ (8009858 <siprintf+0x38>)
 8009832:	9107      	str	r1, [sp, #28]
 8009834:	9104      	str	r1, [sp, #16]
 8009836:	4909      	ldr	r1, [pc, #36]	@ (800985c <siprintf+0x3c>)
 8009838:	f853 2b04 	ldr.w	r2, [r3], #4
 800983c:	9105      	str	r1, [sp, #20]
 800983e:	6800      	ldr	r0, [r0, #0]
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	a902      	add	r1, sp, #8
 8009844:	f000 f994 	bl	8009b70 <_svfiprintf_r>
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	b01c      	add	sp, #112	@ 0x70
 8009850:	f85d eb04 	ldr.w	lr, [sp], #4
 8009854:	b003      	add	sp, #12
 8009856:	4770      	bx	lr
 8009858:	20000010 	.word	0x20000010
 800985c:	ffff0208 	.word	0xffff0208

08009860 <memset>:
 8009860:	4402      	add	r2, r0
 8009862:	4603      	mov	r3, r0
 8009864:	4293      	cmp	r3, r2
 8009866:	d100      	bne.n	800986a <memset+0xa>
 8009868:	4770      	bx	lr
 800986a:	f803 1b01 	strb.w	r1, [r3], #1
 800986e:	e7f9      	b.n	8009864 <memset+0x4>

08009870 <__errno>:
 8009870:	4b01      	ldr	r3, [pc, #4]	@ (8009878 <__errno+0x8>)
 8009872:	6818      	ldr	r0, [r3, #0]
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20000010 	.word	0x20000010

0800987c <__libc_init_array>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	4d0d      	ldr	r5, [pc, #52]	@ (80098b4 <__libc_init_array+0x38>)
 8009880:	4c0d      	ldr	r4, [pc, #52]	@ (80098b8 <__libc_init_array+0x3c>)
 8009882:	1b64      	subs	r4, r4, r5
 8009884:	10a4      	asrs	r4, r4, #2
 8009886:	2600      	movs	r6, #0
 8009888:	42a6      	cmp	r6, r4
 800988a:	d109      	bne.n	80098a0 <__libc_init_array+0x24>
 800988c:	4d0b      	ldr	r5, [pc, #44]	@ (80098bc <__libc_init_array+0x40>)
 800988e:	4c0c      	ldr	r4, [pc, #48]	@ (80098c0 <__libc_init_array+0x44>)
 8009890:	f001 fe4e 	bl	800b530 <_init>
 8009894:	1b64      	subs	r4, r4, r5
 8009896:	10a4      	asrs	r4, r4, #2
 8009898:	2600      	movs	r6, #0
 800989a:	42a6      	cmp	r6, r4
 800989c:	d105      	bne.n	80098aa <__libc_init_array+0x2e>
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a4:	4798      	blx	r3
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7ee      	b.n	8009888 <__libc_init_array+0xc>
 80098aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ae:	4798      	blx	r3
 80098b0:	3601      	adds	r6, #1
 80098b2:	e7f2      	b.n	800989a <__libc_init_array+0x1e>
 80098b4:	0801ec68 	.word	0x0801ec68
 80098b8:	0801ec68 	.word	0x0801ec68
 80098bc:	0801ec68 	.word	0x0801ec68
 80098c0:	0801ec6c 	.word	0x0801ec6c

080098c4 <__retarget_lock_acquire_recursive>:
 80098c4:	4770      	bx	lr

080098c6 <__retarget_lock_release_recursive>:
 80098c6:	4770      	bx	lr

080098c8 <_free_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4605      	mov	r5, r0
 80098cc:	2900      	cmp	r1, #0
 80098ce:	d041      	beq.n	8009954 <_free_r+0x8c>
 80098d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d4:	1f0c      	subs	r4, r1, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfb8      	it	lt
 80098da:	18e4      	addlt	r4, r4, r3
 80098dc:	f000 f8e0 	bl	8009aa0 <__malloc_lock>
 80098e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009958 <_free_r+0x90>)
 80098e2:	6813      	ldr	r3, [r2, #0]
 80098e4:	b933      	cbnz	r3, 80098f4 <_free_r+0x2c>
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	6014      	str	r4, [r2, #0]
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f0:	f000 b8dc 	b.w	8009aac <__malloc_unlock>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d908      	bls.n	800990a <_free_r+0x42>
 80098f8:	6820      	ldr	r0, [r4, #0]
 80098fa:	1821      	adds	r1, r4, r0
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf01      	itttt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	1809      	addeq	r1, r1, r0
 8009906:	6021      	streq	r1, [r4, #0]
 8009908:	e7ed      	b.n	80098e6 <_free_r+0x1e>
 800990a:	461a      	mov	r2, r3
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b10b      	cbz	r3, 8009914 <_free_r+0x4c>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d9fa      	bls.n	800990a <_free_r+0x42>
 8009914:	6811      	ldr	r1, [r2, #0]
 8009916:	1850      	adds	r0, r2, r1
 8009918:	42a0      	cmp	r0, r4
 800991a:	d10b      	bne.n	8009934 <_free_r+0x6c>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	4401      	add	r1, r0
 8009920:	1850      	adds	r0, r2, r1
 8009922:	4283      	cmp	r3, r0
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	d1e0      	bne.n	80098ea <_free_r+0x22>
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	4408      	add	r0, r1
 8009930:	6010      	str	r0, [r2, #0]
 8009932:	e7da      	b.n	80098ea <_free_r+0x22>
 8009934:	d902      	bls.n	800993c <_free_r+0x74>
 8009936:	230c      	movs	r3, #12
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	e7d6      	b.n	80098ea <_free_r+0x22>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	1821      	adds	r1, r4, r0
 8009940:	428b      	cmp	r3, r1
 8009942:	bf04      	itt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	bf04      	itt	eq
 800994c:	1809      	addeq	r1, r1, r0
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6054      	str	r4, [r2, #4]
 8009952:	e7ca      	b.n	80098ea <_free_r+0x22>
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	200075e0 	.word	0x200075e0

0800995c <sbrk_aligned>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4e0f      	ldr	r6, [pc, #60]	@ (800999c <sbrk_aligned+0x40>)
 8009960:	460c      	mov	r4, r1
 8009962:	6831      	ldr	r1, [r6, #0]
 8009964:	4605      	mov	r5, r0
 8009966:	b911      	cbnz	r1, 800996e <sbrk_aligned+0x12>
 8009968:	f000 fba6 	bl	800a0b8 <_sbrk_r>
 800996c:	6030      	str	r0, [r6, #0]
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 fba1 	bl	800a0b8 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d103      	bne.n	8009982 <sbrk_aligned+0x26>
 800997a:	f04f 34ff 	mov.w	r4, #4294967295
 800997e:	4620      	mov	r0, r4
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d0f8      	beq.n	800997e <sbrk_aligned+0x22>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4628      	mov	r0, r5
 8009990:	f000 fb92 	bl	800a0b8 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d1f2      	bne.n	800997e <sbrk_aligned+0x22>
 8009998:	e7ef      	b.n	800997a <sbrk_aligned+0x1e>
 800999a:	bf00      	nop
 800999c:	200075dc 	.word	0x200075dc

080099a0 <_malloc_r>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	1ccd      	adds	r5, r1, #3
 80099a6:	f025 0503 	bic.w	r5, r5, #3
 80099aa:	3508      	adds	r5, #8
 80099ac:	2d0c      	cmp	r5, #12
 80099ae:	bf38      	it	cc
 80099b0:	250c      	movcc	r5, #12
 80099b2:	2d00      	cmp	r5, #0
 80099b4:	4606      	mov	r6, r0
 80099b6:	db01      	blt.n	80099bc <_malloc_r+0x1c>
 80099b8:	42a9      	cmp	r1, r5
 80099ba:	d904      	bls.n	80099c6 <_malloc_r+0x26>
 80099bc:	230c      	movs	r3, #12
 80099be:	6033      	str	r3, [r6, #0]
 80099c0:	2000      	movs	r0, #0
 80099c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a9c <_malloc_r+0xfc>
 80099ca:	f000 f869 	bl	8009aa0 <__malloc_lock>
 80099ce:	f8d8 3000 	ldr.w	r3, [r8]
 80099d2:	461c      	mov	r4, r3
 80099d4:	bb44      	cbnz	r4, 8009a28 <_malloc_r+0x88>
 80099d6:	4629      	mov	r1, r5
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ffbf 	bl	800995c <sbrk_aligned>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	4604      	mov	r4, r0
 80099e2:	d158      	bne.n	8009a96 <_malloc_r+0xf6>
 80099e4:	f8d8 4000 	ldr.w	r4, [r8]
 80099e8:	4627      	mov	r7, r4
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d143      	bne.n	8009a76 <_malloc_r+0xd6>
 80099ee:	2c00      	cmp	r4, #0
 80099f0:	d04b      	beq.n	8009a8a <_malloc_r+0xea>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	4639      	mov	r1, r7
 80099f6:	4630      	mov	r0, r6
 80099f8:	eb04 0903 	add.w	r9, r4, r3
 80099fc:	f000 fb5c 	bl	800a0b8 <_sbrk_r>
 8009a00:	4581      	cmp	r9, r0
 8009a02:	d142      	bne.n	8009a8a <_malloc_r+0xea>
 8009a04:	6821      	ldr	r1, [r4, #0]
 8009a06:	1a6d      	subs	r5, r5, r1
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ffa6 	bl	800995c <sbrk_aligned>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d03a      	beq.n	8009a8a <_malloc_r+0xea>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	442b      	add	r3, r5
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	bb62      	cbnz	r2, 8009a7c <_malloc_r+0xdc>
 8009a22:	f8c8 7000 	str.w	r7, [r8]
 8009a26:	e00f      	b.n	8009a48 <_malloc_r+0xa8>
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	1b52      	subs	r2, r2, r5
 8009a2c:	d420      	bmi.n	8009a70 <_malloc_r+0xd0>
 8009a2e:	2a0b      	cmp	r2, #11
 8009a30:	d917      	bls.n	8009a62 <_malloc_r+0xc2>
 8009a32:	1961      	adds	r1, r4, r5
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	6025      	str	r5, [r4, #0]
 8009a38:	bf18      	it	ne
 8009a3a:	6059      	strne	r1, [r3, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	bf08      	it	eq
 8009a40:	f8c8 1000 	streq.w	r1, [r8]
 8009a44:	5162      	str	r2, [r4, r5]
 8009a46:	604b      	str	r3, [r1, #4]
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f000 f82f 	bl	8009aac <__malloc_unlock>
 8009a4e:	f104 000b 	add.w	r0, r4, #11
 8009a52:	1d23      	adds	r3, r4, #4
 8009a54:	f020 0007 	bic.w	r0, r0, #7
 8009a58:	1ac2      	subs	r2, r0, r3
 8009a5a:	bf1c      	itt	ne
 8009a5c:	1a1b      	subne	r3, r3, r0
 8009a5e:	50a3      	strne	r3, [r4, r2]
 8009a60:	e7af      	b.n	80099c2 <_malloc_r+0x22>
 8009a62:	6862      	ldr	r2, [r4, #4]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	bf0c      	ite	eq
 8009a68:	f8c8 2000 	streq.w	r2, [r8]
 8009a6c:	605a      	strne	r2, [r3, #4]
 8009a6e:	e7eb      	b.n	8009a48 <_malloc_r+0xa8>
 8009a70:	4623      	mov	r3, r4
 8009a72:	6864      	ldr	r4, [r4, #4]
 8009a74:	e7ae      	b.n	80099d4 <_malloc_r+0x34>
 8009a76:	463c      	mov	r4, r7
 8009a78:	687f      	ldr	r7, [r7, #4]
 8009a7a:	e7b6      	b.n	80099ea <_malloc_r+0x4a>
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	d1fb      	bne.n	8009a7c <_malloc_r+0xdc>
 8009a84:	2300      	movs	r3, #0
 8009a86:	6053      	str	r3, [r2, #4]
 8009a88:	e7de      	b.n	8009a48 <_malloc_r+0xa8>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	6033      	str	r3, [r6, #0]
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f000 f80c 	bl	8009aac <__malloc_unlock>
 8009a94:	e794      	b.n	80099c0 <_malloc_r+0x20>
 8009a96:	6005      	str	r5, [r0, #0]
 8009a98:	e7d6      	b.n	8009a48 <_malloc_r+0xa8>
 8009a9a:	bf00      	nop
 8009a9c:	200075e0 	.word	0x200075e0

08009aa0 <__malloc_lock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	@ (8009aa8 <__malloc_lock+0x8>)
 8009aa2:	f7ff bf0f 	b.w	80098c4 <__retarget_lock_acquire_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	200075d8 	.word	0x200075d8

08009aac <__malloc_unlock>:
 8009aac:	4801      	ldr	r0, [pc, #4]	@ (8009ab4 <__malloc_unlock+0x8>)
 8009aae:	f7ff bf0a 	b.w	80098c6 <__retarget_lock_release_recursive>
 8009ab2:	bf00      	nop
 8009ab4:	200075d8 	.word	0x200075d8

08009ab8 <__ssputs_r>:
 8009ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	688e      	ldr	r6, [r1, #8]
 8009abe:	461f      	mov	r7, r3
 8009ac0:	42be      	cmp	r6, r7
 8009ac2:	680b      	ldr	r3, [r1, #0]
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	4690      	mov	r8, r2
 8009aca:	d82d      	bhi.n	8009b28 <__ssputs_r+0x70>
 8009acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ad4:	d026      	beq.n	8009b24 <__ssputs_r+0x6c>
 8009ad6:	6965      	ldr	r5, [r4, #20]
 8009ad8:	6909      	ldr	r1, [r1, #16]
 8009ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ade:	eba3 0901 	sub.w	r9, r3, r1
 8009ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ae6:	1c7b      	adds	r3, r7, #1
 8009ae8:	444b      	add	r3, r9
 8009aea:	106d      	asrs	r5, r5, #1
 8009aec:	429d      	cmp	r5, r3
 8009aee:	bf38      	it	cc
 8009af0:	461d      	movcc	r5, r3
 8009af2:	0553      	lsls	r3, r2, #21
 8009af4:	d527      	bpl.n	8009b46 <__ssputs_r+0x8e>
 8009af6:	4629      	mov	r1, r5
 8009af8:	f7ff ff52 	bl	80099a0 <_malloc_r>
 8009afc:	4606      	mov	r6, r0
 8009afe:	b360      	cbz	r0, 8009b5a <__ssputs_r+0xa2>
 8009b00:	6921      	ldr	r1, [r4, #16]
 8009b02:	464a      	mov	r2, r9
 8009b04:	f000 fae8 	bl	800a0d8 <memcpy>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	6126      	str	r6, [r4, #16]
 8009b16:	6165      	str	r5, [r4, #20]
 8009b18:	444e      	add	r6, r9
 8009b1a:	eba5 0509 	sub.w	r5, r5, r9
 8009b1e:	6026      	str	r6, [r4, #0]
 8009b20:	60a5      	str	r5, [r4, #8]
 8009b22:	463e      	mov	r6, r7
 8009b24:	42be      	cmp	r6, r7
 8009b26:	d900      	bls.n	8009b2a <__ssputs_r+0x72>
 8009b28:	463e      	mov	r6, r7
 8009b2a:	6820      	ldr	r0, [r4, #0]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4641      	mov	r1, r8
 8009b30:	f000 faa8 	bl	800a084 <memmove>
 8009b34:	68a3      	ldr	r3, [r4, #8]
 8009b36:	1b9b      	subs	r3, r3, r6
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	4433      	add	r3, r6
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	2000      	movs	r0, #0
 8009b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b46:	462a      	mov	r2, r5
 8009b48:	f000 fad4 	bl	800a0f4 <_realloc_r>
 8009b4c:	4606      	mov	r6, r0
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d1e0      	bne.n	8009b14 <__ssputs_r+0x5c>
 8009b52:	6921      	ldr	r1, [r4, #16]
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7ff feb7 	bl	80098c8 <_free_r>
 8009b5a:	230c      	movs	r3, #12
 8009b5c:	f8ca 3000 	str.w	r3, [sl]
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b66:	81a3      	strh	r3, [r4, #12]
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	e7e9      	b.n	8009b42 <__ssputs_r+0x8a>
	...

08009b70 <_svfiprintf_r>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	4698      	mov	r8, r3
 8009b76:	898b      	ldrh	r3, [r1, #12]
 8009b78:	061b      	lsls	r3, r3, #24
 8009b7a:	b09d      	sub	sp, #116	@ 0x74
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	4614      	mov	r4, r2
 8009b82:	d510      	bpl.n	8009ba6 <_svfiprintf_r+0x36>
 8009b84:	690b      	ldr	r3, [r1, #16]
 8009b86:	b973      	cbnz	r3, 8009ba6 <_svfiprintf_r+0x36>
 8009b88:	2140      	movs	r1, #64	@ 0x40
 8009b8a:	f7ff ff09 	bl	80099a0 <_malloc_r>
 8009b8e:	6028      	str	r0, [r5, #0]
 8009b90:	6128      	str	r0, [r5, #16]
 8009b92:	b930      	cbnz	r0, 8009ba2 <_svfiprintf_r+0x32>
 8009b94:	230c      	movs	r3, #12
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	b01d      	add	sp, #116	@ 0x74
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	2340      	movs	r3, #64	@ 0x40
 8009ba4:	616b      	str	r3, [r5, #20]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009baa:	2320      	movs	r3, #32
 8009bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bb4:	2330      	movs	r3, #48	@ 0x30
 8009bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d54 <_svfiprintf_r+0x1e4>
 8009bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bbe:	f04f 0901 	mov.w	r9, #1
 8009bc2:	4623      	mov	r3, r4
 8009bc4:	469a      	mov	sl, r3
 8009bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bca:	b10a      	cbz	r2, 8009bd0 <_svfiprintf_r+0x60>
 8009bcc:	2a25      	cmp	r2, #37	@ 0x25
 8009bce:	d1f9      	bne.n	8009bc4 <_svfiprintf_r+0x54>
 8009bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8009bd4:	d00b      	beq.n	8009bee <_svfiprintf_r+0x7e>
 8009bd6:	465b      	mov	r3, fp
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4629      	mov	r1, r5
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7ff ff6b 	bl	8009ab8 <__ssputs_r>
 8009be2:	3001      	adds	r0, #1
 8009be4:	f000 80a7 	beq.w	8009d36 <_svfiprintf_r+0x1c6>
 8009be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bea:	445a      	add	r2, fp
 8009bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bee:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 809f 	beq.w	8009d36 <_svfiprintf_r+0x1c6>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c02:	f10a 0a01 	add.w	sl, sl, #1
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	9307      	str	r3, [sp, #28]
 8009c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c10:	4654      	mov	r4, sl
 8009c12:	2205      	movs	r2, #5
 8009c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c18:	484e      	ldr	r0, [pc, #312]	@ (8009d54 <_svfiprintf_r+0x1e4>)
 8009c1a:	f7f6 fb41 	bl	80002a0 <memchr>
 8009c1e:	9a04      	ldr	r2, [sp, #16]
 8009c20:	b9d8      	cbnz	r0, 8009c5a <_svfiprintf_r+0xea>
 8009c22:	06d0      	lsls	r0, r2, #27
 8009c24:	bf44      	itt	mi
 8009c26:	2320      	movmi	r3, #32
 8009c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c2c:	0711      	lsls	r1, r2, #28
 8009c2e:	bf44      	itt	mi
 8009c30:	232b      	movmi	r3, #43	@ 0x2b
 8009c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c36:	f89a 3000 	ldrb.w	r3, [sl]
 8009c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c3c:	d015      	beq.n	8009c6a <_svfiprintf_r+0xfa>
 8009c3e:	9a07      	ldr	r2, [sp, #28]
 8009c40:	4654      	mov	r4, sl
 8009c42:	2000      	movs	r0, #0
 8009c44:	f04f 0c0a 	mov.w	ip, #10
 8009c48:	4621      	mov	r1, r4
 8009c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c4e:	3b30      	subs	r3, #48	@ 0x30
 8009c50:	2b09      	cmp	r3, #9
 8009c52:	d94b      	bls.n	8009cec <_svfiprintf_r+0x17c>
 8009c54:	b1b0      	cbz	r0, 8009c84 <_svfiprintf_r+0x114>
 8009c56:	9207      	str	r2, [sp, #28]
 8009c58:	e014      	b.n	8009c84 <_svfiprintf_r+0x114>
 8009c5a:	eba0 0308 	sub.w	r3, r0, r8
 8009c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c62:	4313      	orrs	r3, r2
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	46a2      	mov	sl, r4
 8009c68:	e7d2      	b.n	8009c10 <_svfiprintf_r+0xa0>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	1d19      	adds	r1, r3, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	9103      	str	r1, [sp, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bfbb      	ittet	lt
 8009c76:	425b      	neglt	r3, r3
 8009c78:	f042 0202 	orrlt.w	r2, r2, #2
 8009c7c:	9307      	strge	r3, [sp, #28]
 8009c7e:	9307      	strlt	r3, [sp, #28]
 8009c80:	bfb8      	it	lt
 8009c82:	9204      	strlt	r2, [sp, #16]
 8009c84:	7823      	ldrb	r3, [r4, #0]
 8009c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c88:	d10a      	bne.n	8009ca0 <_svfiprintf_r+0x130>
 8009c8a:	7863      	ldrb	r3, [r4, #1]
 8009c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c8e:	d132      	bne.n	8009cf6 <_svfiprintf_r+0x186>
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	1d1a      	adds	r2, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	9203      	str	r2, [sp, #12]
 8009c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c9c:	3402      	adds	r4, #2
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d64 <_svfiprintf_r+0x1f4>
 8009ca4:	7821      	ldrb	r1, [r4, #0]
 8009ca6:	2203      	movs	r2, #3
 8009ca8:	4650      	mov	r0, sl
 8009caa:	f7f6 faf9 	bl	80002a0 <memchr>
 8009cae:	b138      	cbz	r0, 8009cc0 <_svfiprintf_r+0x150>
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	eba0 000a 	sub.w	r0, r0, sl
 8009cb6:	2240      	movs	r2, #64	@ 0x40
 8009cb8:	4082      	lsls	r2, r0
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9304      	str	r3, [sp, #16]
 8009cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc4:	4824      	ldr	r0, [pc, #144]	@ (8009d58 <_svfiprintf_r+0x1e8>)
 8009cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cca:	2206      	movs	r2, #6
 8009ccc:	f7f6 fae8 	bl	80002a0 <memchr>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d036      	beq.n	8009d42 <_svfiprintf_r+0x1d2>
 8009cd4:	4b21      	ldr	r3, [pc, #132]	@ (8009d5c <_svfiprintf_r+0x1ec>)
 8009cd6:	bb1b      	cbnz	r3, 8009d20 <_svfiprintf_r+0x1b0>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	3307      	adds	r3, #7
 8009cdc:	f023 0307 	bic.w	r3, r3, #7
 8009ce0:	3308      	adds	r3, #8
 8009ce2:	9303      	str	r3, [sp, #12]
 8009ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce6:	4433      	add	r3, r6
 8009ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cea:	e76a      	b.n	8009bc2 <_svfiprintf_r+0x52>
 8009cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	e7a8      	b.n	8009c48 <_svfiprintf_r+0xd8>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	3401      	adds	r4, #1
 8009cfa:	9305      	str	r3, [sp, #20]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	f04f 0c0a 	mov.w	ip, #10
 8009d02:	4620      	mov	r0, r4
 8009d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d08:	3a30      	subs	r2, #48	@ 0x30
 8009d0a:	2a09      	cmp	r2, #9
 8009d0c:	d903      	bls.n	8009d16 <_svfiprintf_r+0x1a6>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0c6      	beq.n	8009ca0 <_svfiprintf_r+0x130>
 8009d12:	9105      	str	r1, [sp, #20]
 8009d14:	e7c4      	b.n	8009ca0 <_svfiprintf_r+0x130>
 8009d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e7f0      	b.n	8009d02 <_svfiprintf_r+0x192>
 8009d20:	ab03      	add	r3, sp, #12
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	462a      	mov	r2, r5
 8009d26:	4b0e      	ldr	r3, [pc, #56]	@ (8009d60 <_svfiprintf_r+0x1f0>)
 8009d28:	a904      	add	r1, sp, #16
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	f3af 8000 	nop.w
 8009d30:	1c42      	adds	r2, r0, #1
 8009d32:	4606      	mov	r6, r0
 8009d34:	d1d6      	bne.n	8009ce4 <_svfiprintf_r+0x174>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	065b      	lsls	r3, r3, #25
 8009d3a:	f53f af2d 	bmi.w	8009b98 <_svfiprintf_r+0x28>
 8009d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d40:	e72c      	b.n	8009b9c <_svfiprintf_r+0x2c>
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4b05      	ldr	r3, [pc, #20]	@ (8009d60 <_svfiprintf_r+0x1f0>)
 8009d4a:	a904      	add	r1, sp, #16
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f000 f879 	bl	8009e44 <_printf_i>
 8009d52:	e7ed      	b.n	8009d30 <_svfiprintf_r+0x1c0>
 8009d54:	0801ea18 	.word	0x0801ea18
 8009d58:	0801ea22 	.word	0x0801ea22
 8009d5c:	00000000 	.word	0x00000000
 8009d60:	08009ab9 	.word	0x08009ab9
 8009d64:	0801ea1e 	.word	0x0801ea1e

08009d68 <_printf_common>:
 8009d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	4616      	mov	r6, r2
 8009d6e:	4698      	mov	r8, r3
 8009d70:	688a      	ldr	r2, [r1, #8]
 8009d72:	690b      	ldr	r3, [r1, #16]
 8009d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	bfb8      	it	lt
 8009d7c:	4613      	movlt	r3, r2
 8009d7e:	6033      	str	r3, [r6, #0]
 8009d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d84:	4607      	mov	r7, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	b10a      	cbz	r2, 8009d8e <_printf_common+0x26>
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	6033      	str	r3, [r6, #0]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	0699      	lsls	r1, r3, #26
 8009d92:	bf42      	ittt	mi
 8009d94:	6833      	ldrmi	r3, [r6, #0]
 8009d96:	3302      	addmi	r3, #2
 8009d98:	6033      	strmi	r3, [r6, #0]
 8009d9a:	6825      	ldr	r5, [r4, #0]
 8009d9c:	f015 0506 	ands.w	r5, r5, #6
 8009da0:	d106      	bne.n	8009db0 <_printf_common+0x48>
 8009da2:	f104 0a19 	add.w	sl, r4, #25
 8009da6:	68e3      	ldr	r3, [r4, #12]
 8009da8:	6832      	ldr	r2, [r6, #0]
 8009daa:	1a9b      	subs	r3, r3, r2
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	dc26      	bgt.n	8009dfe <_printf_common+0x96>
 8009db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	3b00      	subs	r3, #0
 8009db8:	bf18      	it	ne
 8009dba:	2301      	movne	r3, #1
 8009dbc:	0692      	lsls	r2, r2, #26
 8009dbe:	d42b      	bmi.n	8009e18 <_printf_common+0xb0>
 8009dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c8      	blx	r9
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d01e      	beq.n	8009e0c <_printf_common+0xa4>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	6922      	ldr	r2, [r4, #16]
 8009dd2:	f003 0306 	and.w	r3, r3, #6
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	bf02      	ittt	eq
 8009dda:	68e5      	ldreq	r5, [r4, #12]
 8009ddc:	6833      	ldreq	r3, [r6, #0]
 8009dde:	1aed      	subeq	r5, r5, r3
 8009de0:	68a3      	ldr	r3, [r4, #8]
 8009de2:	bf0c      	ite	eq
 8009de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009de8:	2500      	movne	r5, #0
 8009dea:	4293      	cmp	r3, r2
 8009dec:	bfc4      	itt	gt
 8009dee:	1a9b      	subgt	r3, r3, r2
 8009df0:	18ed      	addgt	r5, r5, r3
 8009df2:	2600      	movs	r6, #0
 8009df4:	341a      	adds	r4, #26
 8009df6:	42b5      	cmp	r5, r6
 8009df8:	d11a      	bne.n	8009e30 <_printf_common+0xc8>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e008      	b.n	8009e10 <_printf_common+0xa8>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4652      	mov	r2, sl
 8009e02:	4641      	mov	r1, r8
 8009e04:	4638      	mov	r0, r7
 8009e06:	47c8      	blx	r9
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d103      	bne.n	8009e14 <_printf_common+0xac>
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e14:	3501      	adds	r5, #1
 8009e16:	e7c6      	b.n	8009da6 <_printf_common+0x3e>
 8009e18:	18e1      	adds	r1, r4, r3
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	2030      	movs	r0, #48	@ 0x30
 8009e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e22:	4422      	add	r2, r4
 8009e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e2c:	3302      	adds	r3, #2
 8009e2e:	e7c7      	b.n	8009dc0 <_printf_common+0x58>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4622      	mov	r2, r4
 8009e34:	4641      	mov	r1, r8
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c8      	blx	r9
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d0e6      	beq.n	8009e0c <_printf_common+0xa4>
 8009e3e:	3601      	adds	r6, #1
 8009e40:	e7d9      	b.n	8009df6 <_printf_common+0x8e>
	...

08009e44 <_printf_i>:
 8009e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e48:	7e0f      	ldrb	r7, [r1, #24]
 8009e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e4c:	2f78      	cmp	r7, #120	@ 0x78
 8009e4e:	4691      	mov	r9, r2
 8009e50:	4680      	mov	r8, r0
 8009e52:	460c      	mov	r4, r1
 8009e54:	469a      	mov	sl, r3
 8009e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e5a:	d807      	bhi.n	8009e6c <_printf_i+0x28>
 8009e5c:	2f62      	cmp	r7, #98	@ 0x62
 8009e5e:	d80a      	bhi.n	8009e76 <_printf_i+0x32>
 8009e60:	2f00      	cmp	r7, #0
 8009e62:	f000 80d2 	beq.w	800a00a <_printf_i+0x1c6>
 8009e66:	2f58      	cmp	r7, #88	@ 0x58
 8009e68:	f000 80b9 	beq.w	8009fde <_printf_i+0x19a>
 8009e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e74:	e03a      	b.n	8009eec <_printf_i+0xa8>
 8009e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e7a:	2b15      	cmp	r3, #21
 8009e7c:	d8f6      	bhi.n	8009e6c <_printf_i+0x28>
 8009e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8009e84 <_printf_i+0x40>)
 8009e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e84:	08009edd 	.word	0x08009edd
 8009e88:	08009ef1 	.word	0x08009ef1
 8009e8c:	08009e6d 	.word	0x08009e6d
 8009e90:	08009e6d 	.word	0x08009e6d
 8009e94:	08009e6d 	.word	0x08009e6d
 8009e98:	08009e6d 	.word	0x08009e6d
 8009e9c:	08009ef1 	.word	0x08009ef1
 8009ea0:	08009e6d 	.word	0x08009e6d
 8009ea4:	08009e6d 	.word	0x08009e6d
 8009ea8:	08009e6d 	.word	0x08009e6d
 8009eac:	08009e6d 	.word	0x08009e6d
 8009eb0:	08009ff1 	.word	0x08009ff1
 8009eb4:	08009f1b 	.word	0x08009f1b
 8009eb8:	08009fab 	.word	0x08009fab
 8009ebc:	08009e6d 	.word	0x08009e6d
 8009ec0:	08009e6d 	.word	0x08009e6d
 8009ec4:	0800a013 	.word	0x0800a013
 8009ec8:	08009e6d 	.word	0x08009e6d
 8009ecc:	08009f1b 	.word	0x08009f1b
 8009ed0:	08009e6d 	.word	0x08009e6d
 8009ed4:	08009e6d 	.word	0x08009e6d
 8009ed8:	08009fb3 	.word	0x08009fb3
 8009edc:	6833      	ldr	r3, [r6, #0]
 8009ede:	1d1a      	adds	r2, r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6032      	str	r2, [r6, #0]
 8009ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eec:	2301      	movs	r3, #1
 8009eee:	e09d      	b.n	800a02c <_printf_i+0x1e8>
 8009ef0:	6833      	ldr	r3, [r6, #0]
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	1d19      	adds	r1, r3, #4
 8009ef6:	6031      	str	r1, [r6, #0]
 8009ef8:	0606      	lsls	r6, r0, #24
 8009efa:	d501      	bpl.n	8009f00 <_printf_i+0xbc>
 8009efc:	681d      	ldr	r5, [r3, #0]
 8009efe:	e003      	b.n	8009f08 <_printf_i+0xc4>
 8009f00:	0645      	lsls	r5, r0, #25
 8009f02:	d5fb      	bpl.n	8009efc <_printf_i+0xb8>
 8009f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	da03      	bge.n	8009f14 <_printf_i+0xd0>
 8009f0c:	232d      	movs	r3, #45	@ 0x2d
 8009f0e:	426d      	negs	r5, r5
 8009f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f14:	4859      	ldr	r0, [pc, #356]	@ (800a07c <_printf_i+0x238>)
 8009f16:	230a      	movs	r3, #10
 8009f18:	e011      	b.n	8009f3e <_printf_i+0xfa>
 8009f1a:	6821      	ldr	r1, [r4, #0]
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	0608      	lsls	r0, r1, #24
 8009f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f24:	d402      	bmi.n	8009f2c <_printf_i+0xe8>
 8009f26:	0649      	lsls	r1, r1, #25
 8009f28:	bf48      	it	mi
 8009f2a:	b2ad      	uxthmi	r5, r5
 8009f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f2e:	4853      	ldr	r0, [pc, #332]	@ (800a07c <_printf_i+0x238>)
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	bf14      	ite	ne
 8009f34:	230a      	movne	r3, #10
 8009f36:	2308      	moveq	r3, #8
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f3e:	6866      	ldr	r6, [r4, #4]
 8009f40:	60a6      	str	r6, [r4, #8]
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	bfa2      	ittt	ge
 8009f46:	6821      	ldrge	r1, [r4, #0]
 8009f48:	f021 0104 	bicge.w	r1, r1, #4
 8009f4c:	6021      	strge	r1, [r4, #0]
 8009f4e:	b90d      	cbnz	r5, 8009f54 <_printf_i+0x110>
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	d04b      	beq.n	8009fec <_printf_i+0x1a8>
 8009f54:	4616      	mov	r6, r2
 8009f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8009f5e:	5dc7      	ldrb	r7, [r0, r7]
 8009f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f64:	462f      	mov	r7, r5
 8009f66:	42bb      	cmp	r3, r7
 8009f68:	460d      	mov	r5, r1
 8009f6a:	d9f4      	bls.n	8009f56 <_printf_i+0x112>
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d10b      	bne.n	8009f88 <_printf_i+0x144>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	07df      	lsls	r7, r3, #31
 8009f74:	d508      	bpl.n	8009f88 <_printf_i+0x144>
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	6861      	ldr	r1, [r4, #4]
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	bfde      	ittt	le
 8009f7e:	2330      	movle	r3, #48	@ 0x30
 8009f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f88:	1b92      	subs	r2, r2, r6
 8009f8a:	6122      	str	r2, [r4, #16]
 8009f8c:	f8cd a000 	str.w	sl, [sp]
 8009f90:	464b      	mov	r3, r9
 8009f92:	aa03      	add	r2, sp, #12
 8009f94:	4621      	mov	r1, r4
 8009f96:	4640      	mov	r0, r8
 8009f98:	f7ff fee6 	bl	8009d68 <_printf_common>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d14a      	bne.n	800a036 <_printf_i+0x1f2>
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	b004      	add	sp, #16
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	f043 0320 	orr.w	r3, r3, #32
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	4833      	ldr	r0, [pc, #204]	@ (800a080 <_printf_i+0x23c>)
 8009fb4:	2778      	movs	r7, #120	@ 0x78
 8009fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	6831      	ldr	r1, [r6, #0]
 8009fbe:	061f      	lsls	r7, r3, #24
 8009fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fc4:	d402      	bmi.n	8009fcc <_printf_i+0x188>
 8009fc6:	065f      	lsls	r7, r3, #25
 8009fc8:	bf48      	it	mi
 8009fca:	b2ad      	uxthmi	r5, r5
 8009fcc:	6031      	str	r1, [r6, #0]
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	bf44      	itt	mi
 8009fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009fd6:	6023      	strmi	r3, [r4, #0]
 8009fd8:	b11d      	cbz	r5, 8009fe2 <_printf_i+0x19e>
 8009fda:	2310      	movs	r3, #16
 8009fdc:	e7ac      	b.n	8009f38 <_printf_i+0xf4>
 8009fde:	4827      	ldr	r0, [pc, #156]	@ (800a07c <_printf_i+0x238>)
 8009fe0:	e7e9      	b.n	8009fb6 <_printf_i+0x172>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f023 0320 	bic.w	r3, r3, #32
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	e7f6      	b.n	8009fda <_printf_i+0x196>
 8009fec:	4616      	mov	r6, r2
 8009fee:	e7bd      	b.n	8009f6c <_printf_i+0x128>
 8009ff0:	6833      	ldr	r3, [r6, #0]
 8009ff2:	6825      	ldr	r5, [r4, #0]
 8009ff4:	6961      	ldr	r1, [r4, #20]
 8009ff6:	1d18      	adds	r0, r3, #4
 8009ff8:	6030      	str	r0, [r6, #0]
 8009ffa:	062e      	lsls	r6, r5, #24
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	d501      	bpl.n	800a004 <_printf_i+0x1c0>
 800a000:	6019      	str	r1, [r3, #0]
 800a002:	e002      	b.n	800a00a <_printf_i+0x1c6>
 800a004:	0668      	lsls	r0, r5, #25
 800a006:	d5fb      	bpl.n	800a000 <_printf_i+0x1bc>
 800a008:	8019      	strh	r1, [r3, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	6123      	str	r3, [r4, #16]
 800a00e:	4616      	mov	r6, r2
 800a010:	e7bc      	b.n	8009f8c <_printf_i+0x148>
 800a012:	6833      	ldr	r3, [r6, #0]
 800a014:	1d1a      	adds	r2, r3, #4
 800a016:	6032      	str	r2, [r6, #0]
 800a018:	681e      	ldr	r6, [r3, #0]
 800a01a:	6862      	ldr	r2, [r4, #4]
 800a01c:	2100      	movs	r1, #0
 800a01e:	4630      	mov	r0, r6
 800a020:	f7f6 f93e 	bl	80002a0 <memchr>
 800a024:	b108      	cbz	r0, 800a02a <_printf_i+0x1e6>
 800a026:	1b80      	subs	r0, r0, r6
 800a028:	6060      	str	r0, [r4, #4]
 800a02a:	6863      	ldr	r3, [r4, #4]
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	2300      	movs	r3, #0
 800a030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a034:	e7aa      	b.n	8009f8c <_printf_i+0x148>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	4632      	mov	r2, r6
 800a03a:	4649      	mov	r1, r9
 800a03c:	4640      	mov	r0, r8
 800a03e:	47d0      	blx	sl
 800a040:	3001      	adds	r0, #1
 800a042:	d0ad      	beq.n	8009fa0 <_printf_i+0x15c>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	079b      	lsls	r3, r3, #30
 800a048:	d413      	bmi.n	800a072 <_printf_i+0x22e>
 800a04a:	68e0      	ldr	r0, [r4, #12]
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	4298      	cmp	r0, r3
 800a050:	bfb8      	it	lt
 800a052:	4618      	movlt	r0, r3
 800a054:	e7a6      	b.n	8009fa4 <_printf_i+0x160>
 800a056:	2301      	movs	r3, #1
 800a058:	4632      	mov	r2, r6
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	47d0      	blx	sl
 800a060:	3001      	adds	r0, #1
 800a062:	d09d      	beq.n	8009fa0 <_printf_i+0x15c>
 800a064:	3501      	adds	r5, #1
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	9903      	ldr	r1, [sp, #12]
 800a06a:	1a5b      	subs	r3, r3, r1
 800a06c:	42ab      	cmp	r3, r5
 800a06e:	dcf2      	bgt.n	800a056 <_printf_i+0x212>
 800a070:	e7eb      	b.n	800a04a <_printf_i+0x206>
 800a072:	2500      	movs	r5, #0
 800a074:	f104 0619 	add.w	r6, r4, #25
 800a078:	e7f5      	b.n	800a066 <_printf_i+0x222>
 800a07a:	bf00      	nop
 800a07c:	0801ea29 	.word	0x0801ea29
 800a080:	0801ea3a 	.word	0x0801ea3a

0800a084 <memmove>:
 800a084:	4288      	cmp	r0, r1
 800a086:	b510      	push	{r4, lr}
 800a088:	eb01 0402 	add.w	r4, r1, r2
 800a08c:	d902      	bls.n	800a094 <memmove+0x10>
 800a08e:	4284      	cmp	r4, r0
 800a090:	4623      	mov	r3, r4
 800a092:	d807      	bhi.n	800a0a4 <memmove+0x20>
 800a094:	1e43      	subs	r3, r0, #1
 800a096:	42a1      	cmp	r1, r4
 800a098:	d008      	beq.n	800a0ac <memmove+0x28>
 800a09a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a09e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0a2:	e7f8      	b.n	800a096 <memmove+0x12>
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	428a      	cmp	r2, r1
 800a0aa:	d100      	bne.n	800a0ae <memmove+0x2a>
 800a0ac:	bd10      	pop	{r4, pc}
 800a0ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0b6:	e7f7      	b.n	800a0a8 <memmove+0x24>

0800a0b8 <_sbrk_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	@ (800a0d4 <_sbrk_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f8 fa94 	bl	80025f0 <_sbrk>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_sbrk_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_sbrk_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	200075d4 	.word	0x200075d4

0800a0d8 <memcpy>:
 800a0d8:	440a      	add	r2, r1
 800a0da:	4291      	cmp	r1, r2
 800a0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e0:	d100      	bne.n	800a0e4 <memcpy+0xc>
 800a0e2:	4770      	bx	lr
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ee:	4291      	cmp	r1, r2
 800a0f0:	d1f9      	bne.n	800a0e6 <memcpy+0xe>
 800a0f2:	bd10      	pop	{r4, pc}

0800a0f4 <_realloc_r>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	4680      	mov	r8, r0
 800a0fa:	4615      	mov	r5, r2
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	b921      	cbnz	r1, 800a10a <_realloc_r+0x16>
 800a100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	4611      	mov	r1, r2
 800a106:	f7ff bc4b 	b.w	80099a0 <_malloc_r>
 800a10a:	b92a      	cbnz	r2, 800a118 <_realloc_r+0x24>
 800a10c:	f7ff fbdc 	bl	80098c8 <_free_r>
 800a110:	2400      	movs	r4, #0
 800a112:	4620      	mov	r0, r4
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	f000 f81a 	bl	800a150 <_malloc_usable_size_r>
 800a11c:	4285      	cmp	r5, r0
 800a11e:	4606      	mov	r6, r0
 800a120:	d802      	bhi.n	800a128 <_realloc_r+0x34>
 800a122:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a126:	d8f4      	bhi.n	800a112 <_realloc_r+0x1e>
 800a128:	4629      	mov	r1, r5
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7ff fc38 	bl	80099a0 <_malloc_r>
 800a130:	4607      	mov	r7, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d0ec      	beq.n	800a110 <_realloc_r+0x1c>
 800a136:	42b5      	cmp	r5, r6
 800a138:	462a      	mov	r2, r5
 800a13a:	4621      	mov	r1, r4
 800a13c:	bf28      	it	cs
 800a13e:	4632      	movcs	r2, r6
 800a140:	f7ff ffca 	bl	800a0d8 <memcpy>
 800a144:	4621      	mov	r1, r4
 800a146:	4640      	mov	r0, r8
 800a148:	f7ff fbbe 	bl	80098c8 <_free_r>
 800a14c:	463c      	mov	r4, r7
 800a14e:	e7e0      	b.n	800a112 <_realloc_r+0x1e>

0800a150 <_malloc_usable_size_r>:
 800a150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a154:	1f18      	subs	r0, r3, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfbc      	itt	lt
 800a15a:	580b      	ldrlt	r3, [r1, r0]
 800a15c:	18c0      	addlt	r0, r0, r3
 800a15e:	4770      	bx	lr

0800a160 <cos>:
 800a160:	b530      	push	{r4, r5, lr}
 800a162:	4d20      	ldr	r5, [pc, #128]	@ (800a1e4 <cos+0x84>)
 800a164:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a168:	42ac      	cmp	r4, r5
 800a16a:	b087      	sub	sp, #28
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	d806      	bhi.n	800a180 <cos+0x20>
 800a172:	2200      	movs	r2, #0
 800a174:	2300      	movs	r3, #0
 800a176:	b007      	add	sp, #28
 800a178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a17c:	f000 b92c 	b.w	800a3d8 <__kernel_cos>
 800a180:	4d19      	ldr	r5, [pc, #100]	@ (800a1e8 <cos+0x88>)
 800a182:	42ac      	cmp	r4, r5
 800a184:	d903      	bls.n	800a18e <cos+0x2e>
 800a186:	f7f6 f8df 	bl	8000348 <__aeabi_dsub>
 800a18a:	b007      	add	sp, #28
 800a18c:	bd30      	pop	{r4, r5, pc}
 800a18e:	aa02      	add	r2, sp, #8
 800a190:	f000 fa9a 	bl	800a6c8 <__ieee754_rem_pio2>
 800a194:	f000 0003 	and.w	r0, r0, #3
 800a198:	2801      	cmp	r0, #1
 800a19a:	d009      	beq.n	800a1b0 <cos+0x50>
 800a19c:	2802      	cmp	r0, #2
 800a19e:	d011      	beq.n	800a1c4 <cos+0x64>
 800a1a0:	b9b8      	cbnz	r0, 800a1d2 <cos+0x72>
 800a1a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1aa:	f000 f915 	bl	800a3d8 <__kernel_cos>
 800a1ae:	e7ec      	b.n	800a18a <cos+0x2a>
 800a1b0:	9000      	str	r0, [sp, #0]
 800a1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ba:	f000 f9cd 	bl	800a558 <__kernel_sin>
 800a1be:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a1c2:	e7e2      	b.n	800a18a <cos+0x2a>
 800a1c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1cc:	f000 f904 	bl	800a3d8 <__kernel_cos>
 800a1d0:	e7f5      	b.n	800a1be <cos+0x5e>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1de:	f000 f9bb 	bl	800a558 <__kernel_sin>
 800a1e2:	e7d2      	b.n	800a18a <cos+0x2a>
 800a1e4:	3fe921fb 	.word	0x3fe921fb
 800a1e8:	7fefffff 	.word	0x7fefffff

0800a1ec <fabs>:
 800a1ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4770      	bx	lr

0800a1f4 <sin>:
 800a1f4:	b530      	push	{r4, r5, lr}
 800a1f6:	4d20      	ldr	r5, [pc, #128]	@ (800a278 <sin+0x84>)
 800a1f8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a1fc:	42ac      	cmp	r4, r5
 800a1fe:	b087      	sub	sp, #28
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	d806      	bhi.n	800a214 <sin+0x20>
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2300      	movs	r3, #0
 800a20e:	f000 f9a3 	bl	800a558 <__kernel_sin>
 800a212:	e004      	b.n	800a21e <sin+0x2a>
 800a214:	4d19      	ldr	r5, [pc, #100]	@ (800a27c <sin+0x88>)
 800a216:	42ac      	cmp	r4, r5
 800a218:	d903      	bls.n	800a222 <sin+0x2e>
 800a21a:	f7f6 f895 	bl	8000348 <__aeabi_dsub>
 800a21e:	b007      	add	sp, #28
 800a220:	bd30      	pop	{r4, r5, pc}
 800a222:	aa02      	add	r2, sp, #8
 800a224:	f000 fa50 	bl	800a6c8 <__ieee754_rem_pio2>
 800a228:	f000 0003 	and.w	r0, r0, #3
 800a22c:	2801      	cmp	r0, #1
 800a22e:	d009      	beq.n	800a244 <sin+0x50>
 800a230:	2802      	cmp	r0, #2
 800a232:	d00e      	beq.n	800a252 <sin+0x5e>
 800a234:	b9c0      	cbnz	r0, 800a268 <sin+0x74>
 800a236:	2301      	movs	r3, #1
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a242:	e7e4      	b.n	800a20e <sin+0x1a>
 800a244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24c:	f000 f8c4 	bl	800a3d8 <__kernel_cos>
 800a250:	e7e5      	b.n	800a21e <sin+0x2a>
 800a252:	2301      	movs	r3, #1
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a25e:	f000 f97b 	bl	800a558 <__kernel_sin>
 800a262:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a266:	e7da      	b.n	800a21e <sin+0x2a>
 800a268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a26c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a270:	f000 f8b2 	bl	800a3d8 <__kernel_cos>
 800a274:	e7f5      	b.n	800a262 <sin+0x6e>
 800a276:	bf00      	nop
 800a278:	3fe921fb 	.word	0x3fe921fb
 800a27c:	7fefffff 	.word	0x7fefffff

0800a280 <atan2f>:
 800a280:	f000 bc18 	b.w	800aab4 <__ieee754_atan2f>

0800a284 <sqrtf>:
 800a284:	b508      	push	{r3, lr}
 800a286:	ed2d 8b02 	vpush	{d8}
 800a28a:	ee08 0a10 	vmov	s16, r0
 800a28e:	f000 f81b 	bl	800a2c8 <__ieee754_sqrtf>
 800a292:	eeb4 8a48 	vcmp.f32	s16, s16
 800a296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a29a:	ee07 0a90 	vmov	s15, r0
 800a29e:	d60c      	bvs.n	800a2ba <sqrtf+0x36>
 800a2a0:	eddf 8a08 	vldr	s17, [pc, #32]	@ 800a2c4 <sqrtf+0x40>
 800a2a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ac:	d505      	bpl.n	800a2ba <sqrtf+0x36>
 800a2ae:	f7ff fadf 	bl	8009870 <__errno>
 800a2b2:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800a2b6:	2321      	movs	r3, #33	@ 0x21
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	ecbd 8b02 	vpop	{d8}
 800a2be:	ee17 0a90 	vmov	r0, s15
 800a2c2:	bd08      	pop	{r3, pc}
 800a2c4:	00000000 	.word	0x00000000

0800a2c8 <__ieee754_sqrtf>:
 800a2c8:	ee07 0a90 	vmov	s15, r0
 800a2cc:	eef1 7ae7 	vsqrt.f32	s15, s15
 800a2d0:	ee17 0a90 	vmov	r0, s15
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <floor>:
 800a2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2dc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a2e0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a2e4:	2e13      	cmp	r6, #19
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	dc35      	bgt.n	800a35e <floor+0x86>
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	da17      	bge.n	800a326 <floor+0x4e>
 800a2f6:	a334      	add	r3, pc, #208	@ (adr r3, 800a3c8 <floor+0xf0>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7f6 f826 	bl	800034c <__adddf3>
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	f7f6 fc68 	bl	8000bd8 <__aeabi_dcmpgt>
 800a308:	b150      	cbz	r0, 800a320 <floor+0x48>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	da57      	bge.n	800a3be <floor+0xe6>
 800a30e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a312:	432c      	orrs	r4, r5
 800a314:	2500      	movs	r5, #0
 800a316:	42ac      	cmp	r4, r5
 800a318:	4c2d      	ldr	r4, [pc, #180]	@ (800a3d0 <floor+0xf8>)
 800a31a:	bf08      	it	eq
 800a31c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a320:	4623      	mov	r3, r4
 800a322:	462a      	mov	r2, r5
 800a324:	e024      	b.n	800a370 <floor+0x98>
 800a326:	4f2b      	ldr	r7, [pc, #172]	@ (800a3d4 <floor+0xfc>)
 800a328:	4137      	asrs	r7, r6
 800a32a:	ea01 0c07 	and.w	ip, r1, r7
 800a32e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a332:	d01d      	beq.n	800a370 <floor+0x98>
 800a334:	a324      	add	r3, pc, #144	@ (adr r3, 800a3c8 <floor+0xf0>)
 800a336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33a:	f7f6 f807 	bl	800034c <__adddf3>
 800a33e:	2200      	movs	r2, #0
 800a340:	2300      	movs	r3, #0
 800a342:	f7f6 fc49 	bl	8000bd8 <__aeabi_dcmpgt>
 800a346:	2800      	cmp	r0, #0
 800a348:	d0ea      	beq.n	800a320 <floor+0x48>
 800a34a:	2c00      	cmp	r4, #0
 800a34c:	bfbe      	ittt	lt
 800a34e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a352:	4133      	asrlt	r3, r6
 800a354:	18e4      	addlt	r4, r4, r3
 800a356:	ea24 0407 	bic.w	r4, r4, r7
 800a35a:	2500      	movs	r5, #0
 800a35c:	e7e0      	b.n	800a320 <floor+0x48>
 800a35e:	2e33      	cmp	r6, #51	@ 0x33
 800a360:	dd0a      	ble.n	800a378 <floor+0xa0>
 800a362:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a366:	d103      	bne.n	800a370 <floor+0x98>
 800a368:	f7f5 fff0 	bl	800034c <__adddf3>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4610      	mov	r0, r2
 800a372:	4619      	mov	r1, r3
 800a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a378:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a37c:	f04f 3cff 	mov.w	ip, #4294967295
 800a380:	fa2c f707 	lsr.w	r7, ip, r7
 800a384:	4207      	tst	r7, r0
 800a386:	d0f3      	beq.n	800a370 <floor+0x98>
 800a388:	a30f      	add	r3, pc, #60	@ (adr r3, 800a3c8 <floor+0xf0>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ffdd 	bl	800034c <__adddf3>
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	f7f6 fc1f 	bl	8000bd8 <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d0c0      	beq.n	800a320 <floor+0x48>
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	da0a      	bge.n	800a3b8 <floor+0xe0>
 800a3a2:	2e14      	cmp	r6, #20
 800a3a4:	d101      	bne.n	800a3aa <floor+0xd2>
 800a3a6:	3401      	adds	r4, #1
 800a3a8:	e006      	b.n	800a3b8 <floor+0xe0>
 800a3aa:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	40b3      	lsls	r3, r6
 800a3b2:	441d      	add	r5, r3
 800a3b4:	4545      	cmp	r5, r8
 800a3b6:	d3f6      	bcc.n	800a3a6 <floor+0xce>
 800a3b8:	ea25 0507 	bic.w	r5, r5, r7
 800a3bc:	e7b0      	b.n	800a320 <floor+0x48>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	462c      	mov	r4, r5
 800a3c2:	e7ad      	b.n	800a320 <floor+0x48>
 800a3c4:	f3af 8000 	nop.w
 800a3c8:	8800759c 	.word	0x8800759c
 800a3cc:	7e37e43c 	.word	0x7e37e43c
 800a3d0:	bff00000 	.word	0xbff00000
 800a3d4:	000fffff 	.word	0x000fffff

0800a3d8 <__kernel_cos>:
 800a3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a3e0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a3e4:	e9cd 2300 	strd	r2, r3, [sp]
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4689      	mov	r9, r1
 800a3ec:	d204      	bcs.n	800a3f8 <__kernel_cos+0x20>
 800a3ee:	f7f6 fbfd 	bl	8000bec <__aeabi_d2iz>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f000 8086 	beq.w	800a504 <__kernel_cos+0x12c>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7f6 f95a 	bl	80006b8 <__aeabi_dmul>
 800a404:	4b4e      	ldr	r3, [pc, #312]	@ (800a540 <__kernel_cos+0x168>)
 800a406:	2200      	movs	r2, #0
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	f7f6 f954 	bl	80006b8 <__aeabi_dmul>
 800a410:	a33f      	add	r3, pc, #252	@ (adr r3, 800a510 <__kernel_cos+0x138>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	4682      	mov	sl, r0
 800a418:	468b      	mov	fp, r1
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7f6 f94b 	bl	80006b8 <__aeabi_dmul>
 800a422:	a33d      	add	r3, pc, #244	@ (adr r3, 800a518 <__kernel_cos+0x140>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f5 ff90 	bl	800034c <__adddf3>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	f7f6 f942 	bl	80006b8 <__aeabi_dmul>
 800a434:	a33a      	add	r3, pc, #232	@ (adr r3, 800a520 <__kernel_cos+0x148>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f7f5 ff85 	bl	8000348 <__aeabi_dsub>
 800a43e:	4622      	mov	r2, r4
 800a440:	462b      	mov	r3, r5
 800a442:	f7f6 f939 	bl	80006b8 <__aeabi_dmul>
 800a446:	a338      	add	r3, pc, #224	@ (adr r3, 800a528 <__kernel_cos+0x150>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f5 ff7e 	bl	800034c <__adddf3>
 800a450:	4622      	mov	r2, r4
 800a452:	462b      	mov	r3, r5
 800a454:	f7f6 f930 	bl	80006b8 <__aeabi_dmul>
 800a458:	a335      	add	r3, pc, #212	@ (adr r3, 800a530 <__kernel_cos+0x158>)
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f7f5 ff73 	bl	8000348 <__aeabi_dsub>
 800a462:	4622      	mov	r2, r4
 800a464:	462b      	mov	r3, r5
 800a466:	f7f6 f927 	bl	80006b8 <__aeabi_dmul>
 800a46a:	a333      	add	r3, pc, #204	@ (adr r3, 800a538 <__kernel_cos+0x160>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	f7f5 ff6c 	bl	800034c <__adddf3>
 800a474:	4622      	mov	r2, r4
 800a476:	462b      	mov	r3, r5
 800a478:	f7f6 f91e 	bl	80006b8 <__aeabi_dmul>
 800a47c:	4622      	mov	r2, r4
 800a47e:	462b      	mov	r3, r5
 800a480:	f7f6 f91a 	bl	80006b8 <__aeabi_dmul>
 800a484:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a488:	4604      	mov	r4, r0
 800a48a:	460d      	mov	r5, r1
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f6 f912 	bl	80006b8 <__aeabi_dmul>
 800a494:	460b      	mov	r3, r1
 800a496:	4602      	mov	r2, r0
 800a498:	4629      	mov	r1, r5
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7f5 ff54 	bl	8000348 <__aeabi_dsub>
 800a4a0:	4b28      	ldr	r3, [pc, #160]	@ (800a544 <__kernel_cos+0x16c>)
 800a4a2:	429e      	cmp	r6, r3
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	d80e      	bhi.n	800a4c8 <__kernel_cos+0xf0>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	f7f5 ff49 	bl	8000348 <__aeabi_dsub>
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4923      	ldr	r1, [pc, #140]	@ (800a548 <__kernel_cos+0x170>)
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	2000      	movs	r0, #0
 800a4be:	f7f5 ff43 	bl	8000348 <__aeabi_dsub>
 800a4c2:	b003      	add	sp, #12
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	4b20      	ldr	r3, [pc, #128]	@ (800a54c <__kernel_cos+0x174>)
 800a4ca:	491f      	ldr	r1, [pc, #124]	@ (800a548 <__kernel_cos+0x170>)
 800a4cc:	429e      	cmp	r6, r3
 800a4ce:	bf8c      	ite	hi
 800a4d0:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a550 <__kernel_cos+0x178>)
 800a4d2:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a4d6:	2400      	movs	r4, #0
 800a4d8:	4622      	mov	r2, r4
 800a4da:	462b      	mov	r3, r5
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f7f5 ff33 	bl	8000348 <__aeabi_dsub>
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	460f      	mov	r7, r1
 800a4e8:	462b      	mov	r3, r5
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	f7f5 ff2b 	bl	8000348 <__aeabi_dsub>
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	f7f5 ff27 	bl	8000348 <__aeabi_dsub>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4630      	mov	r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	e7dc      	b.n	800a4be <__kernel_cos+0xe6>
 800a504:	4910      	ldr	r1, [pc, #64]	@ (800a548 <__kernel_cos+0x170>)
 800a506:	2000      	movs	r0, #0
 800a508:	e7db      	b.n	800a4c2 <__kernel_cos+0xea>
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
 800a510:	be8838d4 	.word	0xbe8838d4
 800a514:	bda8fae9 	.word	0xbda8fae9
 800a518:	bdb4b1c4 	.word	0xbdb4b1c4
 800a51c:	3e21ee9e 	.word	0x3e21ee9e
 800a520:	809c52ad 	.word	0x809c52ad
 800a524:	3e927e4f 	.word	0x3e927e4f
 800a528:	19cb1590 	.word	0x19cb1590
 800a52c:	3efa01a0 	.word	0x3efa01a0
 800a530:	16c15177 	.word	0x16c15177
 800a534:	3f56c16c 	.word	0x3f56c16c
 800a538:	5555554c 	.word	0x5555554c
 800a53c:	3fa55555 	.word	0x3fa55555
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	3fd33332 	.word	0x3fd33332
 800a548:	3ff00000 	.word	0x3ff00000
 800a54c:	3fe90000 	.word	0x3fe90000
 800a550:	3fd20000 	.word	0x3fd20000
 800a554:	00000000 	.word	0x00000000

0800a558 <__kernel_sin>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	461f      	mov	r7, r3
 800a55e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a562:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a566:	b085      	sub	sp, #20
 800a568:	4604      	mov	r4, r0
 800a56a:	460d      	mov	r5, r1
 800a56c:	4616      	mov	r6, r2
 800a56e:	d203      	bcs.n	800a578 <__kernel_sin+0x20>
 800a570:	f7f6 fb3c 	bl	8000bec <__aeabi_d2iz>
 800a574:	2800      	cmp	r0, #0
 800a576:	d051      	beq.n	800a61c <__kernel_sin+0xc4>
 800a578:	4622      	mov	r2, r4
 800a57a:	462b      	mov	r3, r5
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f6 f89a 	bl	80006b8 <__aeabi_dmul>
 800a584:	4682      	mov	sl, r0
 800a586:	468b      	mov	fp, r1
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4620      	mov	r0, r4
 800a58e:	4629      	mov	r1, r5
 800a590:	f7f6 f892 	bl	80006b8 <__aeabi_dmul>
 800a594:	a341      	add	r3, pc, #260	@ (adr r3, 800a69c <__kernel_sin+0x144>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	4680      	mov	r8, r0
 800a59c:	4689      	mov	r9, r1
 800a59e:	4650      	mov	r0, sl
 800a5a0:	4659      	mov	r1, fp
 800a5a2:	f7f6 f889 	bl	80006b8 <__aeabi_dmul>
 800a5a6:	a33f      	add	r3, pc, #252	@ (adr r3, 800a6a4 <__kernel_sin+0x14c>)
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	f7f5 fecc 	bl	8000348 <__aeabi_dsub>
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	465b      	mov	r3, fp
 800a5b4:	f7f6 f880 	bl	80006b8 <__aeabi_dmul>
 800a5b8:	a33c      	add	r3, pc, #240	@ (adr r3, 800a6ac <__kernel_sin+0x154>)
 800a5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5be:	f7f5 fec5 	bl	800034c <__adddf3>
 800a5c2:	4652      	mov	r2, sl
 800a5c4:	465b      	mov	r3, fp
 800a5c6:	f7f6 f877 	bl	80006b8 <__aeabi_dmul>
 800a5ca:	a33a      	add	r3, pc, #232	@ (adr r3, 800a6b4 <__kernel_sin+0x15c>)
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	f7f5 feba 	bl	8000348 <__aeabi_dsub>
 800a5d4:	4652      	mov	r2, sl
 800a5d6:	465b      	mov	r3, fp
 800a5d8:	f7f6 f86e 	bl	80006b8 <__aeabi_dmul>
 800a5dc:	a337      	add	r3, pc, #220	@ (adr r3, 800a6bc <__kernel_sin+0x164>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f7f5 feb3 	bl	800034c <__adddf3>
 800a5e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5ec:	b9db      	cbnz	r3, 800a626 <__kernel_sin+0xce>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	f7f6 f85f 	bl	80006b8 <__aeabi_dmul>
 800a5fa:	a325      	add	r3, pc, #148	@ (adr r3, 800a690 <__kernel_sin+0x138>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f7f5 fea2 	bl	8000348 <__aeabi_dsub>
 800a604:	4642      	mov	r2, r8
 800a606:	464b      	mov	r3, r9
 800a608:	f7f6 f856 	bl	80006b8 <__aeabi_dmul>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4620      	mov	r0, r4
 800a612:	4629      	mov	r1, r5
 800a614:	f7f5 fe9a 	bl	800034c <__adddf3>
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	b005      	add	sp, #20
 800a622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a626:	4b1c      	ldr	r3, [pc, #112]	@ (800a698 <__kernel_sin+0x140>)
 800a628:	2200      	movs	r2, #0
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	f7f6 f843 	bl	80006b8 <__aeabi_dmul>
 800a632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a63a:	4640      	mov	r0, r8
 800a63c:	4649      	mov	r1, r9
 800a63e:	f7f6 f83b 	bl	80006b8 <__aeabi_dmul>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a64a:	f7f5 fe7d 	bl	8000348 <__aeabi_dsub>
 800a64e:	4652      	mov	r2, sl
 800a650:	465b      	mov	r3, fp
 800a652:	f7f6 f831 	bl	80006b8 <__aeabi_dmul>
 800a656:	4632      	mov	r2, r6
 800a658:	463b      	mov	r3, r7
 800a65a:	f7f5 fe75 	bl	8000348 <__aeabi_dsub>
 800a65e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a690 <__kernel_sin+0x138>)
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	4606      	mov	r6, r0
 800a666:	460f      	mov	r7, r1
 800a668:	4640      	mov	r0, r8
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f6 f824 	bl	80006b8 <__aeabi_dmul>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f5 fe68 	bl	800034c <__adddf3>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4620      	mov	r0, r4
 800a682:	4629      	mov	r1, r5
 800a684:	f7f5 fe60 	bl	8000348 <__aeabi_dsub>
 800a688:	e7c6      	b.n	800a618 <__kernel_sin+0xc0>
 800a68a:	bf00      	nop
 800a68c:	f3af 8000 	nop.w
 800a690:	55555549 	.word	0x55555549
 800a694:	3fc55555 	.word	0x3fc55555
 800a698:	3fe00000 	.word	0x3fe00000
 800a69c:	5acfd57c 	.word	0x5acfd57c
 800a6a0:	3de5d93a 	.word	0x3de5d93a
 800a6a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a6a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a6ac:	57b1fe7d 	.word	0x57b1fe7d
 800a6b0:	3ec71de3 	.word	0x3ec71de3
 800a6b4:	19c161d5 	.word	0x19c161d5
 800a6b8:	3f2a01a0 	.word	0x3f2a01a0
 800a6bc:	1110f8a6 	.word	0x1110f8a6
 800a6c0:	3f811111 	.word	0x3f811111
 800a6c4:	00000000 	.word	0x00000000

0800a6c8 <__ieee754_rem_pio2>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	4bc4      	ldr	r3, [pc, #784]	@ (800a9e0 <__ieee754_rem_pio2+0x318>)
 800a6ce:	b08d      	sub	sp, #52	@ 0x34
 800a6d0:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a6d4:	4598      	cmp	r8, r3
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	4614      	mov	r4, r2
 800a6dc:	9104      	str	r1, [sp, #16]
 800a6de:	d807      	bhi.n	800a6f0 <__ieee754_rem_pio2+0x28>
 800a6e0:	e9c2 6700 	strd	r6, r7, [r2]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a6ec:	2500      	movs	r5, #0
 800a6ee:	e026      	b.n	800a73e <__ieee754_rem_pio2+0x76>
 800a6f0:	4bbc      	ldr	r3, [pc, #752]	@ (800a9e4 <__ieee754_rem_pio2+0x31c>)
 800a6f2:	4598      	cmp	r8, r3
 800a6f4:	d876      	bhi.n	800a7e4 <__ieee754_rem_pio2+0x11c>
 800a6f6:	9b04      	ldr	r3, [sp, #16]
 800a6f8:	4dbb      	ldr	r5, [pc, #748]	@ (800a9e8 <__ieee754_rem_pio2+0x320>)
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a9a8 <__ieee754_rem_pio2+0x2e0>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	dd38      	ble.n	800a776 <__ieee754_rem_pio2+0xae>
 800a704:	f7f5 fe20 	bl	8000348 <__aeabi_dsub>
 800a708:	45a8      	cmp	r8, r5
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	d01a      	beq.n	800a746 <__ieee754_rem_pio2+0x7e>
 800a710:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a9b0 <__ieee754_rem_pio2+0x2e8>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f7f5 fe17 	bl	8000348 <__aeabi_dsub>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4680      	mov	r8, r0
 800a720:	4689      	mov	r9, r1
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	f7f5 fe0f 	bl	8000348 <__aeabi_dsub>
 800a72a:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a9b0 <__ieee754_rem_pio2+0x2e8>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fe0a 	bl	8000348 <__aeabi_dsub>
 800a734:	e9c4 8900 	strd	r8, r9, [r4]
 800a738:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a73c:	2501      	movs	r5, #1
 800a73e:	4628      	mov	r0, r5
 800a740:	b00d      	add	sp, #52	@ 0x34
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	a39c      	add	r3, pc, #624	@ (adr r3, 800a9b8 <__ieee754_rem_pio2+0x2f0>)
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f7f5 fdfc 	bl	8000348 <__aeabi_dsub>
 800a750:	a39b      	add	r3, pc, #620	@ (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2f8>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	f7f5 fdf5 	bl	8000348 <__aeabi_dsub>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4680      	mov	r8, r0
 800a764:	4689      	mov	r9, r1
 800a766:	4630      	mov	r0, r6
 800a768:	4639      	mov	r1, r7
 800a76a:	f7f5 fded 	bl	8000348 <__aeabi_dsub>
 800a76e:	a394      	add	r3, pc, #592	@ (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2f8>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	e7dc      	b.n	800a730 <__ieee754_rem_pio2+0x68>
 800a776:	f7f5 fde9 	bl	800034c <__adddf3>
 800a77a:	45a8      	cmp	r8, r5
 800a77c:	4606      	mov	r6, r0
 800a77e:	460f      	mov	r7, r1
 800a780:	d018      	beq.n	800a7b4 <__ieee754_rem_pio2+0xec>
 800a782:	a38b      	add	r3, pc, #556	@ (adr r3, 800a9b0 <__ieee754_rem_pio2+0x2e8>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	f7f5 fde0 	bl	800034c <__adddf3>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4680      	mov	r8, r0
 800a792:	4689      	mov	r9, r1
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f5 fdd6 	bl	8000348 <__aeabi_dsub>
 800a79c:	a384      	add	r3, pc, #528	@ (adr r3, 800a9b0 <__ieee754_rem_pio2+0x2e8>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fdd3 	bl	800034c <__adddf3>
 800a7a6:	f04f 35ff 	mov.w	r5, #4294967295
 800a7aa:	e9c4 8900 	strd	r8, r9, [r4]
 800a7ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7b2:	e7c4      	b.n	800a73e <__ieee754_rem_pio2+0x76>
 800a7b4:	a380      	add	r3, pc, #512	@ (adr r3, 800a9b8 <__ieee754_rem_pio2+0x2f0>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fdc7 	bl	800034c <__adddf3>
 800a7be:	a380      	add	r3, pc, #512	@ (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2f8>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	f7f5 fdc0 	bl	800034c <__adddf3>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	4639      	mov	r1, r7
 800a7d8:	f7f5 fdb6 	bl	8000348 <__aeabi_dsub>
 800a7dc:	a378      	add	r3, pc, #480	@ (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2f8>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	e7de      	b.n	800a7a2 <__ieee754_rem_pio2+0xda>
 800a7e4:	4b81      	ldr	r3, [pc, #516]	@ (800a9ec <__ieee754_rem_pio2+0x324>)
 800a7e6:	4598      	cmp	r8, r3
 800a7e8:	f200 80cf 	bhi.w	800a98a <__ieee754_rem_pio2+0x2c2>
 800a7ec:	f7ff fcfe 	bl	800a1ec <fabs>
 800a7f0:	a375      	add	r3, pc, #468	@ (adr r3, 800a9c8 <__ieee754_rem_pio2+0x300>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	f7f5 ff5d 	bl	80006b8 <__aeabi_dmul>
 800a7fe:	4b7c      	ldr	r3, [pc, #496]	@ (800a9f0 <__ieee754_rem_pio2+0x328>)
 800a800:	2200      	movs	r2, #0
 800a802:	f7f5 fda3 	bl	800034c <__adddf3>
 800a806:	f7f6 f9f1 	bl	8000bec <__aeabi_d2iz>
 800a80a:	4605      	mov	r5, r0
 800a80c:	f7f5 feea 	bl	80005e4 <__aeabi_i2d>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a818:	a363      	add	r3, pc, #396	@ (adr r3, 800a9a8 <__ieee754_rem_pio2+0x2e0>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 ff4b 	bl	80006b8 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4630      	mov	r0, r6
 800a828:	4639      	mov	r1, r7
 800a82a:	f7f5 fd8d 	bl	8000348 <__aeabi_dsub>
 800a82e:	a360      	add	r3, pc, #384	@ (adr r3, 800a9b0 <__ieee754_rem_pio2+0x2e8>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	4682      	mov	sl, r0
 800a836:	468b      	mov	fp, r1
 800a838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83c:	f7f5 ff3c 	bl	80006b8 <__aeabi_dmul>
 800a840:	2d1f      	cmp	r5, #31
 800a842:	4606      	mov	r6, r0
 800a844:	460f      	mov	r7, r1
 800a846:	dc0c      	bgt.n	800a862 <__ieee754_rem_pio2+0x19a>
 800a848:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f4 <__ieee754_rem_pio2+0x32c>)
 800a84a:	1e6a      	subs	r2, r5, #1
 800a84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a850:	4543      	cmp	r3, r8
 800a852:	d006      	beq.n	800a862 <__ieee754_rem_pio2+0x19a>
 800a854:	4632      	mov	r2, r6
 800a856:	463b      	mov	r3, r7
 800a858:	4650      	mov	r0, sl
 800a85a:	4659      	mov	r1, fp
 800a85c:	f7f5 fd74 	bl	8000348 <__aeabi_dsub>
 800a860:	e00e      	b.n	800a880 <__ieee754_rem_pio2+0x1b8>
 800a862:	463b      	mov	r3, r7
 800a864:	4632      	mov	r2, r6
 800a866:	4650      	mov	r0, sl
 800a868:	4659      	mov	r1, fp
 800a86a:	f7f5 fd6d 	bl	8000348 <__aeabi_dsub>
 800a86e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a878:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a87c:	2b10      	cmp	r3, #16
 800a87e:	dc02      	bgt.n	800a886 <__ieee754_rem_pio2+0x1be>
 800a880:	e9c4 0100 	strd	r0, r1, [r4]
 800a884:	e039      	b.n	800a8fa <__ieee754_rem_pio2+0x232>
 800a886:	a34c      	add	r3, pc, #304	@ (adr r3, 800a9b8 <__ieee754_rem_pio2+0x2f0>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a890:	f7f5 ff12 	bl	80006b8 <__aeabi_dmul>
 800a894:	4606      	mov	r6, r0
 800a896:	460f      	mov	r7, r1
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4650      	mov	r0, sl
 800a89e:	4659      	mov	r1, fp
 800a8a0:	f7f5 fd52 	bl	8000348 <__aeabi_dsub>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	4689      	mov	r9, r1
 800a8ac:	4650      	mov	r0, sl
 800a8ae:	4659      	mov	r1, fp
 800a8b0:	f7f5 fd4a 	bl	8000348 <__aeabi_dsub>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	f7f5 fd46 	bl	8000348 <__aeabi_dsub>
 800a8bc:	a340      	add	r3, pc, #256	@ (adr r3, 800a9c0 <__ieee754_rem_pio2+0x2f8>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ca:	f7f5 fef5 	bl	80006b8 <__aeabi_dmul>
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	463b      	mov	r3, r7
 800a8d2:	f7f5 fd39 	bl	8000348 <__aeabi_dsub>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	f7f5 fd31 	bl	8000348 <__aeabi_dsub>
 800a8e6:	9a05      	ldr	r2, [sp, #20]
 800a8e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b31      	cmp	r3, #49	@ 0x31
 800a8f0:	dc20      	bgt.n	800a934 <__ieee754_rem_pio2+0x26c>
 800a8f2:	e9c4 0100 	strd	r0, r1, [r4]
 800a8f6:	46c2      	mov	sl, r8
 800a8f8:	46cb      	mov	fp, r9
 800a8fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a8fe:	4650      	mov	r0, sl
 800a900:	4642      	mov	r2, r8
 800a902:	464b      	mov	r3, r9
 800a904:	4659      	mov	r1, fp
 800a906:	f7f5 fd1f 	bl	8000348 <__aeabi_dsub>
 800a90a:	463b      	mov	r3, r7
 800a90c:	4632      	mov	r2, r6
 800a90e:	f7f5 fd1b 	bl	8000348 <__aeabi_dsub>
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a91a:	f6bf af10 	bge.w	800a73e <__ieee754_rem_pio2+0x76>
 800a91e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a922:	6063      	str	r3, [r4, #4]
 800a924:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a928:	f8c4 8000 	str.w	r8, [r4]
 800a92c:	60a0      	str	r0, [r4, #8]
 800a92e:	60e3      	str	r3, [r4, #12]
 800a930:	426d      	negs	r5, r5
 800a932:	e704      	b.n	800a73e <__ieee754_rem_pio2+0x76>
 800a934:	a326      	add	r3, pc, #152	@ (adr r3, 800a9d0 <__ieee754_rem_pio2+0x308>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a93e:	f7f5 febb 	bl	80006b8 <__aeabi_dmul>
 800a942:	4606      	mov	r6, r0
 800a944:	460f      	mov	r7, r1
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f5 fcfb 	bl	8000348 <__aeabi_dsub>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4682      	mov	sl, r0
 800a958:	468b      	mov	fp, r1
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f5 fcf3 	bl	8000348 <__aeabi_dsub>
 800a962:	4632      	mov	r2, r6
 800a964:	463b      	mov	r3, r7
 800a966:	f7f5 fcef 	bl	8000348 <__aeabi_dsub>
 800a96a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a9d8 <__ieee754_rem_pio2+0x310>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a978:	f7f5 fe9e 	bl	80006b8 <__aeabi_dmul>
 800a97c:	4632      	mov	r2, r6
 800a97e:	463b      	mov	r3, r7
 800a980:	f7f5 fce2 	bl	8000348 <__aeabi_dsub>
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	e764      	b.n	800a854 <__ieee754_rem_pio2+0x18c>
 800a98a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f8 <__ieee754_rem_pio2+0x330>)
 800a98c:	4598      	cmp	r8, r3
 800a98e:	d935      	bls.n	800a9fc <__ieee754_rem_pio2+0x334>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	f7f5 fcd8 	bl	8000348 <__aeabi_dsub>
 800a998:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a99c:	e9c4 0100 	strd	r0, r1, [r4]
 800a9a0:	e6a4      	b.n	800a6ec <__ieee754_rem_pio2+0x24>
 800a9a2:	bf00      	nop
 800a9a4:	f3af 8000 	nop.w
 800a9a8:	54400000 	.word	0x54400000
 800a9ac:	3ff921fb 	.word	0x3ff921fb
 800a9b0:	1a626331 	.word	0x1a626331
 800a9b4:	3dd0b461 	.word	0x3dd0b461
 800a9b8:	1a600000 	.word	0x1a600000
 800a9bc:	3dd0b461 	.word	0x3dd0b461
 800a9c0:	2e037073 	.word	0x2e037073
 800a9c4:	3ba3198a 	.word	0x3ba3198a
 800a9c8:	6dc9c883 	.word	0x6dc9c883
 800a9cc:	3fe45f30 	.word	0x3fe45f30
 800a9d0:	2e000000 	.word	0x2e000000
 800a9d4:	3ba3198a 	.word	0x3ba3198a
 800a9d8:	252049c1 	.word	0x252049c1
 800a9dc:	397b839a 	.word	0x397b839a
 800a9e0:	3fe921fb 	.word	0x3fe921fb
 800a9e4:	4002d97b 	.word	0x4002d97b
 800a9e8:	3ff921fb 	.word	0x3ff921fb
 800a9ec:	413921fb 	.word	0x413921fb
 800a9f0:	3fe00000 	.word	0x3fe00000
 800a9f4:	0801ea4c 	.word	0x0801ea4c
 800a9f8:	7fefffff 	.word	0x7fefffff
 800a9fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aa00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800aa04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aa08:	460f      	mov	r7, r1
 800aa0a:	f7f6 f8ef 	bl	8000bec <__aeabi_d2iz>
 800aa0e:	f7f5 fde9 	bl	80005e4 <__aeabi_i2d>
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4630      	mov	r0, r6
 800aa18:	4639      	mov	r1, r7
 800aa1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa1e:	f7f5 fc93 	bl	8000348 <__aeabi_dsub>
 800aa22:	4b22      	ldr	r3, [pc, #136]	@ (800aaac <__ieee754_rem_pio2+0x3e4>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	f7f5 fe47 	bl	80006b8 <__aeabi_dmul>
 800aa2a:	460f      	mov	r7, r1
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	f7f6 f8dd 	bl	8000bec <__aeabi_d2iz>
 800aa32:	f7f5 fdd7 	bl	80005e4 <__aeabi_i2d>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa42:	f7f5 fc81 	bl	8000348 <__aeabi_dsub>
 800aa46:	4b19      	ldr	r3, [pc, #100]	@ (800aaac <__ieee754_rem_pio2+0x3e4>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f7f5 fe35 	bl	80006b8 <__aeabi_dmul>
 800aa4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aa52:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aa56:	f04f 0803 	mov.w	r8, #3
 800aa5a:	2600      	movs	r6, #0
 800aa5c:	2700      	movs	r7, #0
 800aa5e:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aa62:	4632      	mov	r2, r6
 800aa64:	463b      	mov	r3, r7
 800aa66:	46c2      	mov	sl, r8
 800aa68:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa6c:	f7f6 f88c 	bl	8000b88 <__aeabi_dcmpeq>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d1f4      	bne.n	800aa5e <__ieee754_rem_pio2+0x396>
 800aa74:	4b0e      	ldr	r3, [pc, #56]	@ (800aab0 <__ieee754_rem_pio2+0x3e8>)
 800aa76:	9301      	str	r3, [sp, #4]
 800aa78:	2302      	movs	r3, #2
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	4653      	mov	r3, sl
 800aa80:	4621      	mov	r1, r4
 800aa82:	a806      	add	r0, sp, #24
 800aa84:	f000 fa10 	bl	800aea8 <__kernel_rem_pio2>
 800aa88:	9b04      	ldr	r3, [sp, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	f6bf ae56 	bge.w	800a73e <__ieee754_rem_pio2+0x76>
 800aa92:	e9d4 2100 	ldrd	r2, r1, [r4]
 800aa96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa9a:	e9c4 2300 	strd	r2, r3, [r4]
 800aa9e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800aaa2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aaa6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aaaa:	e741      	b.n	800a930 <__ieee754_rem_pio2+0x268>
 800aaac:	41700000 	.word	0x41700000
 800aab0:	0801eacc 	.word	0x0801eacc

0800aab4 <__ieee754_atan2f>:
 800aab4:	ee07 1a10 	vmov	s14, r1
 800aab8:	460a      	mov	r2, r1
 800aaba:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800aabe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800aac2:	b538      	push	{r3, r4, r5, lr}
 800aac4:	ee07 0a90 	vmov	s15, r0
 800aac8:	d805      	bhi.n	800aad6 <__ieee754_atan2f+0x22>
 800aaca:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800aace:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800aad2:	4605      	mov	r5, r0
 800aad4:	d904      	bls.n	800aae0 <__ieee754_atan2f+0x2c>
 800aad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aada:	ee17 0a90 	vmov	r0, s15
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800aae4:	d103      	bne.n	800aaee <__ieee754_atan2f+0x3a>
 800aae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaea:	f000 b885 	b.w	800abf8 <atanf>
 800aaee:	1794      	asrs	r4, r2, #30
 800aaf0:	f004 0402 	and.w	r4, r4, #2
 800aaf4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800aaf8:	b943      	cbnz	r3, 800ab0c <__ieee754_atan2f+0x58>
 800aafa:	2c02      	cmp	r4, #2
 800aafc:	d060      	beq.n	800abc0 <__ieee754_atan2f+0x10c>
 800aafe:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800abd4 <__ieee754_atan2f+0x120>
 800ab02:	2c03      	cmp	r4, #3
 800ab04:	bf08      	it	eq
 800ab06:	eef0 7a47 	vmoveq.f32	s15, s14
 800ab0a:	e7e6      	b.n	800aada <__ieee754_atan2f+0x26>
 800ab0c:	b941      	cbnz	r1, 800ab20 <__ieee754_atan2f+0x6c>
 800ab0e:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800abd8 <__ieee754_atan2f+0x124>
 800ab12:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800abdc <__ieee754_atan2f+0x128>
 800ab16:	2d00      	cmp	r5, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	eef0 7a47 	vmovlt.f32	s15, s14
 800ab1e:	e7dc      	b.n	800aada <__ieee754_atan2f+0x26>
 800ab20:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ab24:	d110      	bne.n	800ab48 <__ieee754_atan2f+0x94>
 800ab26:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab2e:	d107      	bne.n	800ab40 <__ieee754_atan2f+0x8c>
 800ab30:	2c02      	cmp	r4, #2
 800ab32:	d848      	bhi.n	800abc6 <__ieee754_atan2f+0x112>
 800ab34:	4b2a      	ldr	r3, [pc, #168]	@ (800abe0 <__ieee754_atan2f+0x12c>)
 800ab36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ab3a:	edd3 7a00 	vldr	s15, [r3]
 800ab3e:	e7cc      	b.n	800aada <__ieee754_atan2f+0x26>
 800ab40:	2c02      	cmp	r4, #2
 800ab42:	d843      	bhi.n	800abcc <__ieee754_atan2f+0x118>
 800ab44:	4b27      	ldr	r3, [pc, #156]	@ (800abe4 <__ieee754_atan2f+0x130>)
 800ab46:	e7f6      	b.n	800ab36 <__ieee754_atan2f+0x82>
 800ab48:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab4c:	d0df      	beq.n	800ab0e <__ieee754_atan2f+0x5a>
 800ab4e:	1a5b      	subs	r3, r3, r1
 800ab50:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ab54:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ab58:	da1c      	bge.n	800ab94 <__ieee754_atan2f+0xe0>
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	da01      	bge.n	800ab62 <__ieee754_atan2f+0xae>
 800ab5e:	313c      	adds	r1, #60	@ 0x3c
 800ab60:	db1b      	blt.n	800ab9a <__ieee754_atan2f+0xe6>
 800ab62:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800ab66:	ee17 0a90 	vmov	r0, s15
 800ab6a:	f000 f91b 	bl	800ada4 <fabsf>
 800ab6e:	f000 f843 	bl	800abf8 <atanf>
 800ab72:	ee07 0a90 	vmov	s15, r0
 800ab76:	2c01      	cmp	r4, #1
 800ab78:	d012      	beq.n	800aba0 <__ieee754_atan2f+0xec>
 800ab7a:	2c02      	cmp	r4, #2
 800ab7c:	d017      	beq.n	800abae <__ieee754_atan2f+0xfa>
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	d0ab      	beq.n	800aada <__ieee754_atan2f+0x26>
 800ab82:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800abe8 <__ieee754_atan2f+0x134>
 800ab86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab8a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800abec <__ieee754_atan2f+0x138>
 800ab8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab92:	e7a2      	b.n	800aada <__ieee754_atan2f+0x26>
 800ab94:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800abd8 <__ieee754_atan2f+0x124>
 800ab98:	e7ed      	b.n	800ab76 <__ieee754_atan2f+0xc2>
 800ab9a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800abf0 <__ieee754_atan2f+0x13c>
 800ab9e:	e7ea      	b.n	800ab76 <__ieee754_atan2f+0xc2>
 800aba0:	ee17 3a90 	vmov	r3, s15
 800aba4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aba8:	ee07 3a90 	vmov	s15, r3
 800abac:	e795      	b.n	800aada <__ieee754_atan2f+0x26>
 800abae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800abe8 <__ieee754_atan2f+0x134>
 800abb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abb6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800abec <__ieee754_atan2f+0x138>
 800abba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abbe:	e78c      	b.n	800aada <__ieee754_atan2f+0x26>
 800abc0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800abec <__ieee754_atan2f+0x138>
 800abc4:	e789      	b.n	800aada <__ieee754_atan2f+0x26>
 800abc6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800abf4 <__ieee754_atan2f+0x140>
 800abca:	e786      	b.n	800aada <__ieee754_atan2f+0x26>
 800abcc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800abf0 <__ieee754_atan2f+0x13c>
 800abd0:	e783      	b.n	800aada <__ieee754_atan2f+0x26>
 800abd2:	bf00      	nop
 800abd4:	c0490fdb 	.word	0xc0490fdb
 800abd8:	3fc90fdb 	.word	0x3fc90fdb
 800abdc:	bfc90fdb 	.word	0xbfc90fdb
 800abe0:	0801ebe0 	.word	0x0801ebe0
 800abe4:	0801ebd4 	.word	0x0801ebd4
 800abe8:	33bbbd2e 	.word	0x33bbbd2e
 800abec:	40490fdb 	.word	0x40490fdb
 800abf0:	00000000 	.word	0x00000000
 800abf4:	3f490fdb 	.word	0x3f490fdb

0800abf8 <atanf>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
 800abfe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800ac02:	ee07 0a90 	vmov	s15, r0
 800ac06:	4605      	mov	r5, r0
 800ac08:	d310      	bcc.n	800ac2c <atanf+0x34>
 800ac0a:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ac0e:	d904      	bls.n	800ac1a <atanf+0x22>
 800ac10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ac14:	ee17 0a90 	vmov	r0, s15
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800ad58 <atanf+0x160>
 800ac1e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800ad5c <atanf+0x164>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	bfc8      	it	gt
 800ac26:	eef0 7a47 	vmovgt.f32	s15, s14
 800ac2a:	e7f3      	b.n	800ac14 <atanf+0x1c>
 800ac2c:	4b4c      	ldr	r3, [pc, #304]	@ (800ad60 <atanf+0x168>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d810      	bhi.n	800ac54 <atanf+0x5c>
 800ac32:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ac36:	d20a      	bcs.n	800ac4e <atanf+0x56>
 800ac38:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800ad64 <atanf+0x16c>
 800ac3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac44:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4c:	dce2      	bgt.n	800ac14 <atanf+0x1c>
 800ac4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac52:	e015      	b.n	800ac80 <atanf+0x88>
 800ac54:	f000 f8a6 	bl	800ada4 <fabsf>
 800ac58:	4b43      	ldr	r3, [pc, #268]	@ (800ad68 <atanf+0x170>)
 800ac5a:	429c      	cmp	r4, r3
 800ac5c:	ee07 0a10 	vmov	s14, r0
 800ac60:	d84f      	bhi.n	800ad02 <atanf+0x10a>
 800ac62:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d841      	bhi.n	800acee <atanf+0xf6>
 800ac6a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ac6e:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800ac72:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ac76:	2300      	movs	r3, #0
 800ac78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ac86:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800ad6c <atanf+0x174>
 800ac8a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800ad70 <atanf+0x178>
 800ac8e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800ad74 <atanf+0x17c>
 800ac92:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ac96:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ac9a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800ad78 <atanf+0x180>
 800ac9e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800aca2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800ad7c <atanf+0x184>
 800aca6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800acaa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800ad80 <atanf+0x188>
 800acae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800acb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ad84 <atanf+0x18c>
 800acb6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800acba:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ad88 <atanf+0x190>
 800acbe:	eea6 5a87 	vfma.f32	s10, s13, s14
 800acc2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ad8c <atanf+0x194>
 800acc6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800acca:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800ad90 <atanf+0x198>
 800acce:	eea7 5a26 	vfma.f32	s10, s14, s13
 800acd2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800ad94 <atanf+0x19c>
 800acd6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800acda:	ee27 7a26 	vmul.f32	s14, s14, s13
 800acde:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ace2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ace6:	d121      	bne.n	800ad2c <atanf+0x134>
 800ace8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800acec:	e792      	b.n	800ac14 <atanf+0x1c>
 800acee:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800acf2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800acf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acfa:	2301      	movs	r3, #1
 800acfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad00:	e7be      	b.n	800ac80 <atanf+0x88>
 800ad02:	4b25      	ldr	r3, [pc, #148]	@ (800ad98 <atanf+0x1a0>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	d80b      	bhi.n	800ad20 <atanf+0x128>
 800ad08:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800ad0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad10:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad14:	2302      	movs	r3, #2
 800ad16:	ee37 6a67 	vsub.f32	s12, s14, s15
 800ad1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ad1e:	e7af      	b.n	800ac80 <atanf+0x88>
 800ad20:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800ad24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e7a9      	b.n	800ac80 <atanf+0x88>
 800ad2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ad9c <atanf+0x1a4>)
 800ad2e:	491c      	ldr	r1, [pc, #112]	@ (800ada0 <atanf+0x1a8>)
 800ad30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ad34:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ad38:	edd3 6a00 	vldr	s13, [r3]
 800ad3c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad46:	edd2 7a00 	vldr	s15, [r2]
 800ad4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad4e:	bfb8      	it	lt
 800ad50:	eef1 7a67 	vneglt.f32	s15, s15
 800ad54:	e75e      	b.n	800ac14 <atanf+0x1c>
 800ad56:	bf00      	nop
 800ad58:	bfc90fdb 	.word	0xbfc90fdb
 800ad5c:	3fc90fdb 	.word	0x3fc90fdb
 800ad60:	3edfffff 	.word	0x3edfffff
 800ad64:	7149f2ca 	.word	0x7149f2ca
 800ad68:	3f97ffff 	.word	0x3f97ffff
 800ad6c:	3c8569d7 	.word	0x3c8569d7
 800ad70:	3d4bda59 	.word	0x3d4bda59
 800ad74:	bd6ef16b 	.word	0xbd6ef16b
 800ad78:	3d886b35 	.word	0x3d886b35
 800ad7c:	3dba2e6e 	.word	0x3dba2e6e
 800ad80:	3e124925 	.word	0x3e124925
 800ad84:	3eaaaaab 	.word	0x3eaaaaab
 800ad88:	bd15a221 	.word	0xbd15a221
 800ad8c:	bd9d8795 	.word	0xbd9d8795
 800ad90:	bde38e38 	.word	0xbde38e38
 800ad94:	be4ccccd 	.word	0xbe4ccccd
 800ad98:	401bffff 	.word	0x401bffff
 800ad9c:	0801ebfc 	.word	0x0801ebfc
 800ada0:	0801ebec 	.word	0x0801ebec

0800ada4 <fabsf>:
 800ada4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ada8:	4770      	bx	lr
 800adaa:	0000      	movs	r0, r0
 800adac:	0000      	movs	r0, r0
	...

0800adb0 <scalbn>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	4616      	mov	r6, r2
 800adb4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adb8:	4604      	mov	r4, r0
 800adba:	460d      	mov	r5, r1
 800adbc:	460b      	mov	r3, r1
 800adbe:	b982      	cbnz	r2, 800ade2 <scalbn+0x32>
 800adc0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800adc4:	4303      	orrs	r3, r0
 800adc6:	d039      	beq.n	800ae3c <scalbn+0x8c>
 800adc8:	4b33      	ldr	r3, [pc, #204]	@ (800ae98 <scalbn+0xe8>)
 800adca:	2200      	movs	r2, #0
 800adcc:	f7f5 fc74 	bl	80006b8 <__aeabi_dmul>
 800add0:	4b32      	ldr	r3, [pc, #200]	@ (800ae9c <scalbn+0xec>)
 800add2:	429e      	cmp	r6, r3
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	da0d      	bge.n	800adf6 <scalbn+0x46>
 800adda:	a327      	add	r3, pc, #156	@ (adr r3, 800ae78 <scalbn+0xc8>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	e01c      	b.n	800ae1c <scalbn+0x6c>
 800ade2:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ade6:	42ba      	cmp	r2, r7
 800ade8:	d109      	bne.n	800adfe <scalbn+0x4e>
 800adea:	4602      	mov	r2, r0
 800adec:	f7f5 faae 	bl	800034c <__adddf3>
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	e022      	b.n	800ae3c <scalbn+0x8c>
 800adf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adfa:	460b      	mov	r3, r1
 800adfc:	3a36      	subs	r2, #54	@ 0x36
 800adfe:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ae02:	428e      	cmp	r6, r1
 800ae04:	dd0d      	ble.n	800ae22 <scalbn+0x72>
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae80 <scalbn+0xd0>)
 800ae0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0e:	da02      	bge.n	800ae16 <scalbn+0x66>
 800ae10:	a11d      	add	r1, pc, #116	@ (adr r1, 800ae88 <scalbn+0xd8>)
 800ae12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae16:	a31a      	add	r3, pc, #104	@ (adr r3, 800ae80 <scalbn+0xd0>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fc4c 	bl	80006b8 <__aeabi_dmul>
 800ae20:	e7e6      	b.n	800adf0 <scalbn+0x40>
 800ae22:	4432      	add	r2, r6
 800ae24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ae28:	428a      	cmp	r2, r1
 800ae2a:	dcec      	bgt.n	800ae06 <scalbn+0x56>
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	dd08      	ble.n	800ae42 <scalbn+0x92>
 800ae30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	4629      	mov	r1, r5
 800ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ae46:	da08      	bge.n	800ae5a <scalbn+0xaa>
 800ae48:	2d00      	cmp	r5, #0
 800ae4a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ae78 <scalbn+0xc8>)
 800ae4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae50:	dac3      	bge.n	800adda <scalbn+0x2a>
 800ae52:	a10f      	add	r1, pc, #60	@ (adr r1, 800ae90 <scalbn+0xe0>)
 800ae54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae58:	e7bf      	b.n	800adda <scalbn+0x2a>
 800ae5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae5e:	3236      	adds	r2, #54	@ 0x36
 800ae60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <scalbn+0xf0>)
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	2200      	movs	r2, #0
 800ae70:	e7d4      	b.n	800ae1c <scalbn+0x6c>
 800ae72:	bf00      	nop
 800ae74:	f3af 8000 	nop.w
 800ae78:	c2f8f359 	.word	0xc2f8f359
 800ae7c:	01a56e1f 	.word	0x01a56e1f
 800ae80:	8800759c 	.word	0x8800759c
 800ae84:	7e37e43c 	.word	0x7e37e43c
 800ae88:	8800759c 	.word	0x8800759c
 800ae8c:	fe37e43c 	.word	0xfe37e43c
 800ae90:	c2f8f359 	.word	0xc2f8f359
 800ae94:	81a56e1f 	.word	0x81a56e1f
 800ae98:	43500000 	.word	0x43500000
 800ae9c:	ffff3cb0 	.word	0xffff3cb0
 800aea0:	3c900000 	.word	0x3c900000
 800aea4:	00000000 	.word	0x00000000

0800aea8 <__kernel_rem_pio2>:
 800aea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeac:	ed2d 8b02 	vpush	{d8}
 800aeb0:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800aeb4:	f112 0f14 	cmn.w	r2, #20
 800aeb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeba:	9101      	str	r1, [sp, #4]
 800aebc:	4bbe      	ldr	r3, [pc, #760]	@ (800b1b8 <__kernel_rem_pio2+0x310>)
 800aebe:	99a6      	ldr	r1, [sp, #664]	@ 0x298
 800aec0:	900a      	str	r0, [sp, #40]	@ 0x28
 800aec2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeca:	f103 33ff 	add.w	r3, r3, #4294967295
 800aece:	bfa8      	it	ge
 800aed0:	1ed4      	subge	r4, r2, #3
 800aed2:	9306      	str	r3, [sp, #24]
 800aed4:	bfb2      	itee	lt
 800aed6:	2400      	movlt	r4, #0
 800aed8:	2318      	movge	r3, #24
 800aeda:	fb94 f4f3 	sdivge	r4, r4, r3
 800aede:	f06f 0317 	mvn.w	r3, #23
 800aee2:	fb04 3303 	mla	r3, r4, r3, r3
 800aee6:	eb03 0b02 	add.w	fp, r3, r2
 800aeea:	9b04      	ldr	r3, [sp, #16]
 800aeec:	9a06      	ldr	r2, [sp, #24]
 800aeee:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 800b1b0 <__kernel_rem_pio2+0x308>
 800aef2:	eb03 0802 	add.w	r8, r3, r2
 800aef6:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800aef8:	1aa7      	subs	r7, r4, r2
 800aefa:	ae22      	add	r6, sp, #136	@ 0x88
 800aefc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800af00:	2500      	movs	r5, #0
 800af02:	4545      	cmp	r5, r8
 800af04:	dd13      	ble.n	800af2e <__kernel_rem_pio2+0x86>
 800af06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af08:	aa22      	add	r2, sp, #136	@ 0x88
 800af0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800af0e:	f50d 7ae4 	add.w	sl, sp, #456	@ 0x1c8
 800af12:	f04f 0800 	mov.w	r8, #0
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	4598      	cmp	r8, r3
 800af1a:	dc31      	bgt.n	800af80 <__kernel_rem_pio2+0xd8>
 800af1c:	ed9f 7ba4 	vldr	d7, [pc, #656]	@ 800b1b0 <__kernel_rem_pio2+0x308>
 800af20:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800af24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af28:	462f      	mov	r7, r5
 800af2a:	2600      	movs	r6, #0
 800af2c:	e01b      	b.n	800af66 <__kernel_rem_pio2+0xbe>
 800af2e:	42ef      	cmn	r7, r5
 800af30:	d407      	bmi.n	800af42 <__kernel_rem_pio2+0x9a>
 800af32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800af36:	f7f5 fb55 	bl	80005e4 <__aeabi_i2d>
 800af3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af3e:	3501      	adds	r5, #1
 800af40:	e7df      	b.n	800af02 <__kernel_rem_pio2+0x5a>
 800af42:	ec51 0b18 	vmov	r0, r1, d8
 800af46:	e7f8      	b.n	800af3a <__kernel_rem_pio2+0x92>
 800af48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af50:	f7f5 fbb2 	bl	80006b8 <__aeabi_dmul>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5c:	f7f5 f9f6 	bl	800034c <__adddf3>
 800af60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af64:	3601      	adds	r6, #1
 800af66:	9b06      	ldr	r3, [sp, #24]
 800af68:	429e      	cmp	r6, r3
 800af6a:	f1a7 0708 	sub.w	r7, r7, #8
 800af6e:	ddeb      	ble.n	800af48 <__kernel_rem_pio2+0xa0>
 800af70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af74:	f108 0801 	add.w	r8, r8, #1
 800af78:	ecaa 7b02 	vstmia	sl!, {d7}
 800af7c:	3508      	adds	r5, #8
 800af7e:	e7ca      	b.n	800af16 <__kernel_rem_pio2+0x6e>
 800af80:	9b04      	ldr	r3, [sp, #16]
 800af82:	f8dd a010 	ldr.w	sl, [sp, #16]
 800af86:	aa0e      	add	r2, sp, #56	@ 0x38
 800af88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af8e:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800af90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af96:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800af9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800af9c:	ab9a      	add	r3, sp, #616	@ 0x268
 800af9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afa2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800afa6:	ae0e      	add	r6, sp, #56	@ 0x38
 800afa8:	ab72      	add	r3, sp, #456	@ 0x1c8
 800afaa:	eb03 07ca 	add.w	r7, r3, sl, lsl #3
 800afae:	46b1      	mov	r9, r6
 800afb0:	46d0      	mov	r8, sl
 800afb2:	f1b8 0f00 	cmp.w	r8, #0
 800afb6:	f1a7 0708 	sub.w	r7, r7, #8
 800afba:	dc71      	bgt.n	800b0a0 <__kernel_rem_pio2+0x1f8>
 800afbc:	465a      	mov	r2, fp
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7ff fef5 	bl	800adb0 <scalbn>
 800afc6:	2200      	movs	r2, #0
 800afc8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800afcc:	4604      	mov	r4, r0
 800afce:	460d      	mov	r5, r1
 800afd0:	f7f5 fb72 	bl	80006b8 <__aeabi_dmul>
 800afd4:	f7ff f980 	bl	800a2d8 <floor>
 800afd8:	4b78      	ldr	r3, [pc, #480]	@ (800b1bc <__kernel_rem_pio2+0x314>)
 800afda:	2200      	movs	r2, #0
 800afdc:	f7f5 fb6c 	bl	80006b8 <__aeabi_dmul>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 f9ae 	bl	8000348 <__aeabi_dsub>
 800afec:	460d      	mov	r5, r1
 800afee:	4604      	mov	r4, r0
 800aff0:	f7f5 fdfc 	bl	8000bec <__aeabi_d2iz>
 800aff4:	9008      	str	r0, [sp, #32]
 800aff6:	f7f5 faf5 	bl	80005e4 <__aeabi_i2d>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 f9a1 	bl	8000348 <__aeabi_dsub>
 800b006:	f1bb 0f00 	cmp.w	fp, #0
 800b00a:	4680      	mov	r8, r0
 800b00c:	4689      	mov	r9, r1
 800b00e:	dd6e      	ble.n	800b0ee <__kernel_rem_pio2+0x246>
 800b010:	f10a 31ff 	add.w	r1, sl, #4294967295
 800b014:	ab0e      	add	r3, sp, #56	@ 0x38
 800b016:	9c08      	ldr	r4, [sp, #32]
 800b018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b01c:	f1cb 0018 	rsb	r0, fp, #24
 800b020:	fa43 f200 	asr.w	r2, r3, r0
 800b024:	4414      	add	r4, r2
 800b026:	4082      	lsls	r2, r0
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b02c:	9408      	str	r4, [sp, #32]
 800b02e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b032:	f1cb 0217 	rsb	r2, fp, #23
 800b036:	4113      	asrs	r3, r2
 800b038:	9302      	str	r3, [sp, #8]
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dd65      	ble.n	800b10c <__kernel_rem_pio2+0x264>
 800b040:	9b08      	ldr	r3, [sp, #32]
 800b042:	2200      	movs	r2, #0
 800b044:	3301      	adds	r3, #1
 800b046:	9308      	str	r3, [sp, #32]
 800b048:	4614      	mov	r4, r2
 800b04a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b04e:	4592      	cmp	sl, r2
 800b050:	f300 80a2 	bgt.w	800b198 <__kernel_rem_pio2+0x2f0>
 800b054:	f1bb 0f00 	cmp.w	fp, #0
 800b058:	dd07      	ble.n	800b06a <__kernel_rem_pio2+0x1c2>
 800b05a:	f1bb 0f01 	cmp.w	fp, #1
 800b05e:	f000 80bb 	beq.w	800b1d8 <__kernel_rem_pio2+0x330>
 800b062:	f1bb 0f02 	cmp.w	fp, #2
 800b066:	f000 80c2 	beq.w	800b1ee <__kernel_rem_pio2+0x346>
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d14d      	bne.n	800b10c <__kernel_rem_pio2+0x264>
 800b070:	4642      	mov	r2, r8
 800b072:	464b      	mov	r3, r9
 800b074:	4952      	ldr	r1, [pc, #328]	@ (800b1c0 <__kernel_rem_pio2+0x318>)
 800b076:	2000      	movs	r0, #0
 800b078:	f7f5 f966 	bl	8000348 <__aeabi_dsub>
 800b07c:	4680      	mov	r8, r0
 800b07e:	4689      	mov	r9, r1
 800b080:	2c00      	cmp	r4, #0
 800b082:	d043      	beq.n	800b10c <__kernel_rem_pio2+0x264>
 800b084:	465a      	mov	r2, fp
 800b086:	494e      	ldr	r1, [pc, #312]	@ (800b1c0 <__kernel_rem_pio2+0x318>)
 800b088:	2000      	movs	r0, #0
 800b08a:	f7ff fe91 	bl	800adb0 <scalbn>
 800b08e:	4602      	mov	r2, r0
 800b090:	460b      	mov	r3, r1
 800b092:	4640      	mov	r0, r8
 800b094:	4649      	mov	r1, r9
 800b096:	f7f5 f957 	bl	8000348 <__aeabi_dsub>
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	e035      	b.n	800b10c <__kernel_rem_pio2+0x264>
 800b0a0:	4b48      	ldr	r3, [pc, #288]	@ (800b1c4 <__kernel_rem_pio2+0x31c>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 fb06 	bl	80006b8 <__aeabi_dmul>
 800b0ac:	f7f5 fd9e 	bl	8000bec <__aeabi_d2iz>
 800b0b0:	f7f5 fa98 	bl	80005e4 <__aeabi_i2d>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0bc:	4b42      	ldr	r3, [pc, #264]	@ (800b1c8 <__kernel_rem_pio2+0x320>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f7f5 fafa 	bl	80006b8 <__aeabi_dmul>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	f7f5 f93c 	bl	8000348 <__aeabi_dsub>
 800b0d0:	f7f5 fd8c 	bl	8000bec <__aeabi_d2iz>
 800b0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d8:	f849 0b04 	str.w	r0, [r9], #4
 800b0dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e0:	f7f5 f934 	bl	800034c <__adddf3>
 800b0e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	e761      	b.n	800afb2 <__kernel_rem_pio2+0x10a>
 800b0ee:	d106      	bne.n	800b0fe <__kernel_rem_pio2+0x256>
 800b0f0:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b0f4:	aa0e      	add	r2, sp, #56	@ 0x38
 800b0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0fa:	15db      	asrs	r3, r3, #23
 800b0fc:	e79c      	b.n	800b038 <__kernel_rem_pio2+0x190>
 800b0fe:	4b33      	ldr	r3, [pc, #204]	@ (800b1cc <__kernel_rem_pio2+0x324>)
 800b100:	2200      	movs	r2, #0
 800b102:	f7f5 fd5f 	bl	8000bc4 <__aeabi_dcmpge>
 800b106:	2800      	cmp	r0, #0
 800b108:	d143      	bne.n	800b192 <__kernel_rem_pio2+0x2ea>
 800b10a:	9002      	str	r0, [sp, #8]
 800b10c:	2200      	movs	r2, #0
 800b10e:	2300      	movs	r3, #0
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fd38 	bl	8000b88 <__aeabi_dcmpeq>
 800b118:	2800      	cmp	r0, #0
 800b11a:	f000 80ba 	beq.w	800b292 <__kernel_rem_pio2+0x3ea>
 800b11e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b122:	2200      	movs	r2, #0
 800b124:	9904      	ldr	r1, [sp, #16]
 800b126:	428b      	cmp	r3, r1
 800b128:	da69      	bge.n	800b1fe <__kernel_rem_pio2+0x356>
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	f000 8084 	beq.w	800b238 <__kernel_rem_pio2+0x390>
 800b130:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b134:	ab0e      	add	r3, sp, #56	@ 0x38
 800b136:	f1ab 0b18 	sub.w	fp, fp, #24
 800b13a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0f6      	beq.n	800b130 <__kernel_rem_pio2+0x288>
 800b142:	465a      	mov	r2, fp
 800b144:	491e      	ldr	r1, [pc, #120]	@ (800b1c0 <__kernel_rem_pio2+0x318>)
 800b146:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800b1c4 <__kernel_rem_pio2+0x31c>
 800b14a:	2000      	movs	r0, #0
 800b14c:	f7ff fe30 	bl	800adb0 <scalbn>
 800b150:	f10a 0301 	add.w	r3, sl, #1
 800b154:	aa72      	add	r2, sp, #456	@ 0x1c8
 800b156:	4604      	mov	r4, r0
 800b158:	460d      	mov	r5, r1
 800b15a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800b15e:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b162:	4656      	mov	r6, sl
 800b164:	f04f 0800 	mov.w	r8, #0
 800b168:	2e00      	cmp	r6, #0
 800b16a:	f280 80c8 	bge.w	800b2fe <__kernel_rem_pio2+0x456>
 800b16e:	4654      	mov	r4, sl
 800b170:	2c00      	cmp	r4, #0
 800b172:	f2c0 80f6 	blt.w	800b362 <__kernel_rem_pio2+0x4ba>
 800b176:	4b16      	ldr	r3, [pc, #88]	@ (800b1d0 <__kernel_rem_pio2+0x328>)
 800b178:	461f      	mov	r7, r3
 800b17a:	ab72      	add	r3, sp, #456	@ 0x1c8
 800b17c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b180:	9306      	str	r3, [sp, #24]
 800b182:	f04f 0800 	mov.w	r8, #0
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	2600      	movs	r6, #0
 800b18c:	ebaa 0504 	sub.w	r5, sl, r4
 800b190:	e0db      	b.n	800b34a <__kernel_rem_pio2+0x4a2>
 800b192:	2302      	movs	r3, #2
 800b194:	9302      	str	r3, [sp, #8]
 800b196:	e753      	b.n	800b040 <__kernel_rem_pio2+0x198>
 800b198:	f856 3b04 	ldr.w	r3, [r6], #4
 800b19c:	b9d4      	cbnz	r4, 800b1d4 <__kernel_rem_pio2+0x32c>
 800b19e:	b123      	cbz	r3, 800b1aa <__kernel_rem_pio2+0x302>
 800b1a0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b1a4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	3201      	adds	r2, #1
 800b1ac:	461c      	mov	r4, r3
 800b1ae:	e74e      	b.n	800b04e <__kernel_rem_pio2+0x1a6>
	...
 800b1b8:	0801ec50 	.word	0x0801ec50
 800b1bc:	40200000 	.word	0x40200000
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	3e700000 	.word	0x3e700000
 800b1c8:	41700000 	.word	0x41700000
 800b1cc:	3fe00000 	.word	0x3fe00000
 800b1d0:	0801ec10 	.word	0x0801ec10
 800b1d4:	1acb      	subs	r3, r1, r3
 800b1d6:	e7e5      	b.n	800b1a4 <__kernel_rem_pio2+0x2fc>
 800b1d8:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b1dc:	ab0e      	add	r3, sp, #56	@ 0x38
 800b1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1e6:	a90e      	add	r1, sp, #56	@ 0x38
 800b1e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1ec:	e73d      	b.n	800b06a <__kernel_rem_pio2+0x1c2>
 800b1ee:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b1f2:	ab0e      	add	r3, sp, #56	@ 0x38
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1fc:	e7f3      	b.n	800b1e6 <__kernel_rem_pio2+0x33e>
 800b1fe:	a90e      	add	r1, sp, #56	@ 0x38
 800b200:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b204:	3b01      	subs	r3, #1
 800b206:	430a      	orrs	r2, r1
 800b208:	e78c      	b.n	800b124 <__kernel_rem_pio2+0x27c>
 800b20a:	3401      	adds	r4, #1
 800b20c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b210:	2a00      	cmp	r2, #0
 800b212:	d0fa      	beq.n	800b20a <__kernel_rem_pio2+0x362>
 800b214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b216:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b21a:	eb0d 0503 	add.w	r5, sp, r3
 800b21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b220:	aa22      	add	r2, sp, #136	@ 0x88
 800b222:	4453      	add	r3, sl
 800b224:	f10a 0701 	add.w	r7, sl, #1
 800b228:	3d98      	subs	r5, #152	@ 0x98
 800b22a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b22e:	4454      	add	r4, sl
 800b230:	42bc      	cmp	r4, r7
 800b232:	da04      	bge.n	800b23e <__kernel_rem_pio2+0x396>
 800b234:	46a2      	mov	sl, r4
 800b236:	e6ae      	b.n	800af96 <__kernel_rem_pio2+0xee>
 800b238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b23a:	2401      	movs	r4, #1
 800b23c:	e7e6      	b.n	800b20c <__kernel_rem_pio2+0x364>
 800b23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b240:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b244:	f7f5 f9ce 	bl	80005e4 <__aeabi_i2d>
 800b248:	ed9f 7bad 	vldr	d7, [pc, #692]	@ 800b500 <__kernel_rem_pio2+0x658>
 800b24c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b250:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b254:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b258:	46b2      	mov	sl, r6
 800b25a:	f04f 0800 	mov.w	r8, #0
 800b25e:	9b06      	ldr	r3, [sp, #24]
 800b260:	4598      	cmp	r8, r3
 800b262:	dd05      	ble.n	800b270 <__kernel_rem_pio2+0x3c8>
 800b264:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b268:	3701      	adds	r7, #1
 800b26a:	eca5 7b02 	vstmia	r5!, {d7}
 800b26e:	e7df      	b.n	800b230 <__kernel_rem_pio2+0x388>
 800b270:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b274:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b278:	f7f5 fa1e 	bl	80006b8 <__aeabi_dmul>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b284:	f7f5 f862 	bl	800034c <__adddf3>
 800b288:	f108 0801 	add.w	r8, r8, #1
 800b28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b290:	e7e5      	b.n	800b25e <__kernel_rem_pio2+0x3b6>
 800b292:	f1cb 0200 	rsb	r2, fp, #0
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7ff fd89 	bl	800adb0 <scalbn>
 800b29e:	4b9a      	ldr	r3, [pc, #616]	@ (800b508 <__kernel_rem_pio2+0x660>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	460d      	mov	r5, r1
 800b2a6:	f7f5 fc8d 	bl	8000bc4 <__aeabi_dcmpge>
 800b2aa:	b300      	cbz	r0, 800b2ee <__kernel_rem_pio2+0x446>
 800b2ac:	4b97      	ldr	r3, [pc, #604]	@ (800b50c <__kernel_rem_pio2+0x664>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	f7f5 fa00 	bl	80006b8 <__aeabi_dmul>
 800b2b8:	f7f5 fc98 	bl	8000bec <__aeabi_d2iz>
 800b2bc:	4606      	mov	r6, r0
 800b2be:	f7f5 f991 	bl	80005e4 <__aeabi_i2d>
 800b2c2:	4b91      	ldr	r3, [pc, #580]	@ (800b508 <__kernel_rem_pio2+0x660>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f7f5 f9f7 	bl	80006b8 <__aeabi_dmul>
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7f5 f839 	bl	8000348 <__aeabi_dsub>
 800b2d6:	f7f5 fc89 	bl	8000bec <__aeabi_d2iz>
 800b2da:	ab0e      	add	r3, sp, #56	@ 0x38
 800b2dc:	f10b 0b18 	add.w	fp, fp, #24
 800b2e0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b2e4:	f10a 0a01 	add.w	sl, sl, #1
 800b2e8:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800b2ec:	e729      	b.n	800b142 <__kernel_rem_pio2+0x29a>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f5 fc7b 	bl	8000bec <__aeabi_d2iz>
 800b2f6:	ab0e      	add	r3, sp, #56	@ 0x38
 800b2f8:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b2fc:	e721      	b.n	800b142 <__kernel_rem_pio2+0x29a>
 800b2fe:	ab0e      	add	r3, sp, #56	@ 0x38
 800b300:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b304:	f7f5 f96e 	bl	80005e4 <__aeabi_i2d>
 800b308:	4622      	mov	r2, r4
 800b30a:	462b      	mov	r3, r5
 800b30c:	f7f5 f9d4 	bl	80006b8 <__aeabi_dmul>
 800b310:	4642      	mov	r2, r8
 800b312:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b316:	464b      	mov	r3, r9
 800b318:	4620      	mov	r0, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	f7f5 f9cc 	bl	80006b8 <__aeabi_dmul>
 800b320:	3e01      	subs	r6, #1
 800b322:	4604      	mov	r4, r0
 800b324:	460d      	mov	r5, r1
 800b326:	e71f      	b.n	800b168 <__kernel_rem_pio2+0x2c0>
 800b328:	9906      	ldr	r1, [sp, #24]
 800b32a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b32e:	9106      	str	r1, [sp, #24]
 800b330:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b334:	f7f5 f9c0 	bl	80006b8 <__aeabi_dmul>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	4640      	mov	r0, r8
 800b33e:	4649      	mov	r1, r9
 800b340:	f7f5 f804 	bl	800034c <__adddf3>
 800b344:	3601      	adds	r6, #1
 800b346:	4680      	mov	r8, r0
 800b348:	4689      	mov	r9, r1
 800b34a:	9b04      	ldr	r3, [sp, #16]
 800b34c:	429e      	cmp	r6, r3
 800b34e:	dc01      	bgt.n	800b354 <__kernel_rem_pio2+0x4ac>
 800b350:	42b5      	cmp	r5, r6
 800b352:	dae9      	bge.n	800b328 <__kernel_rem_pio2+0x480>
 800b354:	ab4a      	add	r3, sp, #296	@ 0x128
 800b356:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b35a:	e9c5 8900 	strd	r8, r9, [r5]
 800b35e:	3c01      	subs	r4, #1
 800b360:	e706      	b.n	800b170 <__kernel_rem_pio2+0x2c8>
 800b362:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b364:	2b02      	cmp	r3, #2
 800b366:	dc0b      	bgt.n	800b380 <__kernel_rem_pio2+0x4d8>
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dc38      	bgt.n	800b3de <__kernel_rem_pio2+0x536>
 800b36c:	d05a      	beq.n	800b424 <__kernel_rem_pio2+0x57c>
 800b36e:	9b08      	ldr	r3, [sp, #32]
 800b370:	f003 0007 	and.w	r0, r3, #7
 800b374:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
 800b378:	ecbd 8b02 	vpop	{d8}
 800b37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b380:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b382:	2b03      	cmp	r3, #3
 800b384:	d1f3      	bne.n	800b36e <__kernel_rem_pio2+0x4c6>
 800b386:	f50b 731a 	add.w	r3, fp, #616	@ 0x268
 800b38a:	eb0d 0403 	add.w	r4, sp, r3
 800b38e:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b392:	4625      	mov	r5, r4
 800b394:	46d0      	mov	r8, sl
 800b396:	f1b8 0f00 	cmp.w	r8, #0
 800b39a:	f1a5 0508 	sub.w	r5, r5, #8
 800b39e:	dc67      	bgt.n	800b470 <__kernel_rem_pio2+0x5c8>
 800b3a0:	4655      	mov	r5, sl
 800b3a2:	2d01      	cmp	r5, #1
 800b3a4:	f1a4 0408 	sub.w	r4, r4, #8
 800b3a8:	f300 8083 	bgt.w	800b4b2 <__kernel_rem_pio2+0x60a>
 800b3ac:	ab4a      	add	r3, sp, #296	@ 0x128
 800b3ae:	eb03 040b 	add.w	r4, r3, fp
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	f1ba 0f01 	cmp.w	sl, #1
 800b3ba:	f300 8098 	bgt.w	800b4ee <__kernel_rem_pio2+0x646>
 800b3be:	9b02      	ldr	r3, [sp, #8]
 800b3c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b3c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	@ 0x130
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f040 80a1 	bne.w	800b510 <__kernel_rem_pio2+0x668>
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	e9c3 7800 	strd	r7, r8, [r3]
 800b3d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b3d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3dc:	e7c7      	b.n	800b36e <__kernel_rem_pio2+0x4c6>
 800b3de:	ab4a      	add	r3, sp, #296	@ 0x128
 800b3e0:	449b      	add	fp, r3
 800b3e2:	4654      	mov	r4, sl
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	2c00      	cmp	r4, #0
 800b3ea:	da32      	bge.n	800b452 <__kernel_rem_pio2+0x5aa>
 800b3ec:	9b02      	ldr	r3, [sp, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d035      	beq.n	800b45e <__kernel_rem_pio2+0x5b6>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3f8:	9c01      	ldr	r4, [sp, #4]
 800b3fa:	e9c4 2300 	strd	r2, r3, [r4]
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	@ 0x128
 800b406:	f7f4 ff9f 	bl	8000348 <__aeabi_dsub>
 800b40a:	ad4c      	add	r5, sp, #304	@ 0x130
 800b40c:	2401      	movs	r4, #1
 800b40e:	45a2      	cmp	sl, r4
 800b410:	da28      	bge.n	800b464 <__kernel_rem_pio2+0x5bc>
 800b412:	9b02      	ldr	r3, [sp, #8]
 800b414:	b113      	cbz	r3, 800b41c <__kernel_rem_pio2+0x574>
 800b416:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b41a:	4619      	mov	r1, r3
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b422:	e7a4      	b.n	800b36e <__kernel_rem_pio2+0x4c6>
 800b424:	ab4a      	add	r3, sp, #296	@ 0x128
 800b426:	449b      	add	fp, r3
 800b428:	2000      	movs	r0, #0
 800b42a:	2100      	movs	r1, #0
 800b42c:	f1ba 0f00 	cmp.w	sl, #0
 800b430:	da08      	bge.n	800b444 <__kernel_rem_pio2+0x59c>
 800b432:	9b02      	ldr	r3, [sp, #8]
 800b434:	b113      	cbz	r3, 800b43c <__kernel_rem_pio2+0x594>
 800b436:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b43a:	4619      	mov	r1, r3
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	e9c3 0100 	strd	r0, r1, [r3]
 800b442:	e794      	b.n	800b36e <__kernel_rem_pio2+0x4c6>
 800b444:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b448:	f7f4 ff80 	bl	800034c <__adddf3>
 800b44c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b450:	e7ec      	b.n	800b42c <__kernel_rem_pio2+0x584>
 800b452:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b456:	f7f4 ff79 	bl	800034c <__adddf3>
 800b45a:	3c01      	subs	r4, #1
 800b45c:	e7c4      	b.n	800b3e8 <__kernel_rem_pio2+0x540>
 800b45e:	4602      	mov	r2, r0
 800b460:	460b      	mov	r3, r1
 800b462:	e7c9      	b.n	800b3f8 <__kernel_rem_pio2+0x550>
 800b464:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b468:	f7f4 ff70 	bl	800034c <__adddf3>
 800b46c:	3401      	adds	r4, #1
 800b46e:	e7ce      	b.n	800b40e <__kernel_rem_pio2+0x566>
 800b470:	ed95 7b00 	vldr	d7, [r5]
 800b474:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b478:	ed95 7b02 	vldr	d7, [r5, #8]
 800b47c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b480:	ec53 2b17 	vmov	r2, r3, d7
 800b484:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b488:	f7f4 ff60 	bl	800034c <__adddf3>
 800b48c:	4602      	mov	r2, r0
 800b48e:	460b      	mov	r3, r1
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b498:	f7f4 ff56 	bl	8000348 <__aeabi_dsub>
 800b49c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4a0:	f7f4 ff54 	bl	800034c <__adddf3>
 800b4a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4a8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b4ac:	e9c5 6700 	strd	r6, r7, [r5]
 800b4b0:	e771      	b.n	800b396 <__kernel_rem_pio2+0x4ee>
 800b4b2:	ed94 7b02 	vldr	d7, [r4, #8]
 800b4b6:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b4ba:	ec53 2b17 	vmov	r2, r3, d7
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4c6:	f7f4 ff41 	bl	800034c <__adddf3>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	f7f4 ff37 	bl	8000348 <__aeabi_dsub>
 800b4da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4de:	f7f4 ff35 	bl	800034c <__adddf3>
 800b4e2:	3d01      	subs	r5, #1
 800b4e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4e8:	e9c4 6700 	strd	r6, r7, [r4]
 800b4ec:	e759      	b.n	800b3a2 <__kernel_rem_pio2+0x4fa>
 800b4ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4f2:	f7f4 ff2b 	bl	800034c <__adddf3>
 800b4f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4fa:	e75c      	b.n	800b3b6 <__kernel_rem_pio2+0x50e>
 800b4fc:	f3af 8000 	nop.w
	...
 800b508:	41700000 	.word	0x41700000
 800b50c:	3e700000 	.word	0x3e700000
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	9a01      	ldr	r2, [sp, #4]
 800b514:	601f      	str	r7, [r3, #0]
 800b516:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b51a:	605c      	str	r4, [r3, #4]
 800b51c:	609d      	str	r5, [r3, #8]
 800b51e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b522:	60d3      	str	r3, [r2, #12]
 800b524:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b528:	6110      	str	r0, [r2, #16]
 800b52a:	6153      	str	r3, [r2, #20]
 800b52c:	e71f      	b.n	800b36e <__kernel_rem_pio2+0x4c6>
 800b52e:	bf00      	nop

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
