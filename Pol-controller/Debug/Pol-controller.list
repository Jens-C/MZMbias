
Pol-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080058d0  080058d0  000068d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a14  08005a14  00007074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a1c  08005a1c  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a20  08005a20  00006a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000074  08005a98  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08005a98  000073f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ae1  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002410  00000000  00000000  00018b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca3  00000000  00000000  0001bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019522  00000000  00000000  0001cc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013182  00000000  00000000  00036165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9702  00000000  00000000  000492e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f29e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  000f2a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f69e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080058b8 	.word	0x080058b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080058b8 	.word	0x080058b8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <Read_ADC>:
uint32_t pwm_channels[3] = {TIM_CHANNEL_1, TIM_CHANNEL_1, TIM_CHANNEL_2};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <Read_ADC+0x2c>)
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fa6c 	bl	8001b24 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800064c:	2301      	movs	r3, #1
 800064e:	425a      	negs	r2, r3
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <Read_ADC+0x2c>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fab3 	bl	8001bc0 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800065a:	4b04      	ldr	r3, [pc, #16]	@ (800066c <Read_ADC+0x2c>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fb43 	bl	8001ce8 <HAL_ADC_GetValue>
 8000662:	0003      	movs	r3, r0
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000090 	.word	0x20000090

08000670 <Sweep_PWM>:
void Reset_PWM(TIM_HandleTypeDef *htim, uint32_t channel) {
}


void Sweep_PWM(TIM_HandleTypeDef *htim, uint32_t channel) {
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b089      	sub	sp, #36	@ 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	HAL_Delay(1000);
 800067a:	23fa      	movs	r3, #250	@ 0xfa
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f000 ff4e 	bl	8001520 <HAL_Delay>
	uint32_t best_pwm_value = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
	uint32_t min_adc_value = 0xFFFFFFFF;
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	61bb      	str	r3, [r7, #24]
	uint32_t adc_val = Read_ADC();
 800068e:	f7ff ffd7 	bl	8000640 <Read_ADC>
 8000692:	0003      	movs	r3, r0
 8000694:	60bb      	str	r3, [r7, #8]
    for (uint16_t duty = 900; duty <= 2100; duty += 10) {
 8000696:	2316      	movs	r3, #22
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	22e1      	movs	r2, #225	@ 0xe1
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	e077      	b.n	8000792 <Sweep_PWM+0x122>
    	__HAL_TIM_SET_COMPARE(htim, channel, duty);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d106      	bne.n	80006b6 <Sweep_PWM+0x46>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2216      	movs	r2, #22
 80006ae:	18ba      	adds	r2, r7, r2
 80006b0:	8812      	ldrh	r2, [r2, #0]
 80006b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b4:	e02d      	b.n	8000712 <Sweep_PWM+0xa2>
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2b04      	cmp	r3, #4
 80006ba:	d106      	bne.n	80006ca <Sweep_PWM+0x5a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	2316      	movs	r3, #22
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	6393      	str	r3, [r2, #56]	@ 0x38
 80006c8:	e023      	b.n	8000712 <Sweep_PWM+0xa2>
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d106      	bne.n	80006de <Sweep_PWM+0x6e>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	2316      	movs	r3, #22
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80006dc:	e019      	b.n	8000712 <Sweep_PWM+0xa2>
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	2b0c      	cmp	r3, #12
 80006e2:	d106      	bne.n	80006f2 <Sweep_PWM+0x82>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	2316      	movs	r3, #22
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	e00f      	b.n	8000712 <Sweep_PWM+0xa2>
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2b10      	cmp	r3, #16
 80006f6:	d106      	bne.n	8000706 <Sweep_PWM+0x96>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	2316      	movs	r3, #22
 80006fe:	18fb      	adds	r3, r7, r3
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	6593      	str	r3, [r2, #88]	@ 0x58
 8000704:	e005      	b.n	8000712 <Sweep_PWM+0xa2>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	2316      	movs	r3, #22
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	65d3      	str	r3, [r2, #92]	@ 0x5c
        HAL_Delay(10);
 8000712:	200a      	movs	r0, #10
 8000714:	f000 ff04 	bl	8001520 <HAL_Delay>

    	uint32_t adc_val = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
        for(uint16_t i= 0; i<1;i++){
 800071c:	230e      	movs	r3, #14
 800071e:	18fb      	adds	r3, r7, r3
 8000720:	2200      	movs	r2, #0
 8000722:	801a      	strh	r2, [r3, #0]
 8000724:	e00e      	b.n	8000744 <Sweep_PWM+0xd4>
        	adc_val += Read_ADC();
 8000726:	f7ff ff8b 	bl	8000640 <Read_ADC>
 800072a:	0002      	movs	r2, r0
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	189b      	adds	r3, r3, r2
 8000730:	613b      	str	r3, [r7, #16]
        	HAL_Delay(5);
 8000732:	2005      	movs	r0, #5
 8000734:	f000 fef4 	bl	8001520 <HAL_Delay>
        for(uint16_t i= 0; i<1;i++){
 8000738:	210e      	movs	r1, #14
 800073a:	187b      	adds	r3, r7, r1
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	187b      	adds	r3, r7, r1
 8000740:	3201      	adds	r2, #1
 8000742:	801a      	strh	r2, [r3, #0]
 8000744:	230e      	movs	r3, #14
 8000746:	18fb      	adds	r3, r7, r3
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0eb      	beq.n	8000726 <Sweep_PWM+0xb6>
        }
        sprintf(data, "adc:%d, pwm:%d \r\n",adc_val, duty);
 800074e:	2416      	movs	r4, #22
 8000750:	193b      	adds	r3, r7, r4
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4935      	ldr	r1, [pc, #212]	@ (800082c <Sweep_PWM+0x1bc>)
 8000758:	4835      	ldr	r0, [pc, #212]	@ (8000830 <Sweep_PWM+0x1c0>)
 800075a:	f004 fc0f 	bl	8004f7c <siprintf>
        HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <Sweep_PWM+0x1c0>)
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff fccf 	bl	8000104 <strlen>
 8000766:	0003      	movs	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	4931      	ldr	r1, [pc, #196]	@ (8000830 <Sweep_PWM+0x1c0>)
 800076c:	4831      	ldr	r0, [pc, #196]	@ (8000834 <Sweep_PWM+0x1c4>)
 800076e:	2364      	movs	r3, #100	@ 0x64
 8000770:	f003 fd54 	bl	800421c <HAL_UART_Transmit>
        if (adc_val < min_adc_value) {
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	69bb      	ldr	r3, [r7, #24]
 8000778:	429a      	cmp	r2, r3
 800077a:	d204      	bcs.n	8000786 <Sweep_PWM+0x116>
        	  min_adc_value = adc_val;
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	61bb      	str	r3, [r7, #24]
        	  best_pwm_value = duty;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	61fb      	str	r3, [r7, #28]
    for (uint16_t duty = 900; duty <= 2100; duty += 10) {
 8000786:	2216      	movs	r2, #22
 8000788:	18bb      	adds	r3, r7, r2
 800078a:	18ba      	adds	r2, r7, r2
 800078c:	8812      	ldrh	r2, [r2, #0]
 800078e:	320a      	adds	r2, #10
 8000790:	801a      	strh	r2, [r3, #0]
 8000792:	2316      	movs	r3, #22
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <Sweep_PWM+0x1c8>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d800      	bhi.n	80007a0 <Sweep_PWM+0x130>
 800079e:	e780      	b.n	80006a2 <Sweep_PWM+0x32>

        }

    }
    sprintf(data, "best adc:%d, pwm:%d \r\n",min_adc_value, best_pwm_value );
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	4925      	ldr	r1, [pc, #148]	@ (800083c <Sweep_PWM+0x1cc>)
 80007a6:	4822      	ldr	r0, [pc, #136]	@ (8000830 <Sweep_PWM+0x1c0>)
 80007a8:	f004 fbe8 	bl	8004f7c <siprintf>
    HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <Sweep_PWM+0x1c0>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fca8 	bl	8000104 <strlen>
 80007b4:	0003      	movs	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	491d      	ldr	r1, [pc, #116]	@ (8000830 <Sweep_PWM+0x1c0>)
 80007ba:	481e      	ldr	r0, [pc, #120]	@ (8000834 <Sweep_PWM+0x1c4>)
 80007bc:	2364      	movs	r3, #100	@ 0x64
 80007be:	f003 fd2d 	bl	800421c <HAL_UART_Transmit>
    __HAL_TIM_SET_COMPARE(htim, channel, best_pwm_value);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d104      	bne.n	80007d2 <Sweep_PWM+0x162>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69fa      	ldr	r2, [r7, #28]
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d0:	e023      	b.n	800081a <Sweep_PWM+0x1aa>
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d104      	bne.n	80007e2 <Sweep_PWM+0x172>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	6393      	str	r3, [r2, #56]	@ 0x38
 80007e0:	e01b      	b.n	800081a <Sweep_PWM+0x1aa>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	d104      	bne.n	80007f2 <Sweep_PWM+0x182>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80007f0:	e013      	b.n	800081a <Sweep_PWM+0x1aa>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b0c      	cmp	r3, #12
 80007f6:	d104      	bne.n	8000802 <Sweep_PWM+0x192>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	e00b      	b.n	800081a <Sweep_PWM+0x1aa>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d104      	bne.n	8000812 <Sweep_PWM+0x1a2>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000810:	e003      	b.n	800081a <Sweep_PWM+0x1aa>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_Delay(1000);
 800081a:	23fa      	movs	r3, #250	@ 0xfa
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fe7e 	bl	8001520 <HAL_Delay>
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b009      	add	sp, #36	@ 0x24
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	080058d0 	.word	0x080058d0
 8000830:	2000026c 	.word	0x2000026c
 8000834:	200001d8 	.word	0x200001d8
 8000838:	00000834 	.word	0x00000834
 800083c:	080058e4 	.word	0x080058e4

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fde5 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f8d7 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 fb47 	bl	8000ee0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000852:	f000 f931 	bl	8000ab8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000856:	f000 f999 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 800085a:	f000 f9f7 	bl	8000c4c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800085e:	f000 faf1 	bl	8000e44 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 8000862:	f000 fa55 	bl	8000d10 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000866:	4b5d      	ldr	r3, [pc, #372]	@ (80009dc <main+0x19c>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fe16 	bl	800349c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000870:	4b5b      	ldr	r3, [pc, #364]	@ (80009e0 <main+0x1a0>)
 8000872:	2104      	movs	r1, #4
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fe11 	bl	800349c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800087a:	4b5a      	ldr	r3, [pc, #360]	@ (80009e4 <main+0x1a4>)
 800087c:	2100      	movs	r1, #0
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fe0c 	bl	800349c <HAL_TIM_PWM_Start>
	for (uint8_t i = 0; i < 3; i++) {
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	e062      	b.n	8000952 <main+0x112>
		__HAL_TIM_SET_COMPARE(htim_array[i],pwm_channels[i],900);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	4b55      	ldr	r3, [pc, #340]	@ (80009e8 <main+0x1a8>)
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	58d3      	ldr	r3, [r2, r3]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d109      	bne.n	80008ae <main+0x6e>
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <main+0x1ac>)
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	58d3      	ldr	r3, [r2, r3]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	22e1      	movs	r2, #225	@ 0xe1
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ac:	e04c      	b.n	8000948 <main+0x108>
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b4d      	ldr	r3, [pc, #308]	@ (80009e8 <main+0x1a8>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d3      	ldr	r3, [r2, r3]
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d109      	bne.n	80008d0 <main+0x90>
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b4a      	ldr	r3, [pc, #296]	@ (80009ec <main+0x1ac>)
 80008c2:	0092      	lsls	r2, r2, #2
 80008c4:	58d3      	ldr	r3, [r2, r3]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	23e1      	movs	r3, #225	@ 0xe1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80008ce:	e03b      	b.n	8000948 <main+0x108>
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b44      	ldr	r3, [pc, #272]	@ (80009e8 <main+0x1a8>)
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	58d3      	ldr	r3, [r2, r3]
 80008da:	2b08      	cmp	r3, #8
 80008dc:	d109      	bne.n	80008f2 <main+0xb2>
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781a      	ldrb	r2, [r3, #0]
 80008e2:	4b42      	ldr	r3, [pc, #264]	@ (80009ec <main+0x1ac>)
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	58d3      	ldr	r3, [r2, r3]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	23e1      	movs	r3, #225	@ 0xe1
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008f0:	e02a      	b.n	8000948 <main+0x108>
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <main+0x1a8>)
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	58d3      	ldr	r3, [r2, r3]
 80008fc:	2b0c      	cmp	r3, #12
 80008fe:	d109      	bne.n	8000914 <main+0xd4>
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b39      	ldr	r3, [pc, #228]	@ (80009ec <main+0x1ac>)
 8000906:	0092      	lsls	r2, r2, #2
 8000908:	58d3      	ldr	r3, [r2, r3]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	23e1      	movs	r3, #225	@ 0xe1
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	6413      	str	r3, [r2, #64]	@ 0x40
 8000912:	e019      	b.n	8000948 <main+0x108>
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <main+0x1a8>)
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	58d3      	ldr	r3, [r2, r3]
 800091e:	2b10      	cmp	r3, #16
 8000920:	d109      	bne.n	8000936 <main+0xf6>
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <main+0x1ac>)
 8000928:	0092      	lsls	r2, r2, #2
 800092a:	58d3      	ldr	r3, [r2, r3]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	23e1      	movs	r3, #225	@ 0xe1
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	6593      	str	r3, [r2, #88]	@ 0x58
 8000934:	e008      	b.n	8000948 <main+0x108>
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <main+0x1ac>)
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	58d3      	ldr	r3, [r2, r3]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	23e1      	movs	r3, #225	@ 0xe1
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	65d3      	str	r3, [r2, #92]	@ 0x5c
	for (uint8_t i = 0; i < 3; i++) {
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	3201      	adds	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d998      	bls.n	800088c <main+0x4c>
	  }
	HAL_Delay(1000);
 800095a:	23fa      	movs	r3, #250	@ 0xfa
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fdde 	bl	8001520 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
 800096a:	e011      	b.n	8000990 <main+0x150>
	     Sweep_PWM(htim_array[i],pwm_channels[i]);
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <main+0x1ac>)
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	58d0      	ldr	r0, [r2, r3]
 8000976:	1dbb      	adds	r3, r7, #6
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <main+0x1a8>)
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	58d3      	ldr	r3, [r2, r3]
 8000980:	0019      	movs	r1, r3
 8000982:	f7ff fe75 	bl	8000670 <Sweep_PWM>
	for (uint8_t i = 0; i < 3; i++) {
 8000986:	1dbb      	adds	r3, r7, #6
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	1dbb      	adds	r3, r7, #6
 800098c:	3201      	adds	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d9e9      	bls.n	800096c <main+0x12c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Change GPIO port/pin as needed
 8000998:	23a0      	movs	r3, #160	@ 0xa0
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2120      	movs	r1, #32
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fe41 	bl	8002626 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009a4:	23fa      	movs	r3, #250	@ 0xfa
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fdb9 	bl	8001520 <HAL_Delay>
      sprintf(data, "loop\r\n");
 80009ae:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <main+0x1b0>)
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <main+0x1b4>)
 80009b2:	0011      	movs	r1, r2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f004 fae1 	bl	8004f7c <siprintf>
     HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <main+0x1b4>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fba1 	bl	8000104 <strlen>
 80009c2:	0003      	movs	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	490b      	ldr	r1, [pc, #44]	@ (80009f4 <main+0x1b4>)
 80009c8:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <main+0x1b8>)
 80009ca:	2364      	movs	r3, #100	@ 0x64
 80009cc:	f003 fc26 	bl	800421c <HAL_UART_Transmit>
     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 100);
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <main+0x1a0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2264      	movs	r2, #100	@ 0x64
 80009d6:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	e7dd      	b.n	8000998 <main+0x158>
 80009dc:	2000018c 	.word	0x2000018c
 80009e0:	200000f4 	.word	0x200000f4
 80009e4:	20000140 	.word	0x20000140
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	20000000 	.word	0x20000000
 80009f0:	080058fc 	.word	0x080058fc
 80009f4:	2000026c 	.word	0x2000026c
 80009f8:	200001d8 	.word	0x200001d8

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b093      	sub	sp, #76	@ 0x4c
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	2410      	movs	r4, #16
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	0018      	movs	r0, r3
 8000a08:	2338      	movs	r3, #56	@ 0x38
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f004 fad5 	bl	8004fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	2310      	movs	r3, #16
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f004 face 	bl	8004fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 fe19 	bl	800265c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	0052      	lsls	r2, r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a38:	0021      	movs	r1, r4
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2240      	movs	r2, #64	@ 0x40
 8000a44:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2202      	movs	r2, #2
 8000a50:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	0292      	lsls	r2, r2, #10
 8000a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	0492      	lsls	r2, r2, #18
 8000a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	0592      	lsls	r2, r2, #22
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 fe3b 	bl	80026f4 <HAL_RCC_OscConfig>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a82:	f000 fa89 	bl	8000f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	003b      	movs	r3, r7
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2202      	movs	r2, #2
 8000a90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a98:	003b      	movs	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 f940 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000aac:	f000 fa74 	bl	8000f98 <Error_Handler>
  }
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b013      	add	sp, #76	@ 0x4c
 8000ab6:	bd90      	pop	{r4, r7, pc}

08000ab8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f004 fa78 	bl	8004fbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000acc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000ace:	4a2e      	ldr	r2, [pc, #184]	@ (8000b88 <MX_ADC1_Init+0xd0>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000ad4:	2280      	movs	r2, #128	@ 0x80
 8000ad6:	05d2      	lsls	r2, r2, #23
 8000ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ada:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae0:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ae6:	4b27      	ldr	r3, [pc, #156]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af2:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2100      	movs	r1, #0
 8000b10:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b20:	222c      	movs	r2, #44	@ 0x2c
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b26:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000b32:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b3a:	223c      	movs	r2, #60	@ 0x3c
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b40:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fe43 	bl	80017d4 <HAL_ADC_Init>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000b52:	f000 fa21 	bl	8000f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b68:	1d3a      	adds	r2, r7, #4
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_ADC1_Init+0xcc>)
 8000b6c:	0011      	movs	r1, r2
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 f8c6 	bl	8001d00 <HAL_ADC_ConfigChannel>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000b78:	f000 fa0e 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b004      	add	sp, #16
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000090 	.word	0x20000090
 8000b88:	40012400 	.word	0x40012400

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	231c      	movs	r3, #28
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	0018      	movs	r0, r3
 8000b98:	230c      	movs	r3, #12
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f004 fa0d 	bl	8004fbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	231c      	movs	r3, #28
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f004 fa06 	bl	8004fbc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	05d2      	lsls	r2, r2, #23
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bba:	223f      	movs	r2, #63	@ 0x3f
 8000bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bc6:	4a20      	ldr	r2, [pc, #128]	@ (8000c48 <MX_TIM2_Init+0xbc>)
 8000bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fc07 	bl	80033ec <HAL_TIM_PWM_Init>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000be2:	f000 f9d9 	bl	8000f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be6:	211c      	movs	r1, #28
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f003 f9ae 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 f9c8 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	2260      	movs	r2, #96	@ 0x60
 8000c0c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c14:	003b      	movs	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c20:	0039      	movs	r1, r7
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000c24:	2204      	movs	r2, #4
 8000c26:	0018      	movs	r0, r3
 8000c28:	f002 fd22 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000c30:	f000 f9b2 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c34:	4b03      	ldr	r3, [pc, #12]	@ (8000c44 <MX_TIM2_Init+0xb8>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fa7a 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000c3c:	46c0      	nop			@ (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b00a      	add	sp, #40	@ 0x28
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000f4 	.word	0x200000f4
 8000c48:	00004e1f 	.word	0x00004e1f

08000c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	231c      	movs	r3, #28
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	0018      	movs	r0, r3
 8000c58:	230c      	movs	r3, #12
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f004 f9ad 	bl	8004fbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c62:	003b      	movs	r3, r7
 8000c64:	0018      	movs	r0, r3
 8000c66:	231c      	movs	r3, #28
 8000c68:	001a      	movs	r2, r3
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f004 f9a6 	bl	8004fbc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c72:	4a25      	ldr	r2, [pc, #148]	@ (8000d08 <MX_TIM3_Init+0xbc>)
 8000c74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c78:	223f      	movs	r2, #63	@ 0x3f
 8000c7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000c82:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c84:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <MX_TIM3_Init+0xc0>)
 8000c86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 fba8 	bl	80033ec <HAL_TIM_PWM_Init>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f97a 	bl	8000f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	211c      	movs	r1, #28
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb2:	187a      	adds	r2, r7, r1
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f003 f94f 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000cc2:	f000 f969 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2260      	movs	r2, #96	@ 0x60
 8000cca:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd2:	003b      	movs	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	003b      	movs	r3, r7
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cde:	0039      	movs	r1, r7
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fcc3 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000cee:	f000 f953 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <MX_TIM3_Init+0xb8>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f000 fa1b 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b00a      	add	sp, #40	@ 0x28
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	20000140 	.word	0x20000140
 8000d08:	40000400 	.word	0x40000400
 8000d0c:	00004e1f 	.word	0x00004e1f

08000d10 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b098      	sub	sp, #96	@ 0x60
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	2354      	movs	r3, #84	@ 0x54
 8000d18:	18fb      	adds	r3, r7, r3
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	001a      	movs	r2, r3
 8000d20:	2100      	movs	r1, #0
 8000d22:	f004 f94b 	bl	8004fbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	2338      	movs	r3, #56	@ 0x38
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	231c      	movs	r3, #28
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f004 f943 	bl	8004fbc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2334      	movs	r3, #52	@ 0x34
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f004 f93c 	bl	8004fbc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d44:	4b3c      	ldr	r3, [pc, #240]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d46:	4a3d      	ldr	r2, [pc, #244]	@ (8000e3c <MX_TIM15_Init+0x12c>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d4c:	223f      	movs	r2, #63	@ 0x3f
 8000d4e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b39      	ldr	r3, [pc, #228]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 8000d56:	4b38      	ldr	r3, [pc, #224]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d58:	4a39      	ldr	r2, [pc, #228]	@ (8000e40 <MX_TIM15_Init+0x130>)
 8000d5a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b36      	ldr	r3, [pc, #216]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d62:	4b35      	ldr	r3, [pc, #212]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d6e:	4b32      	ldr	r3, [pc, #200]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fb3b 	bl	80033ec <HAL_TIM_PWM_Init>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f90d 	bl	8000f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2154      	movs	r1, #84	@ 0x54
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d8c:	187a      	adds	r2, r7, r1
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000d90:	0011      	movs	r1, r2
 8000d92:	0018      	movs	r0, r3
 8000d94:	f003 f8e2 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f000 f8fc 	bl	8000f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da0:	2138      	movs	r1, #56	@ 0x38
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2260      	movs	r2, #96	@ 0x60
 8000da6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f002 fc4c 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000ddc:	f000 f8dc 	bl	8000f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	0192      	lsls	r2, r2, #6
 8000e04:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f003 f90d 	bl	8004038 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e1e:	1e03      	subs	r3, r0, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8000e22:	f000 f8b9 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <MX_TIM15_Init+0x128>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 f981 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b018      	add	sp, #96	@ 0x60
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	2000018c 	.word	0x2000018c
 8000e3c:	40014000 	.word	0x40014000
 8000e40:	00004e1f 	.word	0x00004e1f

08000e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e4a:	4a24      	ldr	r2, [pc, #144]	@ (8000edc <MX_USART2_UART_Init+0x98>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e50:	22e1      	movs	r2, #225	@ 0xe1
 8000e52:	0252      	lsls	r2, r2, #9
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f003 f96e 	bl	8004170 <HAL_UART_Init>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e98:	f000 f87e 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f003 ff8b 	bl	8004dbc <HAL_UARTEx_SetTxFifoThreshold>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000eaa:	f000 f875 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f003 ffc2 	bl	8004e3c <HAL_UARTEx_SetRxFifoThreshold>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ebc:	f000 f86c 	bl	8000f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <MX_USART2_UART_Init+0x94>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f003 ff40 	bl	8004d48 <HAL_UARTEx_DisableFifoMode>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ecc:	f000 f864 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	200001d8 	.word	0x200001d8
 8000edc:	40004400 	.word	0x40004400

08000ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee6:	2414      	movs	r4, #20
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	0018      	movs	r0, r3
 8000eec:	2314      	movs	r3, #20
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	f004 f863 	bl	8004fbc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000efc:	2104      	movs	r1, #4
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f02:	4b24      	ldr	r3, [pc, #144]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	2204      	movs	r2, #4
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f14:	2120      	movs	r1, #32
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1e:	2220      	movs	r2, #32
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f36:	2201      	movs	r2, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f44:	2102      	movs	r1, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_GPIO_Init+0xb4>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4e:	2202      	movs	r2, #2
 8000f50:	4013      	ands	r3, r2
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000f56:	23a0      	movs	r3, #160	@ 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 fb44 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f64:	0021      	movs	r1, r4
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2220      	movs	r2, #32
 8000f6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2201      	movs	r2, #1
 8000f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	187a      	adds	r2, r7, r1
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f001 f9cc 	bl	8002324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b00b      	add	sp, #44	@ 0x2c
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	40021000 	.word	0x40021000

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	e7fd      	b.n	8000fa0 <Error_Handler+0x8>

08000fa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0549      	lsls	r1, r1, #21
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <HAL_MspInit+0x44>)
 8000fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	055b      	lsls	r3, r3, #21
 8000fd8:	4013      	ands	r3, r2
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b08b      	sub	sp, #44	@ 0x2c
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	2414      	movs	r4, #20
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2314      	movs	r3, #20
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f003 ffdc 	bl	8004fbc <memset>
  if(hadc->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a18      	ldr	r2, [pc, #96]	@ (800106c <HAL_ADC_MspInit+0x80>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d129      	bne.n	8001062 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800100e:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 8001010:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001012:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0349      	lsls	r1, r1, #13
 8001018:	430a      	orrs	r2, r1
 800101a:	641a      	str	r2, [r3, #64]	@ 0x40
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 800101e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001020:	2380      	movs	r3, #128	@ 0x80
 8001022:	035b      	lsls	r3, r3, #13
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 800102c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	635a      	str	r2, [r3, #52]	@ 0x34
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_ADC_MspInit+0x84>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800103a:	2201      	movs	r2, #1
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2203      	movs	r2, #3
 800104c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	193a      	adds	r2, r7, r4
 8001056:	23a0      	movs	r3, #160	@ 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	0011      	movs	r1, r2
 800105c:	0018      	movs	r0, r3
 800105e:	f001 f961 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b00b      	add	sp, #44	@ 0x2c
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	40012400 	.word	0x40012400
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b092      	sub	sp, #72	@ 0x48
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	2314      	movs	r3, #20
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	0018      	movs	r0, r3
 8001082:	2334      	movs	r3, #52	@ 0x34
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f003 ff98 	bl	8004fbc <memset>
  if(htim_pwm->Instance==TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	429a      	cmp	r2, r3
 8001096:	d10c      	bne.n	80010b2 <HAL_TIM_PWM_MspInit+0x3e>
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 800109a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 800109e:	2101      	movs	r1, #1
 80010a0:	430a      	orrs	r2, r1
 80010a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 80010a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a8:	2201      	movs	r2, #1
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80010b0:	e034      	b.n	800111c <HAL_TIM_PWM_MspInit+0xa8>
  else if(htim_pwm->Instance==TIM3)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <HAL_TIM_PWM_MspInit+0xb4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d10c      	bne.n	80010d6 <HAL_TIM_PWM_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 80010be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 80010c2:	2102      	movs	r1, #2
 80010c4:	430a      	orrs	r2, r1
 80010c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 80010ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010cc:	2202      	movs	r2, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	e022      	b.n	800111c <HAL_TIM_PWM_MspInit+0xa8>
  else if(htim_pwm->Instance==TIM15)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a14      	ldr	r2, [pc, #80]	@ (800112c <HAL_TIM_PWM_MspInit+0xb8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d11d      	bne.n	800111c <HAL_TIM_PWM_MspInit+0xa8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 80010e0:	2114      	movs	r1, #20
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	03d2      	lsls	r2, r2, #15
 80010e8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 ffc2 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <HAL_TIM_PWM_MspInit+0x8c>
      Error_Handler();
 80010fc:	f7ff ff4c 	bl	8000f98 <Error_Handler>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 8001102:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 8001106:	2180      	movs	r1, #128	@ 0x80
 8001108:	0249      	lsls	r1, r1, #9
 800110a:	430a      	orrs	r2, r1
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_TIM_PWM_MspInit+0xb0>)
 8001110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	025b      	lsls	r3, r3, #9
 8001116:	4013      	ands	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b012      	add	sp, #72	@ 0x48
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	40000400 	.word	0x40000400
 800112c:	40014000 	.word	0x40014000

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08b      	sub	sp, #44	@ 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	2414      	movs	r4, #20
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	2314      	movs	r3, #20
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f003 ff3a 	bl	8004fbc <memset>
  if(htim->Instance==TIM2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	429a      	cmp	r2, r3
 8001152:	d122      	bne.n	800119a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b3b      	ldr	r3, [pc, #236]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001158:	4b3a      	ldr	r3, [pc, #232]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 800115a:	2102      	movs	r1, #2
 800115c:	430a      	orrs	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001160:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001164:	2202      	movs	r2, #2
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800116c:	0021      	movs	r1, r4
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2208      	movs	r2, #8
 8001172:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2202      	movs	r2, #2
 8001178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2202      	movs	r2, #2
 800118a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	187b      	adds	r3, r7, r1
 800118e:	4a2e      	ldr	r2, [pc, #184]	@ (8001248 <HAL_TIM_MspPostInit+0x118>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 f8c6 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001198:	e04f      	b.n	800123a <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a2b      	ldr	r2, [pc, #172]	@ (800124c <HAL_TIM_MspPostInit+0x11c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d122      	bne.n	80011ea <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 80011a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 80011aa:	2102      	movs	r1, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 80011b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011bc:	2114      	movs	r1, #20
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2210      	movs	r2, #16
 80011c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2202      	movs	r2, #2
 80011c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2201      	movs	r2, #1
 80011da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <HAL_TIM_MspPostInit+0x118>)
 80011e0:	0019      	movs	r1, r3
 80011e2:	0010      	movs	r0, r2
 80011e4:	f001 f89e 	bl	8002324 <HAL_GPIO_Init>
}
 80011e8:	e027      	b.n	800123a <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM15)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_TIM_MspPostInit+0x120>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d122      	bne.n	800123a <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 80011fa:	2102      	movs	r1, #2
 80011fc:	430a      	orrs	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HAL_TIM_MspPostInit+0x114>)
 8001202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800120c:	2114      	movs	r1, #20
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	01d2      	lsls	r2, r2, #7
 8001214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2202      	movs	r2, #2
 800121a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2205      	movs	r2, #5
 800122c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	187b      	adds	r3, r7, r1
 8001230:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_TIM_MspPostInit+0x118>)
 8001232:	0019      	movs	r1, r3
 8001234:	0010      	movs	r0, r2
 8001236:	f001 f875 	bl	8002324 <HAL_GPIO_Init>
}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b00b      	add	sp, #44	@ 0x2c
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	40021000 	.word	0x40021000
 8001248:	50000400 	.word	0x50000400
 800124c:	40000400 	.word	0x40000400
 8001250:	40014000 	.word	0x40014000

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b097      	sub	sp, #92	@ 0x5c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	2344      	movs	r3, #68	@ 0x44
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	0018      	movs	r0, r3
 8001262:	2314      	movs	r3, #20
 8001264:	001a      	movs	r2, r3
 8001266:	2100      	movs	r1, #0
 8001268:	f003 fea8 	bl	8004fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800126c:	2410      	movs	r4, #16
 800126e:	193b      	adds	r3, r7, r4
 8001270:	0018      	movs	r0, r3
 8001272:	2334      	movs	r3, #52	@ 0x34
 8001274:	001a      	movs	r2, r3
 8001276:	2100      	movs	r1, #0
 8001278:	f003 fea0 	bl	8004fbc <memset>
  if(huart->Instance==USART2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a22      	ldr	r2, [pc, #136]	@ (800130c <HAL_UART_MspInit+0xb8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d13e      	bne.n	8001304 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2202      	movs	r2, #2
 800128a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	193b      	adds	r3, r7, r4
 8001294:	0018      	movs	r0, r3
 8001296:	f001 fef1 	bl	800307c <HAL_RCCEx_PeriphCLKConfig>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800129e:	f7ff fe7b 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0289      	lsls	r1, r1, #10
 80012ac:	430a      	orrs	r2, r1
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_UART_MspInit+0xbc>)
 80012cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ce:	2201      	movs	r2, #1
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80012d6:	2144      	movs	r1, #68	@ 0x44
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2202      	movs	r2, #2
 80012e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2201      	movs	r2, #1
 80012f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	187a      	adds	r2, r7, r1
 80012f8:	23a0      	movs	r3, #160	@ 0xa0
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	0011      	movs	r1, r2
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 f810 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b017      	add	sp, #92	@ 0x5c
 800130a:	bd90      	pop	{r4, r7, pc}
 800130c:	40004400 	.word	0x40004400
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001328:	46c0      	nop			@ (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8d4 	bl	80014e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	46c0      	nop			@ (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	@ (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f003 fe28 	bl	8004fcc <__errno>
 800137c:	0003      	movs	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	2301      	movs	r3, #1
 8001384:	425b      	negs	r3, r3
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	18d2      	adds	r2, r2, r3
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <_sbrk+0x64>)
 8001398:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20009000 	.word	0x20009000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	200003f0 	.word	0x200003f0

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013c0:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013c4:	f7ff fff6 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c8:	480c      	ldr	r0, [pc, #48]	@ (80013fc <LoopForever+0x6>)
  ldr r1, =_edata
 80013ca:	490d      	ldr	r1, [pc, #52]	@ (8001400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <LoopForever+0xe>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d0:	e002      	b.n	80013d8 <LoopCopyDataInit>

080013d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d6:	3304      	adds	r3, #4

080013d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013dc:	d3f9      	bcc.n	80013d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013de:	4a0a      	ldr	r2, [pc, #40]	@ (8001408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e0:	4c0a      	ldr	r4, [pc, #40]	@ (800140c <LoopForever+0x16>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e4:	e001      	b.n	80013ea <LoopFillZerobss>

080013e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e8:	3204      	adds	r2, #4

080013ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ec:	d3fb      	bcc.n	80013e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013ee:	f003 fdf3 	bl	8004fd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80013f2:	f7ff fa25 	bl	8000840 <main>

080013f6 <LoopForever>:

LoopForever:
  b LoopForever
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
  ldr   r0, =_estack
 80013f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001404:	08005a24 	.word	0x08005a24
  ldr r2, =_sbss
 8001408:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800140c:	200003f0 	.word	0x200003f0

08001410 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_COMP_IRQHandler>
	...

08001414 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_Init+0x3c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_Init+0x3c>)
 8001426:	2180      	movs	r1, #128	@ 0x80
 8001428:	0049      	lsls	r1, r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f810 	bl	8001454 <HAL_InitTick>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d003      	beq.n	8001440 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	e001      	b.n	8001444 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fdb0 	bl	8000fa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_InitTick+0x88>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d02b      	beq.n	80014c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <HAL_InitTick+0x8c>)
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_InitTick+0x88>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	0019      	movs	r1, r3
 8001476:	23fa      	movs	r3, #250	@ 0xfa
 8001478:	0098      	lsls	r0, r3, #2
 800147a:	f7fe fe55 	bl	8000128 <__udivsi3>
 800147e:	0003      	movs	r3, r0
 8001480:	0019      	movs	r1, r3
 8001482:	0020      	movs	r0, r4
 8001484:	f7fe fe50 	bl	8000128 <__udivsi3>
 8001488:	0003      	movs	r3, r0
 800148a:	0018      	movs	r0, r3
 800148c:	f000 ff3d 	bl	800230a <HAL_SYSTICK_Config>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d112      	bne.n	80014ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d80a      	bhi.n	80014b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	2301      	movs	r3, #1
 800149e:	425b      	negs	r3, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	0018      	movs	r0, r3
 80014a4:	f000 ff1c 	bl	80022e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_InitTick+0x90>)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e00d      	b.n	80014cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014b0:	230f      	movs	r3, #15
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e008      	b.n	80014cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ba:	230f      	movs	r3, #15
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e003      	b.n	80014cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014c4:	230f      	movs	r3, #15
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80014cc:	230f      	movs	r3, #15
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	781b      	ldrb	r3, [r3, #0]
}
 80014d2:	0018      	movs	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b005      	add	sp, #20
 80014d8:	bd90      	pop	{r4, r7, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)
 80014dc:	20000020 	.word	0x20000020
 80014e0:	20000018 	.word	0x20000018
 80014e4:	2000001c 	.word	0x2000001c

080014e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_IncTick+0x1c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	001a      	movs	r2, r3
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_IncTick+0x20>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	18d2      	adds	r2, r2, r3
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_IncTick+0x20>)
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	20000020 	.word	0x20000020
 8001508:	200002a4 	.word	0x200002a4

0800150c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return uwTick;
 8001510:	4b02      	ldr	r3, [pc, #8]	@ (800151c <HAL_GetTick+0x10>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	200002a4 	.word	0x200002a4

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fff0 	bl	800150c <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800153a:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <HAL_Delay+0x44>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	001a      	movs	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	189b      	adds	r3, r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	f7ff ffe0 	bl	800150c <HAL_GetTick>
 800154c:	0002      	movs	r2, r0
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	429a      	cmp	r2, r3
 8001556:	d8f7      	bhi.n	8001548 <HAL_Delay+0x28>
  {
  }
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	20000020 	.word	0x20000020

08001568 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a05      	ldr	r2, [pc, #20]	@ (800158c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001578:	401a      	ands	r2, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	fe3fffff 	.word	0xfe3fffff

08001590 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	23e0      	movs	r3, #224	@ 0xe0
 800159e:	045b      	lsls	r3, r3, #17
 80015a0:	4013      	ands	r3, r2
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	2104      	movs	r1, #4
 80015be:	400a      	ands	r2, r1
 80015c0:	2107      	movs	r1, #7
 80015c2:	4091      	lsls	r1, r2
 80015c4:	000a      	movs	r2, r1
 80015c6:	43d2      	mvns	r2, r2
 80015c8:	401a      	ands	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2104      	movs	r1, #4
 80015ce:	400b      	ands	r3, r1
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4099      	lsls	r1, r3
 80015d4:	000b      	movs	r3, r1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80015dc:	46c0      	nop			@ (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b004      	add	sp, #16
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	2104      	movs	r1, #4
 80015f6:	400a      	ands	r2, r1
 80015f8:	2107      	movs	r1, #7
 80015fa:	4091      	lsls	r1, r2
 80015fc:	000a      	movs	r2, r1
 80015fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2104      	movs	r1, #4
 8001604:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001606:	40da      	lsrs	r2, r3
 8001608:	0013      	movs	r3, r2
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	23c0      	movs	r3, #192	@ 0xc0
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	4013      	ands	r3, r2
 8001624:	d101      	bne.n	800162a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800162a:	2300      	movs	r3, #0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	211f      	movs	r1, #31
 8001648:	400a      	ands	r2, r1
 800164a:	210f      	movs	r1, #15
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0e9b      	lsrs	r3, r3, #26
 8001658:	210f      	movs	r1, #15
 800165a:	4019      	ands	r1, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	201f      	movs	r0, #31
 8001660:	4003      	ands	r3, r0
 8001662:	4099      	lsls	r1, r3
 8001664:	000b      	movs	r3, r1
 8001666:	431a      	orrs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b004      	add	sp, #16
 8001672:	bd80      	pop	{r7, pc}

08001674 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	0b5b      	lsrs	r3, r3, #13
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}

08001696 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	0352      	lsls	r2, r2, #13
 80016a8:	0b52      	lsrs	r2, r2, #13
 80016aa:	43d2      	mvns	r2, r2
 80016ac:	401a      	ands	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	0212      	lsls	r2, r2, #8
 80016d0:	43d2      	mvns	r2, r2
 80016d2:	401a      	ands	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	400b      	ands	r3, r1
 80016dc:	4904      	ldr	r1, [pc, #16]	@ (80016f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80016de:	400b      	ands	r3, r1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	07ffff00 	.word	0x07ffff00

080016f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <LL_ADC_EnableInternalRegulator+0x24>)
 8001702:	4013      	ands	r3, r2
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	0552      	lsls	r2, r2, #21
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800170e:	46c0      	nop			@ (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	6fffffe8 	.word	0x6fffffe8

0800171c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	401a      	ands	r2, r3
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	055b      	lsls	r3, r3, #21
 8001732:	429a      	cmp	r2, r3
 8001734:	d101      	bne.n	800173a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <LL_ADC_Enable+0x20>)
 8001752:	4013      	ands	r3, r2
 8001754:	2201      	movs	r2, #1
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}
 8001764:	7fffffe8 	.word	0x7fffffe8

08001768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2201      	movs	r2, #1
 8001776:	4013      	ands	r3, r2
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <LL_ADC_IsEnabled+0x18>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <LL_ADC_IsEnabled+0x1a>
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <LL_ADC_REG_StartConversion+0x20>)
 800179a:	4013      	ands	r3, r2
 800179c:	2204      	movs	r2, #4
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b002      	add	sp, #8
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	7fffffe8 	.word	0x7fffffe8

080017b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2204      	movs	r2, #4
 80017be:	4013      	ands	r3, r2
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	231f      	movs	r3, #31
 80017de:	18fb      	adds	r3, r7, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e17f      	b.n	8001afa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fbf1 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2254      	movs	r2, #84	@ 0x54
 8001814:	2100      	movs	r1, #0
 8001816:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff ff7d 	bl	800171c <LL_ADC_IsInternalRegulatorEnabled>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d115      	bne.n	8001852 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ff62 	bl	80016f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001830:	4bb4      	ldr	r3, [pc, #720]	@ (8001b04 <HAL_ADC_Init+0x330>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	49b4      	ldr	r1, [pc, #720]	@ (8001b08 <HAL_ADC_Init+0x334>)
 8001836:	0018      	movs	r0, r3
 8001838:	f7fe fc76 	bl	8000128 <__udivsi3>
 800183c:	0003      	movs	r3, r0
 800183e:	3301      	adds	r3, #1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001844:	e002      	b.n	800184c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3b01      	subs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f9      	bne.n	8001846 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff ff60 	bl	800171c <LL_ADC_IsInternalRegulatorEnabled>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d10f      	bne.n	8001880 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	2210      	movs	r2, #16
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001870:	2201      	movs	r2, #1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001878:	231f      	movs	r3, #31
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff ff93 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 800188a:	0003      	movs	r3, r0
 800188c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	2210      	movs	r2, #16
 8001894:	4013      	ands	r3, r2
 8001896:	d000      	beq.n	800189a <HAL_ADC_Init+0xc6>
 8001898:	e122      	b.n	8001ae0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d000      	beq.n	80018a2 <HAL_ADC_Init+0xce>
 80018a0:	e11e      	b.n	8001ae0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	4a99      	ldr	r2, [pc, #612]	@ (8001b0c <HAL_ADC_Init+0x338>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	2202      	movs	r2, #2
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff56 	bl	8001768 <LL_ADC_IsEnabled>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d000      	beq.n	80018c2 <HAL_ADC_Init+0xee>
 80018c0:	e0ad      	b.n	8001a1e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e1b      	ldrb	r3, [r3, #24]
 80018ca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7e5b      	ldrb	r3, [r3, #25]
 80018d2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e9b      	ldrb	r3, [r3, #26]
 80018da:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <HAL_ADC_Init+0x118>
 80018e6:	2380      	movs	r3, #128	@ 0x80
 80018e8:	015b      	lsls	r3, r3, #5
 80018ea:	e000      	b.n	80018ee <HAL_ADC_Init+0x11a>
 80018ec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018ee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018f4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da04      	bge.n	8001908 <HAL_ADC_Init+0x134>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	e001      	b.n	800190c <HAL_ADC_Init+0x138>
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800190c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	212c      	movs	r1, #44	@ 0x2c
 8001912:	5c5b      	ldrb	r3, [r3, r1]
 8001914:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001916:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2220      	movs	r2, #32
 8001922:	5c9b      	ldrb	r3, [r3, r2]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d115      	bne.n	8001954 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e9b      	ldrb	r3, [r3, #26]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	0252      	lsls	r2, r2, #9
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e00b      	b.n	8001954 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	2220      	movs	r2, #32
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	2201      	movs	r2, #1
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00a      	beq.n	8001972 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001960:	23e0      	movs	r3, #224	@ 0xe0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800196a:	4313      	orrs	r3, r2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_ADC_Init+0x33c>)
 800197a:	4013      	ands	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	430a      	orrs	r2, r1
 8001986:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0f9b      	lsrs	r3, r3, #30
 800198e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001994:	4313      	orrs	r3, r2
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	223c      	movs	r2, #60	@ 0x3c
 80019a0:	5c9b      	ldrb	r3, [r3, r2]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d111      	bne.n	80019ca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0f9b      	lsrs	r3, r3, #30
 80019ac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019b2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80019b8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80019be:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	2201      	movs	r2, #1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	4a50      	ldr	r2, [pc, #320]	@ (8001b14 <HAL_ADC_Init+0x340>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	430a      	orrs	r2, r1
 80019de:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	23c0      	movs	r3, #192	@ 0xc0
 80019e6:	061b      	lsls	r3, r3, #24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d018      	beq.n	8001a1e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	05db      	lsls	r3, r3, #23
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d012      	beq.n	8001a1e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	061b      	lsls	r3, r3, #24
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d00c      	beq.n	8001a1e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a04:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_ADC_Init+0x344>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a44      	ldr	r2, [pc, #272]	@ (8001b1c <HAL_ADC_Init+0x348>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	23f0      	movs	r3, #240	@ 0xf0
 8001a14:	039b      	lsls	r3, r3, #14
 8001a16:	401a      	ands	r2, r3
 8001a18:	4b3f      	ldr	r3, [pc, #252]	@ (8001b18 <HAL_ADC_Init+0x344>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a26:	001a      	movs	r2, r3
 8001a28:	2100      	movs	r1, #0
 8001a2a:	f7ff fdbe 	bl	80015aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a36:	493a      	ldr	r1, [pc, #232]	@ (8001b20 <HAL_ADC_Init+0x34c>)
 8001a38:	001a      	movs	r2, r3
 8001a3a:	f7ff fdb6 	bl	80015aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2110      	movs	r1, #16
 8001a52:	4249      	negs	r1, r1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a58:	e018      	b.n	8001a8c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	2380      	movs	r3, #128	@ 0x80
 8001a60:	039b      	lsls	r3, r3, #14
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d112      	bne.n	8001a8c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	221c      	movs	r2, #28
 8001a76:	4013      	ands	r3, r2
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4252      	negs	r2, r2
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0011      	movs	r1, r2
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2100      	movs	r1, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff fda6 	bl	80015e4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001a98:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10b      	bne.n	8001aba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aac:	2203      	movs	r2, #3
 8001aae:	4393      	bics	r3, r2
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ab8:	e01c      	b.n	8001af4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	2212      	movs	r2, #18
 8001ac0:	4393      	bics	r3, r2
 8001ac2:	2210      	movs	r2, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ace:	2201      	movs	r2, #1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001ad6:	231f      	movs	r3, #31
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ade:	e009      	b.n	8001af4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	2210      	movs	r2, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001aec:	231f      	movs	r3, #31
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001af4:	231f      	movs	r3, #31
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781b      	ldrb	r3, [r3, #0]
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b008      	add	sp, #32
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	20000018 	.word	0x20000018
 8001b08:	00030d40 	.word	0x00030d40
 8001b0c:	fffffefd 	.word	0xfffffefd
 8001b10:	ffde0201 	.word	0xffde0201
 8001b14:	1ffffc02 	.word	0x1ffffc02
 8001b18:	40012708 	.word	0x40012708
 8001b1c:	ffc3ffff 	.word	0xffc3ffff
 8001b20:	07ffff04 	.word	0x07ffff04

08001b24 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fe3d 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d135      	bne.n	8001ba6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2254      	movs	r2, #84	@ 0x54
 8001b3e:	5c9b      	ldrb	r3, [r3, r2]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_Start+0x24>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e035      	b.n	8001bb4 <HAL_ADC_Start+0x90>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2254      	movs	r2, #84	@ 0x54
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b50:	250f      	movs	r5, #15
 8001b52:	197c      	adds	r4, r7, r5
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 faaa 	bl	80020b0 <ADC_Enable>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b60:	197b      	adds	r3, r7, r5
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d119      	bne.n	8001b9c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_ADC_Start+0x98>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2280      	movs	r2, #128	@ 0x80
 8001b72:	0052      	lsls	r2, r2, #1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	221c      	movs	r2, #28
 8001b86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2254      	movs	r2, #84	@ 0x54
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fdf9 	bl	800178c <LL_ADC_REG_StartConversion>
 8001b9a:	e008      	b.n	8001bae <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2254      	movs	r2, #84	@ 0x54
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]
 8001ba4:	e003      	b.n	8001bae <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2202      	movs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bae:	230f      	movs	r3, #15
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
}
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b004      	add	sp, #16
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	fffff0fe 	.word	0xfffff0fe

08001bc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d102      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e00f      	b.n	8001bf8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d007      	beq.n	8001bf4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be8:	2220      	movs	r2, #32
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e072      	b.n	8001cda <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fc88 	bl	800150c <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c00:	e01f      	b.n	8001c42 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	d01c      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c08:	f7ff fc80 	bl	800150c <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d302      	bcc.n	8001c1e <HAL_ADC_PollForConversion+0x5e>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	d10b      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	2204      	movs	r2, #4
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2254      	movs	r2, #84	@ 0x54
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e04b      	b.n	8001cda <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0d9      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff fcd6 	bl	8001612 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d02e      	beq.n	8001cc8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7e9b      	ldrb	r3, [r3, #26]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d12a      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d123      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff fd93 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d110      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	210c      	movs	r1, #12
 8001c9a:	438a      	bics	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <HAL_ADC_PollForConversion+0x124>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cae:	e00b      	b.n	8001cc8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e1b      	ldrb	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b004      	add	sp, #16
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	fffffefe 	.word	0xfffffefe

08001ce8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2317      	movs	r3, #23
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2254      	movs	r2, #84	@ 0x54
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x24>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e1c0      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x3a6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2254      	movs	r2, #84	@ 0x54
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fd3d 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d000      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x3c>
 8001d3a:	e1a3      	b.n	8002084 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d100      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x46>
 8001d44:	e143      	b.n	8001fce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d56:	4ac1      	ldr	r2, [pc, #772]	@ (800205c <HAL_ADC_ConfigChannel+0x35c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f7ff fc84 	bl	8001674 <LL_ADC_REG_SetSequencerChAdd>
 8001d6c:	e0c9      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	211f      	movs	r1, #31
 8001d78:	400b      	ands	r3, r1
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	4099      	lsls	r1, r3
 8001d7e:	000b      	movs	r3, r1
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	035b      	lsls	r3, r3, #13
 8001d8c:	0b5b      	lsrs	r3, r3, #13
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x9c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	221f      	movs	r2, #31
 8001d98:	4013      	ands	r3, r2
 8001d9a:	e098      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	d000      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0xa8>
 8001da6:	e091      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d000      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0xb4>
 8001db2:	e089      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1c8>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d000      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0xc0>
 8001dbe:	e081      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d000      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0xcc>
 8001dca:	e079      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d000      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0xd8>
 8001dd6:	e071      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1bc>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	4013      	ands	r3, r2
 8001de0:	d000      	beq.n	8001de4 <HAL_ADC_ConfigChannel+0xe4>
 8001de2:	e069      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1b8>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	d000      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0xf0>
 8001dee:	e061      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1b4>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	4013      	ands	r3, r2
 8001df8:	d000      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0xfc>
 8001dfa:	e059      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	d151      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1ac>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d149      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1a8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d141      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1a4>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d139      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1a0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	4013      	ands	r3, r2
 8001e36:	d131      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x19c>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	4013      	ands	r3, r2
 8001e42:	d129      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x198>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d121      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x194>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x190>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	4013      	ands	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x18c>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x188>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	02db      	lsls	r3, r3, #11
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x184>
 8001e80:	2312      	movs	r3, #18
 8001e82:	e024      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e022      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e88:	2311      	movs	r3, #17
 8001e8a:	e020      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	e01e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e90:	230f      	movs	r3, #15
 8001e92:	e01c      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e94:	230e      	movs	r3, #14
 8001e96:	e01a      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	230d      	movs	r3, #13
 8001e9a:	e018      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	e016      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	230b      	movs	r3, #11
 8001ea2:	e014      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	e012      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	e010      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eac:	2308      	movs	r3, #8
 8001eae:	e00e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	e00c      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	e00a      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb8:	2305      	movs	r3, #5
 8001eba:	e008      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e006      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6852      	ldr	r2, [r2, #4]
 8001ed2:	201f      	movs	r0, #31
 8001ed4:	4002      	ands	r2, r0
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	000a      	movs	r2, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d808      	bhi.n	8001f02 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	f7ff fb99 	bl	8001634 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	f7ff fbd4 	bl	80016bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db00      	blt.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
 8001f1c:	e0bc      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1e:	4b50      	ldr	r3, [pc, #320]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fb35 	bl	8001590 <LL_ADC_GetCommonPathInternalCh>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002064 <HAL_ADC_ConfigChannel+0x364>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d122      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f3c:	d11d      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	0412      	lsls	r2, r2, #16
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4a46      	ldr	r2, [pc, #280]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f7ff fb0c 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f50:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <HAL_ADC_ConfigChannel+0x368>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4945      	ldr	r1, [pc, #276]	@ (800206c <HAL_ADC_ConfigChannel+0x36c>)
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe f8e6 	bl	8000128 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	0013      	movs	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f78:	e08e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002070 <HAL_ADC_ConfigChannel+0x370>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10e      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	0452      	lsls	r2, r2, #17
 8001f94:	4313      	orrs	r3, r2
 8001f96:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f98:	0019      	movs	r1, r3
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	f7ff fae4 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
 8001fa0:	e07a      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <HAL_ADC_ConfigChannel+0x374>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d000      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x2ae>
 8001fac:	e074      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	03db      	lsls	r3, r3, #15
 8001fb4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fb6:	d000      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x2ba>
 8001fb8:	e06e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	03d2      	lsls	r2, r2, #15
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	4a27      	ldr	r2, [pc, #156]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	0010      	movs	r0, r2
 8001fc8:	f7ff face 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
 8001fcc:	e064      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_ADC_ConfigChannel+0x35c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0019      	movs	r1, r3
 8001fee:	0010      	movs	r0, r2
 8001ff0:	f7ff fb51 	bl	8001696 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da4d      	bge.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff fac6 	bl	8001590 <LL_ADC_GetCommonPathInternalCh>
 8002004:	0003      	movs	r3, r0
 8002006:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <HAL_ADC_ConfigChannel+0x364>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_ADC_ConfigChannel+0x378>)
 8002016:	4013      	ands	r3, r2
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 800201a:	0019      	movs	r1, r3
 800201c:	0010      	movs	r0, r2
 800201e:	f7ff faa3 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
 8002022:	e039      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_ADC_ConfigChannel+0x370>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <HAL_ADC_ConfigChannel+0x37c>)
 8002032:	4013      	ands	r3, r2
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f7ff fa95 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
 800203e:	e02b      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_ADC_ConfigChannel+0x374>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d126      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <HAL_ADC_ConfigChannel+0x380>)
 800204e:	4013      	ands	r3, r2
 8002050:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f7ff fa87 	bl	8001568 <LL_ADC_SetCommonPathInternalCh>
 800205a:	e01d      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
 800205c:	80000004 	.word	0x80000004
 8002060:	40012708 	.word	0x40012708
 8002064:	b0001000 	.word	0xb0001000
 8002068:	20000018 	.word	0x20000018
 800206c:	00030d40 	.word	0x00030d40
 8002070:	b8004000 	.word	0xb8004000
 8002074:	b4002000 	.word	0xb4002000
 8002078:	ff7fffff 	.word	0xff7fffff
 800207c:	feffffff 	.word	0xfeffffff
 8002080:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	2220      	movs	r2, #32
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002090:	2317      	movs	r3, #23
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2254      	movs	r2, #84	@ 0x54
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020a0:	2317      	movs	r3, #23
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)

080020b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff fb51 	bl	8001768 <LL_ADC_IsEnabled>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d000      	beq.n	80020cc <ADC_Enable+0x1c>
 80020ca:	e069      	b.n	80021a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <ADC_Enable+0xfc>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	d00d      	beq.n	80020f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	2210      	movs	r2, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2201      	movs	r2, #1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e056      	b.n	80021a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff fb23 	bl	8001744 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80020fe:	4b2c      	ldr	r3, [pc, #176]	@ (80021b0 <ADC_Enable+0x100>)
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff fa45 	bl	8001590 <LL_ADC_GetCommonPathInternalCh>
 8002106:	0002      	movs	r2, r0
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	4013      	ands	r3, r2
 800210e:	d00f      	beq.n	8002130 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <ADC_Enable+0x104>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4928      	ldr	r1, [pc, #160]	@ (80021b8 <ADC_Enable+0x108>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe f806 	bl	8000128 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002120:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002122:	e002      	b.n	800212a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3b01      	subs	r3, #1
 8002128:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e5b      	ldrb	r3, [r3, #25]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d033      	beq.n	80021a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002138:	f7ff f9e8 	bl	800150c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002140:	e027      	b.n	8002192 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff fb0e 	bl	8001768 <LL_ADC_IsEnabled>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d104      	bne.n	800215a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0018      	movs	r0, r3
 8002156:	f7ff faf5 	bl	8001744 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800215a:	f7ff f9d7 	bl	800150c <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d914      	bls.n	8002192 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	2b01      	cmp	r3, #1
 8002174:	d00d      	beq.n	8002192 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	2210      	movs	r2, #16
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	2201      	movs	r2, #1
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	2b01      	cmp	r3, #1
 800219e:	d1d0      	bne.n	8002142 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b004      	add	sp, #16
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	80000017 	.word	0x80000017
 80021b0:	40012708 	.word	0x40012708
 80021b4:	20000018 	.word	0x20000018
 80021b8:	00030d40 	.word	0x00030d40

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	0002      	movs	r2, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80021d0:	d828      	bhi.n	8002224 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002290 <__NVIC_SetPriority+0xd4>)
 80021d4:	1dfb      	adds	r3, r7, #7
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	33c0      	adds	r3, #192	@ 0xc0
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	589b      	ldr	r3, [r3, r2]
 80021e2:	1dfa      	adds	r2, r7, #7
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	0011      	movs	r1, r2
 80021e8:	2203      	movs	r2, #3
 80021ea:	400a      	ands	r2, r1
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	21ff      	movs	r1, #255	@ 0xff
 80021f0:	4091      	lsls	r1, r2
 80021f2:	000a      	movs	r2, r1
 80021f4:	43d2      	mvns	r2, r2
 80021f6:	401a      	ands	r2, r3
 80021f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	22ff      	movs	r2, #255	@ 0xff
 8002200:	401a      	ands	r2, r3
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	2303      	movs	r3, #3
 800220a:	4003      	ands	r3, r0
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002210:	481f      	ldr	r0, [pc, #124]	@ (8002290 <__NVIC_SetPriority+0xd4>)
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	b25b      	sxtb	r3, r3
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	430a      	orrs	r2, r1
 800221c:	33c0      	adds	r3, #192	@ 0xc0
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002222:	e031      	b.n	8002288 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002224:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <__NVIC_SetPriority+0xd8>)
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	0019      	movs	r1, r3
 800222c:	230f      	movs	r3, #15
 800222e:	400b      	ands	r3, r1
 8002230:	3b08      	subs	r3, #8
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3306      	adds	r3, #6
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	18d3      	adds	r3, r2, r3
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1dfa      	adds	r2, r7, #7
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	0011      	movs	r1, r2
 8002244:	2203      	movs	r2, #3
 8002246:	400a      	ands	r2, r1
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	21ff      	movs	r1, #255	@ 0xff
 800224c:	4091      	lsls	r1, r2
 800224e:	000a      	movs	r2, r1
 8002250:	43d2      	mvns	r2, r2
 8002252:	401a      	ands	r2, r3
 8002254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	019b      	lsls	r3, r3, #6
 800225a:	22ff      	movs	r2, #255	@ 0xff
 800225c:	401a      	ands	r2, r3
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	2303      	movs	r3, #3
 8002266:	4003      	ands	r3, r0
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226c:	4809      	ldr	r0, [pc, #36]	@ (8002294 <__NVIC_SetPriority+0xd8>)
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	001c      	movs	r4, r3
 8002274:	230f      	movs	r3, #15
 8002276:	4023      	ands	r3, r4
 8002278:	3b08      	subs	r3, #8
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	430a      	orrs	r2, r1
 800227e:	3306      	adds	r3, #6
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	18c3      	adds	r3, r0, r3
 8002284:	3304      	adds	r3, #4
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b003      	add	sp, #12
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	e000e100 	.word	0xe000e100
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	045b      	lsls	r3, r3, #17
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d301      	bcc.n	80022b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ac:	2301      	movs	r3, #1
 80022ae:	e010      	b.n	80022d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b0:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <SysTick_Config+0x44>)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	3a01      	subs	r2, #1
 80022b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022b8:	2301      	movs	r3, #1
 80022ba:	425b      	negs	r3, r3
 80022bc:	2103      	movs	r1, #3
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff ff7c 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <SysTick_Config+0x44>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <SysTick_Config+0x44>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b002      	add	sp, #8
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	210f      	movs	r1, #15
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	1c02      	adds	r2, r0, #0
 80022f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff5d 	bl	80021bc <__NVIC_SetPriority>
}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff ffbf 	bl	8002298 <SysTick_Config>
 800231a:	0003      	movs	r3, r0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e147      	b.n	80025c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <HAL_GPIO_Init+0x28>
 800234a:	e138      	b.n	80025be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2203      	movs	r2, #3
 8002352:	4013      	ands	r3, r2
 8002354:	2b01      	cmp	r3, #1
 8002356:	d005      	beq.n	8002364 <HAL_GPIO_Init+0x40>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	4013      	ands	r3, r2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d130      	bne.n	80023c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	409a      	lsls	r2, r3
 8002372:	0013      	movs	r3, r2
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800239a:	2201      	movs	r2, #1
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	2201      	movs	r2, #1
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2203      	movs	r2, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d017      	beq.n	8002402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	409a      	lsls	r2, r3
 80023e0:	0013      	movs	r3, r2
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	4013      	ands	r3, r2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d123      	bne.n	8002456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	58d3      	ldr	r3, [r2, r3]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2207      	movs	r2, #7
 8002420:	4013      	ands	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	409a      	lsls	r2, r3
 8002428:	0013      	movs	r3, r2
 800242a:	43da      	mvns	r2, r3
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2107      	movs	r1, #7
 800243a:	400b      	ands	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	08da      	lsrs	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3208      	adds	r2, #8
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	43da      	mvns	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2203      	movs	r2, #3
 8002474:	401a      	ands	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	23c0      	movs	r3, #192	@ 0xc0
 8002490:	029b      	lsls	r3, r3, #10
 8002492:	4013      	ands	r3, r2
 8002494:	d100      	bne.n	8002498 <HAL_GPIO_Init+0x174>
 8002496:	e092      	b.n	80025be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002498:	4a50      	ldr	r2, [pc, #320]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3318      	adds	r3, #24
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	589b      	ldr	r3, [r3, r2]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2203      	movs	r2, #3
 80024aa:	4013      	ands	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	220f      	movs	r2, #15
 80024b0:	409a      	lsls	r2, r3
 80024b2:	0013      	movs	r3, r2
 80024b4:	43da      	mvns	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	23a0      	movs	r3, #160	@ 0xa0
 80024c0:	05db      	lsls	r3, r3, #23
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x1ca>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	@ (80025e0 <HAL_GPIO_Init+0x2bc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x1c6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a44      	ldr	r2, [pc, #272]	@ (80025e4 <HAL_GPIO_Init+0x2c0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x1c2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a43      	ldr	r2, [pc, #268]	@ (80025e8 <HAL_GPIO_Init+0x2c4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x1be>
 80024de:	2303      	movs	r3, #3
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x1cc>
 80024ee:	2300      	movs	r3, #0
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	2103      	movs	r1, #3
 80024f4:	400a      	ands	r2, r1
 80024f6:	00d2      	lsls	r2, r2, #3
 80024f8:	4093      	lsls	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002500:	4936      	ldr	r1, [pc, #216]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3318      	adds	r3, #24
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800250e:	4b33      	ldr	r3, [pc, #204]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	035b      	lsls	r3, r3, #13
 8002526:	4013      	ands	r3, r2
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002532:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002538:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43da      	mvns	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	039b      	lsls	r3, r3, #14
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800255c:	4b1f      	ldr	r3, [pc, #124]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002562:	4a1e      	ldr	r2, [pc, #120]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 8002564:	2384      	movs	r3, #132	@ 0x84
 8002566:	58d3      	ldr	r3, [r2, r3]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	029b      	lsls	r3, r3, #10
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002588:	4914      	ldr	r1, [pc, #80]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 800258a:	2284      	movs	r2, #132	@ 0x84
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002590:	4a12      	ldr	r2, [pc, #72]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	58d3      	ldr	r3, [r2, r3]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	025b      	lsls	r3, r3, #9
 80025aa:	4013      	ands	r3, r2
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b6:	4909      	ldr	r1, [pc, #36]	@ (80025dc <HAL_GPIO_Init+0x2b8>)
 80025b8:	2280      	movs	r2, #128	@ 0x80
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	40da      	lsrs	r2, r3
 80025cc:	1e13      	subs	r3, r2, #0
 80025ce:	d000      	beq.n	80025d2 <HAL_GPIO_Init+0x2ae>
 80025d0:	e6b0      	b.n	8002334 <HAL_GPIO_Init+0x10>
  }
}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	46c0      	nop			@ (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b006      	add	sp, #24
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021800 	.word	0x40021800
 80025e0:	50000400 	.word	0x50000400
 80025e4:	50000800 	.word	0x50000800
 80025e8:	50000c00 	.word	0x50000c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	0008      	movs	r0, r1
 80025f6:	0011      	movs	r1, r2
 80025f8:	1cbb      	adds	r3, r7, #2
 80025fa:	1c02      	adds	r2, r0, #0
 80025fc:	801a      	strh	r2, [r3, #0]
 80025fe:	1c7b      	adds	r3, r7, #1
 8002600:	1c0a      	adds	r2, r1, #0
 8002602:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002604:	1c7b      	adds	r3, r7, #1
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260c:	1cbb      	adds	r3, r7, #2
 800260e:	881a      	ldrh	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002616:	1cbb      	adds	r3, r7, #2
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	000a      	movs	r2, r1
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800263a:	1cbb      	adds	r3, r7, #2
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4013      	ands	r3, r2
 8002642:	041a      	lsls	r2, r3, #16
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	1cb9      	adds	r1, r7, #2
 800264a:	8809      	ldrh	r1, [r1, #0]
 800264c:	400b      	ands	r3, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b004      	add	sp, #16
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002664:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	@ (80026d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800266a:	4013      	ands	r3, r2
 800266c:	0019      	movs	r1, r3
 800266e:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d11f      	bne.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	0013      	movs	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	189b      	adds	r3, r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4912      	ldr	r1, [pc, #72]	@ (80026d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800268e:	0018      	movs	r0, r3
 8002690:	f7fd fd4a 	bl	8000128 <__udivsi3>
 8002694:	0003      	movs	r3, r0
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800269a:	e008      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e001      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e009      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	401a      	ands	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	429a      	cmp	r2, r3
 80026be:	d0ed      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b004      	add	sp, #16
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	40007000 	.word	0x40007000
 80026d0:	fffff9ff 	.word	0xfffff9ff
 80026d4:	20000018 	.word	0x20000018
 80026d8:	000f4240 	.word	0x000f4240

080026dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026e0:	4b03      	ldr	r3, [pc, #12]	@ (80026f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	23e0      	movs	r3, #224	@ 0xe0
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4013      	ands	r3, r2
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e2fe      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_OscConfig+0x1e>
 8002710:	e07c      	b.n	800280c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002712:	4bc3      	ldr	r3, [pc, #780]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2238      	movs	r2, #56	@ 0x38
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271c:	4bc0      	ldr	r3, [pc, #768]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2203      	movs	r2, #3
 8002722:	4013      	ands	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b10      	cmp	r3, #16
 800272a:	d102      	bne.n	8002732 <HAL_RCC_OscConfig+0x3e>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d002      	beq.n	8002738 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4bb9      	ldr	r3, [pc, #740]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	@ 0x80
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	4013      	ands	r3, r2
 8002742:	d062      	beq.n	800280a <HAL_RCC_OscConfig+0x116>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d15e      	bne.n	800280a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e2d9      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	429a      	cmp	r2, r3
 800275a:	d107      	bne.n	800276c <HAL_RCC_OscConfig+0x78>
 800275c:	4bb0      	ldr	r3, [pc, #704]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4baf      	ldr	r3, [pc, #700]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	0249      	lsls	r1, r1, #9
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e020      	b.n	80027ae <HAL_RCC_OscConfig+0xba>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	23a0      	movs	r3, #160	@ 0xa0
 8002772:	02db      	lsls	r3, r3, #11
 8002774:	429a      	cmp	r2, r3
 8002776:	d10e      	bne.n	8002796 <HAL_RCC_OscConfig+0xa2>
 8002778:	4ba9      	ldr	r3, [pc, #676]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4ba8      	ldr	r3, [pc, #672]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800277e:	2180      	movs	r1, #128	@ 0x80
 8002780:	02c9      	lsls	r1, r1, #11
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	4ba6      	ldr	r3, [pc, #664]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba5      	ldr	r3, [pc, #660]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	0249      	lsls	r1, r1, #9
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0xba>
 8002796:	4ba2      	ldr	r3, [pc, #648]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4ba1      	ldr	r3, [pc, #644]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800279c:	49a1      	ldr	r1, [pc, #644]	@ (8002a24 <HAL_RCC_OscConfig+0x330>)
 800279e:	400a      	ands	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b9f      	ldr	r3, [pc, #636]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027a8:	499f      	ldr	r1, [pc, #636]	@ (8002a28 <HAL_RCC_OscConfig+0x334>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d014      	beq.n	80027e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fea9 	bl	800150c <HAL_GetTick>
 80027ba:	0003      	movs	r3, r0
 80027bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe fea4 	bl	800150c <HAL_GetTick>
 80027c4:	0002      	movs	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	@ 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e298      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	4b93      	ldr	r3, [pc, #588]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	4013      	ands	r3, r2
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0xcc>
 80027de:	e015      	b.n	800280c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe94 	bl	800150c <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ea:	f7fe fe8f 	bl	800150c <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	@ 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e283      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fc:	4b88      	ldr	r3, [pc, #544]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	4013      	ands	r3, r2
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0xf6>
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2202      	movs	r2, #2
 8002812:	4013      	ands	r3, r2
 8002814:	d100      	bne.n	8002818 <HAL_RCC_OscConfig+0x124>
 8002816:	e099      	b.n	800294c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002818:	4b81      	ldr	r3, [pc, #516]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2238      	movs	r2, #56	@ 0x38
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002822:	4b7f      	ldr	r3, [pc, #508]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2203      	movs	r2, #3
 8002828:	4013      	ands	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0x144>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d002      	beq.n	800283e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d135      	bne.n	80028aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283e:	4b78      	ldr	r3, [pc, #480]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4013      	ands	r3, r2
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x162>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e256      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b72      	ldr	r3, [pc, #456]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a74      	ldr	r2, [pc, #464]	@ (8002a2c <HAL_RCC_OscConfig+0x338>)
 800285c:	4013      	ands	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	021a      	lsls	r2, r3, #8
 8002866:	4b6e      	ldr	r3, [pc, #440]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d112      	bne.n	8002898 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002872:	4b6b      	ldr	r3, [pc, #428]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a6e      	ldr	r2, [pc, #440]	@ (8002a30 <HAL_RCC_OscConfig+0x33c>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	4b67      	ldr	r3, [pc, #412]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002886:	4b66      	ldr	r3, [pc, #408]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0adb      	lsrs	r3, r3, #11
 800288c:	2207      	movs	r2, #7
 800288e:	4013      	ands	r3, r2
 8002890:	4a68      	ldr	r2, [pc, #416]	@ (8002a34 <HAL_RCC_OscConfig+0x340>)
 8002892:	40da      	lsrs	r2, r3
 8002894:	4b68      	ldr	r3, [pc, #416]	@ (8002a38 <HAL_RCC_OscConfig+0x344>)
 8002896:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002898:	4b68      	ldr	r3, [pc, #416]	@ (8002a3c <HAL_RCC_OscConfig+0x348>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0018      	movs	r0, r3
 800289e:	f7fe fdd9 	bl	8001454 <HAL_InitTick>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d051      	beq.n	800294a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e22c      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d030      	beq.n	8002914 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002a30 <HAL_RCC_OscConfig+0x33c>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	0019      	movs	r1, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	4b57      	ldr	r3, [pc, #348]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028c6:	4b56      	ldr	r3, [pc, #344]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b55      	ldr	r3, [pc, #340]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	0049      	lsls	r1, r1, #1
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fe1a 	bl	800150c <HAL_GetTick>
 80028d8:	0003      	movs	r3, r0
 80028da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028de:	f7fe fe15 	bl	800150c <HAL_GetTick>
 80028e2:	0002      	movs	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e209      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4013      	ands	r3, r2
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	4b48      	ldr	r3, [pc, #288]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <HAL_RCC_OscConfig+0x338>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	4b44      	ldr	r3, [pc, #272]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002914:	4b42      	ldr	r3, [pc, #264]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800291a:	4949      	ldr	r1, [pc, #292]	@ (8002a40 <HAL_RCC_OscConfig+0x34c>)
 800291c:	400a      	ands	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fdf4 	bl	800150c <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292a:	f7fe fdef 	bl	800150c <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e1e3      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800293c:	4b38      	ldr	r3, [pc, #224]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4013      	ands	r3, r2
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x236>
 8002948:	e000      	b.n	800294c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2208      	movs	r2, #8
 8002952:	4013      	ands	r3, r2
 8002954:	d047      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002956:	4b32      	ldr	r3, [pc, #200]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2238      	movs	r2, #56	@ 0x38
 800295c:	4013      	ands	r3, r2
 800295e:	2b18      	cmp	r3, #24
 8002960:	d10a      	bne.n	8002978 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002962:	4b2f      	ldr	r3, [pc, #188]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d03c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d138      	bne.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e1c5      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d019      	beq.n	80029b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002980:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002982:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002984:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002986:	2101      	movs	r1, #1
 8002988:	430a      	orrs	r2, r1
 800298a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fdbe 	bl	800150c <HAL_GetTick>
 8002990:	0003      	movs	r3, r0
 8002992:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe fdb9 	bl	800150c <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1ad      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d0f1      	beq.n	8002996 <HAL_RCC_OscConfig+0x2a2>
 80029b2:	e018      	b.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	438a      	bics	r2, r1
 80029be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fda4 	bl	800150c <HAL_GetTick>
 80029c4:	0003      	movs	r3, r0
 80029c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ca:	f7fe fd9f 	bl	800150c <HAL_GetTick>
 80029ce:	0002      	movs	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e193      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029dc:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e0:	2202      	movs	r2, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d1f1      	bne.n	80029ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2204      	movs	r2, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x2fe>
 80029f0:	e0c6      	b.n	8002b80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	231f      	movs	r3, #31
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2238      	movs	r2, #56	@ 0x38
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d11e      	bne.n	8002a44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_RCC_OscConfig+0x32c>)
 8002a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <HAL_RCC_OscConfig+0x31e>
 8002a10:	e0b6      	b.n	8002b80 <HAL_RCC_OscConfig+0x48c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d000      	beq.n	8002a1c <HAL_RCC_OscConfig+0x328>
 8002a1a:	e0b1      	b.n	8002b80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e171      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	fffeffff 	.word	0xfffeffff
 8002a28:	fffbffff 	.word	0xfffbffff
 8002a2c:	ffff80ff 	.word	0xffff80ff
 8002a30:	ffffc7ff 	.word	0xffffc7ff
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	20000018 	.word	0x20000018
 8002a3c:	2000001c 	.word	0x2000001c
 8002a40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a44:	4bb1      	ldr	r3, [pc, #708]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	055b      	lsls	r3, r3, #21
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x360>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x362>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4bac      	ldr	r3, [pc, #688]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a5e:	4bab      	ldr	r3, [pc, #684]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002a60:	2180      	movs	r1, #128	@ 0x80
 8002a62:	0549      	lsls	r1, r1, #21
 8002a64:	430a      	orrs	r2, r1
 8002a66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a68:	4ba8      	ldr	r3, [pc, #672]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a6c:	2380      	movs	r3, #128	@ 0x80
 8002a6e:	055b      	lsls	r3, r3, #21
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a76:	231f      	movs	r3, #31
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002d10 <HAL_RCC_OscConfig+0x61c>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	d11a      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002d10 <HAL_RCC_OscConfig+0x61c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4ba0      	ldr	r3, [pc, #640]	@ (8002d10 <HAL_RCC_OscConfig+0x61c>)
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	0049      	lsls	r1, r1, #1
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fd38 	bl	800150c <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe fd33 	bl	800150c <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e127      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab4:	4b96      	ldr	r3, [pc, #600]	@ (8002d10 <HAL_RCC_OscConfig+0x61c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3e2>
 8002ac8:	4b90      	ldr	r3, [pc, #576]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002aca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002acc:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x41c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x404>
 8002ade:	4b8b      	ldr	r3, [pc, #556]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002ae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aea:	4b88      	ldr	r3, [pc, #544]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aee:	4b87      	ldr	r3, [pc, #540]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x41c>
 8002af8:	4b84      	ldr	r3, [pc, #528]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002afa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002afc:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b04:	4b81      	ldr	r3, [pc, #516]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b08:	4b80      	ldr	r3, [pc, #512]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d014      	beq.n	8002b42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fcf8 	bl	800150c <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fcf3 	bl	800150c <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	4a79      	ldr	r2, [pc, #484]	@ (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0e6      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b36:	4b75      	ldr	r3, [pc, #468]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x42e>
 8002b40:	e013      	b.n	8002b6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fce3 	bl	800150c <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4a:	e009      	b.n	8002b60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fcde 	bl	800150c <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x620>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0d1      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b60:	4b6a      	ldr	r3, [pc, #424]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b6a:	231f      	movs	r3, #31
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b78:	4b64      	ldr	r3, [pc, #400]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b7a:	4967      	ldr	r1, [pc, #412]	@ (8002d18 <HAL_RCC_OscConfig+0x624>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x496>
 8002b88:	e0bb      	b.n	8002d02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b8a:	4b60      	ldr	r3, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2238      	movs	r2, #56	@ 0x38
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4a4>
 8002b96:	e07b      	b.n	8002c90 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d156      	bne.n	8002c4e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002ba6:	495d      	ldr	r1, [pc, #372]	@ (8002d1c <HAL_RCC_OscConfig+0x628>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fcae 	bl	800150c <HAL_GetTick>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe fca9 	bl	800150c <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e09d      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	049b      	lsls	r3, r3, #18
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a51      	ldr	r2, [pc, #324]	@ (8002d20 <HAL_RCC_OscConfig+0x62c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	431a      	orrs	r2, r3
 8002c02:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b40      	ldr	r3, [pc, #256]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c0e:	2180      	movs	r1, #128	@ 0x80
 8002c10:	0449      	lsls	r1, r1, #17
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	0549      	lsls	r1, r1, #21
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fc72 	bl	800150c <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fc6d 	bl	800150c <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e061      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c40:	4b32      	ldr	r3, [pc, #200]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	049b      	lsls	r3, r3, #18
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x53a>
 8002c4c:	e059      	b.n	8002d02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4b2e      	ldr	r3, [pc, #184]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c54:	4931      	ldr	r1, [pc, #196]	@ (8002d1c <HAL_RCC_OscConfig+0x628>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc57 	bl	800150c <HAL_GetTick>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fc52 	bl	800150c <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e046      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c76:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	049b      	lsls	r3, r3, #18
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c88:	4926      	ldr	r1, [pc, #152]	@ (8002d24 <HAL_RCC_OscConfig+0x630>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	e038      	b.n	8002d02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e033      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_RCC_OscConfig+0x618>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d126      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2270      	movs	r2, #112	@ 0x70
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	23fe      	movs	r3, #254	@ 0xfe
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d116      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	23f8      	movs	r3, #248	@ 0xf8
 8002cd4:	039b      	lsls	r3, r3, #14
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d10e      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	23e0      	movs	r3, #224	@ 0xe0
 8002ce4:	051b      	lsls	r3, r3, #20
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	0f5b      	lsrs	r3, r3, #29
 8002cf4:	075a      	lsls	r2, r3, #29
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b008      	add	sp, #32
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	00001388 	.word	0x00001388
 8002d18:	efffffff 	.word	0xefffffff
 8002d1c:	feffffff 	.word	0xfeffffff
 8002d20:	11c1808c 	.word	0x11c1808c
 8002d24:	eefefffc 	.word	0xeefefffc

08002d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0e9      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2207      	movs	r2, #7
 8002d42:	4013      	ands	r3, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d91e      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b73      	ldr	r3, [pc, #460]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4393      	bics	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fbd6 	bl	800150c <HAL_GetTick>
 8002d60:	0003      	movs	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d66:	f7fe fbd1 	bl	800150c <HAL_GetTick>
 8002d6a:	0002      	movs	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4a6a      	ldr	r2, [pc, #424]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e0ca      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d7a:	4b67      	ldr	r3, [pc, #412]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2207      	movs	r2, #7
 8002d80:	4013      	ands	r3, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d015      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2204      	movs	r2, #4
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d006      	beq.n	8002daa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d9c:	4b60      	ldr	r3, [pc, #384]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002da2:	21e0      	movs	r1, #224	@ 0xe0
 8002da4:	01c9      	lsls	r1, r1, #7
 8002da6:	430a      	orrs	r2, r1
 8002da8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002daa:	4b5d      	ldr	r3, [pc, #372]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4a5d      	ldr	r2, [pc, #372]	@ (8002f24 <HAL_RCC_ClockConfig+0x1fc>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d057      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d12b      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e097      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	049b      	lsls	r3, r3, #18
 8002df0:	4013      	ands	r3, r2
 8002df2:	d11f      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e08b      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e00:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d113      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e07f      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e18:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e074      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06d      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e34:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2207      	movs	r2, #7
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4b37      	ldr	r3, [pc, #220]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e48:	f7fe fb60 	bl	800150c <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e50:	e009      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe fb5b 	bl	800150c <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e054      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2238      	movs	r2, #56	@ 0x38
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ec      	bne.n	8002e52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	4013      	ands	r3, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d21e      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fb38 	bl	800150c <HAL_GetTick>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ea0:	e009      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea2:	f7fe fb33 	bl	800150c <HAL_GetTick>
 8002ea6:	0002      	movs	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	4a1b      	ldr	r2, [pc, #108]	@ (8002f1c <HAL_RCC_ClockConfig+0x1f4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e02c      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb6:	4b18      	ldr	r3, [pc, #96]	@ (8002f18 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2207      	movs	r2, #7
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	@ (8002f28 <HAL_RCC_ClockConfig+0x200>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ee2:	f000 f829 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ee6:	0001      	movs	r1, r0
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f8>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	220f      	movs	r2, #15
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCC_ClockConfig+0x204>)
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	58d3      	ldr	r3, [r2, r3]
 8002ef8:	221f      	movs	r2, #31
 8002efa:	4013      	ands	r3, r2
 8002efc:	000a      	movs	r2, r1
 8002efe:	40da      	lsrs	r2, r3
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_RCC_ClockConfig+0x208>)
 8002f02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_RCC_ClockConfig+0x20c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7fe faa3 	bl	8001454 <HAL_InitTick>
 8002f0e:	0003      	movs	r3, r0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	00001388 	.word	0x00001388
 8002f20:	40021000 	.word	0x40021000
 8002f24:	fffff0ff 	.word	0xfffff0ff
 8002f28:	ffff8fff 	.word	0xffff8fff
 8002f2c:	08005904 	.word	0x08005904
 8002f30:	20000018 	.word	0x20000018
 8002f34:	2000001c 	.word	0x2000001c

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2238      	movs	r2, #56	@ 0x38
 8002f44:	4013      	ands	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f48:	4b39      	ldr	r3, [pc, #228]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0adb      	lsrs	r3, r3, #11
 8002f4e:	2207      	movs	r2, #7
 8002f50:	4013      	ands	r3, r2
 8002f52:	2201      	movs	r2, #1
 8002f54:	409a      	lsls	r2, r3
 8002f56:	0013      	movs	r3, r2
 8002f58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f5a:	6839      	ldr	r1, [r7, #0]
 8002f5c:	4835      	ldr	r0, [pc, #212]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f5e:	f7fd f8e3 	bl	8000128 <__udivsi3>
 8002f62:	0003      	movs	r3, r0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e05d      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2238      	movs	r2, #56	@ 0x38
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f74:	4b30      	ldr	r3, [pc, #192]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e054      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2238      	movs	r2, #56	@ 0x38
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d138      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f90:	4b27      	ldr	r3, [pc, #156]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	2207      	movs	r2, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4824      	ldr	r0, [pc, #144]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fa8:	f7fd f8be 	bl	8000128 <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	0019      	movs	r1, r3
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	227f      	movs	r2, #127	@ 0x7f
 8002fb8:	4013      	ands	r3, r2
 8002fba:	434b      	muls	r3, r1
 8002fbc:	617b      	str	r3, [r7, #20]
        break;
 8002fbe:	e00d      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	481c      	ldr	r0, [pc, #112]	@ (8003034 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fc4:	f7fd f8b0 	bl	8000128 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	0019      	movs	r1, r3
 8002fcc:	4b18      	ldr	r3, [pc, #96]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	0a1b      	lsrs	r3, r3, #8
 8002fd2:	227f      	movs	r2, #127	@ 0x7f
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	434b      	muls	r3, r1
 8002fd8:	617b      	str	r3, [r7, #20]
        break;
 8002fda:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fdc:	4b14      	ldr	r3, [pc, #80]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0f5b      	lsrs	r3, r3, #29
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6978      	ldr	r0, [r7, #20]
 8002fee:	f7fd f89b 	bl	8000128 <__udivsi3>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	e015      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2238      	movs	r2, #56	@ 0x38
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b20      	cmp	r3, #32
 8003002:	d103      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	021b      	lsls	r3, r3, #8
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	e00b      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_RCC_GetSysClockFreq+0xf8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2238      	movs	r2, #56	@ 0x38
 8003012:	4013      	ands	r3, r2
 8003014:	2b18      	cmp	r3, #24
 8003016:	d103      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003018:	23fa      	movs	r3, #250	@ 0xfa
 800301a:	01db      	lsls	r3, r3, #7
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e001      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003024:	693b      	ldr	r3, [r7, #16]
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b006      	add	sp, #24
 800302c:	bd80      	pop	{r7, pc}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	40021000 	.word	0x40021000
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b02      	ldr	r3, [pc, #8]	@ (800304c <HAL_RCC_GetHCLKFreq+0x10>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	20000018 	.word	0x20000018

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003054:	f7ff fff2 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003058:	0004      	movs	r4, r0
 800305a:	f7ff fb3f 	bl	80026dc <LL_RCC_GetAPB1Prescaler>
 800305e:	0003      	movs	r3, r0
 8003060:	0b1a      	lsrs	r2, r3, #12
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	58d3      	ldr	r3, [r2, r3]
 8003068:	221f      	movs	r2, #31
 800306a:	4013      	ands	r3, r2
 800306c:	40dc      	lsrs	r4, r3
 800306e:	0023      	movs	r3, r4
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	bdb0      	pop	{r4, r5, r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	08005944 	.word	0x08005944

0800307c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003084:	2313      	movs	r3, #19
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800308c:	2312      	movs	r3, #18
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	029b      	lsls	r3, r3, #10
 800309c:	4013      	ands	r3, r2
 800309e:	d100      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030a0:	e0a3      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a2:	2011      	movs	r0, #17
 80030a4:	183b      	adds	r3, r7, r0
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4bc3      	ldr	r3, [pc, #780]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	055b      	lsls	r3, r3, #21
 80030b2:	4013      	ands	r3, r2
 80030b4:	d110      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	4bc0      	ldr	r3, [pc, #768]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ba:	4bbf      	ldr	r3, [pc, #764]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030bc:	2180      	movs	r1, #128	@ 0x80
 80030be:	0549      	lsls	r1, r1, #21
 80030c0:	430a      	orrs	r2, r1
 80030c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030c4:	4bbc      	ldr	r3, [pc, #752]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	055b      	lsls	r3, r3, #21
 80030cc:	4013      	ands	r3, r2
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d8:	4bb8      	ldr	r3, [pc, #736]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4bb7      	ldr	r3, [pc, #732]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	0049      	lsls	r1, r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030e6:	f7fe fa11 	bl	800150c <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ee:	e00b      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe fa0c 	bl	800150c <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d904      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030fe:	2313      	movs	r3, #19
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2203      	movs	r2, #3
 8003104:	701a      	strb	r2, [r3, #0]
        break;
 8003106:	e005      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003108:	4bac      	ldr	r3, [pc, #688]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4013      	ands	r3, r2
 8003112:	d0ed      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003114:	2313      	movs	r3, #19
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d154      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800311e:	4ba6      	ldr	r3, [pc, #664]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003122:	23c0      	movs	r3, #192	@ 0xc0
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4013      	ands	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d019      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	429a      	cmp	r2, r3
 8003138:	d014      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800313a:	4b9f      	ldr	r3, [pc, #636]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	4aa0      	ldr	r2, [pc, #640]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003140:	4013      	ands	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003144:	4b9c      	ldr	r3, [pc, #624]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003146:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003148:	4b9b      	ldr	r3, [pc, #620]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800314a:	2180      	movs	r1, #128	@ 0x80
 800314c:	0249      	lsls	r1, r1, #9
 800314e:	430a      	orrs	r2, r1
 8003150:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003152:	4b99      	ldr	r3, [pc, #612]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003154:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003156:	4b98      	ldr	r3, [pc, #608]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003158:	499a      	ldr	r1, [pc, #616]	@ (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800315a:	400a      	ands	r2, r1
 800315c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800315e:	4b96      	ldr	r3, [pc, #600]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d016      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe f9ce 	bl	800150c <HAL_GetTick>
 8003170:	0003      	movs	r3, r0
 8003172:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003174:	e00c      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe f9c9 	bl	800150c <HAL_GetTick>
 800317a:	0002      	movs	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	4a91      	ldr	r2, [pc, #580]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d904      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003186:	2313      	movs	r3, #19
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	2203      	movs	r2, #3
 800318c:	701a      	strb	r2, [r3, #0]
            break;
 800318e:	e004      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003190:	4b89      	ldr	r3, [pc, #548]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	2202      	movs	r2, #2
 8003196:	4013      	ands	r3, r2
 8003198:	d0ed      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800319a:	2313      	movs	r3, #19
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10a      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a4:	4b84      	ldr	r3, [pc, #528]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	4a85      	ldr	r2, [pc, #532]	@ (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	0019      	movs	r1, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031b2:	4b81      	ldr	r3, [pc, #516]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b4:	430a      	orrs	r2, r1
 80031b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031b8:	e00c      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ba:	2312      	movs	r3, #18
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2213      	movs	r2, #19
 80031c0:	18ba      	adds	r2, r7, r2
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e005      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	2312      	movs	r3, #18
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2213      	movs	r2, #19
 80031ce:	18ba      	adds	r2, r7, r2
 80031d0:	7812      	ldrb	r2, [r2, #0]
 80031d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031d4:	2311      	movs	r3, #17
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b76      	ldr	r3, [pc, #472]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e2:	4b75      	ldr	r3, [pc, #468]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e4:	4979      	ldr	r1, [pc, #484]	@ (80033cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4013      	ands	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031f4:	4b70      	ldr	r3, [pc, #448]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	2203      	movs	r2, #3
 80031fa:	4393      	bics	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4b6d      	ldr	r3, [pc, #436]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003204:	430a      	orrs	r2, r1
 8003206:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003212:	4b69      	ldr	r3, [pc, #420]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	220c      	movs	r2, #12
 8003218:	4393      	bics	r3, r2
 800321a:	0019      	movs	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b65      	ldr	r3, [pc, #404]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003222:	430a      	orrs	r2, r1
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2210      	movs	r2, #16
 800322c:	4013      	ands	r3, r2
 800322e:	d009      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003230:	4b61      	ldr	r3, [pc, #388]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003234:	4a66      	ldr	r2, [pc, #408]	@ (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	4b5e      	ldr	r3, [pc, #376]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003240:	430a      	orrs	r2, r1
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	2380      	movs	r3, #128	@ 0x80
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003250:	4b59      	ldr	r3, [pc, #356]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003256:	4013      	ands	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	4b56      	ldr	r3, [pc, #344]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003260:	430a      	orrs	r2, r1
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4013      	ands	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003270:	4b51      	ldr	r3, [pc, #324]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	4b4e      	ldr	r3, [pc, #312]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2220      	movs	r2, #32
 800328a:	4013      	ands	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800328e:	4b4a      	ldr	r3, [pc, #296]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	4a52      	ldr	r2, [pc, #328]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003294:	4013      	ands	r3, r2
 8003296:	0019      	movs	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	4b46      	ldr	r3, [pc, #280]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	4013      	ands	r3, r2
 80032ac:	d015      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ae:	4b42      	ldr	r3, [pc, #264]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	0899      	lsrs	r1, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	4b3f      	ldr	r3, [pc, #252]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032cc:	4b3a      	ldr	r3, [pc, #232]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	0249      	lsls	r1, r1, #9
 80032d6:	430a      	orrs	r2, r1
 80032d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	2380      	movs	r3, #128	@ 0x80
 80032e0:	031b      	lsls	r3, r3, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032e6:	4b34      	ldr	r3, [pc, #208]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ea:	2240      	movs	r2, #64	@ 0x40
 80032ec:	4393      	bics	r3, r2
 80032ee:	0019      	movs	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032f4:	4b30      	ldr	r3, [pc, #192]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f6:	430a      	orrs	r2, r1
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	2380      	movs	r3, #128	@ 0x80
 8003300:	039b      	lsls	r3, r3, #14
 8003302:	4013      	ands	r3, r2
 8003304:	d016      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003306:	4b2c      	ldr	r3, [pc, #176]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800330c:	4013      	ands	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003314:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003316:	430a      	orrs	r2, r1
 8003318:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	03db      	lsls	r3, r3, #15
 8003322:	429a      	cmp	r2, r3
 8003324:	d106      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003326:	4b24      	ldr	r3, [pc, #144]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800332c:	2180      	movs	r1, #128	@ 0x80
 800332e:	0449      	lsls	r1, r1, #17
 8003330:	430a      	orrs	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	03db      	lsls	r3, r3, #15
 800333c:	4013      	ands	r3, r2
 800333e:	d016      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800334e:	4b1a      	ldr	r3, [pc, #104]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003350:	430a      	orrs	r2, r1
 8003352:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	045b      	lsls	r3, r3, #17
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003360:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003366:	2180      	movs	r1, #128	@ 0x80
 8003368:	0449      	lsls	r1, r1, #17
 800336a:	430a      	orrs	r2, r1
 800336c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	4013      	ands	r3, r2
 8003378:	d016      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800337a:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800337c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337e:	4a1a      	ldr	r2, [pc, #104]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800338a:	430a      	orrs	r2, r1
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	01db      	lsls	r3, r3, #7
 8003396:	429a      	cmp	r2, r3
 8003398:	d106      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033a0:	2180      	movs	r1, #128	@ 0x80
 80033a2:	0249      	lsls	r1, r1, #9
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033a8:	2312      	movs	r3, #18
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b006      	add	sp, #24
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
 80033c0:	fffffcff 	.word	0xfffffcff
 80033c4:	fffeffff 	.word	0xfffeffff
 80033c8:	00001388 	.word	0x00001388
 80033cc:	efffffff 	.word	0xefffffff
 80033d0:	fffff3ff 	.word	0xfffff3ff
 80033d4:	fff3ffff 	.word	0xfff3ffff
 80033d8:	ffcfffff 	.word	0xffcfffff
 80033dc:	ffffcfff 	.word	0xffffcfff
 80033e0:	ffbfffff 	.word	0xffbfffff
 80033e4:	feffffff 	.word	0xfeffffff
 80033e8:	ffff3fff 	.word	0xffff3fff

080033ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e04a      	b.n	8003494 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223d      	movs	r2, #61	@ 0x3d
 8003402:	5c9b      	ldrb	r3, [r3, r2]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d107      	bne.n	800341a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	@ 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fd fe2d 	bl	8001074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223d      	movs	r2, #61	@ 0x3d
 800341e:	2102      	movs	r1, #2
 8003420:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3304      	adds	r3, #4
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f000 fa1f 	bl	8003870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2248      	movs	r2, #72	@ 0x48
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223e      	movs	r2, #62	@ 0x3e
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223f      	movs	r2, #63	@ 0x3f
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2240      	movs	r2, #64	@ 0x40
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	@ 0x41
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2242      	movs	r2, #66	@ 0x42
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2243      	movs	r2, #67	@ 0x43
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2244      	movs	r2, #68	@ 0x44
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2245      	movs	r2, #69	@ 0x45
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2246      	movs	r2, #70	@ 0x46
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2247      	movs	r2, #71	@ 0x47
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	223d      	movs	r2, #61	@ 0x3d
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d108      	bne.n	80034be <HAL_TIM_PWM_Start+0x22>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	223e      	movs	r2, #62	@ 0x3e
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	4193      	sbcs	r3, r2
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e037      	b.n	800352e <HAL_TIM_PWM_Start+0x92>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d108      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x3a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	223f      	movs	r2, #63	@ 0x3f
 80034c8:	5c9b      	ldrb	r3, [r3, r2]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	4193      	sbcs	r3, r2
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e02b      	b.n	800352e <HAL_TIM_PWM_Start+0x92>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d108      	bne.n	80034ee <HAL_TIM_PWM_Start+0x52>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	1e5a      	subs	r2, r3, #1
 80034e8:	4193      	sbcs	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e01f      	b.n	800352e <HAL_TIM_PWM_Start+0x92>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	d108      	bne.n	8003506 <HAL_TIM_PWM_Start+0x6a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2241      	movs	r2, #65	@ 0x41
 80034f8:	5c9b      	ldrb	r3, [r3, r2]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	1e5a      	subs	r2, r3, #1
 8003500:	4193      	sbcs	r3, r2
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Start+0x92>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b10      	cmp	r3, #16
 800350a:	d108      	bne.n	800351e <HAL_TIM_PWM_Start+0x82>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2242      	movs	r2, #66	@ 0x42
 8003510:	5c9b      	ldrb	r3, [r3, r2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	4193      	sbcs	r3, r2
 800351a:	b2db      	uxtb	r3, r3
 800351c:	e007      	b.n	800352e <HAL_TIM_PWM_Start+0x92>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2243      	movs	r2, #67	@ 0x43
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	4193      	sbcs	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e08b      	b.n	800364e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0xaa>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223e      	movs	r2, #62	@ 0x3e
 8003540:	2102      	movs	r1, #2
 8003542:	5499      	strb	r1, [r3, r2]
 8003544:	e023      	b.n	800358e <HAL_TIM_PWM_Start+0xf2>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xba>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	223f      	movs	r2, #63	@ 0x3f
 8003550:	2102      	movs	r1, #2
 8003552:	5499      	strb	r1, [r3, r2]
 8003554:	e01b      	b.n	800358e <HAL_TIM_PWM_Start+0xf2>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0xca>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	@ 0x40
 8003560:	2102      	movs	r1, #2
 8003562:	5499      	strb	r1, [r3, r2]
 8003564:	e013      	b.n	800358e <HAL_TIM_PWM_Start+0xf2>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0xda>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2241      	movs	r2, #65	@ 0x41
 8003570:	2102      	movs	r1, #2
 8003572:	5499      	strb	r1, [r3, r2]
 8003574:	e00b      	b.n	800358e <HAL_TIM_PWM_Start+0xf2>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b10      	cmp	r3, #16
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xea>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2242      	movs	r2, #66	@ 0x42
 8003580:	2102      	movs	r1, #2
 8003582:	5499      	strb	r1, [r3, r2]
 8003584:	e003      	b.n	800358e <HAL_TIM_PWM_Start+0xf2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2243      	movs	r2, #67	@ 0x43
 800358a:	2102      	movs	r1, #2
 800358c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fcbc 	bl	8003f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003658 <HAL_TIM_PWM_Start+0x1bc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00e      	beq.n	80035c4 <HAL_TIM_PWM_Start+0x128>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2c      	ldr	r2, [pc, #176]	@ (800365c <HAL_TIM_PWM_Start+0x1c0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIM_PWM_Start+0x128>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003660 <HAL_TIM_PWM_Start+0x1c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_PWM_Start+0x128>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a29      	ldr	r2, [pc, #164]	@ (8003664 <HAL_TIM_PWM_Start+0x1c8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_TIM_PWM_Start+0x12c>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_TIM_PWM_Start+0x12e>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2180      	movs	r1, #128	@ 0x80
 80035da:	0209      	lsls	r1, r1, #8
 80035dc:	430a      	orrs	r2, r1
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003658 <HAL_TIM_PWM_Start+0x1bc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d00f      	beq.n	800360a <HAL_TIM_PWM_Start+0x16e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	05db      	lsls	r3, r3, #23
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d009      	beq.n	800360a <HAL_TIM_PWM_Start+0x16e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <HAL_TIM_PWM_Start+0x1cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIM_PWM_Start+0x16e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <HAL_TIM_PWM_Start+0x1c0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d116      	bne.n	8003638 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_TIM_PWM_Start+0x1d0>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b06      	cmp	r3, #6
 800361a:	d016      	beq.n	800364a <HAL_TIM_PWM_Start+0x1ae>
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	2380      	movs	r3, #128	@ 0x80
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	429a      	cmp	r2, r3
 8003624:	d011      	beq.n	800364a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	430a      	orrs	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003636:	e008      	b.n	800364a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e000      	b.n	800364c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40000400 	.word	0x40000400
 800366c:	00010007 	.word	0x00010007

08003670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2317      	movs	r3, #23
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	223c      	movs	r2, #60	@ 0x3c
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x22>
 800368e:	2302      	movs	r3, #2
 8003690:	e0e5      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	223c      	movs	r2, #60	@ 0x3c
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b14      	cmp	r3, #20
 800369e:	d900      	bls.n	80036a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036a0:	e0d1      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	009a      	lsls	r2, r3, #2
 80036a6:	4b70      	ldr	r3, [pc, #448]	@ (8003868 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	0011      	movs	r1, r2
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f968 	bl	800398c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2108      	movs	r1, #8
 80036c8:	430a      	orrs	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2104      	movs	r1, #4
 80036d8:	438a      	bics	r2, r1
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
      break;
 80036ee:	e0af      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f9d1 	bl	8003aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2180      	movs	r1, #128	@ 0x80
 800370a:	0109      	lsls	r1, r1, #4
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4954      	ldr	r1, [pc, #336]	@ (800386c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800371c:	400a      	ands	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	619a      	str	r2, [r3, #24]
      break;
 8003734:	e08c      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f000 fa32 	bl	8003ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2108      	movs	r1, #8
 8003750:	430a      	orrs	r2, r1
 8003752:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2104      	movs	r1, #4
 8003760:	438a      	bics	r2, r1
 8003762:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69d9      	ldr	r1, [r3, #28]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	61da      	str	r2, [r3, #28]
      break;
 8003776:	e06b      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	0011      	movs	r1, r2
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fa99 	bl	8003cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	0109      	lsls	r1, r1, #4
 8003794:	430a      	orrs	r2, r1
 8003796:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4932      	ldr	r1, [pc, #200]	@ (800386c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037a4:	400a      	ands	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69d9      	ldr	r1, [r3, #28]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	021a      	lsls	r2, r3, #8
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
      break;
 80037bc:	e048      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	0011      	movs	r1, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 fae0 	bl	8003d8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2108      	movs	r1, #8
 80037d8:	430a      	orrs	r2, r1
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2104      	movs	r1, #4
 80037e8:	438a      	bics	r2, r1
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037fe:	e027      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	0011      	movs	r1, r2
 8003808:	0018      	movs	r0, r3
 800380a:	f000 fb1f 	bl	8003e4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2180      	movs	r1, #128	@ 0x80
 800381a:	0109      	lsls	r1, r1, #4
 800381c:	430a      	orrs	r2, r1
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4910      	ldr	r1, [pc, #64]	@ (800386c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800382c:	400a      	ands	r2, r1
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003844:	e004      	b.n	8003850 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003846:	2317      	movs	r3, #23
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	223c      	movs	r2, #60	@ 0x3c
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

  return status;
 8003858:	2317      	movs	r3, #23
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	781b      	ldrb	r3, [r3, #0]
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b006      	add	sp, #24
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	08005964 	.word	0x08005964
 800386c:	fffffbff 	.word	0xfffffbff

08003870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <TIM_Base_SetConfig+0x100>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d008      	beq.n	800389a <TIM_Base_SetConfig+0x2a>
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	05db      	lsls	r3, r3, #23
 800388e:	429a      	cmp	r2, r3
 8003890:	d003      	beq.n	800389a <TIM_Base_SetConfig+0x2a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a37      	ldr	r2, [pc, #220]	@ (8003974 <TIM_Base_SetConfig+0x104>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d108      	bne.n	80038ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2270      	movs	r2, #112	@ 0x70
 800389e:	4393      	bics	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a30      	ldr	r2, [pc, #192]	@ (8003970 <TIM_Base_SetConfig+0x100>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	05db      	lsls	r3, r3, #23
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d013      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <TIM_Base_SetConfig+0x104>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00f      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003978 <TIM_Base_SetConfig+0x108>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <TIM_Base_SetConfig+0x10c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <TIM_Base_SetConfig+0x110>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_Base_SetConfig+0x76>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a28      	ldr	r2, [pc, #160]	@ (8003984 <TIM_Base_SetConfig+0x114>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d108      	bne.n	80038f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a27      	ldr	r2, [pc, #156]	@ (8003988 <TIM_Base_SetConfig+0x118>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	4393      	bics	r3, r2
 80038fe:	001a      	movs	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <TIM_Base_SetConfig+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00b      	beq.n	800393e <TIM_Base_SetConfig+0xce>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a14      	ldr	r2, [pc, #80]	@ (800397c <TIM_Base_SetConfig+0x10c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <TIM_Base_SetConfig+0xce>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a13      	ldr	r2, [pc, #76]	@ (8003980 <TIM_Base_SetConfig+0x110>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d003      	beq.n	800393e <TIM_Base_SetConfig+0xce>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a12      	ldr	r2, [pc, #72]	@ (8003984 <TIM_Base_SetConfig+0x114>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d103      	bne.n	8003946 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2201      	movs	r2, #1
 8003952:	4013      	ands	r3, r2
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2201      	movs	r2, #1
 800395e:	4393      	bics	r3, r2
 8003960:	001a      	movs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]
  }
}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b004      	add	sp, #16
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40002000 	.word	0x40002000
 800397c:	40014000 	.word	0x40014000
 8003980:	40014400 	.word	0x40014400
 8003984:	40014800 	.word	0x40014800
 8003988:	fffffcff 	.word	0xfffffcff

0800398c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	2201      	movs	r2, #1
 80039a2:	4393      	bics	r3, r2
 80039a4:	001a      	movs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a32      	ldr	r2, [pc, #200]	@ (8003a84 <TIM_OC1_SetConfig+0xf8>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2203      	movs	r2, #3
 80039c2:	4393      	bics	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2202      	movs	r2, #2
 80039d4:	4393      	bics	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a28      	ldr	r2, [pc, #160]	@ (8003a88 <TIM_OC1_SetConfig+0xfc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_OC1_SetConfig+0x76>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <TIM_OC1_SetConfig+0x100>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_OC1_SetConfig+0x76>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a26      	ldr	r2, [pc, #152]	@ (8003a90 <TIM_OC1_SetConfig+0x104>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC1_SetConfig+0x76>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a25      	ldr	r2, [pc, #148]	@ (8003a94 <TIM_OC1_SetConfig+0x108>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10c      	bne.n	8003a1c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2208      	movs	r2, #8
 8003a06:	4393      	bics	r3, r2
 8003a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2204      	movs	r2, #4
 8003a18:	4393      	bics	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003a88 <TIM_OC1_SetConfig+0xfc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_OC1_SetConfig+0xb0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a19      	ldr	r2, [pc, #100]	@ (8003a8c <TIM_OC1_SetConfig+0x100>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_OC1_SetConfig+0xb0>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <TIM_OC1_SetConfig+0x104>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_OC1_SetConfig+0xb0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <TIM_OC1_SetConfig+0x108>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <TIM_OC1_SetConfig+0x10c>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <TIM_OC1_SetConfig+0x110>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	b006      	add	sp, #24
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	46c0      	nop			@ (mov r8, r8)
 8003a84:	fffeff8f 	.word	0xfffeff8f
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800
 8003a98:	fffffeff 	.word	0xfffffeff
 8003a9c:	fffffdff 	.word	0xfffffdff

08003aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	4393      	bics	r3, r2
 8003ab8:	001a      	movs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <TIM_OC2_SetConfig+0xe8>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <TIM_OC2_SetConfig+0xec>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	4393      	bics	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <TIM_OC2_SetConfig+0xf0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10d      	bne.n	8003b1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2280      	movs	r2, #128	@ 0x80
 8003b06:	4393      	bics	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2240      	movs	r2, #64	@ 0x40
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <TIM_OC2_SetConfig+0xf0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_OC2_SetConfig+0x9e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <TIM_OC2_SetConfig+0xf4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC2_SetConfig+0x9e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a19      	ldr	r2, [pc, #100]	@ (8003b98 <TIM_OC2_SetConfig+0xf8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC2_SetConfig+0x9e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <TIM_OC2_SetConfig+0xfc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d113      	bne.n	8003b66 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4a17      	ldr	r2, [pc, #92]	@ (8003ba0 <TIM_OC2_SetConfig+0x100>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4a16      	ldr	r2, [pc, #88]	@ (8003ba4 <TIM_OC2_SetConfig+0x104>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	621a      	str	r2, [r3, #32]
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b006      	add	sp, #24
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	feff8fff 	.word	0xfeff8fff
 8003b8c:	fffffcff 	.word	0xfffffcff
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	fffffbff 	.word	0xfffffbff
 8003ba4:	fffff7ff 	.word	0xfffff7ff

08003ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4a33      	ldr	r2, [pc, #204]	@ (8003c8c <TIM_OC3_SetConfig+0xe4>)
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003c90 <TIM_OC3_SetConfig+0xe8>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	4393      	bics	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <TIM_OC3_SetConfig+0xec>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a25      	ldr	r2, [pc, #148]	@ (8003c98 <TIM_OC3_SetConfig+0xf0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10d      	bne.n	8003c22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a24      	ldr	r2, [pc, #144]	@ (8003c9c <TIM_OC3_SetConfig+0xf4>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <TIM_OC3_SetConfig+0xf8>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	@ (8003c98 <TIM_OC3_SetConfig+0xf0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_OC3_SetConfig+0x9a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca4 <TIM_OC3_SetConfig+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_OC3_SetConfig+0x9a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca8 <TIM_OC3_SetConfig+0x100>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC3_SetConfig+0x9a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <TIM_OC3_SetConfig+0x104>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d113      	bne.n	8003c6a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb0 <TIM_OC3_SetConfig+0x108>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	@ (8003cb4 <TIM_OC3_SetConfig+0x10c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	621a      	str	r2, [r3, #32]
}
 8003c84:	46c0      	nop			@ (mov r8, r8)
 8003c86:	46bd      	mov	sp, r7
 8003c88:	b006      	add	sp, #24
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	fffffeff 	.word	0xfffffeff
 8003c90:	fffeff8f 	.word	0xfffeff8f
 8003c94:	fffffdff 	.word	0xfffffdff
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	fffff7ff 	.word	0xfffff7ff
 8003ca0:	fffffbff 	.word	0xfffffbff
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40014400 	.word	0x40014400
 8003cac:	40014800 	.word	0x40014800
 8003cb0:	ffffefff 	.word	0xffffefff
 8003cb4:	ffffdfff 	.word	0xffffdfff

08003cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	@ (8003d68 <TIM_OC4_SetConfig+0xb0>)
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a22      	ldr	r2, [pc, #136]	@ (8003d6c <TIM_OC4_SetConfig+0xb4>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <TIM_OC4_SetConfig+0xb8>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <TIM_OC4_SetConfig+0xbc>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	031b      	lsls	r3, r3, #12
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a19      	ldr	r2, [pc, #100]	@ (8003d78 <TIM_OC4_SetConfig+0xc0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC4_SetConfig+0x78>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	@ (8003d7c <TIM_OC4_SetConfig+0xc4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC4_SetConfig+0x78>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <TIM_OC4_SetConfig+0xc8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC4_SetConfig+0x78>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a16      	ldr	r2, [pc, #88]	@ (8003d84 <TIM_OC4_SetConfig+0xcc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d109      	bne.n	8003d44 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <TIM_OC4_SetConfig+0xd0>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b006      	add	sp, #24
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	ffffefff 	.word	0xffffefff
 8003d6c:	feff8fff 	.word	0xfeff8fff
 8003d70:	fffffcff 	.word	0xfffffcff
 8003d74:	ffffdfff 	.word	0xffffdfff
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800
 8003d88:	ffffbfff 	.word	0xffffbfff

08003d8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <TIM_OC5_SetConfig+0xa4>)
 8003da2:	401a      	ands	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e34 <TIM_OC5_SetConfig+0xa8>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003e38 <TIM_OC5_SetConfig+0xac>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <TIM_OC5_SetConfig+0xb0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_OC5_SetConfig+0x6e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a16      	ldr	r2, [pc, #88]	@ (8003e40 <TIM_OC5_SetConfig+0xb4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_OC5_SetConfig+0x6e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	@ (8003e44 <TIM_OC5_SetConfig+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC5_SetConfig+0x6e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a14      	ldr	r2, [pc, #80]	@ (8003e48 <TIM_OC5_SetConfig+0xbc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d109      	bne.n	8003e0e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8003e30 <TIM_OC5_SetConfig+0xa4>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	621a      	str	r2, [r3, #32]
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	fffeffff 	.word	0xfffeffff
 8003e34:	fffeff8f 	.word	0xfffeff8f
 8003e38:	fffdffff 	.word	0xfffdffff
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	4a24      	ldr	r2, [pc, #144]	@ (8003ef4 <TIM_OC6_SetConfig+0xa8>)
 8003e62:	401a      	ands	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <TIM_OC6_SetConfig+0xac>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <TIM_OC6_SetConfig+0xb0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	051b      	lsls	r3, r3, #20
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a18      	ldr	r2, [pc, #96]	@ (8003f00 <TIM_OC6_SetConfig+0xb4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_OC6_SetConfig+0x70>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <TIM_OC6_SetConfig+0xb8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_OC6_SetConfig+0x70>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <TIM_OC6_SetConfig+0xbc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_OC6_SetConfig+0x70>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a15      	ldr	r2, [pc, #84]	@ (8003f0c <TIM_OC6_SetConfig+0xc0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d109      	bne.n	8003ed0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	@ (8003f10 <TIM_OC6_SetConfig+0xc4>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	029b      	lsls	r3, r3, #10
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b006      	add	sp, #24
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	ffefffff 	.word	0xffefffff
 8003ef8:	feff8fff 	.word	0xfeff8fff
 8003efc:	ffdfffff 	.word	0xffdfffff
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	fffbffff 	.word	0xfffbffff

08003f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	221f      	movs	r2, #31
 8003f24:	4013      	ands	r3, r2
 8003f26:	2201      	movs	r2, #1
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	43d2      	mvns	r2, r2
 8003f36:	401a      	ands	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	211f      	movs	r1, #31
 8003f44:	400b      	ands	r3, r1
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4099      	lsls	r1, r3
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b006      	add	sp, #24
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223c      	movs	r2, #60	@ 0x3c
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e055      	b.n	8004020 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	223c      	movs	r2, #60	@ 0x3c
 8003f78:	2101      	movs	r1, #1
 8003f7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	223d      	movs	r2, #61	@ 0x3d
 8003f80:	2102      	movs	r1, #2
 8003f82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a23      	ldr	r2, [pc, #140]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a22      	ldr	r2, [pc, #136]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2270      	movs	r2, #112	@ 0x70
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00f      	beq.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	2380      	movs	r3, #128	@ 0x80
 8003fda:	05db      	lsls	r3, r3, #23
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a12      	ldr	r2, [pc, #72]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d10c      	bne.n	800400e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2280      	movs	r2, #128	@ 0x80
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4313      	orrs	r3, r2
 8004004:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	223d      	movs	r2, #61	@ 0x3d
 8004012:	2101      	movs	r1, #1
 8004014:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	223c      	movs	r2, #60	@ 0x3c
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40012c00 	.word	0x40012c00
 800402c:	ff0fffff 	.word	0xff0fffff
 8004030:	40000400 	.word	0x40000400
 8004034:	40014000 	.word	0x40014000

08004038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	223c      	movs	r2, #60	@ 0x3c
 800404a:	5c9b      	ldrb	r3, [r3, r2]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004050:	2302      	movs	r3, #2
 8004052:	e06f      	b.n	8004134 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	223c      	movs	r2, #60	@ 0x3c
 8004058:	2101      	movs	r1, #1
 800405a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	22ff      	movs	r2, #255	@ 0xff
 8004060:	4393      	bics	r3, r2
 8004062:	001a      	movs	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a33      	ldr	r2, [pc, #204]	@ (800413c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004070:	401a      	ands	r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a30      	ldr	r2, [pc, #192]	@ (8004140 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800407e:	401a      	ands	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800408c:	401a      	ands	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a2b      	ldr	r2, [pc, #172]	@ (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800409a:	401a      	ands	r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a29      	ldr	r2, [pc, #164]	@ (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80040a8:	401a      	ands	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80040b6:	401a      	ands	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80040c4:	401a      	ands	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a21      	ldr	r2, [pc, #132]	@ (8004158 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80040d4:	401a      	ands	r2, r3
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d11c      	bne.n	8004122 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004160 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80040ec:	401a      	ands	r2, r3
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	051b      	lsls	r3, r3, #20
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004164 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80040fc:	401a      	ands	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a17      	ldr	r2, [pc, #92]	@ (8004168 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800410a:	401a      	ands	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004118:	401a      	ands	r2, r3
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223c      	movs	r2, #60	@ 0x3c
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b004      	add	sp, #16
 800413a:	bd80      	pop	{r7, pc}
 800413c:	fffffcff 	.word	0xfffffcff
 8004140:	fffffbff 	.word	0xfffffbff
 8004144:	fffff7ff 	.word	0xfffff7ff
 8004148:	ffffefff 	.word	0xffffefff
 800414c:	ffffdfff 	.word	0xffffdfff
 8004150:	ffffbfff 	.word	0xffffbfff
 8004154:	fff0ffff 	.word	0xfff0ffff
 8004158:	efffffff 	.word	0xefffffff
 800415c:	40012c00 	.word	0x40012c00
 8004160:	ff0fffff 	.word	0xff0fffff
 8004164:	feffffff 	.word	0xfeffffff
 8004168:	fdffffff 	.word	0xfdffffff
 800416c:	dfffffff 	.word	0xdfffffff

08004170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e046      	b.n	8004210 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2288      	movs	r2, #136	@ 0x88
 8004186:	589b      	ldr	r3, [r3, r2]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2284      	movs	r2, #132	@ 0x84
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f7fd f85c 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2288      	movs	r2, #136	@ 0x88
 80041a0:	2124      	movs	r1, #36	@ 0x24
 80041a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	438a      	bics	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 fb8e 	bl	80048e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f8cc 	bl	8004364 <UART_SetConfig>
 80041cc:	0003      	movs	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e01c      	b.n	8004210 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	490d      	ldr	r1, [pc, #52]	@ (8004218 <HAL_UART_Init+0xa8>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	212a      	movs	r1, #42	@ 0x2a
 80041f2:	438a      	bics	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 fc1d 	bl	8004a48 <UART_CheckIdleState>
 800420e:	0003      	movs	r3, r0
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}
 8004218:	ffffb7ff 	.word	0xffffb7ff

0800421c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2288      	movs	r2, #136	@ 0x88
 8004230:	589b      	ldr	r3, [r3, r2]
 8004232:	2b20      	cmp	r3, #32
 8004234:	d000      	beq.n	8004238 <HAL_UART_Transmit+0x1c>
 8004236:	e090      	b.n	800435a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_UART_Transmit+0x2a>
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e088      	b.n	800435c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	015b      	lsls	r3, r3, #5
 8004252:	429a      	cmp	r2, r3
 8004254:	d109      	bne.n	800426a <HAL_UART_Transmit+0x4e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d105      	bne.n	800426a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	d001      	beq.n	800426a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e078      	b.n	800435c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2290      	movs	r2, #144	@ 0x90
 800426e:	2100      	movs	r1, #0
 8004270:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2288      	movs	r2, #136	@ 0x88
 8004276:	2121      	movs	r1, #33	@ 0x21
 8004278:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427a:	f7fd f947 	bl	800150c <HAL_GetTick>
 800427e:	0003      	movs	r3, r0
 8004280:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1dba      	adds	r2, r7, #6
 8004286:	2154      	movs	r1, #84	@ 0x54
 8004288:	8812      	ldrh	r2, [r2, #0]
 800428a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1dba      	adds	r2, r7, #6
 8004290:	2156      	movs	r1, #86	@ 0x56
 8004292:	8812      	ldrh	r2, [r2, #0]
 8004294:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	015b      	lsls	r3, r3, #5
 800429e:	429a      	cmp	r2, r3
 80042a0:	d108      	bne.n	80042b4 <HAL_UART_Transmit+0x98>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e003      	b.n	80042bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042bc:	e030      	b.n	8004320 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	0013      	movs	r3, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	2180      	movs	r1, #128	@ 0x80
 80042cc:	f000 fc66 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 80042d0:	1e03      	subs	r3, r0, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2288      	movs	r2, #136	@ 0x88
 80042d8:	2120      	movs	r1, #32
 80042da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e03d      	b.n	800435c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	001a      	movs	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	05d2      	lsls	r2, r2, #23
 80042f2:	0dd2      	lsrs	r2, r2, #23
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3302      	adds	r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e007      	b.n	800430e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2256      	movs	r2, #86	@ 0x56
 8004312:	5a9b      	ldrh	r3, [r3, r2]
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b299      	uxth	r1, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2256      	movs	r2, #86	@ 0x56
 800431e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2256      	movs	r2, #86	@ 0x56
 8004324:	5a9b      	ldrh	r3, [r3, r2]
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1c8      	bne.n	80042be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	0013      	movs	r3, r2
 8004336:	2200      	movs	r2, #0
 8004338:	2140      	movs	r1, #64	@ 0x40
 800433a:	f000 fc2f 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2288      	movs	r2, #136	@ 0x88
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e006      	b.n	800435c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2288      	movs	r2, #136	@ 0x88
 8004352:	2120      	movs	r1, #32
 8004354:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	0018      	movs	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	b008      	add	sp, #32
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	b5b0      	push	{r4, r5, r7, lr}
 8004366:	b090      	sub	sp, #64	@ 0x40
 8004368:	af00      	add	r7, sp, #0
 800436a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436c:	231a      	movs	r3, #26
 800436e:	2220      	movs	r2, #32
 8004370:	189b      	adds	r3, r3, r2
 8004372:	19db      	adds	r3, r3, r7
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	431a      	orrs	r2, r3
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	431a      	orrs	r2, r3
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4313      	orrs	r3, r2
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4aaf      	ldr	r2, [pc, #700]	@ (8004654 <UART_SetConfig+0x2f0>)
 8004398:	4013      	ands	r3, r2
 800439a:	0019      	movs	r1, r3
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4aaa      	ldr	r2, [pc, #680]	@ (8004658 <UART_SetConfig+0x2f4>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	68d9      	ldr	r1, [r3, #12]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	0003      	movs	r3, r0
 80043bc:	430b      	orrs	r3, r1
 80043be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4aa4      	ldr	r2, [pc, #656]	@ (800465c <UART_SetConfig+0x2f8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043d6:	4313      	orrs	r3, r2
 80043d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a9f      	ldr	r2, [pc, #636]	@ (8004660 <UART_SetConfig+0x2fc>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	220f      	movs	r2, #15
 80043f8:	4393      	bics	r3, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	0003      	movs	r3, r0
 8004406:	430b      	orrs	r3, r1
 8004408:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a95      	ldr	r2, [pc, #596]	@ (8004664 <UART_SetConfig+0x300>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d131      	bne.n	8004478 <UART_SetConfig+0x114>
 8004414:	4b94      	ldr	r3, [pc, #592]	@ (8004668 <UART_SetConfig+0x304>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004418:	2203      	movs	r2, #3
 800441a:	4013      	ands	r3, r2
 800441c:	2b03      	cmp	r3, #3
 800441e:	d01d      	beq.n	800445c <UART_SetConfig+0xf8>
 8004420:	d823      	bhi.n	800446a <UART_SetConfig+0x106>
 8004422:	2b02      	cmp	r3, #2
 8004424:	d00c      	beq.n	8004440 <UART_SetConfig+0xdc>
 8004426:	d820      	bhi.n	800446a <UART_SetConfig+0x106>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <UART_SetConfig+0xce>
 800442c:	2b01      	cmp	r3, #1
 800442e:	d00e      	beq.n	800444e <UART_SetConfig+0xea>
 8004430:	e01b      	b.n	800446a <UART_SetConfig+0x106>
 8004432:	231b      	movs	r3, #27
 8004434:	2220      	movs	r2, #32
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e0b4      	b.n	80045aa <UART_SetConfig+0x246>
 8004440:	231b      	movs	r3, #27
 8004442:	2220      	movs	r2, #32
 8004444:	189b      	adds	r3, r3, r2
 8004446:	19db      	adds	r3, r3, r7
 8004448:	2202      	movs	r2, #2
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e0ad      	b.n	80045aa <UART_SetConfig+0x246>
 800444e:	231b      	movs	r3, #27
 8004450:	2220      	movs	r2, #32
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2204      	movs	r2, #4
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e0a6      	b.n	80045aa <UART_SetConfig+0x246>
 800445c:	231b      	movs	r3, #27
 800445e:	2220      	movs	r2, #32
 8004460:	189b      	adds	r3, r3, r2
 8004462:	19db      	adds	r3, r3, r7
 8004464:	2208      	movs	r2, #8
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e09f      	b.n	80045aa <UART_SetConfig+0x246>
 800446a:	231b      	movs	r3, #27
 800446c:	2220      	movs	r2, #32
 800446e:	189b      	adds	r3, r3, r2
 8004470:	19db      	adds	r3, r3, r7
 8004472:	2210      	movs	r2, #16
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e098      	b.n	80045aa <UART_SetConfig+0x246>
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7b      	ldr	r2, [pc, #492]	@ (800466c <UART_SetConfig+0x308>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d131      	bne.n	80044e6 <UART_SetConfig+0x182>
 8004482:	4b79      	ldr	r3, [pc, #484]	@ (8004668 <UART_SetConfig+0x304>)
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	220c      	movs	r2, #12
 8004488:	4013      	ands	r3, r2
 800448a:	2b0c      	cmp	r3, #12
 800448c:	d01d      	beq.n	80044ca <UART_SetConfig+0x166>
 800448e:	d823      	bhi.n	80044d8 <UART_SetConfig+0x174>
 8004490:	2b08      	cmp	r3, #8
 8004492:	d00c      	beq.n	80044ae <UART_SetConfig+0x14a>
 8004494:	d820      	bhi.n	80044d8 <UART_SetConfig+0x174>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <UART_SetConfig+0x13c>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00e      	beq.n	80044bc <UART_SetConfig+0x158>
 800449e:	e01b      	b.n	80044d8 <UART_SetConfig+0x174>
 80044a0:	231b      	movs	r3, #27
 80044a2:	2220      	movs	r2, #32
 80044a4:	189b      	adds	r3, r3, r2
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e07d      	b.n	80045aa <UART_SetConfig+0x246>
 80044ae:	231b      	movs	r3, #27
 80044b0:	2220      	movs	r2, #32
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	19db      	adds	r3, r3, r7
 80044b6:	2202      	movs	r2, #2
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e076      	b.n	80045aa <UART_SetConfig+0x246>
 80044bc:	231b      	movs	r3, #27
 80044be:	2220      	movs	r2, #32
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	19db      	adds	r3, r3, r7
 80044c4:	2204      	movs	r2, #4
 80044c6:	701a      	strb	r2, [r3, #0]
 80044c8:	e06f      	b.n	80045aa <UART_SetConfig+0x246>
 80044ca:	231b      	movs	r3, #27
 80044cc:	2220      	movs	r2, #32
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	19db      	adds	r3, r3, r7
 80044d2:	2208      	movs	r2, #8
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e068      	b.n	80045aa <UART_SetConfig+0x246>
 80044d8:	231b      	movs	r3, #27
 80044da:	2220      	movs	r2, #32
 80044dc:	189b      	adds	r3, r3, r2
 80044de:	19db      	adds	r3, r3, r7
 80044e0:	2210      	movs	r2, #16
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e061      	b.n	80045aa <UART_SetConfig+0x246>
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a61      	ldr	r2, [pc, #388]	@ (8004670 <UART_SetConfig+0x30c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d106      	bne.n	80044fe <UART_SetConfig+0x19a>
 80044f0:	231b      	movs	r3, #27
 80044f2:	2220      	movs	r2, #32
 80044f4:	189b      	adds	r3, r3, r2
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e055      	b.n	80045aa <UART_SetConfig+0x246>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a5c      	ldr	r2, [pc, #368]	@ (8004674 <UART_SetConfig+0x310>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d106      	bne.n	8004516 <UART_SetConfig+0x1b2>
 8004508:	231b      	movs	r3, #27
 800450a:	2220      	movs	r2, #32
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e049      	b.n	80045aa <UART_SetConfig+0x246>
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a50      	ldr	r2, [pc, #320]	@ (800465c <UART_SetConfig+0x2f8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d13e      	bne.n	800459e <UART_SetConfig+0x23a>
 8004520:	4b51      	ldr	r3, [pc, #324]	@ (8004668 <UART_SetConfig+0x304>)
 8004522:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004524:	23c0      	movs	r3, #192	@ 0xc0
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4013      	ands	r3, r2
 800452a:	22c0      	movs	r2, #192	@ 0xc0
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	4293      	cmp	r3, r2
 8004530:	d027      	beq.n	8004582 <UART_SetConfig+0x21e>
 8004532:	22c0      	movs	r2, #192	@ 0xc0
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	4293      	cmp	r3, r2
 8004538:	d82a      	bhi.n	8004590 <UART_SetConfig+0x22c>
 800453a:	2280      	movs	r2, #128	@ 0x80
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	4293      	cmp	r3, r2
 8004540:	d011      	beq.n	8004566 <UART_SetConfig+0x202>
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	0112      	lsls	r2, r2, #4
 8004546:	4293      	cmp	r3, r2
 8004548:	d822      	bhi.n	8004590 <UART_SetConfig+0x22c>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <UART_SetConfig+0x1f4>
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	00d2      	lsls	r2, r2, #3
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <UART_SetConfig+0x210>
 8004556:	e01b      	b.n	8004590 <UART_SetConfig+0x22c>
 8004558:	231b      	movs	r3, #27
 800455a:	2220      	movs	r2, #32
 800455c:	189b      	adds	r3, r3, r2
 800455e:	19db      	adds	r3, r3, r7
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e021      	b.n	80045aa <UART_SetConfig+0x246>
 8004566:	231b      	movs	r3, #27
 8004568:	2220      	movs	r2, #32
 800456a:	189b      	adds	r3, r3, r2
 800456c:	19db      	adds	r3, r3, r7
 800456e:	2202      	movs	r2, #2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e01a      	b.n	80045aa <UART_SetConfig+0x246>
 8004574:	231b      	movs	r3, #27
 8004576:	2220      	movs	r2, #32
 8004578:	189b      	adds	r3, r3, r2
 800457a:	19db      	adds	r3, r3, r7
 800457c:	2204      	movs	r2, #4
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e013      	b.n	80045aa <UART_SetConfig+0x246>
 8004582:	231b      	movs	r3, #27
 8004584:	2220      	movs	r2, #32
 8004586:	189b      	adds	r3, r3, r2
 8004588:	19db      	adds	r3, r3, r7
 800458a:	2208      	movs	r2, #8
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e00c      	b.n	80045aa <UART_SetConfig+0x246>
 8004590:	231b      	movs	r3, #27
 8004592:	2220      	movs	r2, #32
 8004594:	189b      	adds	r3, r3, r2
 8004596:	19db      	adds	r3, r3, r7
 8004598:	2210      	movs	r2, #16
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	e005      	b.n	80045aa <UART_SetConfig+0x246>
 800459e:	231b      	movs	r3, #27
 80045a0:	2220      	movs	r2, #32
 80045a2:	189b      	adds	r3, r3, r2
 80045a4:	19db      	adds	r3, r3, r7
 80045a6:	2210      	movs	r2, #16
 80045a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2b      	ldr	r2, [pc, #172]	@ (800465c <UART_SetConfig+0x2f8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d000      	beq.n	80045b6 <UART_SetConfig+0x252>
 80045b4:	e0a9      	b.n	800470a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045b6:	231b      	movs	r3, #27
 80045b8:	2220      	movs	r2, #32
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d015      	beq.n	80045f0 <UART_SetConfig+0x28c>
 80045c4:	dc18      	bgt.n	80045f8 <UART_SetConfig+0x294>
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d00d      	beq.n	80045e6 <UART_SetConfig+0x282>
 80045ca:	dc15      	bgt.n	80045f8 <UART_SetConfig+0x294>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <UART_SetConfig+0x272>
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d005      	beq.n	80045e0 <UART_SetConfig+0x27c>
 80045d4:	e010      	b.n	80045f8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d6:	f7fe fd3b 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 80045da:	0003      	movs	r3, r0
 80045dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045de:	e014      	b.n	800460a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b25      	ldr	r3, [pc, #148]	@ (8004678 <UART_SetConfig+0x314>)
 80045e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045e4:	e011      	b.n	800460a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fe fca7 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80045ea:	0003      	movs	r3, r0
 80045ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045ee:	e00c      	b.n	800460a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80045f6:	e008      	b.n	800460a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80045fc:	231a      	movs	r3, #26
 80045fe:	2220      	movs	r2, #32
 8004600:	189b      	adds	r3, r3, r2
 8004602:	19db      	adds	r3, r3, r7
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
        break;
 8004608:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800460a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460c:	2b00      	cmp	r3, #0
 800460e:	d100      	bne.n	8004612 <UART_SetConfig+0x2ae>
 8004610:	e14b      	b.n	80048aa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004616:	4b19      	ldr	r3, [pc, #100]	@ (800467c <UART_SetConfig+0x318>)
 8004618:	0052      	lsls	r2, r2, #1
 800461a:	5ad3      	ldrh	r3, [r2, r3]
 800461c:	0019      	movs	r1, r3
 800461e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004620:	f7fb fd82 	bl	8000128 <__udivsi3>
 8004624:	0003      	movs	r3, r0
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	0013      	movs	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	189b      	adds	r3, r3, r2
 8004632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004634:	429a      	cmp	r2, r3
 8004636:	d305      	bcc.n	8004644 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800463e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004640:	429a      	cmp	r2, r3
 8004642:	d91d      	bls.n	8004680 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004644:	231a      	movs	r3, #26
 8004646:	2220      	movs	r2, #32
 8004648:	189b      	adds	r3, r3, r2
 800464a:	19db      	adds	r3, r3, r7
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e12b      	b.n	80048aa <UART_SetConfig+0x546>
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	cfff69f3 	.word	0xcfff69f3
 8004658:	ffffcfff 	.word	0xffffcfff
 800465c:	40008000 	.word	0x40008000
 8004660:	11fff4ff 	.word	0x11fff4ff
 8004664:	40013800 	.word	0x40013800
 8004668:	40021000 	.word	0x40021000
 800466c:	40004400 	.word	0x40004400
 8004670:	40004800 	.word	0x40004800
 8004674:	40004c00 	.word	0x40004c00
 8004678:	00f42400 	.word	0x00f42400
 800467c:	080059b8 	.word	0x080059b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800468c:	4b92      	ldr	r3, [pc, #584]	@ (80048d8 <UART_SetConfig+0x574>)
 800468e:	0052      	lsls	r2, r2, #1
 8004690:	5ad3      	ldrh	r3, [r2, r3]
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	69b8      	ldr	r0, [r7, #24]
 800469e:	69f9      	ldr	r1, [r7, #28]
 80046a0:	f7fb feb8 	bl	8000414 <__aeabi_uldivmod>
 80046a4:	0002      	movs	r2, r0
 80046a6:	000b      	movs	r3, r1
 80046a8:	0e11      	lsrs	r1, r2, #24
 80046aa:	021d      	lsls	r5, r3, #8
 80046ac:	430d      	orrs	r5, r1
 80046ae:	0214      	lsls	r4, r2, #8
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68b8      	ldr	r0, [r7, #8]
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	1900      	adds	r0, r0, r4
 80046c2:	4169      	adcs	r1, r5
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f7fb fe9f 	bl	8000414 <__aeabi_uldivmod>
 80046d6:	0002      	movs	r2, r0
 80046d8:	000b      	movs	r3, r1
 80046da:	0013      	movs	r3, r2
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e0:	23c0      	movs	r3, #192	@ 0xc0
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d309      	bcc.n	80046fc <UART_SetConfig+0x398>
 80046e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ea:	2380      	movs	r3, #128	@ 0x80
 80046ec:	035b      	lsls	r3, r3, #13
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d204      	bcs.n	80046fc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	e0d6      	b.n	80048aa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80046fc:	231a      	movs	r3, #26
 80046fe:	2220      	movs	r2, #32
 8004700:	189b      	adds	r3, r3, r2
 8004702:	19db      	adds	r3, r3, r7
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e0cf      	b.n	80048aa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	429a      	cmp	r2, r3
 8004714:	d000      	beq.n	8004718 <UART_SetConfig+0x3b4>
 8004716:	e070      	b.n	80047fa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004718:	231b      	movs	r3, #27
 800471a:	2220      	movs	r2, #32
 800471c:	189b      	adds	r3, r3, r2
 800471e:	19db      	adds	r3, r3, r7
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b08      	cmp	r3, #8
 8004724:	d015      	beq.n	8004752 <UART_SetConfig+0x3ee>
 8004726:	dc18      	bgt.n	800475a <UART_SetConfig+0x3f6>
 8004728:	2b04      	cmp	r3, #4
 800472a:	d00d      	beq.n	8004748 <UART_SetConfig+0x3e4>
 800472c:	dc15      	bgt.n	800475a <UART_SetConfig+0x3f6>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <UART_SetConfig+0x3d4>
 8004732:	2b02      	cmp	r3, #2
 8004734:	d005      	beq.n	8004742 <UART_SetConfig+0x3de>
 8004736:	e010      	b.n	800475a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7fe fc8a 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 800473c:	0003      	movs	r3, r0
 800473e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004740:	e014      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004742:	4b66      	ldr	r3, [pc, #408]	@ (80048dc <UART_SetConfig+0x578>)
 8004744:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004746:	e011      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004748:	f7fe fbf6 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 800474c:	0003      	movs	r3, r0
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004750:	e00c      	b.n	800476c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004758:	e008      	b.n	800476c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800475e:	231a      	movs	r3, #26
 8004760:	2220      	movs	r2, #32
 8004762:	189b      	adds	r3, r3, r2
 8004764:	19db      	adds	r3, r3, r7
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
        break;
 800476a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d100      	bne.n	8004774 <UART_SetConfig+0x410>
 8004772:	e09a      	b.n	80048aa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004778:	4b57      	ldr	r3, [pc, #348]	@ (80048d8 <UART_SetConfig+0x574>)
 800477a:	0052      	lsls	r2, r2, #1
 800477c:	5ad3      	ldrh	r3, [r2, r3]
 800477e:	0019      	movs	r1, r3
 8004780:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004782:	f7fb fcd1 	bl	8000128 <__udivsi3>
 8004786:	0003      	movs	r3, r0
 8004788:	005a      	lsls	r2, r3, #1
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	18d2      	adds	r2, r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	0019      	movs	r1, r3
 8004798:	0010      	movs	r0, r2
 800479a:	f7fb fcc5 	bl	8000128 <__udivsi3>
 800479e:	0003      	movs	r3, r0
 80047a0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	2b0f      	cmp	r3, #15
 80047a6:	d921      	bls.n	80047ec <UART_SetConfig+0x488>
 80047a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047aa:	2380      	movs	r3, #128	@ 0x80
 80047ac:	025b      	lsls	r3, r3, #9
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d21c      	bcs.n	80047ec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	200e      	movs	r0, #14
 80047b8:	2420      	movs	r4, #32
 80047ba:	1903      	adds	r3, r0, r4
 80047bc:	19db      	adds	r3, r3, r7
 80047be:	210f      	movs	r1, #15
 80047c0:	438a      	bics	r2, r1
 80047c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	b299      	uxth	r1, r3
 80047d0:	1903      	adds	r3, r0, r4
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	1902      	adds	r2, r0, r4
 80047d6:	19d2      	adds	r2, r2, r7
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	1902      	adds	r2, r0, r4
 80047e4:	19d2      	adds	r2, r2, r7
 80047e6:	8812      	ldrh	r2, [r2, #0]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e05e      	b.n	80048aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	231a      	movs	r3, #26
 80047ee:	2220      	movs	r2, #32
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	19db      	adds	r3, r3, r7
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	e057      	b.n	80048aa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fa:	231b      	movs	r3, #27
 80047fc:	2220      	movs	r2, #32
 80047fe:	189b      	adds	r3, r3, r2
 8004800:	19db      	adds	r3, r3, r7
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d015      	beq.n	8004834 <UART_SetConfig+0x4d0>
 8004808:	dc18      	bgt.n	800483c <UART_SetConfig+0x4d8>
 800480a:	2b04      	cmp	r3, #4
 800480c:	d00d      	beq.n	800482a <UART_SetConfig+0x4c6>
 800480e:	dc15      	bgt.n	800483c <UART_SetConfig+0x4d8>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <UART_SetConfig+0x4b6>
 8004814:	2b02      	cmp	r3, #2
 8004816:	d005      	beq.n	8004824 <UART_SetConfig+0x4c0>
 8004818:	e010      	b.n	800483c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481a:	f7fe fc19 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 800481e:	0003      	movs	r3, r0
 8004820:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b2d      	ldr	r3, [pc, #180]	@ (80048dc <UART_SetConfig+0x578>)
 8004826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004828:	e011      	b.n	800484e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe fb85 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 800482e:	0003      	movs	r3, r0
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004832:	e00c      	b.n	800484e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800483a:	e008      	b.n	800484e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004840:	231a      	movs	r3, #26
 8004842:	2220      	movs	r2, #32
 8004844:	189b      	adds	r3, r3, r2
 8004846:	19db      	adds	r3, r3, r7
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
        break;
 800484c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800484e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02a      	beq.n	80048aa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004858:	4b1f      	ldr	r3, [pc, #124]	@ (80048d8 <UART_SetConfig+0x574>)
 800485a:	0052      	lsls	r2, r2, #1
 800485c:	5ad3      	ldrh	r3, [r2, r3]
 800485e:	0019      	movs	r1, r3
 8004860:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004862:	f7fb fc61 	bl	8000128 <__udivsi3>
 8004866:	0003      	movs	r3, r0
 8004868:	001a      	movs	r2, r3
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	18d2      	adds	r2, r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	0019      	movs	r1, r3
 8004878:	0010      	movs	r0, r2
 800487a:	f7fb fc55 	bl	8000128 <__udivsi3>
 800487e:	0003      	movs	r3, r0
 8004880:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d90a      	bls.n	800489e <UART_SetConfig+0x53a>
 8004888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	025b      	lsls	r3, r3, #9
 800488e:	429a      	cmp	r2, r3
 8004890:	d205      	bcs.n	800489e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004894:	b29a      	uxth	r2, r3
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e005      	b.n	80048aa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800489e:	231a      	movs	r3, #26
 80048a0:	2220      	movs	r2, #32
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	19db      	adds	r3, r3, r7
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	226a      	movs	r2, #106	@ 0x6a
 80048ae:	2101      	movs	r1, #1
 80048b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	2268      	movs	r2, #104	@ 0x68
 80048b6:	2101      	movs	r1, #1
 80048b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	2200      	movs	r2, #0
 80048be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2200      	movs	r2, #0
 80048c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80048c6:	231a      	movs	r3, #26
 80048c8:	2220      	movs	r2, #32
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	19db      	adds	r3, r3, r7
 80048ce:	781b      	ldrb	r3, [r3, #0]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b010      	add	sp, #64	@ 0x40
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}
 80048d8:	080059b8 	.word	0x080059b8
 80048dc:	00f42400 	.word	0x00f42400

080048e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	2208      	movs	r2, #8
 80048ee:	4013      	ands	r3, r2
 80048f0:	d00b      	beq.n	800490a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004a24 <UART_AdvFeatureConfig+0x144>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490e:	2201      	movs	r2, #1
 8004910:	4013      	ands	r3, r2
 8004912:	d00b      	beq.n	800492c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <UART_AdvFeatureConfig+0x148>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004930:	2202      	movs	r2, #2
 8004932:	4013      	ands	r3, r2
 8004934:	d00b      	beq.n	800494e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a3b      	ldr	r2, [pc, #236]	@ (8004a2c <UART_AdvFeatureConfig+0x14c>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	2204      	movs	r2, #4
 8004954:	4013      	ands	r3, r2
 8004956:	d00b      	beq.n	8004970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a34      	ldr	r2, [pc, #208]	@ (8004a30 <UART_AdvFeatureConfig+0x150>)
 8004960:	4013      	ands	r3, r2
 8004962:	0019      	movs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	2210      	movs	r2, #16
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4a2c      	ldr	r2, [pc, #176]	@ (8004a34 <UART_AdvFeatureConfig+0x154>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004996:	2220      	movs	r2, #32
 8004998:	4013      	ands	r3, r2
 800499a:	d00b      	beq.n	80049b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	4a25      	ldr	r2, [pc, #148]	@ (8004a38 <UART_AdvFeatureConfig+0x158>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	2240      	movs	r2, #64	@ 0x40
 80049ba:	4013      	ands	r3, r2
 80049bc:	d01d      	beq.n	80049fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <UART_AdvFeatureConfig+0x15c>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	035b      	lsls	r3, r3, #13
 80049de:	429a      	cmp	r2, r3
 80049e0:	d10b      	bne.n	80049fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <UART_AdvFeatureConfig+0x160>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	4013      	ands	r3, r2
 8004a02:	d00b      	beq.n	8004a1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <UART_AdvFeatureConfig+0x164>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	ffff7fff 	.word	0xffff7fff
 8004a28:	fffdffff 	.word	0xfffdffff
 8004a2c:	fffeffff 	.word	0xfffeffff
 8004a30:	fffbffff 	.word	0xfffbffff
 8004a34:	ffffefff 	.word	0xffffefff
 8004a38:	ffffdfff 	.word	0xffffdfff
 8004a3c:	ffefffff 	.word	0xffefffff
 8004a40:	ff9fffff 	.word	0xff9fffff
 8004a44:	fff7ffff 	.word	0xfff7ffff

08004a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b092      	sub	sp, #72	@ 0x48
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2290      	movs	r2, #144	@ 0x90
 8004a54:	2100      	movs	r1, #0
 8004a56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a58:	f7fc fd58 	bl	800150c <HAL_GetTick>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2208      	movs	r2, #8
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d12d      	bne.n	8004aca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a70:	2280      	movs	r2, #128	@ 0x80
 8004a72:	0391      	lsls	r1, r2, #14
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4a47      	ldr	r2, [pc, #284]	@ (8004b94 <UART_CheckIdleState+0x14c>)
 8004a78:	9200      	str	r2, [sp, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f000 f88e 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d022      	beq.n	8004aca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a84:	f3ef 8310 	mrs	r3, PRIMASK
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a8e:	2301      	movs	r3, #1
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			@ (mov r8, r8)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	438a      	bics	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab0:	f383 8810 	msr	PRIMASK, r3
}
 8004ab4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2288      	movs	r2, #136	@ 0x88
 8004aba:	2120      	movs	r1, #32
 8004abc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2284      	movs	r2, #132	@ 0x84
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e060      	b.n	8004b8c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d146      	bne.n	8004b66 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	03d1      	lsls	r1, r2, #15
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b94 <UART_CheckIdleState+0x14c>)
 8004ae2:	9200      	str	r2, [sp, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f000 f859 	bl	8004b9c <UART_WaitOnFlagUntilTimeout>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d03b      	beq.n	8004b66 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aee:	f3ef 8310 	mrs	r3, PRIMASK
 8004af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004af4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af8:	2301      	movs	r3, #1
 8004afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f383 8810 	msr	PRIMASK, r3
}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4922      	ldr	r1, [pc, #136]	@ (8004b98 <UART_CheckIdleState+0x150>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f383 8810 	msr	PRIMASK, r3
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b20:	f3ef 8310 	mrs	r3, PRIMASK
 8004b24:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b26:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f383 8810 	msr	PRIMASK, r3
}
 8004b34:	46c0      	nop			@ (mov r8, r8)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2101      	movs	r1, #1
 8004b42:	438a      	bics	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f383 8810 	msr	PRIMASK, r3
}
 8004b50:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	228c      	movs	r2, #140	@ 0x8c
 8004b56:	2120      	movs	r1, #32
 8004b58:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2284      	movs	r2, #132	@ 0x84
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e012      	b.n	8004b8c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2288      	movs	r2, #136	@ 0x88
 8004b6a:	2120      	movs	r1, #32
 8004b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	228c      	movs	r2, #140	@ 0x8c
 8004b72:	2120      	movs	r1, #32
 8004b74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2284      	movs	r2, #132	@ 0x84
 8004b86:	2100      	movs	r1, #0
 8004b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b010      	add	sp, #64	@ 0x40
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	01ffffff 	.word	0x01ffffff
 8004b98:	fffffedf 	.word	0xfffffedf

08004b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bac:	e051      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	d04e      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb4:	f7fc fcaa 	bl	800150c <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d302      	bcc.n	8004bca <UART_WaitOnFlagUntilTimeout+0x2e>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e051      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d03b      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b80      	cmp	r3, #128	@ 0x80
 8004bde:	d038      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b40      	cmp	r3, #64	@ 0x40
 8004be4:	d035      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2208      	movs	r2, #8
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d111      	bne.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 f83c 	bl	8004c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2290      	movs	r2, #144	@ 0x90
 8004c08:	2108      	movs	r1, #8
 8004c0a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2284      	movs	r2, #132	@ 0x84
 8004c10:	2100      	movs	r1, #0
 8004c12:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e02c      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	2380      	movs	r3, #128	@ 0x80
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	401a      	ands	r2, r3
 8004c24:	2380      	movs	r3, #128	@ 0x80
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d112      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2280      	movs	r2, #128	@ 0x80
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f000 f81f 	bl	8004c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2290      	movs	r2, #144	@ 0x90
 8004c42:	2120      	movs	r1, #32
 8004c44:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2284      	movs	r2, #132	@ 0x84
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	425a      	negs	r2, r3
 8004c62:	4153      	adcs	r3, r2
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	001a      	movs	r2, r3
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d09e      	beq.n	8004bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	@ 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c84:	f3ef 8310 	mrs	r3, PRIMASK
 8004c88:	617b      	str	r3, [r7, #20]
  return(result);
 8004c8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			@ (mov r8, r8)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4926      	ldr	r1, [pc, #152]	@ (8004d40 <UART_EndRxTransfer+0xc4>)
 8004ca6:	400a      	ands	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cba:	623b      	str	r3, [r7, #32]
  return(result);
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	f383 8810 	msr	PRIMASK, r3
}
 8004cca:	46c0      	nop			@ (mov r8, r8)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	491b      	ldr	r1, [pc, #108]	@ (8004d44 <UART_EndRxTransfer+0xc8>)
 8004cd8:	400a      	ands	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d118      	bne.n	8004d22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2110      	movs	r1, #16
 8004d12:	438a      	bics	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	228c      	movs	r2, #140	@ 0x8c
 8004d26:	2120      	movs	r1, #32
 8004d28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d36:	46c0      	nop			@ (mov r8, r8)
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b00e      	add	sp, #56	@ 0x38
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			@ (mov r8, r8)
 8004d40:	fffffedf 	.word	0xfffffedf
 8004d44:	effffffe 	.word	0xeffffffe

08004d48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2284      	movs	r2, #132	@ 0x84
 8004d54:	5c9b      	ldrb	r3, [r3, r2]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e027      	b.n	8004dae <HAL_UARTEx_DisableFifoMode+0x66>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2284      	movs	r2, #132	@ 0x84
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2288      	movs	r2, #136	@ 0x88
 8004d6a:	2124      	movs	r1, #36	@ 0x24
 8004d6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	438a      	bics	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a0b      	ldr	r2, [pc, #44]	@ (8004db8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2288      	movs	r2, #136	@ 0x88
 8004da0:	2120      	movs	r1, #32
 8004da2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2284      	movs	r2, #132	@ 0x84
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b004      	add	sp, #16
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	dfffffff 	.word	0xdfffffff

08004dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2284      	movs	r2, #132	@ 0x84
 8004dca:	5c9b      	ldrb	r3, [r3, r2]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e02e      	b.n	8004e32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2284      	movs	r2, #132	@ 0x84
 8004dd8:	2101      	movs	r1, #1
 8004dda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2288      	movs	r2, #136	@ 0x88
 8004de0:	2124      	movs	r1, #36	@ 0x24
 8004de2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2101      	movs	r1, #1
 8004df8:	438a      	bics	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	08d9      	lsrs	r1, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	0018      	movs	r0, r3
 8004e14:	f000 f854 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2288      	movs	r2, #136	@ 0x88
 8004e24:	2120      	movs	r1, #32
 8004e26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2284      	movs	r2, #132	@ 0x84
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	0018      	movs	r0, r3
 8004e34:	46bd      	mov	sp, r7
 8004e36:	b004      	add	sp, #16
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2284      	movs	r2, #132	@ 0x84
 8004e4a:	5c9b      	ldrb	r3, [r3, r2]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e02f      	b.n	8004eb4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2284      	movs	r2, #132	@ 0x84
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2288      	movs	r2, #136	@ 0x88
 8004e60:	2124      	movs	r1, #36	@ 0x24
 8004e62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	438a      	bics	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	@ (8004ebc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	0019      	movs	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 f813 	bl	8004ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2288      	movs	r2, #136	@ 0x88
 8004ea6:	2120      	movs	r1, #32
 8004ea8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2284      	movs	r2, #132	@ 0x84
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	f1ffffff 	.word	0xf1ffffff

08004ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d108      	bne.n	8004ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	226a      	movs	r2, #106	@ 0x6a
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2268      	movs	r2, #104	@ 0x68
 8004edc:	2101      	movs	r1, #1
 8004ede:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ee0:	e043      	b.n	8004f6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ee2:	260f      	movs	r6, #15
 8004ee4:	19bb      	adds	r3, r7, r6
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eea:	200e      	movs	r0, #14
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	2208      	movs	r2, #8
 8004ef0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	0e5b      	lsrs	r3, r3, #25
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	240d      	movs	r4, #13
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2107      	movs	r1, #7
 8004f02:	400a      	ands	r2, r1
 8004f04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	0f5b      	lsrs	r3, r3, #29
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	250c      	movs	r5, #12
 8004f12:	197b      	adds	r3, r7, r5
 8004f14:	2107      	movs	r1, #7
 8004f16:	400a      	ands	r2, r1
 8004f18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f1a:	183b      	adds	r3, r7, r0
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	197a      	adds	r2, r7, r5
 8004f20:	7812      	ldrb	r2, [r2, #0]
 8004f22:	4914      	ldr	r1, [pc, #80]	@ (8004f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f24:	5c8a      	ldrb	r2, [r1, r2]
 8004f26:	435a      	muls	r2, r3
 8004f28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f2a:	197b      	adds	r3, r7, r5
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f32:	0019      	movs	r1, r3
 8004f34:	f7fb f982 	bl	800023c <__divsi3>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	b299      	uxth	r1, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	226a      	movs	r2, #106	@ 0x6a
 8004f40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f42:	19bb      	adds	r3, r7, r6
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	193a      	adds	r2, r7, r4
 8004f48:	7812      	ldrb	r2, [r2, #0]
 8004f4a:	490a      	ldr	r1, [pc, #40]	@ (8004f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8004f4c:	5c8a      	ldrb	r2, [r1, r2]
 8004f4e:	435a      	muls	r2, r3
 8004f50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	4a08      	ldr	r2, [pc, #32]	@ (8004f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8004f58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	f7fb f96e 	bl	800023c <__divsi3>
 8004f60:	0003      	movs	r3, r0
 8004f62:	b299      	uxth	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2268      	movs	r2, #104	@ 0x68
 8004f68:	5299      	strh	r1, [r3, r2]
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b005      	add	sp, #20
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	080059d0 	.word	0x080059d0
 8004f78:	080059d8 	.word	0x080059d8

08004f7c <siprintf>:
 8004f7c:	b40e      	push	{r1, r2, r3}
 8004f7e:	b500      	push	{lr}
 8004f80:	490b      	ldr	r1, [pc, #44]	@ (8004fb0 <siprintf+0x34>)
 8004f82:	b09c      	sub	sp, #112	@ 0x70
 8004f84:	ab1d      	add	r3, sp, #116	@ 0x74
 8004f86:	9002      	str	r0, [sp, #8]
 8004f88:	9006      	str	r0, [sp, #24]
 8004f8a:	9107      	str	r1, [sp, #28]
 8004f8c:	9104      	str	r1, [sp, #16]
 8004f8e:	4809      	ldr	r0, [pc, #36]	@ (8004fb4 <siprintf+0x38>)
 8004f90:	4909      	ldr	r1, [pc, #36]	@ (8004fb8 <siprintf+0x3c>)
 8004f92:	cb04      	ldmia	r3!, {r2}
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	a902      	add	r1, sp, #8
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f000 f99e 	bl	80052dc <_svfiprintf_r>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	b01c      	add	sp, #112	@ 0x70
 8004fa8:	bc08      	pop	{r3}
 8004faa:	b003      	add	sp, #12
 8004fac:	4718      	bx	r3
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	7fffffff 	.word	0x7fffffff
 8004fb4:	20000024 	.word	0x20000024
 8004fb8:	ffff0208 	.word	0xffff0208

08004fbc <memset>:
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	1882      	adds	r2, r0, r2
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d100      	bne.n	8004fc6 <memset+0xa>
 8004fc4:	4770      	bx	lr
 8004fc6:	7019      	strb	r1, [r3, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	e7f9      	b.n	8004fc0 <memset+0x4>

08004fcc <__errno>:
 8004fcc:	4b01      	ldr	r3, [pc, #4]	@ (8004fd4 <__errno+0x8>)
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	4770      	bx	lr
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	20000024 	.word	0x20000024

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	2600      	movs	r6, #0
 8004fdc:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x38>)
 8004fde:	4d0d      	ldr	r5, [pc, #52]	@ (8005014 <__libc_init_array+0x3c>)
 8004fe0:	1b64      	subs	r4, r4, r5
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	2600      	movs	r6, #0
 8004fea:	f000 fc65 	bl	80058b8 <_init>
 8004fee:	4c0a      	ldr	r4, [pc, #40]	@ (8005018 <__libc_init_array+0x40>)
 8004ff0:	4d0a      	ldr	r5, [pc, #40]	@ (800501c <__libc_init_array+0x44>)
 8004ff2:	1b64      	subs	r4, r4, r5
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	00b3      	lsls	r3, r6, #2
 8004ffe:	58eb      	ldr	r3, [r5, r3]
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	00b3      	lsls	r3, r6, #2
 8005008:	58eb      	ldr	r3, [r5, r3]
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	08005a1c 	.word	0x08005a1c
 8005014:	08005a1c 	.word	0x08005a1c
 8005018:	08005a20 	.word	0x08005a20
 800501c:	08005a1c 	.word	0x08005a1c

08005020 <__retarget_lock_acquire_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_release_recursive>:
 8005022:	4770      	bx	lr

08005024 <_free_r>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	0005      	movs	r5, r0
 8005028:	1e0c      	subs	r4, r1, #0
 800502a:	d010      	beq.n	800504e <_free_r+0x2a>
 800502c:	3c04      	subs	r4, #4
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	da00      	bge.n	8005036 <_free_r+0x12>
 8005034:	18e4      	adds	r4, r4, r3
 8005036:	0028      	movs	r0, r5
 8005038:	f000 f8e0 	bl	80051fc <__malloc_lock>
 800503c:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <_free_r+0x90>)
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d105      	bne.n	8005050 <_free_r+0x2c>
 8005044:	6063      	str	r3, [r4, #4]
 8005046:	6014      	str	r4, [r2, #0]
 8005048:	0028      	movs	r0, r5
 800504a:	f000 f8df 	bl	800520c <__malloc_unlock>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	42a3      	cmp	r3, r4
 8005052:	d908      	bls.n	8005066 <_free_r+0x42>
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	1821      	adds	r1, r4, r0
 8005058:	428b      	cmp	r3, r1
 800505a:	d1f3      	bne.n	8005044 <_free_r+0x20>
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	1809      	adds	r1, r1, r0
 8005062:	6021      	str	r1, [r4, #0]
 8005064:	e7ee      	b.n	8005044 <_free_r+0x20>
 8005066:	001a      	movs	r2, r3
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <_free_r+0x4e>
 800506e:	42a3      	cmp	r3, r4
 8005070:	d9f9      	bls.n	8005066 <_free_r+0x42>
 8005072:	6811      	ldr	r1, [r2, #0]
 8005074:	1850      	adds	r0, r2, r1
 8005076:	42a0      	cmp	r0, r4
 8005078:	d10b      	bne.n	8005092 <_free_r+0x6e>
 800507a:	6820      	ldr	r0, [r4, #0]
 800507c:	1809      	adds	r1, r1, r0
 800507e:	1850      	adds	r0, r2, r1
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	4283      	cmp	r3, r0
 8005084:	d1e0      	bne.n	8005048 <_free_r+0x24>
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	1841      	adds	r1, r0, r1
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	6053      	str	r3, [r2, #4]
 8005090:	e7da      	b.n	8005048 <_free_r+0x24>
 8005092:	42a0      	cmp	r0, r4
 8005094:	d902      	bls.n	800509c <_free_r+0x78>
 8005096:	230c      	movs	r3, #12
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	e7d5      	b.n	8005048 <_free_r+0x24>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	1821      	adds	r1, r4, r0
 80050a0:	428b      	cmp	r3, r1
 80050a2:	d103      	bne.n	80050ac <_free_r+0x88>
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	1809      	adds	r1, r1, r0
 80050aa:	6021      	str	r1, [r4, #0]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	6054      	str	r4, [r2, #4]
 80050b0:	e7ca      	b.n	8005048 <_free_r+0x24>
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	200003ec 	.word	0x200003ec

080050b8 <sbrk_aligned>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4e0f      	ldr	r6, [pc, #60]	@ (80050f8 <sbrk_aligned+0x40>)
 80050bc:	000d      	movs	r5, r1
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	0004      	movs	r4, r0
 80050c2:	2900      	cmp	r1, #0
 80050c4:	d102      	bne.n	80050cc <sbrk_aligned+0x14>
 80050c6:	f000 fb99 	bl	80057fc <_sbrk_r>
 80050ca:	6030      	str	r0, [r6, #0]
 80050cc:	0029      	movs	r1, r5
 80050ce:	0020      	movs	r0, r4
 80050d0:	f000 fb94 	bl	80057fc <_sbrk_r>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d103      	bne.n	80050e0 <sbrk_aligned+0x28>
 80050d8:	2501      	movs	r5, #1
 80050da:	426d      	negs	r5, r5
 80050dc:	0028      	movs	r0, r5
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	2303      	movs	r3, #3
 80050e2:	1cc5      	adds	r5, r0, #3
 80050e4:	439d      	bics	r5, r3
 80050e6:	42a8      	cmp	r0, r5
 80050e8:	d0f8      	beq.n	80050dc <sbrk_aligned+0x24>
 80050ea:	1a29      	subs	r1, r5, r0
 80050ec:	0020      	movs	r0, r4
 80050ee:	f000 fb85 	bl	80057fc <_sbrk_r>
 80050f2:	3001      	adds	r0, #1
 80050f4:	d1f2      	bne.n	80050dc <sbrk_aligned+0x24>
 80050f6:	e7ef      	b.n	80050d8 <sbrk_aligned+0x20>
 80050f8:	200003e8 	.word	0x200003e8

080050fc <_malloc_r>:
 80050fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fe:	2203      	movs	r2, #3
 8005100:	1ccb      	adds	r3, r1, #3
 8005102:	4393      	bics	r3, r2
 8005104:	3308      	adds	r3, #8
 8005106:	0005      	movs	r5, r0
 8005108:	001f      	movs	r7, r3
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d234      	bcs.n	8005178 <_malloc_r+0x7c>
 800510e:	270c      	movs	r7, #12
 8005110:	42b9      	cmp	r1, r7
 8005112:	d833      	bhi.n	800517c <_malloc_r+0x80>
 8005114:	0028      	movs	r0, r5
 8005116:	f000 f871 	bl	80051fc <__malloc_lock>
 800511a:	4e37      	ldr	r6, [pc, #220]	@ (80051f8 <_malloc_r+0xfc>)
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	001c      	movs	r4, r3
 8005120:	2c00      	cmp	r4, #0
 8005122:	d12f      	bne.n	8005184 <_malloc_r+0x88>
 8005124:	0039      	movs	r1, r7
 8005126:	0028      	movs	r0, r5
 8005128:	f7ff ffc6 	bl	80050b8 <sbrk_aligned>
 800512c:	0004      	movs	r4, r0
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	d15f      	bne.n	80051f2 <_malloc_r+0xf6>
 8005132:	6834      	ldr	r4, [r6, #0]
 8005134:	9400      	str	r4, [sp, #0]
 8005136:	9b00      	ldr	r3, [sp, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d14a      	bne.n	80051d2 <_malloc_r+0xd6>
 800513c:	2c00      	cmp	r4, #0
 800513e:	d052      	beq.n	80051e6 <_malloc_r+0xea>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	0028      	movs	r0, r5
 8005144:	18e3      	adds	r3, r4, r3
 8005146:	9900      	ldr	r1, [sp, #0]
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	f000 fb57 	bl	80057fc <_sbrk_r>
 800514e:	9b01      	ldr	r3, [sp, #4]
 8005150:	4283      	cmp	r3, r0
 8005152:	d148      	bne.n	80051e6 <_malloc_r+0xea>
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	0028      	movs	r0, r5
 8005158:	1aff      	subs	r7, r7, r3
 800515a:	0039      	movs	r1, r7
 800515c:	f7ff ffac 	bl	80050b8 <sbrk_aligned>
 8005160:	3001      	adds	r0, #1
 8005162:	d040      	beq.n	80051e6 <_malloc_r+0xea>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	19db      	adds	r3, r3, r7
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	2a00      	cmp	r2, #0
 8005170:	d133      	bne.n	80051da <_malloc_r+0xde>
 8005172:	9b00      	ldr	r3, [sp, #0]
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	e019      	b.n	80051ac <_malloc_r+0xb0>
 8005178:	2b00      	cmp	r3, #0
 800517a:	dac9      	bge.n	8005110 <_malloc_r+0x14>
 800517c:	230c      	movs	r3, #12
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	2000      	movs	r0, #0
 8005182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005184:	6821      	ldr	r1, [r4, #0]
 8005186:	1bc9      	subs	r1, r1, r7
 8005188:	d420      	bmi.n	80051cc <_malloc_r+0xd0>
 800518a:	290b      	cmp	r1, #11
 800518c:	d90a      	bls.n	80051a4 <_malloc_r+0xa8>
 800518e:	19e2      	adds	r2, r4, r7
 8005190:	6027      	str	r7, [r4, #0]
 8005192:	42a3      	cmp	r3, r4
 8005194:	d104      	bne.n	80051a0 <_malloc_r+0xa4>
 8005196:	6032      	str	r2, [r6, #0]
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	6011      	str	r1, [r2, #0]
 800519c:	6053      	str	r3, [r2, #4]
 800519e:	e005      	b.n	80051ac <_malloc_r+0xb0>
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	e7f9      	b.n	8005198 <_malloc_r+0x9c>
 80051a4:	6862      	ldr	r2, [r4, #4]
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	d10e      	bne.n	80051c8 <_malloc_r+0xcc>
 80051aa:	6032      	str	r2, [r6, #0]
 80051ac:	0028      	movs	r0, r5
 80051ae:	f000 f82d 	bl	800520c <__malloc_unlock>
 80051b2:	0020      	movs	r0, r4
 80051b4:	2207      	movs	r2, #7
 80051b6:	300b      	adds	r0, #11
 80051b8:	1d23      	adds	r3, r4, #4
 80051ba:	4390      	bics	r0, r2
 80051bc:	1ac2      	subs	r2, r0, r3
 80051be:	4298      	cmp	r0, r3
 80051c0:	d0df      	beq.n	8005182 <_malloc_r+0x86>
 80051c2:	1a1b      	subs	r3, r3, r0
 80051c4:	50a3      	str	r3, [r4, r2]
 80051c6:	e7dc      	b.n	8005182 <_malloc_r+0x86>
 80051c8:	605a      	str	r2, [r3, #4]
 80051ca:	e7ef      	b.n	80051ac <_malloc_r+0xb0>
 80051cc:	0023      	movs	r3, r4
 80051ce:	6864      	ldr	r4, [r4, #4]
 80051d0:	e7a6      	b.n	8005120 <_malloc_r+0x24>
 80051d2:	9c00      	ldr	r4, [sp, #0]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	e7ad      	b.n	8005136 <_malloc_r+0x3a>
 80051da:	001a      	movs	r2, r3
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	42a3      	cmp	r3, r4
 80051e0:	d1fb      	bne.n	80051da <_malloc_r+0xde>
 80051e2:	2300      	movs	r3, #0
 80051e4:	e7da      	b.n	800519c <_malloc_r+0xa0>
 80051e6:	230c      	movs	r3, #12
 80051e8:	0028      	movs	r0, r5
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f000 f80e 	bl	800520c <__malloc_unlock>
 80051f0:	e7c6      	b.n	8005180 <_malloc_r+0x84>
 80051f2:	6007      	str	r7, [r0, #0]
 80051f4:	e7da      	b.n	80051ac <_malloc_r+0xb0>
 80051f6:	46c0      	nop			@ (mov r8, r8)
 80051f8:	200003ec 	.word	0x200003ec

080051fc <__malloc_lock>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4802      	ldr	r0, [pc, #8]	@ (8005208 <__malloc_lock+0xc>)
 8005200:	f7ff ff0e 	bl	8005020 <__retarget_lock_acquire_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	200003e4 	.word	0x200003e4

0800520c <__malloc_unlock>:
 800520c:	b510      	push	{r4, lr}
 800520e:	4802      	ldr	r0, [pc, #8]	@ (8005218 <__malloc_unlock+0xc>)
 8005210:	f7ff ff07 	bl	8005022 <__retarget_lock_release_recursive>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	200003e4 	.word	0x200003e4

0800521c <__ssputs_r>:
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521e:	688e      	ldr	r6, [r1, #8]
 8005220:	b085      	sub	sp, #20
 8005222:	001f      	movs	r7, r3
 8005224:	000c      	movs	r4, r1
 8005226:	680b      	ldr	r3, [r1, #0]
 8005228:	9002      	str	r0, [sp, #8]
 800522a:	9203      	str	r2, [sp, #12]
 800522c:	42be      	cmp	r6, r7
 800522e:	d830      	bhi.n	8005292 <__ssputs_r+0x76>
 8005230:	210c      	movs	r1, #12
 8005232:	5e62      	ldrsh	r2, [r4, r1]
 8005234:	2190      	movs	r1, #144	@ 0x90
 8005236:	00c9      	lsls	r1, r1, #3
 8005238:	420a      	tst	r2, r1
 800523a:	d028      	beq.n	800528e <__ssputs_r+0x72>
 800523c:	2003      	movs	r0, #3
 800523e:	6921      	ldr	r1, [r4, #16]
 8005240:	1a5b      	subs	r3, r3, r1
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	6963      	ldr	r3, [r4, #20]
 8005246:	4343      	muls	r3, r0
 8005248:	9801      	ldr	r0, [sp, #4]
 800524a:	0fdd      	lsrs	r5, r3, #31
 800524c:	18ed      	adds	r5, r5, r3
 800524e:	1c7b      	adds	r3, r7, #1
 8005250:	181b      	adds	r3, r3, r0
 8005252:	106d      	asrs	r5, r5, #1
 8005254:	42ab      	cmp	r3, r5
 8005256:	d900      	bls.n	800525a <__ssputs_r+0x3e>
 8005258:	001d      	movs	r5, r3
 800525a:	0552      	lsls	r2, r2, #21
 800525c:	d528      	bpl.n	80052b0 <__ssputs_r+0x94>
 800525e:	0029      	movs	r1, r5
 8005260:	9802      	ldr	r0, [sp, #8]
 8005262:	f7ff ff4b 	bl	80050fc <_malloc_r>
 8005266:	1e06      	subs	r6, r0, #0
 8005268:	d02c      	beq.n	80052c4 <__ssputs_r+0xa8>
 800526a:	9a01      	ldr	r2, [sp, #4]
 800526c:	6921      	ldr	r1, [r4, #16]
 800526e:	f000 fae2 	bl	8005836 <memcpy>
 8005272:	89a2      	ldrh	r2, [r4, #12]
 8005274:	4b18      	ldr	r3, [pc, #96]	@ (80052d8 <__ssputs_r+0xbc>)
 8005276:	401a      	ands	r2, r3
 8005278:	2380      	movs	r3, #128	@ 0x80
 800527a:	4313      	orrs	r3, r2
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	9b01      	ldr	r3, [sp, #4]
 8005280:	6126      	str	r6, [r4, #16]
 8005282:	18f6      	adds	r6, r6, r3
 8005284:	6026      	str	r6, [r4, #0]
 8005286:	003e      	movs	r6, r7
 8005288:	6165      	str	r5, [r4, #20]
 800528a:	1aed      	subs	r5, r5, r3
 800528c:	60a5      	str	r5, [r4, #8]
 800528e:	42be      	cmp	r6, r7
 8005290:	d900      	bls.n	8005294 <__ssputs_r+0x78>
 8005292:	003e      	movs	r6, r7
 8005294:	0032      	movs	r2, r6
 8005296:	9903      	ldr	r1, [sp, #12]
 8005298:	6820      	ldr	r0, [r4, #0]
 800529a:	f000 fa9b 	bl	80057d4 <memmove>
 800529e:	2000      	movs	r0, #0
 80052a0:	68a3      	ldr	r3, [r4, #8]
 80052a2:	1b9b      	subs	r3, r3, r6
 80052a4:	60a3      	str	r3, [r4, #8]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	199b      	adds	r3, r3, r6
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	b005      	add	sp, #20
 80052ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052b0:	002a      	movs	r2, r5
 80052b2:	9802      	ldr	r0, [sp, #8]
 80052b4:	f000 fac8 	bl	8005848 <_realloc_r>
 80052b8:	1e06      	subs	r6, r0, #0
 80052ba:	d1e0      	bne.n	800527e <__ssputs_r+0x62>
 80052bc:	6921      	ldr	r1, [r4, #16]
 80052be:	9802      	ldr	r0, [sp, #8]
 80052c0:	f7ff feb0 	bl	8005024 <_free_r>
 80052c4:	230c      	movs	r3, #12
 80052c6:	2001      	movs	r0, #1
 80052c8:	9a02      	ldr	r2, [sp, #8]
 80052ca:	4240      	negs	r0, r0
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	89a2      	ldrh	r2, [r4, #12]
 80052d0:	3334      	adds	r3, #52	@ 0x34
 80052d2:	4313      	orrs	r3, r2
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	e7e9      	b.n	80052ac <__ssputs_r+0x90>
 80052d8:	fffffb7f 	.word	0xfffffb7f

080052dc <_svfiprintf_r>:
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052de:	b0a1      	sub	sp, #132	@ 0x84
 80052e0:	9003      	str	r0, [sp, #12]
 80052e2:	001d      	movs	r5, r3
 80052e4:	898b      	ldrh	r3, [r1, #12]
 80052e6:	000f      	movs	r7, r1
 80052e8:	0016      	movs	r6, r2
 80052ea:	061b      	lsls	r3, r3, #24
 80052ec:	d511      	bpl.n	8005312 <_svfiprintf_r+0x36>
 80052ee:	690b      	ldr	r3, [r1, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10e      	bne.n	8005312 <_svfiprintf_r+0x36>
 80052f4:	2140      	movs	r1, #64	@ 0x40
 80052f6:	f7ff ff01 	bl	80050fc <_malloc_r>
 80052fa:	6038      	str	r0, [r7, #0]
 80052fc:	6138      	str	r0, [r7, #16]
 80052fe:	2800      	cmp	r0, #0
 8005300:	d105      	bne.n	800530e <_svfiprintf_r+0x32>
 8005302:	230c      	movs	r3, #12
 8005304:	9a03      	ldr	r2, [sp, #12]
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	2001      	movs	r0, #1
 800530a:	4240      	negs	r0, r0
 800530c:	e0cf      	b.n	80054ae <_svfiprintf_r+0x1d2>
 800530e:	2340      	movs	r3, #64	@ 0x40
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	ac08      	add	r4, sp, #32
 8005316:	6163      	str	r3, [r4, #20]
 8005318:	3320      	adds	r3, #32
 800531a:	7663      	strb	r3, [r4, #25]
 800531c:	3310      	adds	r3, #16
 800531e:	76a3      	strb	r3, [r4, #26]
 8005320:	9507      	str	r5, [sp, #28]
 8005322:	0035      	movs	r5, r6
 8005324:	782b      	ldrb	r3, [r5, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <_svfiprintf_r+0x52>
 800532a:	2b25      	cmp	r3, #37	@ 0x25
 800532c:	d148      	bne.n	80053c0 <_svfiprintf_r+0xe4>
 800532e:	1bab      	subs	r3, r5, r6
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	42b5      	cmp	r5, r6
 8005334:	d00b      	beq.n	800534e <_svfiprintf_r+0x72>
 8005336:	0032      	movs	r2, r6
 8005338:	0039      	movs	r1, r7
 800533a:	9803      	ldr	r0, [sp, #12]
 800533c:	f7ff ff6e 	bl	800521c <__ssputs_r>
 8005340:	3001      	adds	r0, #1
 8005342:	d100      	bne.n	8005346 <_svfiprintf_r+0x6a>
 8005344:	e0ae      	b.n	80054a4 <_svfiprintf_r+0x1c8>
 8005346:	6963      	ldr	r3, [r4, #20]
 8005348:	9a05      	ldr	r2, [sp, #20]
 800534a:	189b      	adds	r3, r3, r2
 800534c:	6163      	str	r3, [r4, #20]
 800534e:	782b      	ldrb	r3, [r5, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d100      	bne.n	8005356 <_svfiprintf_r+0x7a>
 8005354:	e0a6      	b.n	80054a4 <_svfiprintf_r+0x1c8>
 8005356:	2201      	movs	r2, #1
 8005358:	2300      	movs	r3, #0
 800535a:	4252      	negs	r2, r2
 800535c:	6062      	str	r2, [r4, #4]
 800535e:	a904      	add	r1, sp, #16
 8005360:	3254      	adds	r2, #84	@ 0x54
 8005362:	1852      	adds	r2, r2, r1
 8005364:	1c6e      	adds	r6, r5, #1
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	60e3      	str	r3, [r4, #12]
 800536a:	60a3      	str	r3, [r4, #8]
 800536c:	7013      	strb	r3, [r2, #0]
 800536e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005370:	4b54      	ldr	r3, [pc, #336]	@ (80054c4 <_svfiprintf_r+0x1e8>)
 8005372:	2205      	movs	r2, #5
 8005374:	0018      	movs	r0, r3
 8005376:	7831      	ldrb	r1, [r6, #0]
 8005378:	9305      	str	r3, [sp, #20]
 800537a:	f000 fa51 	bl	8005820 <memchr>
 800537e:	1c75      	adds	r5, r6, #1
 8005380:	2800      	cmp	r0, #0
 8005382:	d11f      	bne.n	80053c4 <_svfiprintf_r+0xe8>
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	06d3      	lsls	r3, r2, #27
 8005388:	d504      	bpl.n	8005394 <_svfiprintf_r+0xb8>
 800538a:	2353      	movs	r3, #83	@ 0x53
 800538c:	a904      	add	r1, sp, #16
 800538e:	185b      	adds	r3, r3, r1
 8005390:	2120      	movs	r1, #32
 8005392:	7019      	strb	r1, [r3, #0]
 8005394:	0713      	lsls	r3, r2, #28
 8005396:	d504      	bpl.n	80053a2 <_svfiprintf_r+0xc6>
 8005398:	2353      	movs	r3, #83	@ 0x53
 800539a:	a904      	add	r1, sp, #16
 800539c:	185b      	adds	r3, r3, r1
 800539e:	212b      	movs	r1, #43	@ 0x2b
 80053a0:	7019      	strb	r1, [r3, #0]
 80053a2:	7833      	ldrb	r3, [r6, #0]
 80053a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a6:	d016      	beq.n	80053d6 <_svfiprintf_r+0xfa>
 80053a8:	0035      	movs	r5, r6
 80053aa:	2100      	movs	r1, #0
 80053ac:	200a      	movs	r0, #10
 80053ae:	68e3      	ldr	r3, [r4, #12]
 80053b0:	782a      	ldrb	r2, [r5, #0]
 80053b2:	1c6e      	adds	r6, r5, #1
 80053b4:	3a30      	subs	r2, #48	@ 0x30
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d950      	bls.n	800545c <_svfiprintf_r+0x180>
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d111      	bne.n	80053e2 <_svfiprintf_r+0x106>
 80053be:	e017      	b.n	80053f0 <_svfiprintf_r+0x114>
 80053c0:	3501      	adds	r5, #1
 80053c2:	e7af      	b.n	8005324 <_svfiprintf_r+0x48>
 80053c4:	9b05      	ldr	r3, [sp, #20]
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	1ac0      	subs	r0, r0, r3
 80053ca:	2301      	movs	r3, #1
 80053cc:	4083      	lsls	r3, r0
 80053ce:	4313      	orrs	r3, r2
 80053d0:	002e      	movs	r6, r5
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	e7cc      	b.n	8005370 <_svfiprintf_r+0x94>
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	1d19      	adds	r1, r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9107      	str	r1, [sp, #28]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db01      	blt.n	80053e6 <_svfiprintf_r+0x10a>
 80053e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e4:	e004      	b.n	80053f0 <_svfiprintf_r+0x114>
 80053e6:	425b      	negs	r3, r3
 80053e8:	60e3      	str	r3, [r4, #12]
 80053ea:	2302      	movs	r3, #2
 80053ec:	4313      	orrs	r3, r2
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	782b      	ldrb	r3, [r5, #0]
 80053f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80053f4:	d10c      	bne.n	8005410 <_svfiprintf_r+0x134>
 80053f6:	786b      	ldrb	r3, [r5, #1]
 80053f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fa:	d134      	bne.n	8005466 <_svfiprintf_r+0x18a>
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	3502      	adds	r5, #2
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	9207      	str	r2, [sp, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	da01      	bge.n	800540e <_svfiprintf_r+0x132>
 800540a:	2301      	movs	r3, #1
 800540c:	425b      	negs	r3, r3
 800540e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005410:	4e2d      	ldr	r6, [pc, #180]	@ (80054c8 <_svfiprintf_r+0x1ec>)
 8005412:	2203      	movs	r2, #3
 8005414:	0030      	movs	r0, r6
 8005416:	7829      	ldrb	r1, [r5, #0]
 8005418:	f000 fa02 	bl	8005820 <memchr>
 800541c:	2800      	cmp	r0, #0
 800541e:	d006      	beq.n	800542e <_svfiprintf_r+0x152>
 8005420:	2340      	movs	r3, #64	@ 0x40
 8005422:	1b80      	subs	r0, r0, r6
 8005424:	4083      	lsls	r3, r0
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	3501      	adds	r5, #1
 800542a:	4313      	orrs	r3, r2
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	7829      	ldrb	r1, [r5, #0]
 8005430:	2206      	movs	r2, #6
 8005432:	4826      	ldr	r0, [pc, #152]	@ (80054cc <_svfiprintf_r+0x1f0>)
 8005434:	1c6e      	adds	r6, r5, #1
 8005436:	7621      	strb	r1, [r4, #24]
 8005438:	f000 f9f2 	bl	8005820 <memchr>
 800543c:	2800      	cmp	r0, #0
 800543e:	d038      	beq.n	80054b2 <_svfiprintf_r+0x1d6>
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <_svfiprintf_r+0x1f4>)
 8005442:	2b00      	cmp	r3, #0
 8005444:	d122      	bne.n	800548c <_svfiprintf_r+0x1b0>
 8005446:	2207      	movs	r2, #7
 8005448:	9b07      	ldr	r3, [sp, #28]
 800544a:	3307      	adds	r3, #7
 800544c:	4393      	bics	r3, r2
 800544e:	3308      	adds	r3, #8
 8005450:	9307      	str	r3, [sp, #28]
 8005452:	6963      	ldr	r3, [r4, #20]
 8005454:	9a04      	ldr	r2, [sp, #16]
 8005456:	189b      	adds	r3, r3, r2
 8005458:	6163      	str	r3, [r4, #20]
 800545a:	e762      	b.n	8005322 <_svfiprintf_r+0x46>
 800545c:	4343      	muls	r3, r0
 800545e:	0035      	movs	r5, r6
 8005460:	2101      	movs	r1, #1
 8005462:	189b      	adds	r3, r3, r2
 8005464:	e7a4      	b.n	80053b0 <_svfiprintf_r+0xd4>
 8005466:	2300      	movs	r3, #0
 8005468:	200a      	movs	r0, #10
 800546a:	0019      	movs	r1, r3
 800546c:	3501      	adds	r5, #1
 800546e:	6063      	str	r3, [r4, #4]
 8005470:	782a      	ldrb	r2, [r5, #0]
 8005472:	1c6e      	adds	r6, r5, #1
 8005474:	3a30      	subs	r2, #48	@ 0x30
 8005476:	2a09      	cmp	r2, #9
 8005478:	d903      	bls.n	8005482 <_svfiprintf_r+0x1a6>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0c8      	beq.n	8005410 <_svfiprintf_r+0x134>
 800547e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005480:	e7c6      	b.n	8005410 <_svfiprintf_r+0x134>
 8005482:	4341      	muls	r1, r0
 8005484:	0035      	movs	r5, r6
 8005486:	2301      	movs	r3, #1
 8005488:	1889      	adds	r1, r1, r2
 800548a:	e7f1      	b.n	8005470 <_svfiprintf_r+0x194>
 800548c:	aa07      	add	r2, sp, #28
 800548e:	9200      	str	r2, [sp, #0]
 8005490:	0021      	movs	r1, r4
 8005492:	003a      	movs	r2, r7
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <_svfiprintf_r+0x1f8>)
 8005496:	9803      	ldr	r0, [sp, #12]
 8005498:	e000      	b.n	800549c <_svfiprintf_r+0x1c0>
 800549a:	bf00      	nop
 800549c:	9004      	str	r0, [sp, #16]
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	3301      	adds	r3, #1
 80054a2:	d1d6      	bne.n	8005452 <_svfiprintf_r+0x176>
 80054a4:	89bb      	ldrh	r3, [r7, #12]
 80054a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80054a8:	065b      	lsls	r3, r3, #25
 80054aa:	d500      	bpl.n	80054ae <_svfiprintf_r+0x1d2>
 80054ac:	e72c      	b.n	8005308 <_svfiprintf_r+0x2c>
 80054ae:	b021      	add	sp, #132	@ 0x84
 80054b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b2:	aa07      	add	r2, sp, #28
 80054b4:	9200      	str	r2, [sp, #0]
 80054b6:	0021      	movs	r1, r4
 80054b8:	003a      	movs	r2, r7
 80054ba:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <_svfiprintf_r+0x1f8>)
 80054bc:	9803      	ldr	r0, [sp, #12]
 80054be:	f000 f87b 	bl	80055b8 <_printf_i>
 80054c2:	e7eb      	b.n	800549c <_svfiprintf_r+0x1c0>
 80054c4:	080059e0 	.word	0x080059e0
 80054c8:	080059e6 	.word	0x080059e6
 80054cc:	080059ea 	.word	0x080059ea
 80054d0:	00000000 	.word	0x00000000
 80054d4:	0800521d 	.word	0x0800521d

080054d8 <_printf_common>:
 80054d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054da:	0016      	movs	r6, r2
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	688a      	ldr	r2, [r1, #8]
 80054e0:	690b      	ldr	r3, [r1, #16]
 80054e2:	000c      	movs	r4, r1
 80054e4:	9000      	str	r0, [sp, #0]
 80054e6:	4293      	cmp	r3, r2
 80054e8:	da00      	bge.n	80054ec <_printf_common+0x14>
 80054ea:	0013      	movs	r3, r2
 80054ec:	0022      	movs	r2, r4
 80054ee:	6033      	str	r3, [r6, #0]
 80054f0:	3243      	adds	r2, #67	@ 0x43
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	d001      	beq.n	80054fc <_printf_common+0x24>
 80054f8:	3301      	adds	r3, #1
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	069b      	lsls	r3, r3, #26
 8005500:	d502      	bpl.n	8005508 <_printf_common+0x30>
 8005502:	6833      	ldr	r3, [r6, #0]
 8005504:	3302      	adds	r3, #2
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	2306      	movs	r3, #6
 800550c:	0015      	movs	r5, r2
 800550e:	401d      	ands	r5, r3
 8005510:	421a      	tst	r2, r3
 8005512:	d027      	beq.n	8005564 <_printf_common+0x8c>
 8005514:	0023      	movs	r3, r4
 8005516:	3343      	adds	r3, #67	@ 0x43
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	1e5a      	subs	r2, r3, #1
 800551c:	4193      	sbcs	r3, r2
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	0692      	lsls	r2, r2, #26
 8005522:	d430      	bmi.n	8005586 <_printf_common+0xae>
 8005524:	0022      	movs	r2, r4
 8005526:	9901      	ldr	r1, [sp, #4]
 8005528:	9800      	ldr	r0, [sp, #0]
 800552a:	9d08      	ldr	r5, [sp, #32]
 800552c:	3243      	adds	r2, #67	@ 0x43
 800552e:	47a8      	blx	r5
 8005530:	3001      	adds	r0, #1
 8005532:	d025      	beq.n	8005580 <_printf_common+0xa8>
 8005534:	2206      	movs	r2, #6
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	2500      	movs	r5, #0
 800553a:	4013      	ands	r3, r2
 800553c:	2b04      	cmp	r3, #4
 800553e:	d105      	bne.n	800554c <_printf_common+0x74>
 8005540:	6833      	ldr	r3, [r6, #0]
 8005542:	68e5      	ldr	r5, [r4, #12]
 8005544:	1aed      	subs	r5, r5, r3
 8005546:	43eb      	mvns	r3, r5
 8005548:	17db      	asrs	r3, r3, #31
 800554a:	401d      	ands	r5, r3
 800554c:	68a3      	ldr	r3, [r4, #8]
 800554e:	6922      	ldr	r2, [r4, #16]
 8005550:	4293      	cmp	r3, r2
 8005552:	dd01      	ble.n	8005558 <_printf_common+0x80>
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	18ed      	adds	r5, r5, r3
 8005558:	2600      	movs	r6, #0
 800555a:	42b5      	cmp	r5, r6
 800555c:	d120      	bne.n	80055a0 <_printf_common+0xc8>
 800555e:	2000      	movs	r0, #0
 8005560:	e010      	b.n	8005584 <_printf_common+0xac>
 8005562:	3501      	adds	r5, #1
 8005564:	68e3      	ldr	r3, [r4, #12]
 8005566:	6832      	ldr	r2, [r6, #0]
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	42ab      	cmp	r3, r5
 800556c:	ddd2      	ble.n	8005514 <_printf_common+0x3c>
 800556e:	0022      	movs	r2, r4
 8005570:	2301      	movs	r3, #1
 8005572:	9901      	ldr	r1, [sp, #4]
 8005574:	9800      	ldr	r0, [sp, #0]
 8005576:	9f08      	ldr	r7, [sp, #32]
 8005578:	3219      	adds	r2, #25
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	d1f0      	bne.n	8005562 <_printf_common+0x8a>
 8005580:	2001      	movs	r0, #1
 8005582:	4240      	negs	r0, r0
 8005584:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005586:	2030      	movs	r0, #48	@ 0x30
 8005588:	18e1      	adds	r1, r4, r3
 800558a:	3143      	adds	r1, #67	@ 0x43
 800558c:	7008      	strb	r0, [r1, #0]
 800558e:	0021      	movs	r1, r4
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	3145      	adds	r1, #69	@ 0x45
 8005594:	7809      	ldrb	r1, [r1, #0]
 8005596:	18a2      	adds	r2, r4, r2
 8005598:	3243      	adds	r2, #67	@ 0x43
 800559a:	3302      	adds	r3, #2
 800559c:	7011      	strb	r1, [r2, #0]
 800559e:	e7c1      	b.n	8005524 <_printf_common+0x4c>
 80055a0:	0022      	movs	r2, r4
 80055a2:	2301      	movs	r3, #1
 80055a4:	9901      	ldr	r1, [sp, #4]
 80055a6:	9800      	ldr	r0, [sp, #0]
 80055a8:	9f08      	ldr	r7, [sp, #32]
 80055aa:	321a      	adds	r2, #26
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	d0e6      	beq.n	8005580 <_printf_common+0xa8>
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7d1      	b.n	800555a <_printf_common+0x82>
	...

080055b8 <_printf_i>:
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ba:	b08b      	sub	sp, #44	@ 0x2c
 80055bc:	9206      	str	r2, [sp, #24]
 80055be:	000a      	movs	r2, r1
 80055c0:	3243      	adds	r2, #67	@ 0x43
 80055c2:	9307      	str	r3, [sp, #28]
 80055c4:	9005      	str	r0, [sp, #20]
 80055c6:	9203      	str	r2, [sp, #12]
 80055c8:	7e0a      	ldrb	r2, [r1, #24]
 80055ca:	000c      	movs	r4, r1
 80055cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055ce:	2a78      	cmp	r2, #120	@ 0x78
 80055d0:	d809      	bhi.n	80055e6 <_printf_i+0x2e>
 80055d2:	2a62      	cmp	r2, #98	@ 0x62
 80055d4:	d80b      	bhi.n	80055ee <_printf_i+0x36>
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	d100      	bne.n	80055dc <_printf_i+0x24>
 80055da:	e0bc      	b.n	8005756 <_printf_i+0x19e>
 80055dc:	497b      	ldr	r1, [pc, #492]	@ (80057cc <_printf_i+0x214>)
 80055de:	9104      	str	r1, [sp, #16]
 80055e0:	2a58      	cmp	r2, #88	@ 0x58
 80055e2:	d100      	bne.n	80055e6 <_printf_i+0x2e>
 80055e4:	e090      	b.n	8005708 <_printf_i+0x150>
 80055e6:	0025      	movs	r5, r4
 80055e8:	3542      	adds	r5, #66	@ 0x42
 80055ea:	702a      	strb	r2, [r5, #0]
 80055ec:	e022      	b.n	8005634 <_printf_i+0x7c>
 80055ee:	0010      	movs	r0, r2
 80055f0:	3863      	subs	r0, #99	@ 0x63
 80055f2:	2815      	cmp	r0, #21
 80055f4:	d8f7      	bhi.n	80055e6 <_printf_i+0x2e>
 80055f6:	f7fa fd8d 	bl	8000114 <__gnu_thumb1_case_shi>
 80055fa:	0016      	.short	0x0016
 80055fc:	fff6001f 	.word	0xfff6001f
 8005600:	fff6fff6 	.word	0xfff6fff6
 8005604:	001ffff6 	.word	0x001ffff6
 8005608:	fff6fff6 	.word	0xfff6fff6
 800560c:	fff6fff6 	.word	0xfff6fff6
 8005610:	003600a1 	.word	0x003600a1
 8005614:	fff60080 	.word	0xfff60080
 8005618:	00b2fff6 	.word	0x00b2fff6
 800561c:	0036fff6 	.word	0x0036fff6
 8005620:	fff6fff6 	.word	0xfff6fff6
 8005624:	0084      	.short	0x0084
 8005626:	0025      	movs	r5, r4
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	3542      	adds	r5, #66	@ 0x42
 800562c:	1d11      	adds	r1, r2, #4
 800562e:	6019      	str	r1, [r3, #0]
 8005630:	6813      	ldr	r3, [r2, #0]
 8005632:	702b      	strb	r3, [r5, #0]
 8005634:	2301      	movs	r3, #1
 8005636:	e0a0      	b.n	800577a <_printf_i+0x1c2>
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	6809      	ldr	r1, [r1, #0]
 800563c:	1d02      	adds	r2, r0, #4
 800563e:	060d      	lsls	r5, r1, #24
 8005640:	d50b      	bpl.n	800565a <_printf_i+0xa2>
 8005642:	6806      	ldr	r6, [r0, #0]
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	2e00      	cmp	r6, #0
 8005648:	da03      	bge.n	8005652 <_printf_i+0x9a>
 800564a:	232d      	movs	r3, #45	@ 0x2d
 800564c:	9a03      	ldr	r2, [sp, #12]
 800564e:	4276      	negs	r6, r6
 8005650:	7013      	strb	r3, [r2, #0]
 8005652:	4b5e      	ldr	r3, [pc, #376]	@ (80057cc <_printf_i+0x214>)
 8005654:	270a      	movs	r7, #10
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	e018      	b.n	800568c <_printf_i+0xd4>
 800565a:	6806      	ldr	r6, [r0, #0]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	0649      	lsls	r1, r1, #25
 8005660:	d5f1      	bpl.n	8005646 <_printf_i+0x8e>
 8005662:	b236      	sxth	r6, r6
 8005664:	e7ef      	b.n	8005646 <_printf_i+0x8e>
 8005666:	6808      	ldr	r0, [r1, #0]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	c940      	ldmia	r1!, {r6}
 800566c:	0605      	lsls	r5, r0, #24
 800566e:	d402      	bmi.n	8005676 <_printf_i+0xbe>
 8005670:	0640      	lsls	r0, r0, #25
 8005672:	d500      	bpl.n	8005676 <_printf_i+0xbe>
 8005674:	b2b6      	uxth	r6, r6
 8005676:	6019      	str	r1, [r3, #0]
 8005678:	4b54      	ldr	r3, [pc, #336]	@ (80057cc <_printf_i+0x214>)
 800567a:	270a      	movs	r7, #10
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005680:	d100      	bne.n	8005684 <_printf_i+0xcc>
 8005682:	3f02      	subs	r7, #2
 8005684:	0023      	movs	r3, r4
 8005686:	2200      	movs	r2, #0
 8005688:	3343      	adds	r3, #67	@ 0x43
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	60a3      	str	r3, [r4, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	db03      	blt.n	800569c <_printf_i+0xe4>
 8005694:	2104      	movs	r1, #4
 8005696:	6822      	ldr	r2, [r4, #0]
 8005698:	438a      	bics	r2, r1
 800569a:	6022      	str	r2, [r4, #0]
 800569c:	2e00      	cmp	r6, #0
 800569e:	d102      	bne.n	80056a6 <_printf_i+0xee>
 80056a0:	9d03      	ldr	r5, [sp, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00c      	beq.n	80056c0 <_printf_i+0x108>
 80056a6:	9d03      	ldr	r5, [sp, #12]
 80056a8:	0030      	movs	r0, r6
 80056aa:	0039      	movs	r1, r7
 80056ac:	f7fa fdc2 	bl	8000234 <__aeabi_uidivmod>
 80056b0:	9b04      	ldr	r3, [sp, #16]
 80056b2:	3d01      	subs	r5, #1
 80056b4:	5c5b      	ldrb	r3, [r3, r1]
 80056b6:	702b      	strb	r3, [r5, #0]
 80056b8:	0033      	movs	r3, r6
 80056ba:	0006      	movs	r6, r0
 80056bc:	429f      	cmp	r7, r3
 80056be:	d9f3      	bls.n	80056a8 <_printf_i+0xf0>
 80056c0:	2f08      	cmp	r7, #8
 80056c2:	d109      	bne.n	80056d8 <_printf_i+0x120>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	07db      	lsls	r3, r3, #31
 80056c8:	d506      	bpl.n	80056d8 <_printf_i+0x120>
 80056ca:	6862      	ldr	r2, [r4, #4]
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	dc02      	bgt.n	80056d8 <_printf_i+0x120>
 80056d2:	2330      	movs	r3, #48	@ 0x30
 80056d4:	3d01      	subs	r5, #1
 80056d6:	702b      	strb	r3, [r5, #0]
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	1b5b      	subs	r3, r3, r5
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	9b07      	ldr	r3, [sp, #28]
 80056e0:	0021      	movs	r1, r4
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	9805      	ldr	r0, [sp, #20]
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	aa09      	add	r2, sp, #36	@ 0x24
 80056ea:	f7ff fef5 	bl	80054d8 <_printf_common>
 80056ee:	3001      	adds	r0, #1
 80056f0:	d148      	bne.n	8005784 <_printf_i+0x1cc>
 80056f2:	2001      	movs	r0, #1
 80056f4:	4240      	negs	r0, r0
 80056f6:	b00b      	add	sp, #44	@ 0x2c
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fa:	2220      	movs	r2, #32
 80056fc:	6809      	ldr	r1, [r1, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	6022      	str	r2, [r4, #0]
 8005702:	2278      	movs	r2, #120	@ 0x78
 8005704:	4932      	ldr	r1, [pc, #200]	@ (80057d0 <_printf_i+0x218>)
 8005706:	9104      	str	r1, [sp, #16]
 8005708:	0021      	movs	r1, r4
 800570a:	3145      	adds	r1, #69	@ 0x45
 800570c:	700a      	strb	r2, [r1, #0]
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	c940      	ldmia	r1!, {r6}
 8005714:	0610      	lsls	r0, r2, #24
 8005716:	d402      	bmi.n	800571e <_printf_i+0x166>
 8005718:	0650      	lsls	r0, r2, #25
 800571a:	d500      	bpl.n	800571e <_printf_i+0x166>
 800571c:	b2b6      	uxth	r6, r6
 800571e:	6019      	str	r1, [r3, #0]
 8005720:	07d3      	lsls	r3, r2, #31
 8005722:	d502      	bpl.n	800572a <_printf_i+0x172>
 8005724:	2320      	movs	r3, #32
 8005726:	4313      	orrs	r3, r2
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	2e00      	cmp	r6, #0
 800572c:	d001      	beq.n	8005732 <_printf_i+0x17a>
 800572e:	2710      	movs	r7, #16
 8005730:	e7a8      	b.n	8005684 <_printf_i+0xcc>
 8005732:	2220      	movs	r2, #32
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	4393      	bics	r3, r2
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	e7f8      	b.n	800572e <_printf_i+0x176>
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	680d      	ldr	r5, [r1, #0]
 8005740:	1d10      	adds	r0, r2, #4
 8005742:	6949      	ldr	r1, [r1, #20]
 8005744:	6018      	str	r0, [r3, #0]
 8005746:	6813      	ldr	r3, [r2, #0]
 8005748:	062e      	lsls	r6, r5, #24
 800574a:	d501      	bpl.n	8005750 <_printf_i+0x198>
 800574c:	6019      	str	r1, [r3, #0]
 800574e:	e002      	b.n	8005756 <_printf_i+0x19e>
 8005750:	066d      	lsls	r5, r5, #25
 8005752:	d5fb      	bpl.n	800574c <_printf_i+0x194>
 8005754:	8019      	strh	r1, [r3, #0]
 8005756:	2300      	movs	r3, #0
 8005758:	9d03      	ldr	r5, [sp, #12]
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	e7bf      	b.n	80056de <_printf_i+0x126>
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	1d11      	adds	r1, r2, #4
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	6815      	ldr	r5, [r2, #0]
 8005766:	2100      	movs	r1, #0
 8005768:	0028      	movs	r0, r5
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	f000 f858 	bl	8005820 <memchr>
 8005770:	2800      	cmp	r0, #0
 8005772:	d001      	beq.n	8005778 <_printf_i+0x1c0>
 8005774:	1b40      	subs	r0, r0, r5
 8005776:	6060      	str	r0, [r4, #4]
 8005778:	6863      	ldr	r3, [r4, #4]
 800577a:	6123      	str	r3, [r4, #16]
 800577c:	2300      	movs	r3, #0
 800577e:	9a03      	ldr	r2, [sp, #12]
 8005780:	7013      	strb	r3, [r2, #0]
 8005782:	e7ac      	b.n	80056de <_printf_i+0x126>
 8005784:	002a      	movs	r2, r5
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	9906      	ldr	r1, [sp, #24]
 800578a:	9805      	ldr	r0, [sp, #20]
 800578c:	9d07      	ldr	r5, [sp, #28]
 800578e:	47a8      	blx	r5
 8005790:	3001      	adds	r0, #1
 8005792:	d0ae      	beq.n	80056f2 <_printf_i+0x13a>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	d415      	bmi.n	80057c6 <_printf_i+0x20e>
 800579a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800579c:	68e0      	ldr	r0, [r4, #12]
 800579e:	4298      	cmp	r0, r3
 80057a0:	daa9      	bge.n	80056f6 <_printf_i+0x13e>
 80057a2:	0018      	movs	r0, r3
 80057a4:	e7a7      	b.n	80056f6 <_printf_i+0x13e>
 80057a6:	0022      	movs	r2, r4
 80057a8:	2301      	movs	r3, #1
 80057aa:	9906      	ldr	r1, [sp, #24]
 80057ac:	9805      	ldr	r0, [sp, #20]
 80057ae:	9e07      	ldr	r6, [sp, #28]
 80057b0:	3219      	adds	r2, #25
 80057b2:	47b0      	blx	r6
 80057b4:	3001      	adds	r0, #1
 80057b6:	d09c      	beq.n	80056f2 <_printf_i+0x13a>
 80057b8:	3501      	adds	r5, #1
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	dcf0      	bgt.n	80057a6 <_printf_i+0x1ee>
 80057c4:	e7e9      	b.n	800579a <_printf_i+0x1e2>
 80057c6:	2500      	movs	r5, #0
 80057c8:	e7f7      	b.n	80057ba <_printf_i+0x202>
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	080059f1 	.word	0x080059f1
 80057d0:	08005a02 	.word	0x08005a02

080057d4 <memmove>:
 80057d4:	b510      	push	{r4, lr}
 80057d6:	4288      	cmp	r0, r1
 80057d8:	d806      	bhi.n	80057e8 <memmove+0x14>
 80057da:	2300      	movs	r3, #0
 80057dc:	429a      	cmp	r2, r3
 80057de:	d008      	beq.n	80057f2 <memmove+0x1e>
 80057e0:	5ccc      	ldrb	r4, [r1, r3]
 80057e2:	54c4      	strb	r4, [r0, r3]
 80057e4:	3301      	adds	r3, #1
 80057e6:	e7f9      	b.n	80057dc <memmove+0x8>
 80057e8:	188b      	adds	r3, r1, r2
 80057ea:	4298      	cmp	r0, r3
 80057ec:	d2f5      	bcs.n	80057da <memmove+0x6>
 80057ee:	3a01      	subs	r2, #1
 80057f0:	d200      	bcs.n	80057f4 <memmove+0x20>
 80057f2:	bd10      	pop	{r4, pc}
 80057f4:	5c8b      	ldrb	r3, [r1, r2]
 80057f6:	5483      	strb	r3, [r0, r2]
 80057f8:	e7f9      	b.n	80057ee <memmove+0x1a>
	...

080057fc <_sbrk_r>:
 80057fc:	2300      	movs	r3, #0
 80057fe:	b570      	push	{r4, r5, r6, lr}
 8005800:	4d06      	ldr	r5, [pc, #24]	@ (800581c <_sbrk_r+0x20>)
 8005802:	0004      	movs	r4, r0
 8005804:	0008      	movs	r0, r1
 8005806:	602b      	str	r3, [r5, #0]
 8005808:	f7fb fd9e 	bl	8001348 <_sbrk>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d103      	bne.n	8005818 <_sbrk_r+0x1c>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d000      	beq.n	8005818 <_sbrk_r+0x1c>
 8005816:	6023      	str	r3, [r4, #0]
 8005818:	bd70      	pop	{r4, r5, r6, pc}
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	200003e0 	.word	0x200003e0

08005820 <memchr>:
 8005820:	b2c9      	uxtb	r1, r1
 8005822:	1882      	adds	r2, r0, r2
 8005824:	4290      	cmp	r0, r2
 8005826:	d101      	bne.n	800582c <memchr+0xc>
 8005828:	2000      	movs	r0, #0
 800582a:	4770      	bx	lr
 800582c:	7803      	ldrb	r3, [r0, #0]
 800582e:	428b      	cmp	r3, r1
 8005830:	d0fb      	beq.n	800582a <memchr+0xa>
 8005832:	3001      	adds	r0, #1
 8005834:	e7f6      	b.n	8005824 <memchr+0x4>

08005836 <memcpy>:
 8005836:	2300      	movs	r3, #0
 8005838:	b510      	push	{r4, lr}
 800583a:	429a      	cmp	r2, r3
 800583c:	d100      	bne.n	8005840 <memcpy+0xa>
 800583e:	bd10      	pop	{r4, pc}
 8005840:	5ccc      	ldrb	r4, [r1, r3]
 8005842:	54c4      	strb	r4, [r0, r3]
 8005844:	3301      	adds	r3, #1
 8005846:	e7f8      	b.n	800583a <memcpy+0x4>

08005848 <_realloc_r>:
 8005848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800584a:	0006      	movs	r6, r0
 800584c:	000c      	movs	r4, r1
 800584e:	0015      	movs	r5, r2
 8005850:	2900      	cmp	r1, #0
 8005852:	d105      	bne.n	8005860 <_realloc_r+0x18>
 8005854:	0011      	movs	r1, r2
 8005856:	f7ff fc51 	bl	80050fc <_malloc_r>
 800585a:	0004      	movs	r4, r0
 800585c:	0020      	movs	r0, r4
 800585e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005860:	2a00      	cmp	r2, #0
 8005862:	d103      	bne.n	800586c <_realloc_r+0x24>
 8005864:	f7ff fbde 	bl	8005024 <_free_r>
 8005868:	2400      	movs	r4, #0
 800586a:	e7f7      	b.n	800585c <_realloc_r+0x14>
 800586c:	f000 f81b 	bl	80058a6 <_malloc_usable_size_r>
 8005870:	0007      	movs	r7, r0
 8005872:	4285      	cmp	r5, r0
 8005874:	d802      	bhi.n	800587c <_realloc_r+0x34>
 8005876:	0843      	lsrs	r3, r0, #1
 8005878:	42ab      	cmp	r3, r5
 800587a:	d3ef      	bcc.n	800585c <_realloc_r+0x14>
 800587c:	0029      	movs	r1, r5
 800587e:	0030      	movs	r0, r6
 8005880:	f7ff fc3c 	bl	80050fc <_malloc_r>
 8005884:	9001      	str	r0, [sp, #4]
 8005886:	2800      	cmp	r0, #0
 8005888:	d0ee      	beq.n	8005868 <_realloc_r+0x20>
 800588a:	002a      	movs	r2, r5
 800588c:	42bd      	cmp	r5, r7
 800588e:	d900      	bls.n	8005892 <_realloc_r+0x4a>
 8005890:	003a      	movs	r2, r7
 8005892:	0021      	movs	r1, r4
 8005894:	9801      	ldr	r0, [sp, #4]
 8005896:	f7ff ffce 	bl	8005836 <memcpy>
 800589a:	0021      	movs	r1, r4
 800589c:	0030      	movs	r0, r6
 800589e:	f7ff fbc1 	bl	8005024 <_free_r>
 80058a2:	9c01      	ldr	r4, [sp, #4]
 80058a4:	e7da      	b.n	800585c <_realloc_r+0x14>

080058a6 <_malloc_usable_size_r>:
 80058a6:	1f0b      	subs	r3, r1, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1f18      	subs	r0, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da01      	bge.n	80058b4 <_malloc_usable_size_r+0xe>
 80058b0:	580b      	ldr	r3, [r1, r0]
 80058b2:	18c0      	adds	r0, r0, r3
 80058b4:	4770      	bx	lr
	...

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
