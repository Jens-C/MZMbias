
tia-testl476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b660  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013780  0800b7f0  0800b7f0  0000c7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ef70  0801ef70  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0801ef70  0801ef70  0001ff70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ef78  0801ef78  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ef78  0801ef78  0001ff78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ef7c  0801ef7c  0001ff7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801ef80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007584  20000060  0801efe0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200075e4  0801efe0  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185e9  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003176  00000000  00000000  00038677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffe  00000000  00000000  0003cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293ca  00000000  00000000  0003dd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190c7  00000000  00000000  00067108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108a7d  00000000  00000000  000801cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  00188c4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b8  00000000  00000000  00188d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0018f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037c6  00000000  00000000  0018f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  001929e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7d8 	.word	0x0800b7d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800b7d8 	.word	0x0800b7d8

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2iz>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d215      	bcs.n	8000c22 <__aeabi_d2iz+0x36>
 8000bf6:	d511      	bpl.n	8000c1c <__aeabi_d2iz+0x30>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d912      	bls.n	8000c28 <__aeabi_d2iz+0x3c>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d105      	bne.n	8000c34 <__aeabi_d2iz+0x48>
 8000c28:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2f>:
 8000c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c84:	bf24      	itt	cs
 8000c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c8e:	d90d      	bls.n	8000cac <__aeabi_d2f+0x30>
 8000c90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cb0:	d121      	bne.n	8000cf6 <__aeabi_d2f+0x7a>
 8000cb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cb6:	bfbc      	itt	lt
 8000cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	4770      	bxlt	lr
 8000cbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc6:	f1c2 0218 	rsb	r2, r2, #24
 8000cca:	f1c2 0c20 	rsb	ip, r2, #32
 8000cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	f040 0001 	orrne.w	r0, r0, #1
 8000cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce8:	ea40 000c 	orr.w	r0, r0, ip
 8000cec:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf4:	e7cc      	b.n	8000c90 <__aeabi_d2f+0x14>
 8000cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfa:	d107      	bne.n	8000d0c <__aeabi_d2f+0x90>
 8000cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d00:	bf1e      	ittt	ne
 8000d02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bxne	lr
 8000d0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_frsub>:
 8000d1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	e002      	b.n	8000d28 <__addsf3>
 8000d22:	bf00      	nop

08000d24 <__aeabi_fsub>:
 8000d24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d28 <__addsf3>:
 8000d28:	0042      	lsls	r2, r0, #1
 8000d2a:	bf1f      	itttt	ne
 8000d2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d30:	ea92 0f03 	teqne	r2, r3
 8000d34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3c:	d06a      	beq.n	8000e14 <__addsf3+0xec>
 8000d3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d46:	bfc1      	itttt	gt
 8000d48:	18d2      	addgt	r2, r2, r3
 8000d4a:	4041      	eorgt	r1, r0
 8000d4c:	4048      	eorgt	r0, r1
 8000d4e:	4041      	eorgt	r1, r0
 8000d50:	bfb8      	it	lt
 8000d52:	425b      	neglt	r3, r3
 8000d54:	2b19      	cmp	r3, #25
 8000d56:	bf88      	it	hi
 8000d58:	4770      	bxhi	lr
 8000d5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d66:	bf18      	it	ne
 8000d68:	4240      	negne	r0, r0
 8000d6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d76:	bf18      	it	ne
 8000d78:	4249      	negne	r1, r1
 8000d7a:	ea92 0f03 	teq	r2, r3
 8000d7e:	d03f      	beq.n	8000e00 <__addsf3+0xd8>
 8000d80:	f1a2 0201 	sub.w	r2, r2, #1
 8000d84:	fa41 fc03 	asr.w	ip, r1, r3
 8000d88:	eb10 000c 	adds.w	r0, r0, ip
 8000d8c:	f1c3 0320 	rsb	r3, r3, #32
 8000d90:	fa01 f103 	lsl.w	r1, r1, r3
 8000d94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d98:	d502      	bpl.n	8000da0 <__addsf3+0x78>
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000da0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000da4:	d313      	bcc.n	8000dce <__addsf3+0xa6>
 8000da6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000daa:	d306      	bcc.n	8000dba <__addsf3+0x92>
 8000dac:	0840      	lsrs	r0, r0, #1
 8000dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000db2:	f102 0201 	add.w	r2, r2, #1
 8000db6:	2afe      	cmp	r2, #254	@ 0xfe
 8000db8:	d251      	bcs.n	8000e5e <__addsf3+0x136>
 8000dba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	ea40 0003 	orr.w	r0, r0, r3
 8000dcc:	4770      	bx	lr
 8000dce:	0049      	lsls	r1, r1, #1
 8000dd0:	eb40 0000 	adc.w	r0, r0, r0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	bf28      	it	cs
 8000dd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ddc:	d2ed      	bcs.n	8000dba <__addsf3+0x92>
 8000dde:	fab0 fc80 	clz	ip, r0
 8000de2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000de6:	ebb2 020c 	subs.w	r2, r2, ip
 8000dea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dee:	bfaa      	itet	ge
 8000df0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000df4:	4252      	neglt	r2, r2
 8000df6:	4318      	orrge	r0, r3
 8000df8:	bfbc      	itt	lt
 8000dfa:	40d0      	lsrlt	r0, r2
 8000dfc:	4318      	orrlt	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	f092 0f00 	teq	r2, #0
 8000e04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e08:	bf06      	itte	eq
 8000e0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	3201      	addeq	r2, #1
 8000e10:	3b01      	subne	r3, #1
 8000e12:	e7b5      	b.n	8000d80 <__addsf3+0x58>
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d021      	beq.n	8000e68 <__addsf3+0x140>
 8000e24:	ea92 0f03 	teq	r2, r3
 8000e28:	d004      	beq.n	8000e34 <__addsf3+0x10c>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	bf08      	it	eq
 8000e30:	4608      	moveq	r0, r1
 8000e32:	4770      	bx	lr
 8000e34:	ea90 0f01 	teq	r0, r1
 8000e38:	bf1c      	itt	ne
 8000e3a:	2000      	movne	r0, #0
 8000e3c:	4770      	bxne	lr
 8000e3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e42:	d104      	bne.n	8000e4e <__addsf3+0x126>
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	bf28      	it	cs
 8000e48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e52:	bf3c      	itt	cc
 8000e54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e58:	4770      	bxcc	lr
 8000e5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e6c:	bf16      	itet	ne
 8000e6e:	4608      	movne	r0, r1
 8000e70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e74:	4601      	movne	r1, r0
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	bf06      	itte	eq
 8000e7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e7e:	ea90 0f01 	teqeq	r0, r1
 8000e82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_ui2f>:
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e004      	b.n	8000e98 <__aeabi_i2f+0x8>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_i2f>:
 8000e90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e94:	bf48      	it	mi
 8000e96:	4240      	negmi	r0, r0
 8000e98:	ea5f 0c00 	movs.w	ip, r0
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	e01c      	b.n	8000ee6 <__aeabi_l2f+0x2a>

08000eac <__aeabi_ul2f>:
 8000eac:	ea50 0201 	orrs.w	r2, r0, r1
 8000eb0:	bf08      	it	eq
 8000eb2:	4770      	bxeq	lr
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e00a      	b.n	8000ed0 <__aeabi_l2f+0x14>
 8000eba:	bf00      	nop

08000ebc <__aeabi_l2f>:
 8000ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ec0:	bf08      	it	eq
 8000ec2:	4770      	bxeq	lr
 8000ec4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_l2f+0x14>
 8000eca:	4240      	negs	r0, r0
 8000ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed0:	ea5f 0c01 	movs.w	ip, r1
 8000ed4:	bf02      	ittt	eq
 8000ed6:	4684      	moveq	ip, r0
 8000ed8:	4601      	moveq	r1, r0
 8000eda:	2000      	moveq	r0, #0
 8000edc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ee0:	bf08      	it	eq
 8000ee2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eea:	fabc f28c 	clz	r2, ip
 8000eee:	3a08      	subs	r2, #8
 8000ef0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ef4:	db10      	blt.n	8000f18 <__aeabi_l2f+0x5c>
 8000ef6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000efa:	4463      	add	r3, ip
 8000efc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f00:	f1c2 0220 	rsb	r2, r2, #32
 8000f04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	eb43 0002 	adc.w	r0, r3, r2
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f102 0220 	add.w	r2, r2, #32
 8000f1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f20:	f1c2 0220 	rsb	r2, r2, #32
 8000f24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f28:	fa21 f202 	lsr.w	r2, r1, r2
 8000f2c:	eb43 0002 	adc.w	r0, r3, r2
 8000f30:	bf08      	it	eq
 8000f32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fmul>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d06f      	beq.n	8001030 <__aeabi_fmul+0xf8>
 8000f50:	441a      	add	r2, r3
 8000f52:	ea80 0c01 	eor.w	ip, r0, r1
 8000f56:	0240      	lsls	r0, r0, #9
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000f5e:	d01e      	beq.n	8000f9e <__aeabi_fmul+0x66>
 8000f60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000f68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000f6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000f70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000f78:	bf3e      	ittt	cc
 8000f7a:	0049      	lslcc	r1, r1, #1
 8000f7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f80:	005b      	lslcc	r3, r3, #1
 8000f82:	ea40 0001 	orr.w	r0, r0, r1
 8000f86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000f8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000f8c:	d81d      	bhi.n	8000fca <__aeabi_fmul+0x92>
 8000f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f96:	bf08      	it	eq
 8000f98:	f020 0001 	biceq.w	r0, r0, #1
 8000f9c:	4770      	bx	lr
 8000f9e:	f090 0f00 	teq	r0, #0
 8000fa2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa6:	bf08      	it	eq
 8000fa8:	0249      	lsleq	r1, r1, #9
 8000faa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000fb2:	3a7f      	subs	r2, #127	@ 0x7f
 8000fb4:	bfc2      	ittt	gt
 8000fb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fbe:	4770      	bxgt	lr
 8000fc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	dc5d      	bgt.n	8001088 <__aeabi_fmul+0x150>
 8000fcc:	f112 0f19 	cmn.w	r2, #25
 8000fd0:	bfdc      	itt	le
 8000fd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000fd6:	4770      	bxle	lr
 8000fd8:	f1c2 0200 	rsb	r2, r2, #0
 8000fdc:	0041      	lsls	r1, r0, #1
 8000fde:	fa21 f102 	lsr.w	r1, r1, r2
 8000fe2:	f1c2 0220 	rsb	r2, r2, #32
 8000fe6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000fee:	f140 0000 	adc.w	r0, r0, #0
 8000ff2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ff6:	bf08      	it	eq
 8000ff8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ffc:	4770      	bx	lr
 8000ffe:	f092 0f00 	teq	r2, #0
 8001002:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0040      	lsleq	r0, r0, #1
 800100a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800100e:	3a01      	subeq	r2, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fmul+0xce>
 8001012:	ea40 000c 	orr.w	r0, r0, ip
 8001016:	f093 0f00 	teq	r3, #0
 800101a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800101e:	bf02      	ittt	eq
 8001020:	0049      	lsleq	r1, r1, #1
 8001022:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001026:	3b01      	subeq	r3, #1
 8001028:	d0f9      	beq.n	800101e <__aeabi_fmul+0xe6>
 800102a:	ea41 010c 	orr.w	r1, r1, ip
 800102e:	e78f      	b.n	8000f50 <__aeabi_fmul+0x18>
 8001030:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001034:	ea92 0f0c 	teq	r2, ip
 8001038:	bf18      	it	ne
 800103a:	ea93 0f0c 	teqne	r3, ip
 800103e:	d00a      	beq.n	8001056 <__aeabi_fmul+0x11e>
 8001040:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001044:	bf18      	it	ne
 8001046:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104a:	d1d8      	bne.n	8000ffe <__aeabi_fmul+0xc6>
 800104c:	ea80 0001 	eor.w	r0, r0, r1
 8001050:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001054:	4770      	bx	lr
 8001056:	f090 0f00 	teq	r0, #0
 800105a:	bf17      	itett	ne
 800105c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8001060:	4608      	moveq	r0, r1
 8001062:	f091 0f00 	teqne	r1, #0
 8001066:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800106a:	d014      	beq.n	8001096 <__aeabi_fmul+0x15e>
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d101      	bne.n	8001076 <__aeabi_fmul+0x13e>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d10f      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001076:	ea93 0f0c 	teq	r3, ip
 800107a:	d103      	bne.n	8001084 <__aeabi_fmul+0x14c>
 800107c:	024b      	lsls	r3, r1, #9
 800107e:	bf18      	it	ne
 8001080:	4608      	movne	r0, r1
 8001082:	d108      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001084:	ea80 0001 	eor.w	r0, r0, r1
 8001088:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800108c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001090:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001094:	4770      	bx	lr
 8001096:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800109a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800109e:	4770      	bx	lr

080010a0 <__aeabi_fdiv>:
 80010a0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80010a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80010a8:	bf1e      	ittt	ne
 80010aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80010ae:	ea92 0f0c 	teqne	r2, ip
 80010b2:	ea93 0f0c 	teqne	r3, ip
 80010b6:	d069      	beq.n	800118c <__aeabi_fdiv+0xec>
 80010b8:	eba2 0203 	sub.w	r2, r2, r3
 80010bc:	ea80 0c01 	eor.w	ip, r0, r1
 80010c0:	0249      	lsls	r1, r1, #9
 80010c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80010c6:	d037      	beq.n	8001138 <__aeabi_fdiv+0x98>
 80010c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80010d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80010d4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf38      	it	cc
 80010dc:	005b      	lslcc	r3, r3, #1
 80010de:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80010e2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80010e6:	428b      	cmp	r3, r1
 80010e8:	bf24      	itt	cs
 80010ea:	1a5b      	subcs	r3, r3, r1
 80010ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80010f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80010f4:	bf24      	itt	cs
 80010f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80010fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80010fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001102:	bf24      	itt	cs
 8001104:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800110c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001110:	bf24      	itt	cs
 8001112:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001116:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	bf18      	it	ne
 800111e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001122:	d1e0      	bne.n	80010e6 <__aeabi_fdiv+0x46>
 8001124:	2afd      	cmp	r2, #253	@ 0xfd
 8001126:	f63f af50 	bhi.w	8000fca <__aeabi_fmul+0x92>
 800112a:	428b      	cmp	r3, r1
 800112c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001130:	bf08      	it	eq
 8001132:	f020 0001 	biceq.w	r0, r0, #1
 8001136:	4770      	bx	lr
 8001138:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800113c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001140:	327f      	adds	r2, #127	@ 0x7f
 8001142:	bfc2      	ittt	gt
 8001144:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001148:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800114c:	4770      	bxgt	lr
 800114e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	3a01      	subs	r2, #1
 8001158:	e737      	b.n	8000fca <__aeabi_fmul+0x92>
 800115a:	f092 0f00 	teq	r2, #0
 800115e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001162:	bf02      	ittt	eq
 8001164:	0040      	lsleq	r0, r0, #1
 8001166:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800116a:	3a01      	subeq	r2, #1
 800116c:	d0f9      	beq.n	8001162 <__aeabi_fdiv+0xc2>
 800116e:	ea40 000c 	orr.w	r0, r0, ip
 8001172:	f093 0f00 	teq	r3, #0
 8001176:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800117a:	bf02      	ittt	eq
 800117c:	0049      	lsleq	r1, r1, #1
 800117e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001182:	3b01      	subeq	r3, #1
 8001184:	d0f9      	beq.n	800117a <__aeabi_fdiv+0xda>
 8001186:	ea41 010c 	orr.w	r1, r1, ip
 800118a:	e795      	b.n	80010b8 <__aeabi_fdiv+0x18>
 800118c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001190:	ea92 0f0c 	teq	r2, ip
 8001194:	d108      	bne.n	80011a8 <__aeabi_fdiv+0x108>
 8001196:	0242      	lsls	r2, r0, #9
 8001198:	f47f af7d 	bne.w	8001096 <__aeabi_fmul+0x15e>
 800119c:	ea93 0f0c 	teq	r3, ip
 80011a0:	f47f af70 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011a4:	4608      	mov	r0, r1
 80011a6:	e776      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011a8:	ea93 0f0c 	teq	r3, ip
 80011ac:	d104      	bne.n	80011b8 <__aeabi_fdiv+0x118>
 80011ae:	024b      	lsls	r3, r1, #9
 80011b0:	f43f af4c 	beq.w	800104c <__aeabi_fmul+0x114>
 80011b4:	4608      	mov	r0, r1
 80011b6:	e76e      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011b8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80011bc:	bf18      	it	ne
 80011be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80011c2:	d1ca      	bne.n	800115a <__aeabi_fdiv+0xba>
 80011c4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80011c8:	f47f af5c 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011cc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80011d0:	f47f af3c 	bne.w	800104c <__aeabi_fmul+0x114>
 80011d4:	e75f      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011d6:	bf00      	nop

080011d8 <__aeabi_uldivmod>:
 80011d8:	b953      	cbnz	r3, 80011f0 <__aeabi_uldivmod+0x18>
 80011da:	b94a      	cbnz	r2, 80011f0 <__aeabi_uldivmod+0x18>
 80011dc:	2900      	cmp	r1, #0
 80011de:	bf08      	it	eq
 80011e0:	2800      	cmpeq	r0, #0
 80011e2:	bf1c      	itt	ne
 80011e4:	f04f 31ff 	movne.w	r1, #4294967295
 80011e8:	f04f 30ff 	movne.w	r0, #4294967295
 80011ec:	f000 b96a 	b.w	80014c4 <__aeabi_idiv0>
 80011f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011f8:	f000 f806 	bl	8001208 <__udivmoddi4>
 80011fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <__udivmoddi4>:
 8001208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800120c:	9d08      	ldr	r5, [sp, #32]
 800120e:	460c      	mov	r4, r1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d14e      	bne.n	80012b2 <__udivmoddi4+0xaa>
 8001214:	4694      	mov	ip, r2
 8001216:	458c      	cmp	ip, r1
 8001218:	4686      	mov	lr, r0
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	d962      	bls.n	80012e6 <__udivmoddi4+0xde>
 8001220:	b14a      	cbz	r2, 8001236 <__udivmoddi4+0x2e>
 8001222:	f1c2 0320 	rsb	r3, r2, #32
 8001226:	4091      	lsls	r1, r2
 8001228:	fa20 f303 	lsr.w	r3, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	4319      	orrs	r1, r3
 8001232:	fa00 fe02 	lsl.w	lr, r0, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f f68c 	uxth.w	r6, ip
 800123e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001246:	fb07 1114 	mls	r1, r7, r4, r1
 800124a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800124e:	fb04 f106 	mul.w	r1, r4, r6
 8001252:	4299      	cmp	r1, r3
 8001254:	d90a      	bls.n	800126c <__udivmoddi4+0x64>
 8001256:	eb1c 0303 	adds.w	r3, ip, r3
 800125a:	f104 30ff 	add.w	r0, r4, #4294967295
 800125e:	f080 8112 	bcs.w	8001486 <__udivmoddi4+0x27e>
 8001262:	4299      	cmp	r1, r3
 8001264:	f240 810f 	bls.w	8001486 <__udivmoddi4+0x27e>
 8001268:	3c02      	subs	r4, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a59      	subs	r1, r3, r1
 800126e:	fa1f f38e 	uxth.w	r3, lr
 8001272:	fbb1 f0f7 	udiv	r0, r1, r7
 8001276:	fb07 1110 	mls	r1, r7, r0, r1
 800127a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800127e:	fb00 f606 	mul.w	r6, r0, r6
 8001282:	429e      	cmp	r6, r3
 8001284:	d90a      	bls.n	800129c <__udivmoddi4+0x94>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f100 31ff 	add.w	r1, r0, #4294967295
 800128e:	f080 80fc 	bcs.w	800148a <__udivmoddi4+0x282>
 8001292:	429e      	cmp	r6, r3
 8001294:	f240 80f9 	bls.w	800148a <__udivmoddi4+0x282>
 8001298:	4463      	add	r3, ip
 800129a:	3802      	subs	r0, #2
 800129c:	1b9b      	subs	r3, r3, r6
 800129e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012a2:	2100      	movs	r1, #0
 80012a4:	b11d      	cbz	r5, 80012ae <__udivmoddi4+0xa6>
 80012a6:	40d3      	lsrs	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	e9c5 3200 	strd	r3, r2, [r5]
 80012ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d905      	bls.n	80012c2 <__udivmoddi4+0xba>
 80012b6:	b10d      	cbz	r5, 80012bc <__udivmoddi4+0xb4>
 80012b8:	e9c5 0100 	strd	r0, r1, [r5]
 80012bc:	2100      	movs	r1, #0
 80012be:	4608      	mov	r0, r1
 80012c0:	e7f5      	b.n	80012ae <__udivmoddi4+0xa6>
 80012c2:	fab3 f183 	clz	r1, r3
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d146      	bne.n	8001358 <__udivmoddi4+0x150>
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	d302      	bcc.n	80012d4 <__udivmoddi4+0xcc>
 80012ce:	4290      	cmp	r0, r2
 80012d0:	f0c0 80f0 	bcc.w	80014b4 <__udivmoddi4+0x2ac>
 80012d4:	1a86      	subs	r6, r0, r2
 80012d6:	eb64 0303 	sbc.w	r3, r4, r3
 80012da:	2001      	movs	r0, #1
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d0e6      	beq.n	80012ae <__udivmoddi4+0xa6>
 80012e0:	e9c5 6300 	strd	r6, r3, [r5]
 80012e4:	e7e3      	b.n	80012ae <__udivmoddi4+0xa6>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	f040 8090 	bne.w	800140c <__udivmoddi4+0x204>
 80012ec:	eba1 040c 	sub.w	r4, r1, ip
 80012f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012f4:	fa1f f78c 	uxth.w	r7, ip
 80012f8:	2101      	movs	r1, #1
 80012fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80012fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001302:	fb08 4416 	mls	r4, r8, r6, r4
 8001306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800130a:	fb07 f006 	mul.w	r0, r7, r6
 800130e:	4298      	cmp	r0, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x11c>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f106 34ff 	add.w	r4, r6, #4294967295
 800131a:	d202      	bcs.n	8001322 <__udivmoddi4+0x11a>
 800131c:	4298      	cmp	r0, r3
 800131e:	f200 80cd 	bhi.w	80014bc <__udivmoddi4+0x2b4>
 8001322:	4626      	mov	r6, r4
 8001324:	1a1c      	subs	r4, r3, r0
 8001326:	fa1f f38e 	uxth.w	r3, lr
 800132a:	fbb4 f0f8 	udiv	r0, r4, r8
 800132e:	fb08 4410 	mls	r4, r8, r0, r4
 8001332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001336:	fb00 f707 	mul.w	r7, r0, r7
 800133a:	429f      	cmp	r7, r3
 800133c:	d908      	bls.n	8001350 <__udivmoddi4+0x148>
 800133e:	eb1c 0303 	adds.w	r3, ip, r3
 8001342:	f100 34ff 	add.w	r4, r0, #4294967295
 8001346:	d202      	bcs.n	800134e <__udivmoddi4+0x146>
 8001348:	429f      	cmp	r7, r3
 800134a:	f200 80b0 	bhi.w	80014ae <__udivmoddi4+0x2a6>
 800134e:	4620      	mov	r0, r4
 8001350:	1bdb      	subs	r3, r3, r7
 8001352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001356:	e7a5      	b.n	80012a4 <__udivmoddi4+0x9c>
 8001358:	f1c1 0620 	rsb	r6, r1, #32
 800135c:	408b      	lsls	r3, r1
 800135e:	fa22 f706 	lsr.w	r7, r2, r6
 8001362:	431f      	orrs	r7, r3
 8001364:	fa20 fc06 	lsr.w	ip, r0, r6
 8001368:	fa04 f301 	lsl.w	r3, r4, r1
 800136c:	ea43 030c 	orr.w	r3, r3, ip
 8001370:	40f4      	lsrs	r4, r6
 8001372:	fa00 f801 	lsl.w	r8, r0, r1
 8001376:	0c38      	lsrs	r0, r7, #16
 8001378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800137c:	fbb4 fef0 	udiv	lr, r4, r0
 8001380:	fa1f fc87 	uxth.w	ip, r7
 8001384:	fb00 441e 	mls	r4, r0, lr, r4
 8001388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800138c:	fb0e f90c 	mul.w	r9, lr, ip
 8001390:	45a1      	cmp	r9, r4
 8001392:	fa02 f201 	lsl.w	r2, r2, r1
 8001396:	d90a      	bls.n	80013ae <__udivmoddi4+0x1a6>
 8001398:	193c      	adds	r4, r7, r4
 800139a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800139e:	f080 8084 	bcs.w	80014aa <__udivmoddi4+0x2a2>
 80013a2:	45a1      	cmp	r9, r4
 80013a4:	f240 8081 	bls.w	80014aa <__udivmoddi4+0x2a2>
 80013a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80013ac:	443c      	add	r4, r7
 80013ae:	eba4 0409 	sub.w	r4, r4, r9
 80013b2:	fa1f f983 	uxth.w	r9, r3
 80013b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80013ba:	fb00 4413 	mls	r4, r0, r3, r4
 80013be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80013c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80013c6:	45a4      	cmp	ip, r4
 80013c8:	d907      	bls.n	80013da <__udivmoddi4+0x1d2>
 80013ca:	193c      	adds	r4, r7, r4
 80013cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80013d0:	d267      	bcs.n	80014a2 <__udivmoddi4+0x29a>
 80013d2:	45a4      	cmp	ip, r4
 80013d4:	d965      	bls.n	80014a2 <__udivmoddi4+0x29a>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	443c      	add	r4, r7
 80013da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80013de:	fba0 9302 	umull	r9, r3, r0, r2
 80013e2:	eba4 040c 	sub.w	r4, r4, ip
 80013e6:	429c      	cmp	r4, r3
 80013e8:	46ce      	mov	lr, r9
 80013ea:	469c      	mov	ip, r3
 80013ec:	d351      	bcc.n	8001492 <__udivmoddi4+0x28a>
 80013ee:	d04e      	beq.n	800148e <__udivmoddi4+0x286>
 80013f0:	b155      	cbz	r5, 8001408 <__udivmoddi4+0x200>
 80013f2:	ebb8 030e 	subs.w	r3, r8, lr
 80013f6:	eb64 040c 	sbc.w	r4, r4, ip
 80013fa:	fa04 f606 	lsl.w	r6, r4, r6
 80013fe:	40cb      	lsrs	r3, r1
 8001400:	431e      	orrs	r6, r3
 8001402:	40cc      	lsrs	r4, r1
 8001404:	e9c5 6400 	strd	r6, r4, [r5]
 8001408:	2100      	movs	r1, #0
 800140a:	e750      	b.n	80012ae <__udivmoddi4+0xa6>
 800140c:	f1c2 0320 	rsb	r3, r2, #32
 8001410:	fa20 f103 	lsr.w	r1, r0, r3
 8001414:	fa0c fc02 	lsl.w	ip, ip, r2
 8001418:	fa24 f303 	lsr.w	r3, r4, r3
 800141c:	4094      	lsls	r4, r2
 800141e:	430c      	orrs	r4, r1
 8001420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001424:	fa00 fe02 	lsl.w	lr, r0, r2
 8001428:	fa1f f78c 	uxth.w	r7, ip
 800142c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001430:	fb08 3110 	mls	r1, r8, r0, r3
 8001434:	0c23      	lsrs	r3, r4, #16
 8001436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800143a:	fb00 f107 	mul.w	r1, r0, r7
 800143e:	4299      	cmp	r1, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x24c>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f100 36ff 	add.w	r6, r0, #4294967295
 800144a:	d22c      	bcs.n	80014a6 <__udivmoddi4+0x29e>
 800144c:	4299      	cmp	r1, r3
 800144e:	d92a      	bls.n	80014a6 <__udivmoddi4+0x29e>
 8001450:	3802      	subs	r0, #2
 8001452:	4463      	add	r3, ip
 8001454:	1a5b      	subs	r3, r3, r1
 8001456:	b2a4      	uxth	r4, r4
 8001458:	fbb3 f1f8 	udiv	r1, r3, r8
 800145c:	fb08 3311 	mls	r3, r8, r1, r3
 8001460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001464:	fb01 f307 	mul.w	r3, r1, r7
 8001468:	42a3      	cmp	r3, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x276>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f101 36ff 	add.w	r6, r1, #4294967295
 8001474:	d213      	bcs.n	800149e <__udivmoddi4+0x296>
 8001476:	42a3      	cmp	r3, r4
 8001478:	d911      	bls.n	800149e <__udivmoddi4+0x296>
 800147a:	3902      	subs	r1, #2
 800147c:	4464      	add	r4, ip
 800147e:	1ae4      	subs	r4, r4, r3
 8001480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001484:	e739      	b.n	80012fa <__udivmoddi4+0xf2>
 8001486:	4604      	mov	r4, r0
 8001488:	e6f0      	b.n	800126c <__udivmoddi4+0x64>
 800148a:	4608      	mov	r0, r1
 800148c:	e706      	b.n	800129c <__udivmoddi4+0x94>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d2ae      	bcs.n	80013f0 <__udivmoddi4+0x1e8>
 8001492:	ebb9 0e02 	subs.w	lr, r9, r2
 8001496:	eb63 0c07 	sbc.w	ip, r3, r7
 800149a:	3801      	subs	r0, #1
 800149c:	e7a8      	b.n	80013f0 <__udivmoddi4+0x1e8>
 800149e:	4631      	mov	r1, r6
 80014a0:	e7ed      	b.n	800147e <__udivmoddi4+0x276>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e799      	b.n	80013da <__udivmoddi4+0x1d2>
 80014a6:	4630      	mov	r0, r6
 80014a8:	e7d4      	b.n	8001454 <__udivmoddi4+0x24c>
 80014aa:	46d6      	mov	lr, sl
 80014ac:	e77f      	b.n	80013ae <__udivmoddi4+0x1a6>
 80014ae:	4463      	add	r3, ip
 80014b0:	3802      	subs	r0, #2
 80014b2:	e74d      	b.n	8001350 <__udivmoddi4+0x148>
 80014b4:	4606      	mov	r6, r0
 80014b6:	4623      	mov	r3, r4
 80014b8:	4608      	mov	r0, r1
 80014ba:	e70f      	b.n	80012dc <__udivmoddi4+0xd4>
 80014bc:	3e02      	subs	r6, #2
 80014be:	4463      	add	r3, ip
 80014c0:	e730      	b.n	8001324 <__udivmoddi4+0x11c>
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <calcsin>:

uint32_t sine_val[100];
uint16_t hanning_array[FFT_BUFFER_SIZE];

void calcsin ()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e046      	b.n	8001562 <calcsin+0x9a>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2))/5+200;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f883 	bl	80005e4 <__aeabi_i2d>
 80014de:	a32c      	add	r3, pc, #176	@ (adr r3, 8001590 <calcsin+0xc8>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8e8 	bl	80006b8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <calcsin+0xb0>)
 80014f6:	f7ff fa09 	bl	800090c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f008 ffc9 	bl	800a498 <sin>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <calcsin+0xb4>)
 800150c:	f7fe ff1e 	bl	800034c <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <calcsin+0xb8>)
 800151e:	f7ff f8cb 	bl	80006b8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <calcsin+0xbc>)
 8001530:	f7ff f9ec 	bl	800090c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <calcsin+0xc0>)
 8001542:	f7fe ff03 	bl	800034c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb75 	bl	8000c3c <__aeabi_d2uiz>
 8001552:	4602      	mov	r2, r0
 8001554:	490d      	ldr	r1, [pc, #52]	@ (800158c <calcsin+0xc4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b63      	cmp	r3, #99	@ 0x63
 8001566:	ddb5      	ble.n	80014d4 <calcsin+0xc>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	40590000 	.word	0x40590000
 800157c:	3ff00000 	.word	0x3ff00000
 8001580:	40a00000 	.word	0x40a00000
 8001584:	40140000 	.word	0x40140000
 8001588:	40690000 	.word	0x40690000
 800158c:	200002a4 	.word	0x200002a4
 8001590:	4d12d84a 	.word	0x4d12d84a
 8001594:	400921fb 	.word	0x400921fb

08001598 <calchanning>:

void calchanning(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	e03e      	b.n	8001622 <calchanning+0x8a>
	        hanning_array[i] = (int)(0.5 * (1 - cos(2 * M_PI * i / (FFT_BUFFER_SIZE - 1))) * 4096);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f81d 	bl	80005e4 <__aeabi_i2d>
 80015aa:	a327      	add	r3, pc, #156	@ (adr r3, 8001648 <calchanning+0xb0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f882 	bl	80006b8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001650 <calchanning+0xb8>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f9a3 	bl	800090c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f008 ff19 	bl	800a404 <cos>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	4917      	ldr	r1, [pc, #92]	@ (8001638 <calchanning+0xa0>)
 80015dc:	f7fe feb4 	bl	8000348 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <calchanning+0xa4>)
 80015ee:	f7ff f863 	bl	80006b8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <calchanning+0xa8>)
 8001600:	f7ff f85a 	bl	80006b8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faee 	bl	8000bec <__aeabi_d2iz>
 8001610:	4603      	mov	r3, r0
 8001612:	b299      	uxth	r1, r3
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <calchanning+0xac>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001628:	dbbc      	blt.n	80015a4 <calchanning+0xc>
	    }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	3fe00000 	.word	0x3fe00000
 8001640:	40b00000 	.word	0x40b00000
 8001644:	20000434 	.word	0x20000434
 8001648:	54442d18 	.word	0x54442d18
 800164c:	401921fb 	.word	0x401921fb
 8001650:	00000000 	.word	0x00000000
 8001654:	409ffc00 	.word	0x409ffc00

08001658 <sgn>:
    } while (fabs(term) > TOLERANCE);

    return sum;
}

int sgn(float x) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    if(x>=0){
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db01      	blt.n	8001672 <sgn+0x1a>
    	return 1;
 800166e:	2301      	movs	r3, #1
 8001670:	e001      	b.n	8001676 <sgn+0x1e>
    }
    else{
    	return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <Read_ADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001688:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <Read_ADC+0x20>)
 800168a:	f001 fda9 	bl	80031e0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800168e:	f04f 31ff 	mov.w	r1, #4294967295
 8001692:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <Read_ADC+0x20>)
 8001694:	f001 fe92 	bl	80033bc <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <Read_ADC+0x20>)
 800169a:	f002 f823 	bl	80036e4 <HAL_ADC_GetValue>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000007c 	.word	0x2000007c

080016a8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e017      	b.n	80016e6 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	 	fftBufIn[i] = (float)(ADC_val[i]*hanning_array[i]) ;
 80016b6:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	4619      	mov	r1, r3
 80016c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ec:	dbe3      	blt.n	80016b6 <HAL_ADC_ConvHalfCpltCallback+0xe>
        }
        //sprintf(data, "half buffer\r\n\n ");
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 80016ee:	f000 f837 	bl	8001760 <Calc_FFT>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000144c 	.word	0x2000144c
 8001700:	20000434 	.word	0x20000434
 8001704:	2000344c 	.word	0x2000344c

08001708 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e012      	b.n	800173e <HAL_ADC_ConvCpltCallback+0x36>
	  	fftBufIn[i-FFT_BUFFER_SIZE] = (float)(ADC_val[i]) ;
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x4c>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001726:	ee07 2a90 	vmov	s15, r2
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x50>)
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001744:	dbe8      	blt.n	8001718 <HAL_ADC_ConvCpltCallback+0x10>
        }
        //sprintf(data, "full buffer\r\n\n " );
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 8001746:	f000 f80b 	bl	8001760 <Calc_FFT>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000144c 	.word	0x2000144c
 8001758:	2000344c 	.word	0x2000344c
 800175c:	00000000 	.word	0x00000000

08001760 <Calc_FFT>:





void Calc_FFT(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0

	arm_rfft_fast_f32(&fftHandler, &fftBufIn, &fftBufOut,0);
 8001766:	2300      	movs	r3, #0
 8001768:	4a91      	ldr	r2, [pc, #580]	@ (80019b0 <Calc_FFT+0x250>)
 800176a:	4992      	ldr	r1, [pc, #584]	@ (80019b4 <Calc_FFT+0x254>)
 800176c:	4892      	ldr	r0, [pc, #584]	@ (80019b8 <Calc_FFT+0x258>)
 800176e:	f006 fe35 	bl	80083dc <arm_rfft_fast_f32>
		  float phase_1khz = 0.0f, phase_2khz = 0.0f;
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
		  //calc freqmagnitude for 1,2,3khz
		  float phase_shift_diff = 0.0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001784:	4b8d      	ldr	r3, [pc, #564]	@ (80019bc <Calc_FFT+0x25c>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e057      	b.n	800183c <Calc_FFT+0xdc>
		        float real = fftBufOut[i * 2];
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4a87      	ldr	r2, [pc, #540]	@ (80019b0 <Calc_FFT+0x250>)
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
		        float imag = fftBufOut[(i * 2) + 1];
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3301      	adds	r3, #1
 80017a0:	4a83      	ldr	r2, [pc, #524]	@ (80019b0 <Calc_FFT+0x250>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
		        float curVal = sqrtf((real * real) + (imag * imag));
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f008 feb1 	bl	800a528 <sqrtf>
 80017c6:	60b8      	str	r0, [r7, #8]
		        float phase = atan2f(imag, real);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f008 feaa 	bl	800a524 <atan2f>
 80017d0:	6078      	str	r0, [r7, #4]
		        if (i == sample_count_1khz) {
 80017d2:	4b7a      	ldr	r3, [pc, #488]	@ (80019bc <Calc_FFT+0x25c>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <Calc_FFT+0x84>
		            phase_1khz = phase;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e2:	e00f      	b.n	8001804 <Calc_FFT+0xa4>
		        } else if (i == sample_count_1khz * 2) {
 80017e4:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <Calc_FFT+0x25c>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d109      	bne.n	8001804 <Calc_FFT+0xa4>
		            phase_2khz = phase;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
		            phase_shift_diff = phase_2khz - phase_1khz;
 80017f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80017f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		        }

			  freq_mag[i/sample_count_1khz-1]+=(uint16_t)curVal;
 8001804:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <Calc_FFT+0x25c>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	496b      	ldr	r1, [pc, #428]	@ (80019c0 <Calc_FFT+0x260>)
 8001814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001818:	edd7 7a02 	vldr	s15, [r7, #8]
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 1a90 	vmov	r1, s15
 8001824:	b289      	uxth	r1, r1
 8001826:	3b01      	subs	r3, #1
 8001828:	440a      	add	r2, r1
 800182a:	4965      	ldr	r1, [pc, #404]	@ (80019c0 <Calc_FFT+0x260>)
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001830:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <Calc_FFT+0x25c>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	4413      	add	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <Calc_FFT+0x25c>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184a:	429a      	cmp	r2, r3
 800184c:	dd9e      	ble.n	800178c <Calc_FFT+0x2c>

		  }
		  sprintf(data, "%d ", (int16_t)(phase_shift_diff*1000));
 800184e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001852:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80019c4 <Calc_FFT+0x264>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	ee17 3a90 	vmov	r3, s15
 8001862:	b21b      	sxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4958      	ldr	r1, [pc, #352]	@ (80019c8 <Calc_FFT+0x268>)
 8001868:	4858      	ldr	r0, [pc, #352]	@ (80019cc <Calc_FFT+0x26c>)
 800186a:	f008 f92b 	bl	8009ac4 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 800186e:	4857      	ldr	r0, [pc, #348]	@ (80019cc <Calc_FFT+0x26c>)
 8001870:	f7fe fd0e 	bl	8000290 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2364      	movs	r3, #100	@ 0x64
 800187a:	4954      	ldr	r1, [pc, #336]	@ (80019cc <Calc_FFT+0x26c>)
 800187c:	4854      	ldr	r0, [pc, #336]	@ (80019d0 <Calc_FFT+0x270>)
 800187e:	f005 ffcb 	bl	8007818 <HAL_UART_Transmit>
		  if (phase_shift_diff < 0) {
 8001882:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d510      	bpl.n	80018b2 <Calc_FFT+0x152>
		      phase_shift_diff += 2 * PI;
 8001890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001892:	f7fe feb9 	bl	8000608 <__aeabi_f2d>
 8001896:	a344      	add	r3, pc, #272	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fd56 	bl	800034c <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f9e8 	bl	8000c7c <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b0:	e01a      	b.n	80018e8 <Calc_FFT+0x188>
		  } else if (phase_shift_diff >= 2 * PI) {
 80018b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018b4:	f7fe fea8 	bl	8000608 <__aeabi_f2d>
 80018b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7ff f981 	bl	8000bc4 <__aeabi_dcmpge>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00f      	beq.n	80018e8 <Calc_FFT+0x188>
		      phase_shift_diff -= 2 * PI;
 80018c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ca:	f7fe fe9d 	bl	8000608 <__aeabi_f2d>
 80018ce:	a336      	add	r3, pc, #216	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fd38 	bl	8000348 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f9cc 	bl	8000c7c <__aeabi_d2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		  }


			  avgPhaseShift += phase_shift_diff;
 80018e8:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <Calc_FFT+0x274>)
 80018ea:	ed93 7a00 	vldr	s14, [r3]
 80018ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f6:	4b37      	ldr	r3, [pc, #220]	@ (80019d4 <Calc_FFT+0x274>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
			  fft_count++;
 80018fc:	4b36      	ldr	r3, [pc, #216]	@ (80019d8 <Calc_FFT+0x278>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <Calc_FFT+0x278>)
 8001906:	801a      	strh	r2, [r3, #0]


			  float avgTemp = 0.0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	623b      	str	r3, [r7, #32]

			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 800190e:	2304      	movs	r3, #4
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e02f      	b.n	8001974 <Calc_FFT+0x214>
			  	float curVal = sqrtf((fftBufOut[i]*fftBufOut[i])+ (fftBufOut[i+1]*fftBufOut[i+1]));
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <Calc_FFT+0x250>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <Calc_FFT+0x250>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <Calc_FFT+0x250>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	edd3 6a00 	vldr	s13, [r3]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <Calc_FFT+0x250>)
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	ee17 0a90 	vmov	r0, s15
 8001958:	f008 fde6 	bl	800a528 <sqrtf>
 800195c:	6178      	str	r0, [r7, #20]
			  	avgTemp += curVal;  // Convert float to
 800195e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001962:	edd7 7a05 	vldr	s15, [r7, #20]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	edc7 7a08 	vstr	s15, [r7, #32]
			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3302      	adds	r3, #2
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800197a:	dbcb      	blt.n	8001914 <Calc_FFT+0x1b4>
				  //sprintf(data, "%d ", (uint16_t)(curVal));
				  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
			  }
			  avg += (uint32_t)avgTemp/((FFT_BUFFER_SIZE / 2)-2);
 800197c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001984:	ee17 3a90 	vmov	r3, s15
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <Calc_FFT+0x27c>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0a1a      	lsrs	r2, r3, #8
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <Calc_FFT+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <Calc_FFT+0x280>)
 800199a:	6013      	str	r3, [r2, #0]





}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	@ 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	4d12d84a 	.word	0x4d12d84a
 80019ac:	401921fb 	.word	0x401921fb
 80019b0:	2000544c 	.word	0x2000544c
 80019b4:	2000344c 	.word	0x2000344c
 80019b8:	20001434 	.word	0x20001434
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20007484 	.word	0x20007484
 80019c4:	447a0000 	.word	0x447a0000
 80019c8:	0800b7f0 	.word	0x0800b7f0
 80019cc:	2000744c 	.word	0x2000744c
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	20007490 	.word	0x20007490
 80019d8:	2000747e 	.word	0x2000747e
 80019dc:	80402011 	.word	0x80402011
 80019e0:	20007480 	.word	0x20007480
 80019e4:	00000000 	.word	0x00000000

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 80019ee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f0:	f000 ffc2 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 fa84 	bl	8001f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f000 fc6a 	bl	80022d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fc:	f000 fc42 	bl	8002284 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a00:	f000 fad0 	bl	8001fa4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a04:	f000 fb46 	bl	8002094 <MX_DAC1_Init>
  MX_TIM6_Init();
 8001a08:	f000 fbd6 	bl	80021b8 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fb80 	bl	8002110 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a10:	f000 fc08 	bl	8002224 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //start sweep for mzm bias and calculate bias on midpoint between min and max output current
#define STEP_SIZE_BIAS_SWEEP 16
  uint32_t adc_val[128]={0};
 8001a14:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001a18:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a22:	461a      	mov	r2, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	f008 f86d 	bl	8009b04 <memset>
  uint16_t dac_val[128]={0};
 8001a2a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001a2e:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001a32:	4618      	mov	r0, r3
 8001a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f008 f862 	bl	8009b04 <memset>
  uint16_t index_adc_val_smallest=0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8a7 3336 	strh.w	r3, [r7, #822]	@ 0x336
  uint16_t index_adc_val_highest=0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8a7 3334 	strh.w	r3, [r7, #820]	@ 0x334
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	48c0      	ldr	r0, [pc, #768]	@ (8001d50 <main+0x368>)
 8001a50:	f003 f973 	bl	8004d3a <HAL_DAC_Start>
  Read_ADC();
 8001a54:	f7ff fe16 	bl	8001684 <Read_ADC>
  for(int i = 0; i< 2048; i+=STEP_SIZE_BIAS_SWEEP){
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001a5e:	e093      	b.n	8001b88 <main+0x1a0>
	  //take avrage of 10values
	  sprintf(data, "set to:%d\r\n\n ",i);
 8001a60:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001a64:	49bb      	ldr	r1, [pc, #748]	@ (8001d54 <main+0x36c>)
 8001a66:	48bc      	ldr	r0, [pc, #752]	@ (8001d58 <main+0x370>)
 8001a68:	f008 f82c 	bl	8009ac4 <siprintf>
	  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001a6c:	48ba      	ldr	r0, [pc, #744]	@ (8001d58 <main+0x370>)
 8001a6e:	f7fe fc0f 	bl	8000290 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	2364      	movs	r3, #100	@ 0x64
 8001a78:	49b7      	ldr	r1, [pc, #732]	@ (8001d58 <main+0x370>)
 8001a7a:	48b8      	ldr	r0, [pc, #736]	@ (8001d5c <main+0x374>)
 8001a7c:	f005 fecc 	bl	8007818 <HAL_UART_Transmit>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R, i);
 8001a80:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	48b1      	ldr	r0, [pc, #708]	@ (8001d50 <main+0x368>)
 8001a8a:	f003 fa6f 	bl	8004f6c <HAL_DAC_SetValue>
	  for(int j = 0; j<20;j++){
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001a94:	e01d      	b.n	8001ad2 <main+0xea>
		  HAL_Delay(2);
 8001a96:	2002      	movs	r0, #2
 8001a98:	f000 ffea 	bl	8002a70 <HAL_Delay>
		  adc_val[i/STEP_SIZE_BIAS_SWEEP] += Read_ADC();
 8001a9c:	f7ff fdf2 	bl	8001684 <Read_ADC>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da00      	bge.n	8001aac <main+0xc4>
 8001aaa:	330f      	adds	r3, #15
 8001aac:	111b      	asrs	r3, r3, #4
 8001aae:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001ab2:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8001ab6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aba:	4411      	add	r1, r2
 8001abc:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001ac0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8001ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int j = 0; j<20;j++){
 8001ac8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001ad2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001ad6:	2b13      	cmp	r3, #19
 8001ad8:	dddd      	ble.n	8001a96 <main+0xae>
	  }
	  //keep highest and lowest adc values
	  if(adc_val[i/STEP_SIZE_BIAS_SWEEP]>=adc_val[index_adc_val_highest]){
 8001ada:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da00      	bge.n	8001ae4 <main+0xfc>
 8001ae2:	330f      	adds	r3, #15
 8001ae4:	111b      	asrs	r3, r3, #4
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001aec:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001af0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001af4:	f8b7 1334 	ldrh.w	r1, [r7, #820]	@ 0x334
 8001af8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001afc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d308      	bcc.n	8001b1a <main+0x132>
		  index_adc_val_highest = i/STEP_SIZE_BIAS_SWEEP;
 8001b08:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da00      	bge.n	8001b12 <main+0x12a>
 8001b10:	330f      	adds	r3, #15
 8001b12:	111b      	asrs	r3, r3, #4
 8001b14:	f8a7 3334 	strh.w	r3, [r7, #820]	@ 0x334
 8001b18:	e01e      	b.n	8001b58 <main+0x170>
	  }else if(adc_val[i/STEP_SIZE_BIAS_SWEEP]<=adc_val[index_adc_val_smallest]){
 8001b1a:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da00      	bge.n	8001b24 <main+0x13c>
 8001b22:	330f      	adds	r3, #15
 8001b24:	111b      	asrs	r3, r3, #4
 8001b26:	461a      	mov	r2, r3
 8001b28:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b2c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b34:	f8b7 1336 	ldrh.w	r1, [r7, #822]	@ 0x336
 8001b38:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b3c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d807      	bhi.n	8001b58 <main+0x170>
		  index_adc_val_smallest = i/STEP_SIZE_BIAS_SWEEP;
 8001b48:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <main+0x16a>
 8001b50:	330f      	adds	r3, #15
 8001b52:	111b      	asrs	r3, r3, #4
 8001b54:	f8a7 3336 	strh.w	r3, [r7, #822]	@ 0x336
	  }
	  dac_val[i/STEP_SIZE_BIAS_SWEEP] = i;
 8001b58:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	da00      	bge.n	8001b62 <main+0x17a>
 8001b60:	330f      	adds	r3, #15
 8001b62:	111b      	asrs	r3, r3, #4
 8001b64:	461a      	mov	r2, r3
 8001b66:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b70:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001b74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  HAL_Delay(10);
 8001b78:	200a      	movs	r0, #10
 8001b7a:	f000 ff79 	bl	8002a70 <HAL_Delay>
  for(int i = 0; i< 2048; i+=STEP_SIZE_BIAS_SWEEP){
 8001b7e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b82:	3310      	adds	r3, #16
 8001b84:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001b88:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b90:	f6ff af66 	blt.w	8001a60 <main+0x78>
  }
  //set dac to midpoint
  uint16_t midpoint_dac_val = dac_val[(index_adc_val_highest + index_adc_val_smallest) / 2];
 8001b94:	f8b7 2334 	ldrh.w	r2, [r7, #820]	@ 0x334
 8001b98:	f8b7 3336 	ldrh.w	r3, [r7, #822]	@ 0x336
 8001b9c:	4413      	add	r3, r2
 8001b9e:	0fda      	lsrs	r2, r3, #31
 8001ba0:	4413      	add	r3, r2
 8001ba2:	105b      	asrs	r3, r3, #1
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001baa:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001bae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bb2:	f8a7 332a 	strh.w	r3, [r7, #810]	@ 0x32a
  midpoint_dac_val = 1500;
 8001bb6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001bba:	f8a7 332a 	strh.w	r3, [r7, #810]	@ 0x32a
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val  );
 8001bbe:	f8b7 332a 	ldrh.w	r3, [r7, #810]	@ 0x32a
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4862      	ldr	r0, [pc, #392]	@ (8001d50 <main+0x368>)
 8001bc8:	f003 f9d0 	bl	8004f6c <HAL_DAC_SetValue>
  sprintf(data, "bias set as:%d\r\n\n ",midpoint_dac_val);
 8001bcc:	f8b7 332a 	ldrh.w	r3, [r7, #810]	@ 0x32a
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4963      	ldr	r1, [pc, #396]	@ (8001d60 <main+0x378>)
 8001bd4:	4860      	ldr	r0, [pc, #384]	@ (8001d58 <main+0x370>)
 8001bd6:	f007 ff75 	bl	8009ac4 <siprintf>
  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001bda:	485f      	ldr	r0, [pc, #380]	@ (8001d58 <main+0x370>)
 8001bdc:	f7fe fb58 	bl	8000290 <strlen>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2364      	movs	r3, #100	@ 0x64
 8001be6:	495c      	ldr	r1, [pc, #368]	@ (8001d58 <main+0x370>)
 8001be8:	485c      	ldr	r0, [pc, #368]	@ (8001d5c <main+0x374>)
 8001bea:	f005 fe15 	bl	8007818 <HAL_UART_Transmit>


  //reset the adc
  HAL_ADC_Stop(&hadc1);
 8001bee:	485d      	ldr	r0, [pc, #372]	@ (8001d64 <main+0x37c>)
 8001bf0:	f001 fbb0 	bl	8003354 <HAL_ADC_Stop>
  //ADC_Disable(&hadc1);
  MX_ADC1_Init2();
 8001bf4:	f000 fbbe 	bl	8002374 <MX_ADC1_Init2>

  HAL_TIM_Base_Start(&htim6);
 8001bf8:	485b      	ldr	r0, [pc, #364]	@ (8001d68 <main+0x380>)
 8001bfa:	f005 fac5 	bl	8007188 <HAL_TIM_Base_Start>
  calcsin();
 8001bfe:	f7ff fc63 	bl	80014c8 <calcsin>
  calchanning();
 8001c02:	f7ff fcc9 	bl	8001598 <calchanning>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001c06:	217f      	movs	r1, #127	@ 0x7f
 8001c08:	4856      	ldr	r0, [pc, #344]	@ (8001d64 <main+0x37c>)
 8001c0a:	f002 fe21 	bl	8004850 <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, sine_val, 100, DAC_ALIGN_12B_R);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2364      	movs	r3, #100	@ 0x64
 8001c14:	4a55      	ldr	r2, [pc, #340]	@ (8001d6c <main+0x384>)
 8001c16:	2110      	movs	r1, #16
 8001c18:	484d      	ldr	r0, [pc, #308]	@ (8001d50 <main+0x368>)
 8001c1a:	f003 f8db 	bl	8004dd4 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_val,FFT_BUFFER_SIZE*2);
 8001c1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c22:	4953      	ldr	r1, [pc, #332]	@ (8001d70 <main+0x388>)
 8001c24:	484f      	ldr	r0, [pc, #316]	@ (8001d64 <main+0x37c>)
 8001c26:	f001 fca1 	bl	800356c <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fftHandler,FFT_BUFFER_SIZE);
 8001c2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c2e:	4851      	ldr	r0, [pc, #324]	@ (8001d74 <main+0x38c>)
 8001c30:	f006 fb50 	bl	80082d4 <arm_rfft_fast_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8001c34:	4850      	ldr	r0, [pc, #320]	@ (8001d78 <main+0x390>)
 8001c36:	f005 faa7 	bl	8007188 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dac_val_tone_bias[3]={0};
 8001c3a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c3e:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	809a      	strh	r2, [r3, #4]
  uint32_t adc_val_tone_bias[3]={0};
 8001c48:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c4c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8001c50:	461a      	mov	r2, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	6053      	str	r3, [r2, #4]
 8001c58:	6093      	str	r3, [r2, #8]
  int16_t sweep_count = -1;
 8001c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c5e:	f8a7 331e 	strh.w	r3, [r7, #798]	@ 0x31e
  uint16_t prev_bias = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8a7 331c 	strh.w	r3, [r7, #796]	@ 0x31c
  while (1)
  {

	  //for(int sweep = midpoint_dac_val-STEP_SIZE_BIAS_SWEEP; i<midpoint_dac_val+STEP_SIZE_BIAS_SWEEP; i+=STEP_SIZE_BIAS_SWEEP)
	  //sweep through best known value of bias, one below and one above
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001c68:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <main+0x394>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	2b63      	cmp	r3, #99	@ 0x63
 8001c6e:	d9fb      	bls.n	8001c68 <main+0x280>
		  float phaseShift = avgPhaseShift/ fft_count;
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <main+0x398>)
 8001c72:	edd3 6a00 	vldr	s13, [r3]
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <main+0x394>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c86:	edc7 7ac9 	vstr	s15, [r7, #804]	@ 0x324
		  sprintf(data, "phase shift: %d\r\n\n ",(int16_t)(phaseShift*1000));
 8001c8a:	edd7 7ac9 	vldr	s15, [r7, #804]	@ 0x324
 8001c8e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001d90 <main+0x3a8>
 8001c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 3a90 	vmov	r3, s15
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4938      	ldr	r1, [pc, #224]	@ (8001d84 <main+0x39c>)
 8001ca4:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <main+0x370>)
 8001ca6:	f007 ff0d 	bl	8009ac4 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001caa:	482b      	ldr	r0, [pc, #172]	@ (8001d58 <main+0x370>)
 8001cac:	f7fe faf0 	bl	8000290 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	2364      	movs	r3, #100	@ 0x64
 8001cb6:	4928      	ldr	r1, [pc, #160]	@ (8001d58 <main+0x370>)
 8001cb8:	4828      	ldr	r0, [pc, #160]	@ (8001d5c <main+0x374>)
 8001cba:	f005 fdad 	bl	8007818 <HAL_UART_Transmit>

		  fft_count=0;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <main+0x394>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	801a      	strh	r2, [r3, #0]
		  sprintf(data, "%dfor  %d 1khz:%d 2khz:%d 3khz:%d\r\n\n ",sweep_count,prev_bias,freq_mag[0], freq_mag[1] ,freq_mag[2]);
 8001cc4:	f9b7 031e 	ldrsh.w	r0, [r7, #798]	@ 0x31e
 8001cc8:	f8b7 431c 	ldrh.w	r4, [r7, #796]	@ 0x31c
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <main+0x3a0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d88 <main+0x3a0>)
 8001cd2:	6852      	ldr	r2, [r2, #4]
 8001cd4:	492c      	ldr	r1, [pc, #176]	@ (8001d88 <main+0x3a0>)
 8001cd6:	6889      	ldr	r1, [r1, #8]
 8001cd8:	9102      	str	r1, [sp, #8]
 8001cda:	9201      	str	r2, [sp, #4]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4623      	mov	r3, r4
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	492a      	ldr	r1, [pc, #168]	@ (8001d8c <main+0x3a4>)
 8001ce4:	481c      	ldr	r0, [pc, #112]	@ (8001d58 <main+0x370>)
 8001ce6:	f007 feed 	bl	8009ac4 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001cea:	481b      	ldr	r0, [pc, #108]	@ (8001d58 <main+0x370>)
 8001cec:	f7fe fad0 	bl	8000290 <strlen>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2364      	movs	r3, #100	@ 0x64
 8001cf6:	4918      	ldr	r1, [pc, #96]	@ (8001d58 <main+0x370>)
 8001cf8:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <main+0x374>)
 8001cfa:	f005 fd8d 	bl	8007818 <HAL_UART_Transmit>
		    if (phaseShift> PI) {
 8001cfe:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8001d02:	f7fe fc81 	bl	8000608 <__aeabi_f2d>
 8001d06:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d40 <main+0x358>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe ff64 	bl	8000bd8 <__aeabi_dcmpgt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03e      	beq.n	8001d94 <main+0x3ac>
		    	phaseShift -= 2 * PI;
 8001d16:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8001d1a:	f7fe fc75 	bl	8000608 <__aeabi_f2d>
 8001d1e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d48 <main+0x360>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fb10 	bl	8000348 <__aeabi_dsub>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe ffa4 	bl	8000c7c <__aeabi_d2f>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8001d3a:	e02f      	b.n	8001d9c <main+0x3b4>
 8001d3c:	f3af 8000 	nop.w
 8001d40:	4d12d84a 	.word	0x4d12d84a
 8001d44:	400921fb 	.word	0x400921fb
 8001d48:	4d12d84a 	.word	0x4d12d84a
 8001d4c:	401921fb 	.word	0x401921fb
 8001d50:	20000128 	.word	0x20000128
 8001d54:	0800b7f4 	.word	0x0800b7f4
 8001d58:	2000744c 	.word	0x2000744c
 8001d5c:	2000021c 	.word	0x2000021c
 8001d60:	0800b804 	.word	0x0800b804
 8001d64:	2000007c 	.word	0x2000007c
 8001d68:	200001d0 	.word	0x200001d0
 8001d6c:	200002a4 	.word	0x200002a4
 8001d70:	2000144c 	.word	0x2000144c
 8001d74:	20001434 	.word	0x20001434
 8001d78:	20000184 	.word	0x20000184
 8001d7c:	2000747e 	.word	0x2000747e
 8001d80:	20007490 	.word	0x20007490
 8001d84:	0800b818 	.word	0x0800b818
 8001d88:	20007484 	.word	0x20007484
 8001d8c:	0800b82c 	.word	0x0800b82c
 8001d90:	447a0000 	.word	0x447a0000
		    } else if (phaseShift < PI) {
 8001d94:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8001d98:	f7fe fc36 	bl	8000608 <__aeabi_f2d>
		    	//phaseShift+= 2 * PI;
		    }

			  sprintf(data, "phase shift: %d\r\n\n ",(int16_t)(phaseShift*1000));
 8001d9c:	edd7 7ac9 	vldr	s15, [r7, #804]	@ 0x324
 8001da0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001d90 <main+0x3a8>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dac:	ee17 3a90 	vmov	r3, s15
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	4946      	ldr	r1, [pc, #280]	@ (8001ed0 <main+0x4e8>)
 8001db6:	4847      	ldr	r0, [pc, #284]	@ (8001ed4 <main+0x4ec>)
 8001db8:	f007 fe84 	bl	8009ac4 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001dbc:	4845      	ldr	r0, [pc, #276]	@ (8001ed4 <main+0x4ec>)
 8001dbe:	f7fe fa67 	bl	8000290 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	2364      	movs	r3, #100	@ 0x64
 8001dc8:	4942      	ldr	r1, [pc, #264]	@ (8001ed4 <main+0x4ec>)
 8001dca:	4843      	ldr	r0, [pc, #268]	@ (8001ed8 <main+0x4f0>)
 8001dcc:	f005 fd24 	bl	8007818 <HAL_UART_Transmit>
		  //float Vpi = ((midpoint_dac_val*13.724)/4096.0)*2;
		  //float Vac = 0.66;
		  //float correction =(Vpi/PI*arccot(((float)freq_mag[1]*bessel_jn(1,((Vac*PI)/Vpi)))/((float)freq_mag[0]*bessel_jn(2,((Vac*PI)/Vpi))))*sgn(phaseShift));//-(Vpi/2);
		  //midpoint_dac_val = midpoint_dac_val - (int16_t)((correction/13.724)*4096);
		  //fixed offset
			  sprintf(data, "avg: %d\r\n\n ",avg);
 8001dd0:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <main+0x4f4>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4942      	ldr	r1, [pc, #264]	@ (8001ee0 <main+0x4f8>)
 8001dd8:	483e      	ldr	r0, [pc, #248]	@ (8001ed4 <main+0x4ec>)
 8001dda:	f007 fe73 	bl	8009ac4 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001dde:	483d      	ldr	r0, [pc, #244]	@ (8001ed4 <main+0x4ec>)
 8001de0:	f7fe fa56 	bl	8000290 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2364      	movs	r3, #100	@ 0x64
 8001dea:	493a      	ldr	r1, [pc, #232]	@ (8001ed4 <main+0x4ec>)
 8001dec:	483a      	ldr	r0, [pc, #232]	@ (8001ed8 <main+0x4f0>)
 8001dee:	f005 fd13 	bl	8007818 <HAL_UART_Transmit>
		  if(freq_mag[1]> 150000){
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <main+0x4fc>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee8 <main+0x500>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d930      	bls.n	8001e5e <main+0x476>
			  float correction2 =50*sgn(phaseShift);
 8001dfc:	f8d7 0324 	ldr.w	r0, [r7, #804]	@ 0x324
 8001e00:	f7ff fc2a 	bl	8001658 <sgn>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2232      	movs	r2, #50	@ 0x32
 8001e08:	fb02 f303 	mul.w	r3, r2, r3
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	edc7 7ac6 	vstr	s15, [r7, #792]	@ 0x318
			  midpoint_dac_val = midpoint_dac_val - (int16_t)(correction2);
 8001e18:	edd7 7ac6 	vldr	s15, [r7, #792]	@ 0x318
 8001e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e20:	ee17 3a90 	vmov	r3, s15
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f8b7 232a 	ldrh.w	r2, [r7, #810]	@ 0x32a
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f8a7 332a 	strh.w	r3, [r7, #810]	@ 0x32a
			  sprintf(data, "correction: %d\r\n\n ",(int16_t)(correction2));
 8001e32:	edd7 7ac6 	vldr	s15, [r7, #792]	@ 0x318
 8001e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3a:	ee17 3a90 	vmov	r3, s15
 8001e3e:	b21b      	sxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	492a      	ldr	r1, [pc, #168]	@ (8001eec <main+0x504>)
 8001e44:	4823      	ldr	r0, [pc, #140]	@ (8001ed4 <main+0x4ec>)
 8001e46:	f007 fe3d 	bl	8009ac4 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001e4a:	4822      	ldr	r0, [pc, #136]	@ (8001ed4 <main+0x4ec>)
 8001e4c:	f7fe fa20 	bl	8000290 <strlen>
 8001e50:	4603      	mov	r3, r0
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2364      	movs	r3, #100	@ 0x64
 8001e56:	491f      	ldr	r1, [pc, #124]	@ (8001ed4 <main+0x4ec>)
 8001e58:	481f      	ldr	r0, [pc, #124]	@ (8001ed8 <main+0x4f0>)
 8001e5a:	f005 fcdd 	bl	8007818 <HAL_UART_Transmit>
		  }
		  avg = 0;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001edc <main+0x4f4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
		  sprintf(data, "new dac val: %d\r\n\n ",midpoint_dac_val);
 8001e64:	f8b7 332a 	ldrh.w	r3, [r7, #810]	@ 0x32a
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4921      	ldr	r1, [pc, #132]	@ (8001ef0 <main+0x508>)
 8001e6c:	4819      	ldr	r0, [pc, #100]	@ (8001ed4 <main+0x4ec>)
 8001e6e:	f007 fe29 	bl	8009ac4 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001e72:	4818      	ldr	r0, [pc, #96]	@ (8001ed4 <main+0x4ec>)
 8001e74:	f7fe fa0c 	bl	8000290 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	2364      	movs	r3, #100	@ 0x64
 8001e7e:	4915      	ldr	r1, [pc, #84]	@ (8001ed4 <main+0x4ec>)
 8001e80:	4815      	ldr	r0, [pc, #84]	@ (8001ed8 <main+0x4f0>)
 8001e82:	f005 fcc9 	bl	8007818 <HAL_UART_Transmit>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val);
 8001e86:	f8b7 332a 	ldrh.w	r3, [r7, #810]	@ 0x32a
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <main+0x50c>)
 8001e90:	f003 f86c 	bl	8004f6c <HAL_DAC_SetValue>

	  		fft_count=0;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <main+0x510>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	801a      	strh	r2, [r3, #0]
	  		avgPhaseShift = 0;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <main+0x514>)
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
			  for(int i =0;i<=2;i++){
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8001ea8:	e00a      	b.n	8001ec0 <main+0x4d8>
				  freq_mag[i]=0;
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <main+0x4fc>)
 8001eac:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i =0;i<=2;i++){
 8001eb6:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8001ec0:	f8d7 3320 	ldr.w	r3, [r7, #800]	@ 0x320
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	ddf0      	ble.n	8001eaa <main+0x4c2>
			  }
			  fft_count=0;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <main+0x510>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001ece:	e6cb      	b.n	8001c68 <main+0x280>
 8001ed0:	0800b818 	.word	0x0800b818
 8001ed4:	2000744c 	.word	0x2000744c
 8001ed8:	2000021c 	.word	0x2000021c
 8001edc:	20007480 	.word	0x20007480
 8001ee0:	0800b854 	.word	0x0800b854
 8001ee4:	20007484 	.word	0x20007484
 8001ee8:	000249f0 	.word	0x000249f0
 8001eec:	0800b860 	.word	0x0800b860
 8001ef0:	0800b874 	.word	0x0800b874
 8001ef4:	20000128 	.word	0x20000128
 8001ef8:	2000747e 	.word	0x2000747e
 8001efc:	20007490 	.word	0x20007490

08001f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b096      	sub	sp, #88	@ 0x58
 8001f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	2244      	movs	r2, #68	@ 0x44
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f007 fdf8 	bl	8009b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f14:	463b      	mov	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f22:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f26:	f003 fdc5 	bl	8005ab4 <HAL_PWREx_ControlVoltageScaling>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f30:	f000 fa9a 	bl	8002468 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f34:	2310      	movs	r3, #16
 8001f36:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f40:	2360      	movs	r3, #96	@ 0x60
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f44:	2302      	movs	r3, #2
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001f50:	2320      	movs	r3, #32
 8001f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f54:	2307      	movs	r3, #7
 8001f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fdfb 	bl	8005b60 <HAL_RCC_OscConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001f70:	f000 fa7a 	bl	8002468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f74:	230f      	movs	r3, #15
 8001f76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2103      	movs	r1, #3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 f9c3 	bl	8006318 <HAL_RCC_ClockConfig>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f98:	f000 fa66 	bl	8002468 <Error_Handler>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3758      	adds	r7, #88	@ 0x58
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fc6:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fc8:	4a30      	ldr	r2, [pc, #192]	@ (800208c <MX_ADC1_Init+0xe8>)
 8001fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fe0:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fec:	4b26      	ldr	r3, [pc, #152]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ff2:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002008:	2200      	movs	r2, #0
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <MX_ADC1_Init+0xe4>)
 800200e:	2200      	movs	r2, #0
 8002010:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800201a:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <MX_ADC1_Init+0xe4>)
 800201c:	2200      	movs	r2, #0
 800201e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002028:	4817      	ldr	r0, [pc, #92]	@ (8002088 <MX_ADC1_Init+0xe4>)
 800202a:	f000 ff89 	bl	8002f40 <HAL_ADC_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002034:	f000 fa18 	bl	8002468 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	4619      	mov	r1, r3
 8002042:	4811      	ldr	r0, [pc, #68]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002044:	f002 fc96 	bl	8004974 <HAL_ADCEx_MultiModeConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800204e:	f000 fa0b 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002052:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <MX_ADC1_Init+0xec>)
 8002054:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002056:	2306      	movs	r3, #6
 8002058:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800205e:	237f      	movs	r3, #127	@ 0x7f
 8002060:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002062:	2304      	movs	r3, #4
 8002064:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	@ (8002088 <MX_ADC1_Init+0xe4>)
 8002070:	f001 fd74 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800207a:	f000 f9f5 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	3728      	adds	r7, #40	@ 0x28
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000007c 	.word	0x2000007c
 800208c:	50040000 	.word	0x50040000
 8002090:	14f00020 	.word	0x14f00020

08002094 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2224      	movs	r2, #36	@ 0x24
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f007 fd2f 	bl	8009b04 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <MX_DAC1_Init+0x74>)
 80020a8:	4a18      	ldr	r2, [pc, #96]	@ (800210c <MX_DAC1_Init+0x78>)
 80020aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020ac:	4816      	ldr	r0, [pc, #88]	@ (8002108 <MX_DAC1_Init+0x74>)
 80020ae:	f002 fe22 	bl	8004cf6 <HAL_DAC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80020b8:	f000 f9d6 	bl	8002468 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	480c      	ldr	r0, [pc, #48]	@ (8002108 <MX_DAC1_Init+0x74>)
 80020d8:	f002 ff8b 	bl	8004ff2 <HAL_DAC_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80020e2:	f000 f9c1 	bl	8002468 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80020e6:	2304      	movs	r3, #4
 80020e8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2210      	movs	r2, #16
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_DAC1_Init+0x74>)
 80020f2:	f002 ff7e 	bl	8004ff2 <HAL_DAC_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80020fc:	f000 f9b4 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	@ 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000128 	.word	0x20000128
 800210c:	40007400 	.word	0x40007400

08002110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002130:	4a20      	ldr	r2, [pc, #128]	@ (80021b4 <MX_TIM1_Init+0xa4>)
 8002132:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 624;
 8002134:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002136:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800213a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002144:	2209      	movs	r2, #9
 8002146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800214e:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002150:	2200      	movs	r2, #0
 8002152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002156:	2200      	movs	r2, #0
 8002158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800215a:	4815      	ldr	r0, [pc, #84]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 800215c:	f004 ffbc 	bl	80070d8 <HAL_TIM_Base_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002166:	f000 f97f 	bl	8002468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	480e      	ldr	r0, [pc, #56]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 8002178:	f005 f86e 	bl	8007258 <HAL_TIM_ConfigClockSource>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002182:	f000 f971 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002186:	2320      	movs	r3, #32
 8002188:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800218a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800218e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <MX_TIM1_Init+0xa0>)
 800219a:	f005 fa67 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80021a4:	f000 f960 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000184 	.word	0x20000184
 80021b4:	40012c00 	.word	0x40012c00

080021b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <MX_TIM6_Init+0x64>)
 80021ca:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <MX_TIM6_Init+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <MX_TIM6_Init+0x64>)
 80021d0:	223f      	movs	r2, #63	@ 0x3f
 80021d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <MX_TIM6_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <MX_TIM6_Init+0x64>)
 80021dc:	2209      	movs	r2, #9
 80021de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <MX_TIM6_Init+0x64>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021e6:	480d      	ldr	r0, [pc, #52]	@ (800221c <MX_TIM6_Init+0x64>)
 80021e8:	f004 ff76 	bl	80070d8 <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021f2:	f000 f939 	bl	8002468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021f6:	2320      	movs	r3, #32
 80021f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	@ (800221c <MX_TIM6_Init+0x64>)
 8002204:	f005 fa32 	bl	800766c <HAL_TIMEx_MasterConfigSynchronization>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800220e:	f000 f92b 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001d0 	.word	0x200001d0
 8002220:	40001000 	.word	0x40001000

08002224 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800222a:	4a15      	ldr	r2, [pc, #84]	@ (8002280 <MX_USART2_UART_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b09      	ldr	r3, [pc, #36]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <MX_USART2_UART_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	@ (800227c <MX_USART2_UART_Init+0x58>)
 8002268:	f005 fa88 	bl	800777c <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002272:	f000 f8f9 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000021c 	.word	0x2000021c
 8002280:	40004400 	.word	0x40004400

08002284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <MX_DMA_Init+0x48>)
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	4a0f      	ldr	r2, [pc, #60]	@ (80022cc <MX_DMA_Init+0x48>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6493      	str	r3, [r2, #72]	@ 0x48
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <MX_DMA_Init+0x48>)
 8002298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	200b      	movs	r0, #11
 80022a8:	f002 fcef 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022ac:	200b      	movs	r0, #11
 80022ae:	f002 fd08 	bl	8004cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	200e      	movs	r0, #14
 80022b8:	f002 fce7 	bl	8004c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80022bc:	200e      	movs	r0, #14
 80022be:	f002 fd00 	bl	8004cc2 <HAL_NVIC_EnableIRQ>

}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	@ 0x28
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b21      	ldr	r3, [pc, #132]	@ (800236c <MX_GPIO_Init+0x9c>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <MX_GPIO_Init+0x9c>)
 80022ec:	f043 0304 	orr.w	r3, r3, #4
 80022f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <MX_GPIO_Init+0x9c>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	4a1a      	ldr	r2, [pc, #104]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_GPIO_Init+0x9c>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	4a14      	ldr	r2, [pc, #80]	@ (800236c <MX_GPIO_Init+0x9c>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	4a0e      	ldr	r2, [pc, #56]	@ (800236c <MX_GPIO_Init+0x9c>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233a:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_GPIO_Init+0x9c>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002346:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800234c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4804      	ldr	r0, [pc, #16]	@ (8002370 <MX_GPIO_Init+0xa0>)
 800235e:	f003 f9f1 	bl	8005744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	48000800 	.word	0x48000800

08002374 <MX_ADC1_Init2>:

/* USER CODE BEGIN 4 */
void MX_ADC1_Init2(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <MX_ADC1_Init2+0xe8>)
 8002398:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <MX_ADC1_Init2+0xec>)
 800239a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <MX_ADC1_Init2+0xe8>)
 800239e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023aa:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023b0:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023b6:	4b29      	ldr	r3, [pc, #164]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023b8:	2204      	movs	r2, #4
 80023ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023c2:	4b26      	ldr	r3, [pc, #152]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80023c8:	4b24      	ldr	r3, [pc, #144]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ce:	4b23      	ldr	r3, [pc, #140]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023d8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023e6:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023fc:	4817      	ldr	r0, [pc, #92]	@ (800245c <MX_ADC1_Init2+0xe8>)
 80023fe:	f000 fd9f 	bl	8002f40 <HAL_ADC_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_ADC1_Init2+0x98>
  {
    Error_Handler();
 8002408:	f000 f82e 	bl	8002468 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4811      	ldr	r0, [pc, #68]	@ (800245c <MX_ADC1_Init2+0xe8>)
 8002418:	f002 faac 	bl	8004974 <HAL_ADCEx_MultiModeConfigChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_ADC1_Init2+0xb2>
  {
    Error_Handler();
 8002422:	f000 f821 	bl	8002468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_ADC1_Init2+0xf0>)
 8002428:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800242a:	2306      	movs	r3, #6
 800242c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002432:	237f      	movs	r3, #127	@ 0x7f
 8002434:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002436:	2304      	movs	r3, #4
 8002438:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4806      	ldr	r0, [pc, #24]	@ (800245c <MX_ADC1_Init2+0xe8>)
 8002444:	f001 fb8a 	bl	8003b5c <HAL_ADC_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_ADC1_Init2+0xde>
  {
    Error_Handler();
 800244e:	f000 f80b 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	@ 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000007c 	.word	0x2000007c
 8002460:	50040000 	.word	0x50040000
 8002464:	14f00020 	.word	0x14f00020

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <Error_Handler+0x8>

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <HAL_MspInit+0x44>)
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <HAL_MspInit+0x44>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6613      	str	r3, [r2, #96]	@ 0x60
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_MspInit+0x44>)
 8002488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_MspInit+0x44>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a08      	ldr	r2, [pc, #32]	@ (80024b8 <HAL_MspInit+0x44>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_MspInit+0x44>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0ac      	sub	sp, #176	@ 0xb0
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2288      	movs	r2, #136	@ 0x88
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f007 fb11 	bl	8009b04 <memset>
  if(hadc->Instance==ADC1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a41      	ldr	r2, [pc, #260]	@ (80025ec <HAL_ADC_MspInit+0x130>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d17a      	bne.n	80025e2 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80024f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80024f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002502:	2310      	movs	r3, #16
 8002504:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002506:	2307      	movs	r3, #7
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800250a:	2302      	movs	r3, #2
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 800250e:	2308      	movs	r3, #8
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002512:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4618      	mov	r0, r3
 800251e:	f004 f91f 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002528:	f7ff ff9e 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	4a2f      	ldr	r2, [pc, #188]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 8002532:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002538:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a29      	ldr	r2, [pc, #164]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_ADC_MspInit+0x134>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800255c:	2301      	movs	r3, #1
 800255e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002562:	230b      	movs	r3, #11
 8002564:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002578:	f003 f8e4 	bl	8005744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 800257e:	4a1e      	ldr	r2, [pc, #120]	@ (80025f8 <HAL_ADC_MspInit+0x13c>)
 8002580:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002582:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002588:	4b1a      	ldr	r3, [pc, #104]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800258e:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 8002596:	2280      	movs	r2, #128	@ 0x80
 8002598:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 800259c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025aa:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025ac:	2220      	movs	r2, #32
 80025ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025b0:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b6:	480f      	ldr	r0, [pc, #60]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025b8:	f002 fecc 	bl	8005354 <HAL_DMA_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80025c2:	f7ff ff51 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80025cc:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <HAL_ADC_MspInit+0x138>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2012      	movs	r0, #18
 80025d8:	f002 fb57 	bl	8004c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025dc:	2012      	movs	r0, #18
 80025de:	f002 fb70 	bl	8004cc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025e2:	bf00      	nop
 80025e4:	37b0      	adds	r7, #176	@ 0xb0
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	50040000 	.word	0x50040000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	200000e0 	.word	0x200000e0
 80025f8:	40020008 	.word	0x40020008

080025fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2b      	ldr	r2, [pc, #172]	@ (80026c8 <HAL_DAC_MspInit+0xcc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d14f      	bne.n	80026be <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800261e:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4a2a      	ldr	r2, [pc, #168]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 8002624:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	4a24      	ldr	r2, [pc, #144]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002642:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <HAL_DAC_MspInit+0xd0>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800264e:	2330      	movs	r3, #48	@ 0x30
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002652:	2303      	movs	r3, #3
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002664:	f003 f86e 	bl	8005744 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 800266a:	4a1a      	ldr	r2, [pc, #104]	@ (80026d4 <HAL_DAC_MspInit+0xd8>)
 800266c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 800266e:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002670:	2205      	movs	r2, #5
 8002672:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002676:	2210      	movs	r2, #16
 8002678:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002680:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002682:	2280      	movs	r2, #128	@ 0x80
 8002684:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800268c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002694:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 8002698:	2220      	movs	r2, #32
 800269a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80026a2:	480b      	ldr	r0, [pc, #44]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 80026a4:	f002 fe56 	bl	8005354 <HAL_DMA_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80026ae:	f7ff fedb 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a06      	ldr	r2, [pc, #24]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	4a05      	ldr	r2, [pc, #20]	@ (80026d0 <HAL_DAC_MspInit+0xd4>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	@ 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40007400 	.word	0x40007400
 80026cc:	40021000 	.word	0x40021000
 80026d0:	2000013c 	.word	0x2000013c
 80026d4:	40020044 	.word	0x40020044

080026d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <HAL_TIM_Base_MspInit+0x5c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10c      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ee:	4a12      	ldr	r2, [pc, #72]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 80026f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002702:	e010      	b.n	8002726 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM6)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0c      	ldr	r2, [pc, #48]	@ (800273c <HAL_TIM_Base_MspInit+0x64>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10b      	bne.n	8002726 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	4a09      	ldr	r2, [pc, #36]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_TIM_Base_MspInit+0x60>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40021000 	.word	0x40021000
 800273c:	40001000 	.word	0x40001000

08002740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0ac      	sub	sp, #176	@ 0xb0
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2288      	movs	r2, #136	@ 0x88
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f007 f9cf 	bl	8009b04 <memset>
  if(huart->Instance==USART2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <HAL_UART_MspInit+0xb0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d13b      	bne.n	80027e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002770:	2302      	movs	r3, #2
 8002772:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002774:	2300      	movs	r3, #0
 8002776:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4618      	mov	r0, r3
 800277e:	f003 ffef 	bl	8006760 <HAL_RCCEx_PeriphCLKConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002788:	f7ff fe6e 	bl	8002468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 8002792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
 8002798:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 80027a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a8:	4a12      	ldr	r2, [pc, #72]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b0:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_UART_MspInit+0xb4>)
 80027b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027bc:	230c      	movs	r3, #12
 80027be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027d4:	2307      	movs	r3, #7
 80027d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027de:	4619      	mov	r1, r3
 80027e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e4:	f002 ffae 	bl	8005744 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	37b0      	adds	r7, #176	@ 0xb0
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40021000 	.word	0x40021000

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <NMI_Handler+0x4>

08002800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <MemManage_Handler+0x4>

08002810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <UsageFault_Handler+0x4>

08002820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284e:	f000 f8ef 	bl	8002a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <DMA1_Channel1_IRQHandler+0x10>)
 800285e:	f002 fe91 	bl	8005584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200000e0 	.word	0x200000e0

0800286c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <DMA1_Channel4_IRQHandler+0x10>)
 8002872:	f002 fe87 	bl	8005584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000013c 	.word	0x2000013c

08002880 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <ADC1_2_IRQHandler+0x10>)
 8002886:	f000 ff3b 	bl	8003700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000007c 	.word	0x2000007c

08002894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <_sbrk+0x5c>)
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <_sbrk+0x60>)
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <_sbrk+0x64>)
 80028b2:	4a12      	ldr	r2, [pc, #72]	@ (80028fc <_sbrk+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <_sbrk+0x64>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d207      	bcs.n	80028d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c4:	f007 f926 	bl	8009b14 <__errno>
 80028c8:	4603      	mov	r3, r0
 80028ca:	220c      	movs	r2, #12
 80028cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e009      	b.n	80028e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028da:	4b07      	ldr	r3, [pc, #28]	@ (80028f8 <_sbrk+0x64>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <_sbrk+0x64>)
 80028e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e6:	68fb      	ldr	r3, [r7, #12]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20018000 	.word	0x20018000
 80028f4:	00000400 	.word	0x00000400
 80028f8:	20007494 	.word	0x20007494
 80028fc:	200075e8 	.word	0x200075e8

08002900 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <SystemInit+0x20>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <SystemInit+0x20>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800295c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002928:	f7ff ffea 	bl	8002900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	@ (8002960 <LoopForever+0x6>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	@ (8002964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	@ (8002968 <LoopForever+0xe>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	@ (8002970 <LoopForever+0x16>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002952:	f007 f8e5 	bl	8009b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002956:	f7ff f847 	bl	80019e8 <main>

0800295a <LoopForever>:

LoopForever:
    b LoopForever
 800295a:	e7fe      	b.n	800295a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800295c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002968:	0801ef80 	.word	0x0801ef80
  ldr r2, =_sbss
 800296c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002970:	200075e4 	.word	0x200075e4

08002974 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC3_IRQHandler>
	...

08002978 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_Init+0x3c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <HAL_Init+0x3c>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298e:	2003      	movs	r0, #3
 8002990:	f002 f970 	bl	8004c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002994:	2000      	movs	r0, #0
 8002996:	f000 f80f 	bl	80029b8 <HAL_InitTick>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	e001      	b.n	80029aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a6:	f7ff fd65 	bl	8002474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029aa:	79fb      	ldrb	r3, [r7, #7]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029c4:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029cc:	4b16      	ldr	r3, [pc, #88]	@ (8002a28 <HAL_InitTick+0x70>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <HAL_InitTick+0x6c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 f97b 	bl	8004cde <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10f      	bne.n	8002a0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b0f      	cmp	r3, #15
 80029f2:	d809      	bhi.n	8002a08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f4:	2200      	movs	r2, #0
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	f002 f945 	bl	8004c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a00:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <HAL_InitTick+0x74>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e007      	b.n	8002a18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e004      	b.n	8002a18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e001      	b.n	8002a18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	2000000c 	.word	0x2000000c
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	20000008 	.word	0x20000008

08002a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_IncTick+0x24>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	@ (8002a54 <HAL_IncTick+0x24>)
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20007498 	.word	0x20007498

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20007498 	.word	0x20007498

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3360      	adds	r3, #96	@ 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <LL_ADC_SetOffset+0x44>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b58:	bf00      	nop
 8002b5a:	371c      	adds	r7, #28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	03fff000 	.word	0x03fff000

08002b68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3360      	adds	r3, #96	@ 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	3360      	adds	r3, #96	@ 0x60
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3330      	adds	r3, #48	@ 0x30
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	211f      	movs	r1, #31
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	f003 011f 	and.w	r1, r3, #31
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 031f 	and.w	r3, r3, #31
 8002c32:	fa01 f303 	lsl.w	r3, r1, r3
 8002c36:	431a      	orrs	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c54:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	0e5b      	lsrs	r3, r3, #25
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	4413      	add	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0d1b      	lsrs	r3, r3, #20
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2107      	movs	r1, #7
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0d1b      	lsrs	r3, r3, #20
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	401a      	ands	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f003 0318 	and.w	r3, r3, #24
 8002ce6:	4908      	ldr	r1, [pc, #32]	@ (8002d08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ce8:	40d9      	lsrs	r1, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	400b      	ands	r3, r1
 8002cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	0007ffff 	.word	0x0007ffff

08002d0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 031f 	and.w	r3, r3, #31
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d7c:	d101      	bne.n	8002d82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <LL_ADC_IsEnabled+0x18>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <LL_ADC_IsEnabled+0x1a>
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d101      	bne.n	8002e6e <LL_ADC_IsDisableOngoing+0x18>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_ADC_IsDisableOngoing+0x1a>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e90:	f043 0204 	orr.w	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d101      	bne.n	8002ee4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e130      	b.n	80031bc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff faa7 	bl	80024bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fef1 	bl	8002d68 <LL_ADC_IsDeepPowerDownEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fed7 	bl	8002d44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff0c 	bl	8002db8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fef0 	bl	8002d90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fb0:	4b84      	ldr	r3, [pc, #528]	@ (80031c4 <HAL_ADC_Init+0x284>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	4a84      	ldr	r2, [pc, #528]	@ (80031c8 <HAL_ADC_Init+0x288>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fc4:	e002      	b.n	8002fcc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f9      	bne.n	8002fc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff feee 	bl	8002db8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10d      	bne.n	8002ffe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	f043 0210 	orr.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff62 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 8003008:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 80c9 	bne.w	80031aa <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 80c5 	bne.w	80031aa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003028:	f043 0202 	orr.w	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fefb 	bl	8002e30 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d115      	bne.n	800306c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003040:	4862      	ldr	r0, [pc, #392]	@ (80031cc <HAL_ADC_Init+0x28c>)
 8003042:	f7ff fef5 	bl	8002e30 <LL_ADC_IsEnabled>
 8003046:	4604      	mov	r4, r0
 8003048:	4861      	ldr	r0, [pc, #388]	@ (80031d0 <HAL_ADC_Init+0x290>)
 800304a:	f7ff fef1 	bl	8002e30 <LL_ADC_IsEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	431c      	orrs	r4, r3
 8003052:	4860      	ldr	r0, [pc, #384]	@ (80031d4 <HAL_ADC_Init+0x294>)
 8003054:	f7ff feec 	bl	8002e30 <LL_ADC_IsEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	4323      	orrs	r3, r4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4619      	mov	r1, r3
 8003066:	485c      	ldr	r0, [pc, #368]	@ (80031d8 <HAL_ADC_Init+0x298>)
 8003068:	f7ff fd26 	bl	8002ab8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7e5b      	ldrb	r3, [r3, #25]
 8003070:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003076:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800307c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003082:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d106      	bne.n	80030a8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	045b      	lsls	r3, r3, #17
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <HAL_ADC_Init+0x29c>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	69b9      	ldr	r1, [r7, #24]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff1c 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 80030e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d13d      	bne.n	8003166 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d13a      	bne.n	8003166 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003120:	2b01      	cmp	r3, #1
 8003122:	d118      	bne.n	8003156 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800312e:	f023 0304 	bic.w	r3, r3, #4
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003140:	4311      	orrs	r1, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003146:	430a      	orrs	r2, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e007      	b.n	8003166 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10c      	bne.n	8003188 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	f023 010f 	bic.w	r1, r3, #15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	1e5a      	subs	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
 8003186:	e007      	b.n	8003198 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020f 	bic.w	r2, r2, #15
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	f023 0303 	bic.w	r3, r3, #3
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80031a8:	e007      	b.n	80031ba <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3724      	adds	r7, #36	@ 0x24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	20000004 	.word	0x20000004
 80031c8:	053e2d63 	.word	0x053e2d63
 80031cc:	50040000 	.word	0x50040000
 80031d0:	50040100 	.word	0x50040100
 80031d4:	50040200 	.word	0x50040200
 80031d8:	50040300 	.word	0x50040300
 80031dc:	fff0c007 	.word	0xfff0c007

080031e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e8:	4857      	ldr	r0, [pc, #348]	@ (8003348 <HAL_ADC_Start+0x168>)
 80031ea:	f7ff fd8f 	bl	8002d0c <LL_ADC_GetMultimode>
 80031ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fe69 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f040 809c 	bne.w	800333a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_ADC_Start+0x30>
 800320c:	2302      	movs	r3, #2
 800320e:	e097      	b.n	8003340 <HAL_ADC_Start+0x160>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f001 f94d 	bl	80044b8 <ADC_Enable>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 8083 	bne.w	8003330 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a42      	ldr	r2, [pc, #264]	@ (800334c <HAL_ADC_Start+0x16c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d002      	beq.n	800324e <HAL_ADC_Start+0x6e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	e000      	b.n	8003250 <HAL_ADC_Start+0x70>
 800324e:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_ADC_Start+0x170>)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	4293      	cmp	r3, r2
 8003256:	d002      	beq.n	800325e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003276:	d106      	bne.n	8003286 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f023 0206 	bic.w	r2, r3, #6
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	659a      	str	r2, [r3, #88]	@ 0x58
 8003284:	e002      	b.n	800328c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	221c      	movs	r2, #28
 8003292:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_ADC_Start+0x16c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d002      	beq.n	80032ac <HAL_ADC_Start+0xcc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e000      	b.n	80032ae <HAL_ADC_Start+0xce>
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <HAL_ADC_Start+0x170>)
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d008      	beq.n	80032c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d002      	beq.n	80032c8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d114      	bne.n	80032f2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fdc6 	bl	8002e7c <LL_ADC_REG_StartConversion>
 80032f0:	e025      	b.n	800333e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a12      	ldr	r2, [pc, #72]	@ (800334c <HAL_ADC_Start+0x16c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d002      	beq.n	800330e <HAL_ADC_Start+0x12e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	e000      	b.n	8003310 <HAL_ADC_Start+0x130>
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <HAL_ADC_Start+0x170>)
 8003310:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003326:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
 800332e:	e006      	b.n	800333e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003338:	e001      	b.n	800333e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800333a:	2302      	movs	r3, #2
 800333c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800333e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	50040300 	.word	0x50040300
 800334c:	50040100 	.word	0x50040100
 8003350:	50040000 	.word	0x50040000

08003354 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_ADC_Stop+0x16>
 8003366:	2302      	movs	r3, #2
 8003368:	e023      	b.n	80033b2 <HAL_ADC_Stop+0x5e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003372:	2103      	movs	r1, #3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 ffe3 	bl	8004340 <ADC_ConversionStop>
 800337a:	4603      	mov	r3, r0
 800337c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f001 f91d 	bl	80045c4 <ADC_Disable>
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800339c:	f023 0301 	bic.w	r3, r3, #1
 80033a0:	f043 0201 	orr.w	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c6:	4866      	ldr	r0, [pc, #408]	@ (8003560 <HAL_ADC_PollForConversion+0x1a4>)
 80033c8:	f7ff fca0 	bl	8002d0c <LL_ADC_GetMultimode>
 80033cc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d102      	bne.n	80033dc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80033d6:	2308      	movs	r3, #8
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e02a      	b.n	8003432 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d002      	beq.n	80033ee <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b09      	cmp	r3, #9
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0a4      	b.n	8003556 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800340c:	2304      	movs	r3, #4
 800340e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003410:	e00f      	b.n	8003432 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003412:	4853      	ldr	r0, [pc, #332]	@ (8003560 <HAL_ADC_PollForConversion+0x1a4>)
 8003414:	f7ff fc88 	bl	8002d28 <LL_ADC_GetMultiDMATransfer>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e093      	b.n	8003556 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800342e:	2304      	movs	r3, #4
 8003430:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003432:	f7ff fb11 	bl	8002a58 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003438:	e021      	b.n	800347e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d01d      	beq.n	800347e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003442:	f7ff fb09 	bl	8002a58 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <HAL_ADC_PollForConversion+0x9c>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d112      	bne.n	800347e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e06b      	b.n	8003556 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0d6      	beq.n	800343a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fb94 	bl	8002bca <LL_ADC_REG_IsTriggerSourceSWStart>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01c      	beq.n	80034e2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e5b      	ldrb	r3, [r3, #25]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d111      	bne.n	80034e2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003564 <HAL_ADC_PollForConversion+0x1a8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d002      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x136>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e000      	b.n	80034f4 <HAL_ADC_PollForConversion+0x138>
 80034f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003568 <HAL_ADC_PollForConversion+0x1ac>)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d008      	beq.n	800350e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d002      	beq.n	800350e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b09      	cmp	r3, #9
 800350c:	d104      	bne.n	8003518 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e00c      	b.n	8003532 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a11      	ldr	r2, [pc, #68]	@ (8003564 <HAL_ADC_PollForConversion+0x1a8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d002      	beq.n	8003528 <HAL_ADC_PollForConversion+0x16c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	e000      	b.n	800352a <HAL_ADC_PollForConversion+0x16e>
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <HAL_ADC_PollForConversion+0x1ac>)
 800352a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2208      	movs	r2, #8
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e008      	b.n	8003554 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	220c      	movs	r2, #12
 8003552:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	50040300 	.word	0x50040300
 8003564:	50040100 	.word	0x50040100
 8003568:	50040000 	.word	0x50040000

0800356c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003578:	4853      	ldr	r0, [pc, #332]	@ (80036c8 <HAL_ADC_Start_DMA+0x15c>)
 800357a:	f7ff fbc7 	bl	8002d0c <LL_ADC_GetMultimode>
 800357e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fca1 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	f040 8093 	bne.w	80036b8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_ADC_Start_DMA+0x34>
 800359c:	2302      	movs	r3, #2
 800359e:	e08e      	b.n	80036be <HAL_ADC_Start_DMA+0x152>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a47      	ldr	r2, [pc, #284]	@ (80036cc <HAL_ADC_Start_DMA+0x160>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d008      	beq.n	80035c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d002      	beq.n	80035c4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b09      	cmp	r3, #9
 80035c2:	d172      	bne.n	80036aa <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 ff77 	bl	80044b8 <ADC_Enable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d165      	bne.n	80036a0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a38      	ldr	r2, [pc, #224]	@ (80036d0 <HAL_ADC_Start_DMA+0x164>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d002      	beq.n	80035f8 <HAL_ADC_Start_DMA+0x8c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	e000      	b.n	80035fa <HAL_ADC_Start_DMA+0x8e>
 80035f8:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <HAL_ADC_Start_DMA+0x168>)
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4293      	cmp	r3, r2
 8003600:	d002      	beq.n	8003608 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	f023 0206 	bic.w	r2, r3, #6
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	659a      	str	r2, [r3, #88]	@ 0x58
 800362c:	e002      	b.n	8003634 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003638:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <HAL_ADC_Start_DMA+0x16c>)
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003640:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <HAL_ADC_Start_DMA+0x170>)
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <HAL_ADC_Start_DMA+0x174>)
 800364a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	221c      	movs	r2, #28
 8003652:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0210 	orr.w	r2, r2, #16
 800366a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3340      	adds	r3, #64	@ 0x40
 8003686:	4619      	mov	r1, r3
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f001 ff1a 	bl	80054c4 <HAL_DMA_Start_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fbef 	bl	8002e7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800369e:	e00d      	b.n	80036bc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80036a8:	e008      	b.n	80036bc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80036b6:	e001      	b.n	80036bc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
 80036ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	50040300 	.word	0x50040300
 80036cc:	50040200 	.word	0x50040200
 80036d0:	50040100 	.word	0x50040100
 80036d4:	50040000 	.word	0x50040000
 80036d8:	08004683 	.word	0x08004683
 80036dc:	0800475b 	.word	0x0800475b
 80036e0:	08004777 	.word	0x08004777

080036e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	@ 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800371c:	4882      	ldr	r0, [pc, #520]	@ (8003928 <HAL_ADC_IRQHandler+0x228>)
 800371e:	f7ff faf5 	bl	8002d0c <LL_ADC_GetMultimode>
 8003722:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d017      	beq.n	800375e <HAL_ADC_IRQHandler+0x5e>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d012      	beq.n	800375e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	d105      	bne.n	8003750 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f001 f905 	bl	8004960 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2202      	movs	r2, #2
 800375c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d004      	beq.n	8003772 <HAL_ADC_IRQHandler+0x72>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 8083 	beq.w	8003884 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d07d      	beq.n	8003884 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fa10 	bl	8002bca <LL_ADC_REG_IsTriggerSourceSWStart>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d062      	beq.n	8003876 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5d      	ldr	r2, [pc, #372]	@ (800392c <HAL_ADC_IRQHandler+0x22c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d002      	beq.n	80037c0 <HAL_ADC_IRQHandler+0xc0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e000      	b.n	80037c2 <HAL_ADC_IRQHandler+0xc2>
 80037c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003930 <HAL_ADC_IRQHandler+0x230>)
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d008      	beq.n	80037dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b05      	cmp	r3, #5
 80037d4:	d002      	beq.n	80037dc <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d104      	bne.n	80037e6 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
 80037e4:	e00c      	b.n	8003800 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a50      	ldr	r2, [pc, #320]	@ (800392c <HAL_ADC_IRQHandler+0x22c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d002      	beq.n	80037f6 <HAL_ADC_IRQHandler+0xf6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_IRQHandler+0xf8>
 80037f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003930 <HAL_ADC_IRQHandler+0x230>)
 80037f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d135      	bne.n	8003876 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12e      	bne.n	8003876 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fb55 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11a      	bne.n	800385e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 020c 	bic.w	r2, r2, #12
 8003836:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d112      	bne.n	8003876 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	@ 0x54
 800385c:	e00b      	b.n	8003876 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	f043 0210 	orr.w	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd ff46 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	220c      	movs	r2, #12
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_ADC_IRQHandler+0x198>
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 809f 	beq.w	80039e2 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8099 	beq.w	80039e2 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f9bb 	bl	8002c48 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80038d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f976 	bl	8002bca <LL_ADC_REG_IsTriggerSourceSWStart>
 80038de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a11      	ldr	r2, [pc, #68]	@ (800392c <HAL_ADC_IRQHandler+0x22c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d002      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x1f0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_IRQHandler+0x1f2>
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_ADC_IRQHandler+0x230>)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d008      	beq.n	800390c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d002      	beq.n	800390c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b07      	cmp	r3, #7
 800390a:	d104      	bne.n	8003916 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	e013      	b.n	800393e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a04      	ldr	r2, [pc, #16]	@ (800392c <HAL_ADC_IRQHandler+0x22c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_ADC_IRQHandler+0x234>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e007      	b.n	8003936 <HAL_ADC_IRQHandler+0x236>
 8003926:	bf00      	nop
 8003928:	50040300 	.word	0x50040300
 800392c:	50040100 	.word	0x50040100
 8003930:	50040000 	.word	0x50040000
 8003934:	4b7d      	ldr	r3, [pc, #500]	@ (8003b2c <HAL_ADC_IRQHandler+0x42c>)
 8003936:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d047      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_ADC_IRQHandler+0x25e>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03f      	beq.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d13a      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d133      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d12e      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff facd 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11a      	bne.n	80039bc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003994:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d112      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80039ba:	e00b      	b.n	80039d4 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 ff9b 	bl	8004910 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2260      	movs	r2, #96	@ 0x60
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d011      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x310>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00c      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f896 	bl	8003b34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2280      	movs	r2, #128	@ 0x80
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x340>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a28:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 ff81 	bl	8004938 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d012      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x370>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a58:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 ff73 	bl	800494c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d036      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x3e8>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d031      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a90:	e014      	b.n	8003abc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a98:	4825      	ldr	r0, [pc, #148]	@ (8003b30 <HAL_ADC_IRQHandler+0x430>)
 8003a9a:	f7ff f945 	bl	8002d28 <LL_ADC_GetMultiDMATransfer>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	e008      	b.n	8003abc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f834 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d018      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x424>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d013      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b00:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f043 0208 	orr.w	r2, r3, #8
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 ff00 	bl	8004924 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b24:	bf00      	nop
 8003b26:	3728      	adds	r7, #40	@ 0x28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	50040000 	.word	0x50040000
 8003b30:	50040300 	.word	0x50040300

08003b34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0b6      	sub	sp, #216	@ 0xd8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x22>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e3c9      	b.n	8004312 <HAL_ADC_ConfigChannel+0x7b6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f99e 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 83aa 	bne.w	80042ec <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	3b02      	subs	r3, #2
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d81b      	bhi.n	8003bea <HAL_ADC_ConfigChannel+0x8e>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <HAL_ADC_ConfigChannel+0x5c>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd1 	.word	0x08003bd1
 8003bc0:	08003bd9 	.word	0x08003bd9
 8003bc4:	08003be1 	.word	0x08003be1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003bc8:	230c      	movs	r3, #12
 8003bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bce:	e010      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003bd0:	2312      	movs	r3, #18
 8003bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003bd8:	2318      	movs	r3, #24
 8003bda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bde:	e008      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003be8:	e003      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003bea:	2306      	movs	r3, #6
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003bf0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003c00:	f7fe fff6 	bl	8002bf0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f95f 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 8003c0e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f97f 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 8003c1c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 81a4 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 819f 	bne.w	8003f72 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6819      	ldr	r1, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	461a      	mov	r2, r3
 8003c42:	f7ff f814 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d00a      	beq.n	8003c7e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6919      	ldr	r1, [r3, #16]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c78:	f7fe ff52 	bl	8002b20 <LL_ADC_SetOffset>
 8003c7c:	e179      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe ff6f 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x14e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe ff64 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	e01e      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x18c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ff59 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003cd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003cd8:	2320      	movs	r3, #32
 8003cda:	e004      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ce0:	fab3 f383 	clz	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x1a4>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	0e9b      	lsrs	r3, r3, #26
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	e018      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x1d6>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003d14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003d1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	e004      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d106      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe ff28 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ff0c 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x214>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe ff01 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	0e9b      	lsrs	r3, r3, #26
 8003d6a:	f003 021f 	and.w	r2, r3, #31
 8003d6e:	e01e      	b.n	8003dae <HAL_ADC_ConfigChannel+0x252>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fef6 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e004      	b.n	8003dac <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x26a>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	0e9b      	lsrs	r3, r3, #26
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	e018      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x29c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003dda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003de2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003dea:	2320      	movs	r3, #32
 8003dec:	e004      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d106      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fec5 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe fea9 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x2da>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fe9e 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	0e9b      	lsrs	r3, r3, #26
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	e01e      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x318>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe fe93 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e4c:	fa93 f3a3 	rbit	r3, r3
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003e64:	2320      	movs	r3, #32
 8003e66:	e004      	b.n	8003e72 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	fab3 f383 	clz	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x330>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0e9b      	lsrs	r3, r3, #26
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	e014      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x35a>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	e004      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d106      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fe66 	bl	8002b94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2103      	movs	r1, #3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fe4a 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x398>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2103      	movs	r1, #3
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fe3f 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003eea:	4603      	mov	r3, r0
 8003eec:	0e9b      	lsrs	r3, r3, #26
 8003eee:	f003 021f 	and.w	r2, r3, #31
 8003ef2:	e017      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x3c8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2103      	movs	r1, #3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe fe34 	bl	8002b68 <LL_ADC_GetOffsetChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f0e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003f16:	2320      	movs	r3, #32
 8003f18:	e003      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f1c:	fab3 f383 	clz	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x3e0>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	0e9b      	lsrs	r3, r3, #26
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	e011      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x404>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fe11 	bl	8002b94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ff5a 	bl	8002e30 <LL_ADC_IsEnabled>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 8140 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7fe fe97 	bl	8002cc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a8f      	ldr	r2, [pc, #572]	@ (80041d8 <HAL_ADC_ConfigChannel+0x67c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	f040 8131 	bne.w	8004204 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x46e>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	0e9b      	lsrs	r3, r3, #26
 8003fb8:	3301      	adds	r3, #1
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2b09      	cmp	r3, #9
 8003fc0:	bf94      	ite	ls
 8003fc2:	2301      	movls	r3, #1
 8003fc4:	2300      	movhi	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	e019      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x4a2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e003      	b.n	8003fee <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2b09      	cmp	r3, #9
 8003ff6:	bf94      	ite	ls
 8003ff8:	2301      	movls	r3, #1
 8003ffa:	2300      	movhi	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d079      	beq.n	80040f6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_ADC_ConfigChannel+0x4c2>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0e9b      	lsrs	r3, r3, #26
 8004014:	3301      	adds	r3, #1
 8004016:	069b      	lsls	r3, r3, #26
 8004018:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800401c:	e015      	b.n	800404a <HAL_ADC_ConfigChannel+0x4ee>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800402c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004036:	2320      	movs	r3, #32
 8004038:	e003      	b.n	8004042 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	3301      	adds	r3, #1
 8004044:	069b      	lsls	r3, r3, #26
 8004046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_ADC_ConfigChannel+0x50e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	3301      	adds	r3, #1
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	e017      	b.n	800409a <HAL_ADC_ConfigChannel+0x53e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800407a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800407c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004082:	2320      	movs	r3, #32
 8004084:	e003      	b.n	800408e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004088:	fab3 f383 	clz	r3, r3
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3301      	adds	r3, #1
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	ea42 0103 	orr.w	r1, r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x564>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	3301      	adds	r3, #1
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	051b      	lsls	r3, r3, #20
 80040be:	e018      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x596>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e003      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80040dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3301      	adds	r3, #1
 80040e6:	f003 021f 	and.w	r2, r3, #31
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f2:	430b      	orrs	r3, r1
 80040f4:	e081      	b.n	80041fa <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x5b6>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e9b      	lsrs	r3, r3, #26
 8004108:	3301      	adds	r3, #1
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004110:	e015      	b.n	800413e <HAL_ADC_ConfigChannel+0x5e2>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e003      	b.n	8004136 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	3301      	adds	r3, #1
 8004138:	069b      	lsls	r3, r3, #26
 800413a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_ADC_ConfigChannel+0x602>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0e9b      	lsrs	r3, r3, #26
 8004150:	3301      	adds	r3, #1
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2101      	movs	r1, #1
 8004158:	fa01 f303 	lsl.w	r3, r1, r3
 800415c:	e017      	b.n	800418e <HAL_ADC_ConfigChannel+0x632>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	61bb      	str	r3, [r7, #24]
  return result;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004176:	2320      	movs	r3, #32
 8004178:	e003      	b.n	8004182 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3301      	adds	r3, #1
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2101      	movs	r1, #1
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	ea42 0103 	orr.w	r1, r2, r3
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10d      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x65e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0e9b      	lsrs	r3, r3, #26
 80041a4:	3301      	adds	r3, #1
 80041a6:	f003 021f 	and.w	r2, r3, #31
 80041aa:	4613      	mov	r3, r2
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	3b1e      	subs	r3, #30
 80041b2:	051b      	lsls	r3, r3, #20
 80041b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	e01e      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x69c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	60fb      	str	r3, [r7, #12]
  return result;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d104      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80041d2:	2320      	movs	r3, #32
 80041d4:	e006      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x688>
 80041d6:	bf00      	nop
 80041d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	3301      	adds	r3, #1
 80041e6:	f003 021f 	and.w	r2, r3, #31
 80041ea:	4613      	mov	r3, r2
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	3b1e      	subs	r3, #30
 80041f2:	051b      	lsls	r3, r3, #20
 80041f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041fe:	4619      	mov	r1, r3
 8004200:	f7fe fd35 	bl	8002c6e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b44      	ldr	r3, [pc, #272]	@ (800431c <HAL_ADC_ConfigChannel+0x7c0>)
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d07a      	beq.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004210:	4843      	ldr	r0, [pc, #268]	@ (8004320 <HAL_ADC_ConfigChannel+0x7c4>)
 8004212:	f7fe fc77 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 8004216:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a41      	ldr	r2, [pc, #260]	@ (8004324 <HAL_ADC_ConfigChannel+0x7c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d12c      	bne.n	800427e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d126      	bne.n	800427e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3c      	ldr	r2, [pc, #240]	@ (8004328 <HAL_ADC_ConfigChannel+0x7cc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x6e8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3b      	ldr	r2, [pc, #236]	@ (800432c <HAL_ADC_ConfigChannel+0x7d0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d15d      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004248:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800424c:	4619      	mov	r1, r3
 800424e:	4834      	ldr	r0, [pc, #208]	@ (8004320 <HAL_ADC_ConfigChannel+0x7c4>)
 8004250:	f7fe fc45 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004254:	4b36      	ldr	r3, [pc, #216]	@ (8004330 <HAL_ADC_ConfigChannel+0x7d4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	4a36      	ldr	r2, [pc, #216]	@ (8004334 <HAL_ADC_ConfigChannel+0x7d8>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800426e:	e002      	b.n	8004276 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3b01      	subs	r3, #1
 8004274:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f9      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800427c:	e040      	b.n	8004300 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a2d      	ldr	r2, [pc, #180]	@ (8004338 <HAL_ADC_ConfigChannel+0x7dc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d118      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800428c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d112      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <HAL_ADC_ConfigChannel+0x7cc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d004      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0x74c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_ADC_ConfigChannel+0x7d0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d12d      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042b0:	4619      	mov	r1, r3
 80042b2:	481b      	ldr	r0, [pc, #108]	@ (8004320 <HAL_ADC_ConfigChannel+0x7c4>)
 80042b4:	f7fe fc13 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042b8:	e024      	b.n	8004304 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <HAL_ADC_ConfigChannel+0x7e0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d120      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80042c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d11a      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a14      	ldr	r2, [pc, #80]	@ (8004328 <HAL_ADC_ConfigChannel+0x7cc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d115      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042e2:	4619      	mov	r1, r3
 80042e4:	480e      	ldr	r0, [pc, #56]	@ (8004320 <HAL_ADC_ConfigChannel+0x7c4>)
 80042e6:	f7fe fbfa 	bl	8002ade <LL_ADC_SetCommonPathInternalCh>
 80042ea:	e00c      	b.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80042fe:	e002      	b.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004304:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800430e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004312:	4618      	mov	r0, r3
 8004314:	37d8      	adds	r7, #216	@ 0xd8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	80080000 	.word	0x80080000
 8004320:	50040300 	.word	0x50040300
 8004324:	c7520000 	.word	0xc7520000
 8004328:	50040000 	.word	0x50040000
 800432c:	50040200 	.word	0x50040200
 8004330:	20000004 	.word	0x20000004
 8004334:	053e2d63 	.word	0x053e2d63
 8004338:	cb840000 	.word	0xcb840000
 800433c:	80000001 	.word	0x80000001

08004340 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fdb8 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 800435c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fdd9 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 8004368:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d103      	bne.n	8004378 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8098 	beq.w	80044a8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7e5b      	ldrb	r3, [r3, #25]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d126      	bne.n	80043dc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7e1b      	ldrb	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d122      	bne.n	80043dc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800439a:	e014      	b.n	80043c6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4a45      	ldr	r2, [pc, #276]	@ (80044b4 <ADC_ConversionStop+0x174>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d90d      	bls.n	80043c0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e074      	b.n	80044aa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	3301      	adds	r3, #1
 80043c4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d1e3      	bne.n	800439c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2240      	movs	r2, #64	@ 0x40
 80043da:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d014      	beq.n	800440c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fd70 	bl	8002ecc <LL_ADC_REG_IsConversionOngoing>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fd2d 	bl	8002e56 <LL_ADC_IsDisableOngoing>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fd4c 	bl	8002ea4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d014      	beq.n	800443c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe fd7f 	bl	8002f1a <LL_ADC_INJ_IsConversionOngoing>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fd15 	bl	8002e56 <LL_ADC_IsDisableOngoing>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fd5b 	bl	8002ef2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d005      	beq.n	800444e <ADC_ConversionStop+0x10e>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d105      	bne.n	8004454 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004448:	230c      	movs	r3, #12
 800444a:	617b      	str	r3, [r7, #20]
        break;
 800444c:	e005      	b.n	800445a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800444e:	2308      	movs	r3, #8
 8004450:	617b      	str	r3, [r7, #20]
        break;
 8004452:	e002      	b.n	800445a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004454:	2304      	movs	r3, #4
 8004456:	617b      	str	r3, [r7, #20]
        break;
 8004458:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800445a:	f7fe fafd 	bl	8002a58 <HAL_GetTick>
 800445e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004460:	e01b      	b.n	800449a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004462:	f7fe faf9 	bl	8002a58 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b05      	cmp	r3, #5
 800446e:	d914      	bls.n	800449a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004482:	f043 0210 	orr.w	r2, r3, #16
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e007      	b.n	80044aa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	4013      	ands	r3, r2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1dc      	bne.n	8004462 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	a33fffff 	.word	0xa33fffff

080044b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fcb1 	bl	8002e30 <LL_ADC_IsEnabled>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d169      	bne.n	80045a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	4b36      	ldr	r3, [pc, #216]	@ (80045b4 <ADC_Enable+0xfc>)
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f043 0210 	orr.w	r2, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e055      	b.n	80045aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fc6c 	bl	8002de0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004508:	482b      	ldr	r0, [pc, #172]	@ (80045b8 <ADC_Enable+0x100>)
 800450a:	f7fe fafb 	bl	8002b04 <LL_ADC_GetCommonPathInternalCh>
 800450e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004518:	4b28      	ldr	r3, [pc, #160]	@ (80045bc <ADC_Enable+0x104>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	099b      	lsrs	r3, r3, #6
 800451e:	4a28      	ldr	r2, [pc, #160]	@ (80045c0 <ADC_Enable+0x108>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004532:	e002      	b.n	800453a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3b01      	subs	r3, #1
 8004538:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f9      	bne.n	8004534 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004540:	f7fe fa8a 	bl	8002a58 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004546:	e028      	b.n	800459a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fc6f 	bl	8002e30 <LL_ADC_IsEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fc3f 	bl	8002de0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004562:	f7fe fa79 	bl	8002a58 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d914      	bls.n	800459a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d00d      	beq.n	800459a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e007      	b.n	80045aa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d1cf      	bne.n	8004548 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	8000003f 	.word	0x8000003f
 80045b8:	50040300 	.word	0x50040300
 80045bc:	20000004 	.word	0x20000004
 80045c0:	053e2d63 	.word	0x053e2d63

080045c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fc40 	bl	8002e56 <LL_ADC_IsDisableOngoing>
 80045d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fc27 	bl	8002e30 <LL_ADC_IsEnabled>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d047      	beq.n	8004678 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d144      	bne.n	8004678 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030d 	and.w	r3, r3, #13
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d10c      	bne.n	8004616 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fc01 	bl	8002e08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2203      	movs	r2, #3
 800460c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800460e:	f7fe fa23 	bl	8002a58 <HAL_GetTick>
 8004612:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004614:	e029      	b.n	800466a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	f043 0210 	orr.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e023      	b.n	800467a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004632:	f7fe fa11 	bl	8002a58 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d914      	bls.n	800466a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00d      	beq.n	800466a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800465e:	f043 0201 	orr.w	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e007      	b.n	800467a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1dc      	bne.n	8004632 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d14b      	bne.n	8004734 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe fa85 	bl	8002bca <LL_ADC_REG_IsTriggerSourceSWStart>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d032      	beq.n	800472c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d12b      	bne.n	800472c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11f      	bne.n	800472c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046f8:	e018      	b.n	800472c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d111      	bne.n	800472c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7fc ffeb 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004732:	e00e      	b.n	8004752 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff fa01 	bl	8003b48 <HAL_ADC_ErrorCallback>
}
 8004746:	e004      	b.n	8004752 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
}
 8004752:	bf00      	nop
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7fc ff9d 	bl	80016a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	f043 0204 	orr.w	r2, r3, #4
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff f9d3 	bl	8003b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <LL_ADC_IsEnabled>:
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <LL_ADC_IsEnabled+0x18>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <LL_ADC_IsEnabled+0x1a>
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <LL_ADC_StartCalibration>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	609a      	str	r2, [r3, #8]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_ADC_IsCalibrationOnGoing>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004816:	d101      	bne.n	800481c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_ADC_REG_IsConversionOngoing>:
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d101      	bne.n	8004842 <LL_ADC_REG_IsConversionOngoing+0x18>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_ADCEx_Calibration_Start+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e04d      	b.n	8004908 <HAL_ADCEx_Calibration_Start+0xb8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff fea5 	bl	80045c4 <ADC_Disable>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d136      	bne.n	80048f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800488c:	f023 0302 	bic.w	r3, r3, #2
 8004890:	f043 0202 	orr.w	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff ff96 	bl	80047d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048a4:	e014      	b.n	80048d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80048b2:	d30d      	bcc.n	80048d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	f023 0312 	bic.w	r3, r3, #18
 80048bc:	f043 0210 	orr.w	r2, r3, #16
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e01b      	b.n	8004908 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff94 	bl	8004802 <LL_ADC_IsCalibrationOnGoing>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e2      	bne.n	80048a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	f043 0201 	orr.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80048f0:	e005      	b.n	80048fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	f043 0210 	orr.w	r2, r3, #16
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b09f      	sub	sp, #124	@ 0x7c
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800498a:	2b01      	cmp	r3, #1
 800498c:	d101      	bne.n	8004992 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800498e:	2302      	movs	r3, #2
 8004990:	e093      	b.n	8004aba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800499a:	2300      	movs	r3, #0
 800499c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800499e:	2300      	movs	r3, #0
 80049a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a47      	ldr	r2, [pc, #284]	@ (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d102      	bne.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049ac:	4b46      	ldr	r3, [pc, #280]	@ (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	e001      	b.n	80049b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e072      	b.n	8004aba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff27 	bl	800482a <LL_ADC_REG_IsConversionOngoing>
 80049dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff ff21 	bl	800482a <LL_ADC_REG_IsConversionOngoing>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d154      	bne.n	8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80049ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d151      	bne.n	8004a98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80049f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d02c      	beq.n	8004a5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a12:	035b      	lsls	r3, r3, #13
 8004a14:	430b      	orrs	r3, r1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a1c:	4829      	ldr	r0, [pc, #164]	@ (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004a1e:	f7ff fec4 	bl	80047aa <LL_ADC_IsEnabled>
 8004a22:	4604      	mov	r4, r0
 8004a24:	4828      	ldr	r0, [pc, #160]	@ (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a26:	f7ff fec0 	bl	80047aa <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	431c      	orrs	r4, r3
 8004a2e:	4828      	ldr	r0, [pc, #160]	@ (8004ad0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a30:	f7ff febb 	bl	80047aa <LL_ADC_IsEnabled>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4323      	orrs	r3, r4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d137      	bne.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a44:	f023 030f 	bic.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	6811      	ldr	r1, [r2, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	6892      	ldr	r2, [r2, #8]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	431a      	orrs	r2, r3
 8004a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a58:	e028      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a66:	4817      	ldr	r0, [pc, #92]	@ (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004a68:	f7ff fe9f 	bl	80047aa <LL_ADC_IsEnabled>
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	4816      	ldr	r0, [pc, #88]	@ (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a70:	f7ff fe9b 	bl	80047aa <LL_ADC_IsEnabled>
 8004a74:	4603      	mov	r3, r0
 8004a76:	431c      	orrs	r4, r3
 8004a78:	4815      	ldr	r0, [pc, #84]	@ (8004ad0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004a7a:	f7ff fe96 	bl	80047aa <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4323      	orrs	r3, r4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d112      	bne.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a8e:	f023 030f 	bic.w	r3, r3, #15
 8004a92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a96:	e009      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004aaa:	e000      	b.n	8004aae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004aac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ab6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	377c      	adds	r7, #124	@ 0x7c
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd90      	pop	{r4, r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	50040000 	.word	0x50040000
 8004ac8:	50040100 	.word	0x50040100
 8004acc:	50040300 	.word	0x50040300
 8004ad0:	50040200 	.word	0x50040200

08004ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004af0:	4013      	ands	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b06:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <__NVIC_SetPriorityGrouping+0x44>)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	60d3      	str	r3, [r2, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000ed00 	.word	0xe000ed00

08004b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b20:	4b04      	ldr	r3, [pc, #16]	@ (8004b34 <__NVIC_GetPriorityGrouping+0x18>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	0a1b      	lsrs	r3, r3, #8
 8004b26:	f003 0307 	and.w	r3, r3, #7
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	db0b      	blt.n	8004b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	f003 021f 	and.w	r2, r3, #31
 8004b50:	4907      	ldr	r1, [pc, #28]	@ (8004b70 <__NVIC_EnableIRQ+0x38>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2001      	movs	r0, #1
 8004b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e100 	.word	0xe000e100

08004b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	6039      	str	r1, [r7, #0]
 8004b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db0a      	blt.n	8004b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	490c      	ldr	r1, [pc, #48]	@ (8004bc0 <__NVIC_SetPriority+0x4c>)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	440b      	add	r3, r1
 8004b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b9c:	e00a      	b.n	8004bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4908      	ldr	r1, [pc, #32]	@ (8004bc4 <__NVIC_SetPriority+0x50>)
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	3b04      	subs	r3, #4
 8004bac:	0112      	lsls	r2, r2, #4
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	761a      	strb	r2, [r3, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	e000e100 	.word	0xe000e100
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f1c3 0307 	rsb	r3, r3, #7
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf28      	it	cs
 8004be6:	2304      	movcs	r3, #4
 8004be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3304      	adds	r3, #4
 8004bee:	2b06      	cmp	r3, #6
 8004bf0:	d902      	bls.n	8004bf8 <NVIC_EncodePriority+0x30>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	3b03      	subs	r3, #3
 8004bf6:	e000      	b.n	8004bfa <NVIC_EncodePriority+0x32>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c10:	f04f 31ff 	mov.w	r1, #4294967295
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	fa01 f303 	lsl.w	r3, r1, r3
 8004c1a:	43d9      	mvns	r1, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c20:	4313      	orrs	r3, r2
         );
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c40:	d301      	bcc.n	8004c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00f      	b.n	8004c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c46:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <SysTick_Config+0x40>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c4e:	210f      	movs	r1, #15
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f7ff ff8e 	bl	8004b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <SysTick_Config+0x40>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5e:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <SysTick_Config+0x40>)
 8004c60:	2207      	movs	r2, #7
 8004c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010

08004c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff29 	bl	8004ad4 <__NVIC_SetPriorityGrouping>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c9c:	f7ff ff3e 	bl	8004b1c <__NVIC_GetPriorityGrouping>
 8004ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	6978      	ldr	r0, [r7, #20]
 8004ca8:	f7ff ff8e 	bl	8004bc8 <NVIC_EncodePriority>
 8004cac:	4602      	mov	r2, r0
 8004cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff5d 	bl	8004b74 <__NVIC_SetPriority>
}
 8004cba:	bf00      	nop
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	4603      	mov	r3, r0
 8004cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff31 	bl	8004b38 <__NVIC_EnableIRQ>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ffa2 	bl	8004c30 <SysTick_Config>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e014      	b.n	8004d32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	791b      	ldrb	r3, [r3, #4]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fd fc6f 	bl	80025fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	795b      	ldrb	r3, [r3, #5]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_DAC_Start+0x16>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e03b      	b.n	8004dc8 <HAL_DAC_Start+0x8e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d118      	bne.n	8004dba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	e00f      	b.n	8004dba <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da8:	d107      	bne.n	8004dba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0202 	orr.w	r2, r2, #2
 8004db8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	795b      	ldrb	r3, [r3, #5]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_DAC_Start_DMA+0x1e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ab      	b.n	8004f4a <HAL_DAC_Start_DMA+0x176>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d12f      	bne.n	8004e64 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_DAC_Start_DMA+0x180>)
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a51      	ldr	r2, [pc, #324]	@ (8004f58 <HAL_DAC_Start_DMA+0x184>)
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4a50      	ldr	r2, [pc, #320]	@ (8004f5c <HAL_DAC_Start_DMA+0x188>)
 8004e1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d013      	beq.n	8004e5a <HAL_DAC_Start_DMA+0x86>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d845      	bhi.n	8004ec4 <HAL_DAC_Start_DMA+0xf0>
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_DAC_Start_DMA+0x72>
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d005      	beq.n	8004e50 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004e44:	e03e      	b.n	8004ec4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	613b      	str	r3, [r7, #16]
        break;
 8004e4e:	e03c      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	613b      	str	r3, [r7, #16]
        break;
 8004e58:	e037      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3310      	adds	r3, #16
 8004e60:	613b      	str	r3, [r7, #16]
        break;
 8004e62:	e032      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a3d      	ldr	r2, [pc, #244]	@ (8004f60 <HAL_DAC_Start_DMA+0x18c>)
 8004e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a3c      	ldr	r2, [pc, #240]	@ (8004f64 <HAL_DAC_Start_DMA+0x190>)
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	@ (8004f68 <HAL_DAC_Start_DMA+0x194>)
 8004e7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d013      	beq.n	8004eba <HAL_DAC_Start_DMA+0xe6>
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d817      	bhi.n	8004ec8 <HAL_DAC_Start_DMA+0xf4>
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_DAC_Start_DMA+0xd2>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d005      	beq.n	8004eb0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004ea4:	e010      	b.n	8004ec8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	613b      	str	r3, [r7, #16]
        break;
 8004eae:	e00c      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	613b      	str	r3, [r7, #16]
        break;
 8004eb8:	e007      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	331c      	adds	r3, #28
 8004ec0:	613b      	str	r3, [r7, #16]
        break;
 8004ec2:	e002      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e000      	b.n	8004eca <HAL_DAC_Start_DMA+0xf6>
        break;
 8004ec8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d111      	bne.n	8004ef4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ede:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6898      	ldr	r0, [r3, #8]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	f000 faeb 	bl	80054c4 <HAL_DMA_Start_IT>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]
 8004ef2:	e010      	b.n	8004f16 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004f02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68d8      	ldr	r0, [r3, #12]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	f000 fad9 	bl	80054c4 <HAL_DMA_Start_IT>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10c      	bne.n	8004f3c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6819      	ldr	r1, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2201      	movs	r2, #1
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e005      	b.n	8004f48 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f043 0204 	orr.w	r2, r3, #4
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	08005241 	.word	0x08005241
 8004f58:	08005263 	.word	0x08005263
 8004f5c:	0800527f 	.word	0x0800527f
 8004f60:	080052e9 	.word	0x080052e9
 8004f64:	0800530b 	.word	0x0800530b
 8004f68:	08005327 	.word	0x08005327

08004f6c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	3308      	adds	r3, #8
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e004      	b.n	8004fa0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b088      	sub	sp, #32
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	795b      	ldrb	r3, [r3, #5]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_DAC_ConfigChannel+0x1c>
 800500a:	2302      	movs	r3, #2
 800500c:	e114      	b.n	8005238 <HAL_DAC_ConfigChannel+0x246>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2202      	movs	r2, #2
 8005018:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b04      	cmp	r3, #4
 8005020:	f040 8081 	bne.w	8005126 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005024:	f7fd fd18 	bl	8002a58 <HAL_GetTick>
 8005028:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d140      	bne.n	80050b2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005030:	e018      	b.n	8005064 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005032:	f7fd fd11 	bl	8002a58 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d911      	bls.n	8005064 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f043 0208 	orr.w	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2203      	movs	r2, #3
 800505e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e0e9      	b.n	8005238 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800506a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1df      	bne.n	8005032 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8005072:	2001      	movs	r0, #1
 8005074:	f7fd fcfc 	bl	8002a70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	6992      	ldr	r2, [r2, #24]
 8005080:	641a      	str	r2, [r3, #64]	@ 0x40
 8005082:	e023      	b.n	80050cc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005084:	f7fd fce8 	bl	8002a58 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d90f      	bls.n	80050b2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	da0a      	bge.n	80050b2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f043 0208 	orr.w	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2203      	movs	r2, #3
 80050ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0c2      	b.n	8005238 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dbe3      	blt.n	8005084 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80050bc:	2001      	movs	r0, #1
 80050be:	f7fd fcd7 	bl	8002a70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	6992      	ldr	r2, [r2, #24]
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	ea02 0103 	and.w	r1, r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	409a      	lsls	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	21ff      	movs	r1, #255	@ 0xff
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	ea02 0103 	and.w	r1, r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	409a      	lsls	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11d      	bne.n	800516a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	221f      	movs	r2, #31
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4313      	orrs	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005170:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2207      	movs	r2, #7
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	431a      	orrs	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43da      	mvns	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	400a      	ands	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	22c0      	movs	r2, #192	@ 0xc0
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43da      	mvns	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	400a      	ands	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2201      	movs	r2, #1
 800522e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff feb1 	bl	8004fb6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	711a      	strb	r2, [r3, #4]
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff feaa 	bl	8004fca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f043 0204 	orr.w	r2, r3, #4
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fea0 	bl	8004fde <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	711a      	strb	r2, [r3, #4]
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff ffd8 	bl	80052ac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	711a      	strb	r2, [r3, #4]
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff ffd1 	bl	80052c0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f043 0204 	orr.w	r2, r3, #4
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ffc7 	bl	80052d4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	711a      	strb	r2, [r3, #4]
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e098      	b.n	8005498 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	4b4d      	ldr	r3, [pc, #308]	@ (80054a4 <HAL_DMA_Init+0x150>)
 800536e:	429a      	cmp	r2, r3
 8005370:	d80f      	bhi.n	8005392 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	4b4b      	ldr	r3, [pc, #300]	@ (80054a8 <HAL_DMA_Init+0x154>)
 800537a:	4413      	add	r3, r2
 800537c:	4a4b      	ldr	r2, [pc, #300]	@ (80054ac <HAL_DMA_Init+0x158>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	009a      	lsls	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a48      	ldr	r2, [pc, #288]	@ (80054b0 <HAL_DMA_Init+0x15c>)
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005390:	e00e      	b.n	80053b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	4b46      	ldr	r3, [pc, #280]	@ (80054b4 <HAL_DMA_Init+0x160>)
 800539a:	4413      	add	r3, r2
 800539c:	4a43      	ldr	r2, [pc, #268]	@ (80054ac <HAL_DMA_Init+0x158>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	091b      	lsrs	r3, r3, #4
 80053a4:	009a      	lsls	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <HAL_DMA_Init+0x164>)
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800540a:	d039      	beq.n	8005480 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <HAL_DMA_Init+0x15c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d11a      	bne.n	800544c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005416:	4b29      	ldr	r3, [pc, #164]	@ (80054bc <HAL_DMA_Init+0x168>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f003 031c 	and.w	r3, r3, #28
 8005422:	210f      	movs	r1, #15
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	43db      	mvns	r3, r3
 800542a:	4924      	ldr	r1, [pc, #144]	@ (80054bc <HAL_DMA_Init+0x168>)
 800542c:	4013      	ands	r3, r2
 800542e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005430:	4b22      	ldr	r3, [pc, #136]	@ (80054bc <HAL_DMA_Init+0x168>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6859      	ldr	r1, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543c:	f003 031c 	and.w	r3, r3, #28
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	491d      	ldr	r1, [pc, #116]	@ (80054bc <HAL_DMA_Init+0x168>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
 800544a:	e019      	b.n	8005480 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800544c:	4b1c      	ldr	r3, [pc, #112]	@ (80054c0 <HAL_DMA_Init+0x16c>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005454:	f003 031c 	and.w	r3, r3, #28
 8005458:	210f      	movs	r1, #15
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	4917      	ldr	r1, [pc, #92]	@ (80054c0 <HAL_DMA_Init+0x16c>)
 8005462:	4013      	ands	r3, r2
 8005464:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005466:	4b16      	ldr	r3, [pc, #88]	@ (80054c0 <HAL_DMA_Init+0x16c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 031c 	and.w	r3, r3, #28
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	4911      	ldr	r1, [pc, #68]	@ (80054c0 <HAL_DMA_Init+0x16c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40020407 	.word	0x40020407
 80054a8:	bffdfff8 	.word	0xbffdfff8
 80054ac:	cccccccd 	.word	0xcccccccd
 80054b0:	40020000 	.word	0x40020000
 80054b4:	bffdfbf8 	.word	0xbffdfbf8
 80054b8:	40020400 	.word	0x40020400
 80054bc:	400200a8 	.word	0x400200a8
 80054c0:	400204a8 	.word	0x400204a8

080054c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_DMA_Start_IT+0x20>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e04b      	b.n	800557c <HAL_DMA_Start_IT+0xb8>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d13a      	bne.n	800556e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f8e0 	bl	80056e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 020e 	orr.w	r2, r2, #14
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e00f      	b.n	800555c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0204 	bic.w	r2, r2, #4
 800554a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 020a 	orr.w	r2, r2, #10
 800555a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	e005      	b.n	800557a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005576:	2302      	movs	r3, #2
 8005578:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800557a:	7dfb      	ldrb	r3, [r7, #23]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a0:	f003 031c 	and.w	r3, r3, #28
 80055a4:	2204      	movs	r2, #4
 80055a6:	409a      	lsls	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d026      	beq.n	80055fe <HAL_DMA_IRQHandler+0x7a>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d021      	beq.n	80055fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0204 	bic.w	r2, r2, #4
 80055d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055dc:	f003 021c 	and.w	r2, r3, #28
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	2104      	movs	r1, #4
 80055e6:	fa01 f202 	lsl.w	r2, r1, r2
 80055ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d071      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055fc:	e06c      	b.n	80056d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	f003 031c 	and.w	r3, r3, #28
 8005606:	2202      	movs	r2, #2
 8005608:	409a      	lsls	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02e      	beq.n	8005670 <HAL_DMA_IRQHandler+0xec>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d029      	beq.n	8005670 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10b      	bne.n	8005642 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 020a 	bic.w	r2, r2, #10
 8005638:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f003 021c 	and.w	r2, r3, #28
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	2102      	movs	r1, #2
 8005650:	fa01 f202 	lsl.w	r2, r1, r2
 8005654:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d038      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800566e:	e033      	b.n	80056d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005674:	f003 031c 	and.w	r3, r3, #28
 8005678:	2208      	movs	r2, #8
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d02a      	beq.n	80056da <HAL_DMA_IRQHandler+0x156>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d025      	beq.n	80056da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 020e 	bic.w	r2, r2, #14
 800569c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	f003 021c 	and.w	r2, r3, #28
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	2101      	movs	r1, #1
 80056ac:	fa01 f202 	lsl.w	r2, r1, r2
 80056b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
}
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	f003 021c 	and.w	r2, r3, #28
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005702:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b10      	cmp	r3, #16
 8005712:	d108      	bne.n	8005726 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005724:	e007      	b.n	8005736 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005752:	e17f      	b.n	8005a54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	2101      	movs	r1, #1
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8171 	beq.w	8005a4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d005      	beq.n	8005784 <HAL_GPIO_Init+0x40>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d130      	bne.n	80057e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	2203      	movs	r2, #3
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4013      	ands	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ba:	2201      	movs	r2, #1
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	43db      	mvns	r3, r3
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4013      	ands	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f003 0201 	and.w	r2, r3, #1
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d118      	bne.n	8005824 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80057f8:	2201      	movs	r2, #1
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f003 0201 	and.w	r2, r3, #1
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b03      	cmp	r3, #3
 800582e:	d017      	beq.n	8005860 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	2203      	movs	r2, #3
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4013      	ands	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d123      	bne.n	80058b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	08da      	lsrs	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3208      	adds	r2, #8
 8005874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005878:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	220f      	movs	r2, #15
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4013      	ands	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	2203      	movs	r2, #3
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	43db      	mvns	r3, r3
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 0203 	and.w	r2, r3, #3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80ac 	beq.w	8005a4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005a74 <HAL_GPIO_Init+0x330>)
 80058f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005a74 <HAL_GPIO_Init+0x330>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6613      	str	r3, [r2, #96]	@ 0x60
 8005902:	4b5c      	ldr	r3, [pc, #368]	@ (8005a74 <HAL_GPIO_Init+0x330>)
 8005904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800590e:	4a5a      	ldr	r2, [pc, #360]	@ (8005a78 <HAL_GPIO_Init+0x334>)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	089b      	lsrs	r3, r3, #2
 8005914:	3302      	adds	r3, #2
 8005916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	220f      	movs	r2, #15
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	43db      	mvns	r3, r3
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4013      	ands	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005938:	d025      	beq.n	8005986 <HAL_GPIO_Init+0x242>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a7c <HAL_GPIO_Init+0x338>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01f      	beq.n	8005982 <HAL_GPIO_Init+0x23e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a4e      	ldr	r2, [pc, #312]	@ (8005a80 <HAL_GPIO_Init+0x33c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d019      	beq.n	800597e <HAL_GPIO_Init+0x23a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a4d      	ldr	r2, [pc, #308]	@ (8005a84 <HAL_GPIO_Init+0x340>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <HAL_GPIO_Init+0x236>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a4c      	ldr	r2, [pc, #304]	@ (8005a88 <HAL_GPIO_Init+0x344>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00d      	beq.n	8005976 <HAL_GPIO_Init+0x232>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a4b      	ldr	r2, [pc, #300]	@ (8005a8c <HAL_GPIO_Init+0x348>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d007      	beq.n	8005972 <HAL_GPIO_Init+0x22e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4a      	ldr	r2, [pc, #296]	@ (8005a90 <HAL_GPIO_Init+0x34c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <HAL_GPIO_Init+0x22a>
 800596a:	2306      	movs	r3, #6
 800596c:	e00c      	b.n	8005988 <HAL_GPIO_Init+0x244>
 800596e:	2307      	movs	r3, #7
 8005970:	e00a      	b.n	8005988 <HAL_GPIO_Init+0x244>
 8005972:	2305      	movs	r3, #5
 8005974:	e008      	b.n	8005988 <HAL_GPIO_Init+0x244>
 8005976:	2304      	movs	r3, #4
 8005978:	e006      	b.n	8005988 <HAL_GPIO_Init+0x244>
 800597a:	2303      	movs	r3, #3
 800597c:	e004      	b.n	8005988 <HAL_GPIO_Init+0x244>
 800597e:	2302      	movs	r3, #2
 8005980:	e002      	b.n	8005988 <HAL_GPIO_Init+0x244>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_GPIO_Init+0x244>
 8005986:	2300      	movs	r3, #0
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	f002 0203 	and.w	r2, r2, #3
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	4093      	lsls	r3, r2
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005998:	4937      	ldr	r1, [pc, #220]	@ (8005a78 <HAL_GPIO_Init+0x334>)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	089b      	lsrs	r3, r3, #2
 800599e:	3302      	adds	r3, #2
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80059ca:	4a32      	ldr	r2, [pc, #200]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80059d0:	4b30      	ldr	r3, [pc, #192]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	43db      	mvns	r3, r3
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4013      	ands	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059f4:	4a27      	ldr	r2, [pc, #156]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80059fa:	4b26      	ldr	r3, [pc, #152]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	43db      	mvns	r3, r3
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4013      	ands	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a48:	4a12      	ldr	r2, [pc, #72]	@ (8005a94 <HAL_GPIO_Init+0x350>)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3301      	adds	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f47f ae78 	bne.w	8005754 <HAL_GPIO_Init+0x10>
  }
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	48000400 	.word	0x48000400
 8005a80:	48000800 	.word	0x48000800
 8005a84:	48000c00 	.word	0x48000c00
 8005a88:	48001000 	.word	0x48001000
 8005a8c:	48001400 	.word	0x48001400
 8005a90:	48001800 	.word	0x48001800
 8005a94:	40010400 	.word	0x40010400

08005a98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a9c:	4b04      	ldr	r3, [pc, #16]	@ (8005ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40007000 	.word	0x40007000

08005ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac2:	d130      	bne.n	8005b26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ac4:	4b23      	ldr	r3, [pc, #140]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad0:	d038      	beq.n	8005b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ad2:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005ada:	4a1e      	ldr	r2, [pc, #120]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2232      	movs	r2, #50	@ 0x32
 8005ae8:	fb02 f303 	mul.w	r3, r2, r3
 8005aec:	4a1b      	ldr	r2, [pc, #108]	@ (8005b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	0c9b      	lsrs	r3, r3, #18
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005af8:	e002      	b.n	8005b00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b00:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0c:	d102      	bne.n	8005b14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f2      	bne.n	8005afa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b14:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b20:	d110      	bne.n	8005b44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e00f      	b.n	8005b46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b32:	d007      	beq.n	8005b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b34:	4b07      	ldr	r3, [pc, #28]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b3c:	4a05      	ldr	r2, [pc, #20]	@ (8005b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40007000 	.word	0x40007000
 8005b58:	20000004 	.word	0x20000004
 8005b5c:	431bde83 	.word	0x431bde83

08005b60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e3ca      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b72:	4b97      	ldr	r3, [pc, #604]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b7c:	4b94      	ldr	r3, [pc, #592]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80e4 	beq.w	8005d5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_RCC_OscConfig+0x4a>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	f040 808b 	bne.w	8005cb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 8087 	bne.w	8005cb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005baa:	4b89      	ldr	r3, [pc, #548]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x62>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e3a2      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1a      	ldr	r2, [r3, #32]
 8005bc6:	4b82      	ldr	r3, [pc, #520]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <HAL_RCC_OscConfig+0x7c>
 8005bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bda:	e005      	b.n	8005be8 <HAL_RCC_OscConfig+0x88>
 8005bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d223      	bcs.n	8005c34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fd55 	bl	80066a0 <RCC_SetFlashLatencyFromMSIRange>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e383      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c00:	4b73      	ldr	r3, [pc, #460]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a72      	ldr	r2, [pc, #456]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4b70      	ldr	r3, [pc, #448]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	496d      	ldr	r1, [pc, #436]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	4968      	ldr	r1, [pc, #416]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
 8005c32:	e025      	b.n	8005c80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c34:	4b66      	ldr	r3, [pc, #408]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a65      	ldr	r2, [pc, #404]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c3a:	f043 0308 	orr.w	r3, r3, #8
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4b63      	ldr	r3, [pc, #396]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4960      	ldr	r1, [pc, #384]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c52:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	495b      	ldr	r1, [pc, #364]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fd15 	bl	80066a0 <RCC_SetFlashLatencyFromMSIRange>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e343      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c80:	f000 fc4a 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b52      	ldr	r3, [pc, #328]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	4950      	ldr	r1, [pc, #320]	@ (8005dd4 <HAL_RCC_OscConfig+0x274>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8005dd8 <HAL_RCC_OscConfig+0x278>)
 8005c9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8005ddc <HAL_RCC_OscConfig+0x27c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fc fe87 	bl	80029b8 <HAL_InitTick>
 8005caa:	4603      	mov	r3, r0
 8005cac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d052      	beq.n	8005d5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	e327      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d032      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cc0:	4b43      	ldr	r3, [pc, #268]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005cc6:	f043 0301 	orr.w	r3, r3, #1
 8005cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ccc:	f7fc fec4 	bl	8002a58 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cd4:	f7fc fec0 	bl	8002a58 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e310      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	f043 0308 	orr.w	r3, r3, #8
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b34      	ldr	r3, [pc, #208]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	4931      	ldr	r1, [pc, #196]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d10:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	492c      	ldr	r1, [pc, #176]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	e01a      	b.n	8005d5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d26:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a29      	ldr	r2, [pc, #164]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d32:	f7fc fe91 	bl	8002a58 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d3a:	f7fc fe8d 	bl	8002a58 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e2dd      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d4c:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f0      	bne.n	8005d3a <HAL_RCC_OscConfig+0x1da>
 8005d58:	e000      	b.n	8005d5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d074      	beq.n	8005e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d005      	beq.n	8005d7a <HAL_RCC_OscConfig+0x21a>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d10e      	bne.n	8005d92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d10b      	bne.n	8005d92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7a:	4b15      	ldr	r3, [pc, #84]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d064      	beq.n	8005e50 <HAL_RCC_OscConfig+0x2f0>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d160      	bne.n	8005e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e2ba      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d9a:	d106      	bne.n	8005daa <HAL_RCC_OscConfig+0x24a>
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0b      	ldr	r2, [pc, #44]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e026      	b.n	8005df8 <HAL_RCC_OscConfig+0x298>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005db2:	d115      	bne.n	8005de0 <HAL_RCC_OscConfig+0x280>
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a05      	ldr	r2, [pc, #20]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005dba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a02      	ldr	r2, [pc, #8]	@ (8005dd0 <HAL_RCC_OscConfig+0x270>)
 8005dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e014      	b.n	8005df8 <HAL_RCC_OscConfig+0x298>
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	0800b888 	.word	0x0800b888
 8005dd8:	20000004 	.word	0x20000004
 8005ddc:	20000008 	.word	0x20000008
 8005de0:	4ba0      	ldr	r3, [pc, #640]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a9f      	ldr	r2, [pc, #636]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b9d      	ldr	r3, [pc, #628]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a9c      	ldr	r2, [pc, #624]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc fe2a 	bl	8002a58 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fc fe26 	bl	8002a58 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	@ 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e276      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e1a:	4b92      	ldr	r3, [pc, #584]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f0      	beq.n	8005e08 <HAL_RCC_OscConfig+0x2a8>
 8005e26:	e014      	b.n	8005e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fc fe16 	bl	8002a58 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e30:	f7fc fe12 	bl	8002a58 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	@ 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e262      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e42:	4b88      	ldr	r3, [pc, #544]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x2d0>
 8005e4e:	e000      	b.n	8005e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d060      	beq.n	8005f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_OscConfig+0x310>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d119      	bne.n	8005e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d116      	bne.n	8005e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e70:	4b7c      	ldr	r3, [pc, #496]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_OscConfig+0x328>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e23f      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e88:	4b76      	ldr	r3, [pc, #472]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	4973      	ldr	r1, [pc, #460]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9c:	e040      	b.n	8005f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d023      	beq.n	8005eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb2:	f7fc fdd1 	bl	8002a58 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eba:	f7fc fdcd 	bl	8002a58 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e21d      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ecc:	4b65      	ldr	r3, [pc, #404]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed8:	4b62      	ldr	r3, [pc, #392]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	061b      	lsls	r3, r3, #24
 8005ee6:	495f      	ldr	r1, [pc, #380]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]
 8005eec:	e018      	b.n	8005f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eee:	4b5d      	ldr	r3, [pc, #372]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efa:	f7fc fdad 	bl	8002a58 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f02:	f7fc fda9 	bl	8002a58 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e1f9      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f14:	4b53      	ldr	r3, [pc, #332]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f0      	bne.n	8005f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d03c      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01c      	beq.n	8005f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f34:	4b4b      	ldr	r3, [pc, #300]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f44:	f7fc fd88 	bl	8002a58 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f4c:	f7fc fd84 	bl	8002a58 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e1d4      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f5e:	4b41      	ldr	r3, [pc, #260]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0ef      	beq.n	8005f4c <HAL_RCC_OscConfig+0x3ec>
 8005f6c:	e01b      	b.n	8005fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f74:	4a3b      	ldr	r2, [pc, #236]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7e:	f7fc fd6b 	bl	8002a58 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f86:	f7fc fd67 	bl	8002a58 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e1b7      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f98:	4b32      	ldr	r3, [pc, #200]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ef      	bne.n	8005f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80a6 	beq.w	8006100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10d      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc4:	4b27      	ldr	r3, [pc, #156]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc8:	4a26      	ldr	r2, [pc, #152]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd0:	4b24      	ldr	r3, [pc, #144]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fe0:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <HAL_RCC_OscConfig+0x508>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d118      	bne.n	800601e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fec:	4b1e      	ldr	r3, [pc, #120]	@ (8006068 <HAL_RCC_OscConfig+0x508>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <HAL_RCC_OscConfig+0x508>)
 8005ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff8:	f7fc fd2e 	bl	8002a58 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006000:	f7fc fd2a 	bl	8002a58 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e17a      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <HAL_RCC_OscConfig+0x508>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d108      	bne.n	8006038 <HAL_RCC_OscConfig+0x4d8>
 8006026:	4b0f      	ldr	r3, [pc, #60]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800602c:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006036:	e029      	b.n	800608c <HAL_RCC_OscConfig+0x52c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b05      	cmp	r3, #5
 800603e:	d115      	bne.n	800606c <HAL_RCC_OscConfig+0x50c>
 8006040:	4b08      	ldr	r3, [pc, #32]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006046:	4a07      	ldr	r2, [pc, #28]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8006048:	f043 0304 	orr.w	r3, r3, #4
 800604c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006050:	4b04      	ldr	r3, [pc, #16]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006056:	4a03      	ldr	r2, [pc, #12]	@ (8006064 <HAL_RCC_OscConfig+0x504>)
 8006058:	f043 0301 	orr.w	r3, r3, #1
 800605c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006060:	e014      	b.n	800608c <HAL_RCC_OscConfig+0x52c>
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	40007000 	.word	0x40007000
 800606c:	4b9c      	ldr	r3, [pc, #624]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006072:	4a9b      	ldr	r2, [pc, #620]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800607c:	4b98      	ldr	r3, [pc, #608]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	4a97      	ldr	r2, [pc, #604]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006084:	f023 0304 	bic.w	r3, r3, #4
 8006088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fc fce0 	bl	8002a58 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fc fcdc 	bl	8002a58 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e12a      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b2:	4b8b      	ldr	r3, [pc, #556]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ed      	beq.n	800609c <HAL_RCC_OscConfig+0x53c>
 80060c0:	e015      	b.n	80060ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c2:	f7fc fcc9 	bl	8002a58 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c8:	e00a      	b.n	80060e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fc fcc5 	bl	8002a58 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e113      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060e0:	4b7f      	ldr	r3, [pc, #508]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1ed      	bne.n	80060ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060ee:	7ffb      	ldrb	r3, [r7, #31]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f4:	4b7a      	ldr	r3, [pc, #488]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80060f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f8:	4a79      	ldr	r2, [pc, #484]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80fe 	beq.w	8006306 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	2b02      	cmp	r3, #2
 8006110:	f040 80d0 	bne.w	80062b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006114:	4b72      	ldr	r3, [pc, #456]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f003 0203 	and.w	r2, r3, #3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	429a      	cmp	r2, r3
 8006126:	d130      	bne.n	800618a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006132:	3b01      	subs	r3, #1
 8006134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d127      	bne.n	800618a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006144:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006146:	429a      	cmp	r2, r3
 8006148:	d11f      	bne.n	800618a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006154:	2a07      	cmp	r2, #7
 8006156:	bf14      	ite	ne
 8006158:	2201      	movne	r2, #1
 800615a:	2200      	moveq	r2, #0
 800615c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800615e:	4293      	cmp	r3, r2
 8006160:	d113      	bne.n	800618a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d109      	bne.n	800618a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	085b      	lsrs	r3, r3, #1
 8006182:	3b01      	subs	r3, #1
 8006184:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d06e      	beq.n	8006268 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d069      	beq.n	8006264 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006190:	4b53      	ldr	r3, [pc, #332]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800619c:	4b50      	ldr	r3, [pc, #320]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0ad      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061ac:	4b4c      	ldr	r3, [pc, #304]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a4b      	ldr	r2, [pc, #300]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061b8:	f7fc fc4e 	bl	8002a58 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fc fc4a 	bl	8002a58 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e09a      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d2:	4b43      	ldr	r3, [pc, #268]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061de:	4b40      	ldr	r3, [pc, #256]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	4b40      	ldr	r3, [pc, #256]	@ (80062e4 <HAL_RCC_OscConfig+0x784>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061ee:	3a01      	subs	r2, #1
 80061f0:	0112      	lsls	r2, r2, #4
 80061f2:	4311      	orrs	r1, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061f8:	0212      	lsls	r2, r2, #8
 80061fa:	4311      	orrs	r1, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006200:	0852      	lsrs	r2, r2, #1
 8006202:	3a01      	subs	r2, #1
 8006204:	0552      	lsls	r2, r2, #21
 8006206:	4311      	orrs	r1, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800620c:	0852      	lsrs	r2, r2, #1
 800620e:	3a01      	subs	r2, #1
 8006210:	0652      	lsls	r2, r2, #25
 8006212:	4311      	orrs	r1, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006218:	0912      	lsrs	r2, r2, #4
 800621a:	0452      	lsls	r2, r2, #17
 800621c:	430a      	orrs	r2, r1
 800621e:	4930      	ldr	r1, [pc, #192]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006220:	4313      	orrs	r3, r2
 8006222:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006224:	4b2e      	ldr	r3, [pc, #184]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2d      	ldr	r2, [pc, #180]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800622a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800622e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006230:	4b2b      	ldr	r3, [pc, #172]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a2a      	ldr	r2, [pc, #168]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800623a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800623c:	f7fc fc0c 	bl	8002a58 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006244:	f7fc fc08 	bl	8002a58 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e058      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006256:	4b22      	ldr	r3, [pc, #136]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006262:	e050      	b.n	8006306 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e04f      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006268:	4b1d      	ldr	r3, [pc, #116]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d148      	bne.n	8006306 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006274:	4b1a      	ldr	r3, [pc, #104]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 800627a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800627e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006280:	4b17      	ldr	r3, [pc, #92]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 8006286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800628a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800628c:	f7fc fbe4 	bl	8002a58 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006294:	f7fc fbe0 	bl	8002a58 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e030      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062a6:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0x734>
 80062b2:	e028      	b.n	8006306 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d023      	beq.n	8006302 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <HAL_RCC_OscConfig+0x780>)
 80062c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fc fbc7 	bl	8002a58 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062cc:	e00c      	b.n	80062e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ce:	f7fc fbc3 	bl	8002a58 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d905      	bls.n	80062e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e013      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
 80062e0:	40021000 	.word	0x40021000
 80062e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e8:	4b09      	ldr	r3, [pc, #36]	@ (8006310 <HAL_RCC_OscConfig+0x7b0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ec      	bne.n	80062ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <HAL_RCC_OscConfig+0x7b0>)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	4905      	ldr	r1, [pc, #20]	@ (8006310 <HAL_RCC_OscConfig+0x7b0>)
 80062fa:	4b06      	ldr	r3, [pc, #24]	@ (8006314 <HAL_RCC_OscConfig+0x7b4>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	60cb      	str	r3, [r1, #12]
 8006300:	e001      	b.n	8006306 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40021000 	.word	0x40021000
 8006314:	feeefffc 	.word	0xfeeefffc

08006318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e0e7      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b75      	ldr	r3, [pc, #468]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d910      	bls.n	800635c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b72      	ldr	r3, [pc, #456]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 0207 	bic.w	r2, r3, #7
 8006342:	4970      	ldr	r1, [pc, #448]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b6e      	ldr	r3, [pc, #440]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0cf      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	4b66      	ldr	r3, [pc, #408]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006374:	429a      	cmp	r2, r3
 8006376:	d908      	bls.n	800638a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b63      	ldr	r3, [pc, #396]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4960      	ldr	r1, [pc, #384]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d04c      	beq.n	8006430 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b03      	cmp	r3, #3
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639e:	4b5a      	ldr	r3, [pc, #360]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d121      	bne.n	80063ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e0a6      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d107      	bne.n	80063c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063b6:	4b54      	ldr	r3, [pc, #336]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d115      	bne.n	80063ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e09a      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e08e      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063de:	4b4a      	ldr	r3, [pc, #296]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e086      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063ee:	4b46      	ldr	r3, [pc, #280]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 0203 	bic.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4943      	ldr	r1, [pc, #268]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006400:	f7fc fb2a 	bl	8002a58 <HAL_GetTick>
 8006404:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	e00a      	b.n	800641e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006408:	f7fc fb26 	bl	8002a58 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e06e      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	4b3a      	ldr	r3, [pc, #232]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 020c 	and.w	r2, r3, #12
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	429a      	cmp	r2, r3
 800642e:	d1eb      	bne.n	8006408 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d010      	beq.n	800645e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	4b31      	ldr	r3, [pc, #196]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006448:	429a      	cmp	r2, r3
 800644a:	d208      	bcs.n	800645e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800644c:	4b2e      	ldr	r3, [pc, #184]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	492b      	ldr	r1, [pc, #172]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800645e:	4b29      	ldr	r3, [pc, #164]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d210      	bcs.n	800648e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646c:	4b25      	ldr	r3, [pc, #148]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f023 0207 	bic.w	r2, r3, #7
 8006474:	4923      	ldr	r1, [pc, #140]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	4313      	orrs	r3, r2
 800647a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800647c:	4b21      	ldr	r3, [pc, #132]	@ (8006504 <HAL_RCC_ClockConfig+0x1ec>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d001      	beq.n	800648e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e036      	b.n	80064fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649a:	4b1b      	ldr	r3, [pc, #108]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	4918      	ldr	r1, [pc, #96]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064b8:	4b13      	ldr	r3, [pc, #76]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	4910      	ldr	r1, [pc, #64]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064cc:	f000 f824 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <HAL_RCC_ClockConfig+0x1f0>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	490b      	ldr	r1, [pc, #44]	@ (800650c <HAL_RCC_ClockConfig+0x1f4>)
 80064de:	5ccb      	ldrb	r3, [r1, r3]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
 80064e8:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <HAL_RCC_ClockConfig+0x1f8>)
 80064ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80064ec:	4b09      	ldr	r3, [pc, #36]	@ (8006514 <HAL_RCC_ClockConfig+0x1fc>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fc fa61 	bl	80029b8 <HAL_InitTick>
 80064f6:	4603      	mov	r3, r0
 80064f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80064fa:	7afb      	ldrb	r3, [r7, #11]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40022000 	.word	0x40022000
 8006508:	40021000 	.word	0x40021000
 800650c:	0800b888 	.word	0x0800b888
 8006510:	20000004 	.word	0x20000004
 8006514:	20000008 	.word	0x20000008

08006518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006518:	b480      	push	{r7}
 800651a:	b089      	sub	sp, #36	@ 0x24
 800651c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006526:	4b3e      	ldr	r3, [pc, #248]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 030c 	and.w	r3, r3, #12
 800652e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006530:	4b3b      	ldr	r3, [pc, #236]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x34>
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d121      	bne.n	800658a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d11e      	bne.n	800658a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800654c:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d107      	bne.n	8006568 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006558:	4b31      	ldr	r3, [pc, #196]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 800655a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	e005      	b.n	8006574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006568:	4b2d      	ldr	r3, [pc, #180]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006574:	4a2b      	ldr	r2, [pc, #172]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800657c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006588:	e00a      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b04      	cmp	r3, #4
 800658e:	d102      	bne.n	8006596 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006590:	4b25      	ldr	r3, [pc, #148]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x110>)
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	e004      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d101      	bne.n	80065a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800659c:	4b23      	ldr	r3, [pc, #140]	@ (800662c <HAL_RCC_GetSysClockFreq+0x114>)
 800659e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b0c      	cmp	r3, #12
 80065a4:	d134      	bne.n	8006610 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d003      	beq.n	80065be <HAL_RCC_GetSysClockFreq+0xa6>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d003      	beq.n	80065c4 <HAL_RCC_GetSysClockFreq+0xac>
 80065bc:	e005      	b.n	80065ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065be:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x110>)
 80065c0:	617b      	str	r3, [r7, #20]
      break;
 80065c2:	e005      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065c4:	4b19      	ldr	r3, [pc, #100]	@ (800662c <HAL_RCC_GetSysClockFreq+0x114>)
 80065c6:	617b      	str	r3, [r7, #20]
      break;
 80065c8:	e002      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	617b      	str	r3, [r7, #20]
      break;
 80065ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d0:	4b13      	ldr	r3, [pc, #76]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	3301      	adds	r3, #1
 80065dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065de:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	0a1b      	lsrs	r3, r3, #8
 80065e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	fb03 f202 	mul.w	r2, r3, r2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x108>)
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	0e5b      	lsrs	r3, r3, #25
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	3301      	adds	r3, #1
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	fbb2 f3f3 	udiv	r3, r2, r3
 800660e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006610:	69bb      	ldr	r3, [r7, #24]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3724      	adds	r7, #36	@ 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40021000 	.word	0x40021000
 8006624:	0800b8a0 	.word	0x0800b8a0
 8006628:	00f42400 	.word	0x00f42400
 800662c:	007a1200 	.word	0x007a1200

08006630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000004 	.word	0x20000004

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b06      	ldr	r3, [pc, #24]	@ (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4904      	ldr	r1, [pc, #16]	@ (8006670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40021000 	.word	0x40021000
 8006670:	0800b898 	.word	0x0800b898

08006674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006678:	f7ff ffda 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 800667c:	4602      	mov	r2, r0
 800667e:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	0adb      	lsrs	r3, r3, #11
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4904      	ldr	r1, [pc, #16]	@ (800669c <HAL_RCC_GetPCLK2Freq+0x28>)
 800668a:	5ccb      	ldrb	r3, [r1, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	0800b898 	.word	0x0800b898

080066a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066b8:	f7ff f9ee 	bl	8005a98 <HAL_PWREx_GetVoltageRange>
 80066bc:	6178      	str	r0, [r7, #20]
 80066be:	e014      	b.n	80066ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066c0:	4b25      	ldr	r3, [pc, #148]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066c4:	4a24      	ldr	r2, [pc, #144]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80066cc:	4b22      	ldr	r3, [pc, #136]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066d8:	f7ff f9de 	bl	8005a98 <HAL_PWREx_GetVoltageRange>
 80066dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80066de:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f0:	d10b      	bne.n	800670a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b80      	cmp	r3, #128	@ 0x80
 80066f6:	d919      	bls.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80066fc:	d902      	bls.n	8006704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066fe:	2302      	movs	r3, #2
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	e013      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006704:	2301      	movs	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	e010      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b80      	cmp	r3, #128	@ 0x80
 800670e:	d902      	bls.n	8006716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006710:	2303      	movs	r3, #3
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	e00a      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b80      	cmp	r3, #128	@ 0x80
 800671a:	d102      	bne.n	8006722 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800671c:	2302      	movs	r3, #2
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	e004      	b.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b70      	cmp	r3, #112	@ 0x70
 8006726:	d101      	bne.n	800672c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006728:	2301      	movs	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800672c:	4b0b      	ldr	r3, [pc, #44]	@ (800675c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f023 0207 	bic.w	r2, r3, #7
 8006734:	4909      	ldr	r1, [pc, #36]	@ (800675c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800673c:	4b07      	ldr	r3, [pc, #28]	@ (800675c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	429a      	cmp	r2, r3
 8006748:	d001      	beq.n	800674e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40021000 	.word	0x40021000
 800675c:	40022000 	.word	0x40022000

08006760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006768:	2300      	movs	r3, #0
 800676a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800676c:	2300      	movs	r3, #0
 800676e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006778:	2b00      	cmp	r3, #0
 800677a:	d041      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006780:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006784:	d02a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006786:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800678a:	d824      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800678c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006790:	d008      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006796:	d81e      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800679c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a0:	d010      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067a2:	e018      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067a4:	4b86      	ldr	r3, [pc, #536]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	4a85      	ldr	r2, [pc, #532]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067b0:	e015      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fabb 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067c2:	e00c      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3320      	adds	r3, #32
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fba6 	bl	8006f1c <RCCEx_PLLSAI2_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	74fb      	strb	r3, [r7, #19]
      break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80067dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067e4:	4b76      	ldr	r3, [pc, #472]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f2:	4973      	ldr	r1, [pc, #460]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80067fa:	e001      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d041      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006810:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006814:	d02a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800681a:	d824      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800681c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006820:	d008      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006826:	d81e      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800682c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006830:	d010      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006832:	e018      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006834:	4b62      	ldr	r3, [pc, #392]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	4a61      	ldr	r2, [pc, #388]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800683a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800683e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006840:	e015      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fa73 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006852:	e00c      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3320      	adds	r3, #32
 8006858:	2100      	movs	r1, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb5e 	bl	8006f1c <RCCEx_PLLSAI2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006864:	e003      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	74fb      	strb	r3, [r7, #19]
      break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800686c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686e:	7cfb      	ldrb	r3, [r7, #19]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006874:	4b52      	ldr	r3, [pc, #328]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800687a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006882:	494f      	ldr	r1, [pc, #316]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800688a:	e001      	b.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	7cfb      	ldrb	r3, [r7, #19]
 800688e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 80a0 	beq.w	80069de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800689e:	2300      	movs	r3, #0
 80068a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068a2:	4b47      	ldr	r3, [pc, #284]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00d      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b8:	4b41      	ldr	r3, [pc, #260]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068bc:	4a40      	ldr	r2, [pc, #256]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c4:	4b3e      	ldr	r3, [pc, #248]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d0:	2301      	movs	r3, #1
 80068d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d4:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3a      	ldr	r2, [pc, #232]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e0:	f7fc f8ba 	bl	8002a58 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068e6:	e009      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e8:	f7fc f8b6 	bl	8002a58 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d902      	bls.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	74fb      	strb	r3, [r7, #19]
        break;
 80068fa:	e005      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068fc:	4b31      	ldr	r3, [pc, #196]	@ (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006908:	7cfb      	ldrb	r3, [r7, #19]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d15c      	bne.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800690e:	4b2c      	ldr	r3, [pc, #176]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006918:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01f      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	429a      	cmp	r2, r3
 800692a:	d019      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800692c:	4b24      	ldr	r3, [pc, #144]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006938:	4b21      	ldr	r3, [pc, #132]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	4a20      	ldr	r2, [pc, #128]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006948:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694e:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006958:	4a19      	ldr	r2, [pc, #100]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fc f875 	bl	8002a58 <HAL_GetTick>
 800696e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006970:	e00b      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006972:	f7fc f871 	bl	8002a58 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006980:	4293      	cmp	r3, r2
 8006982:	d902      	bls.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	74fb      	strb	r3, [r7, #19]
            break;
 8006988:	e006      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698a:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0ec      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10c      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699e:	4b08      	ldr	r3, [pc, #32]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ae:	4904      	ldr	r1, [pc, #16]	@ (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069b6:	e009      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	74bb      	strb	r3, [r7, #18]
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80069be:	bf00      	nop
 80069c0:	40021000 	.word	0x40021000
 80069c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c8:	7cfb      	ldrb	r3, [r7, #19]
 80069ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069cc:	7c7b      	ldrb	r3, [r7, #17]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d105      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d2:	4b9e      	ldr	r3, [pc, #632]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d6:	4a9d      	ldr	r2, [pc, #628]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069ea:	4b98      	ldr	r3, [pc, #608]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f023 0203 	bic.w	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	4994      	ldr	r1, [pc, #592]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a12:	f023 020c 	bic.w	r2, r3, #12
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	498c      	ldr	r1, [pc, #560]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00a      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a2e:	4b87      	ldr	r3, [pc, #540]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	4983      	ldr	r1, [pc, #524]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00a      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a50:	4b7e      	ldr	r3, [pc, #504]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	497b      	ldr	r1, [pc, #492]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a72:	4b76      	ldr	r3, [pc, #472]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a80:	4972      	ldr	r1, [pc, #456]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a94:	4b6d      	ldr	r3, [pc, #436]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa2:	496a      	ldr	r1, [pc, #424]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ab6:	4b65      	ldr	r3, [pc, #404]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	4961      	ldr	r1, [pc, #388]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ade:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae6:	4959      	ldr	r1, [pc, #356]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006afa:	4b54      	ldr	r3, [pc, #336]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b08:	4950      	ldr	r1, [pc, #320]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2a:	4948      	ldr	r1, [pc, #288]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b3e:	4b43      	ldr	r3, [pc, #268]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4c:	493f      	ldr	r1, [pc, #252]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d028      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b60:	4b3a      	ldr	r3, [pc, #232]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b6e:	4937      	ldr	r1, [pc, #220]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b80:	4b32      	ldr	r3, [pc, #200]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a31      	ldr	r2, [pc, #196]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b8a:	60d3      	str	r3, [r2, #12]
 8006b8c:	e011      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b96:	d10c      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 f8c8 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006ba8:	7cfb      	ldrb	r3, [r7, #19]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006bae:	7cfb      	ldrb	r3, [r7, #19]
 8006bb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d028      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bbe:	4b23      	ldr	r3, [pc, #140]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	491f      	ldr	r1, [pc, #124]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bdc:	d106      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bde:	4b1b      	ldr	r3, [pc, #108]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	4a1a      	ldr	r2, [pc, #104]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be8:	60d3      	str	r3, [r2, #12]
 8006bea:	e011      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bf4:	d10c      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 f899 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c06:	7cfb      	ldrb	r3, [r7, #19]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d02b      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c2a:	4908      	ldr	r1, [pc, #32]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c3a:	d109      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c3c:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a02      	ldr	r2, [pc, #8]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c46:	60d3      	str	r3, [r2, #12]
 8006c48:	e014      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006c4a:	bf00      	nop
 8006c4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	2101      	movs	r1, #1
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 f867 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c6a:	7cfb      	ldrb	r3, [r7, #19]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02f      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c80:	4b2b      	ldr	r3, [pc, #172]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c8e:	4928      	ldr	r1, [pc, #160]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c9e:	d10d      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f844 	bl	8006d34 <RCCEx_PLLSAI1_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cb0:	7cfb      	ldrb	r3, [r7, #19]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d014      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006cb6:	7cfb      	ldrb	r3, [r7, #19]
 8006cb8:	74bb      	strb	r3, [r7, #18]
 8006cba:	e011      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cc4:	d10c      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3320      	adds	r3, #32
 8006cca:	2102      	movs	r1, #2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 f925 	bl	8006f1c <RCCEx_PLLSAI2_Config>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cd6:	7cfb      	ldrb	r3, [r7, #19]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006cdc:	7cfb      	ldrb	r3, [r7, #19]
 8006cde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cec:	4b10      	ldr	r3, [pc, #64]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cfa:	490d      	ldr	r1, [pc, #52]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d1e:	4904      	ldr	r1, [pc, #16]	@ (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d26:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40021000 	.word	0x40021000

08006d34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d42:	4b75      	ldr	r3, [pc, #468]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d018      	beq.n	8006d80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d4e:	4b72      	ldr	r3, [pc, #456]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0203 	and.w	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d10d      	bne.n	8006d7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
       ||
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d66:	4b6c      	ldr	r3, [pc, #432]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	091b      	lsrs	r3, r3, #4
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
       ||
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d047      	beq.n	8006e0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e044      	b.n	8006e0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d018      	beq.n	8006dba <RCCEx_PLLSAI1_Config+0x86>
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d825      	bhi.n	8006dd8 <RCCEx_PLLSAI1_Config+0xa4>
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d002      	beq.n	8006d96 <RCCEx_PLLSAI1_Config+0x62>
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d009      	beq.n	8006da8 <RCCEx_PLLSAI1_Config+0x74>
 8006d94:	e020      	b.n	8006dd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d96:	4b60      	ldr	r3, [pc, #384]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d11d      	bne.n	8006dde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da6:	e01a      	b.n	8006dde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006da8:	4b5b      	ldr	r3, [pc, #364]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d116      	bne.n	8006de2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db8:	e013      	b.n	8006de2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dba:	4b57      	ldr	r3, [pc, #348]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006dc6:	4b54      	ldr	r3, [pc, #336]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dd6:	e006      	b.n	8006de6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      break;
 8006ddc:	e004      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006dde:	bf00      	nop
 8006de0:	e002      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006de6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10d      	bne.n	8006e0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006dee:	4b4a      	ldr	r3, [pc, #296]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	430b      	orrs	r3, r1
 8006e04:	4944      	ldr	r1, [pc, #272]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d17d      	bne.n	8006f0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e10:	4b41      	ldr	r3, [pc, #260]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a40      	ldr	r2, [pc, #256]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1c:	f7fb fe1c 	bl	8002a58 <HAL_GetTick>
 8006e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e22:	e009      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e24:	f7fb fe18 	bl	8002a58 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d902      	bls.n	8006e38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	73fb      	strb	r3, [r7, #15]
        break;
 8006e36:	e005      	b.n	8006e44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e38:	4b37      	ldr	r3, [pc, #220]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ef      	bne.n	8006e24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d160      	bne.n	8006f0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d111      	bne.n	8006e74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e50:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6892      	ldr	r2, [r2, #8]
 8006e60:	0211      	lsls	r1, r2, #8
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68d2      	ldr	r2, [r2, #12]
 8006e66:	0912      	lsrs	r2, r2, #4
 8006e68:	0452      	lsls	r2, r2, #17
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	492a      	ldr	r1, [pc, #168]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	610b      	str	r3, [r1, #16]
 8006e72:	e027      	b.n	8006ec4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d112      	bne.n	8006ea0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006e82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6892      	ldr	r2, [r2, #8]
 8006e8a:	0211      	lsls	r1, r2, #8
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6912      	ldr	r2, [r2, #16]
 8006e90:	0852      	lsrs	r2, r2, #1
 8006e92:	3a01      	subs	r2, #1
 8006e94:	0552      	lsls	r2, r2, #21
 8006e96:	430a      	orrs	r2, r1
 8006e98:	491f      	ldr	r1, [pc, #124]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]
 8006e9e:	e011      	b.n	8006ec4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ea8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	0211      	lsls	r1, r2, #8
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6952      	ldr	r2, [r2, #20]
 8006eb6:	0852      	lsrs	r2, r2, #1
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	0652      	lsls	r2, r2, #25
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	4916      	ldr	r1, [pc, #88]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ec4:	4b14      	ldr	r3, [pc, #80]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a13      	ldr	r2, [pc, #76]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fb fdc2 	bl	8002a58 <HAL_GetTick>
 8006ed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ed6:	e009      	b.n	8006eec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ed8:	f7fb fdbe 	bl	8002a58 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d902      	bls.n	8006eec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	73fb      	strb	r3, [r7, #15]
          break;
 8006eea:	e005      	b.n	8006ef8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006eec:	4b0a      	ldr	r3, [pc, #40]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0ef      	beq.n	8006ed8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006efe:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	4904      	ldr	r1, [pc, #16]	@ (8006f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	40021000 	.word	0x40021000

08006f1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d018      	beq.n	8006f68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f36:	4b67      	ldr	r3, [pc, #412]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0203 	and.w	r2, r3, #3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d10d      	bne.n	8006f62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
       ||
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d009      	beq.n	8006f62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f4e:	4b61      	ldr	r3, [pc, #388]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d047      	beq.n	8006ff2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	73fb      	strb	r3, [r7, #15]
 8006f66:	e044      	b.n	8006ff2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d018      	beq.n	8006fa2 <RCCEx_PLLSAI2_Config+0x86>
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d825      	bhi.n	8006fc0 <RCCEx_PLLSAI2_Config+0xa4>
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d002      	beq.n	8006f7e <RCCEx_PLLSAI2_Config+0x62>
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d009      	beq.n	8006f90 <RCCEx_PLLSAI2_Config+0x74>
 8006f7c:	e020      	b.n	8006fc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f7e:	4b55      	ldr	r3, [pc, #340]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d11d      	bne.n	8006fc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f8e:	e01a      	b.n	8006fc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f90:	4b50      	ldr	r3, [pc, #320]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d116      	bne.n	8006fca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fa0:	e013      	b.n	8006fca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10f      	bne.n	8006fce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006fae:	4b49      	ldr	r3, [pc, #292]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006fbe:	e006      	b.n	8006fce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e004      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fc6:	bf00      	nop
 8006fc8:	e002      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fca:	bf00      	nop
 8006fcc:	e000      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10d      	bne.n	8006ff2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	430b      	orrs	r3, r1
 8006fec:	4939      	ldr	r1, [pc, #228]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d167      	bne.n	80070c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ff8:	4b36      	ldr	r3, [pc, #216]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a35      	ldr	r2, [pc, #212]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007004:	f7fb fd28 	bl	8002a58 <HAL_GetTick>
 8007008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800700a:	e009      	b.n	8007020 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800700c:	f7fb fd24 	bl	8002a58 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d902      	bls.n	8007020 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	73fb      	strb	r3, [r7, #15]
        break;
 800701e:	e005      	b.n	800702c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007020:	4b2c      	ldr	r3, [pc, #176]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1ef      	bne.n	800700c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d14a      	bne.n	80070c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d111      	bne.n	800705c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007038:	4b26      	ldr	r3, [pc, #152]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6892      	ldr	r2, [r2, #8]
 8007048:	0211      	lsls	r1, r2, #8
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68d2      	ldr	r2, [r2, #12]
 800704e:	0912      	lsrs	r2, r2, #4
 8007050:	0452      	lsls	r2, r2, #17
 8007052:	430a      	orrs	r2, r1
 8007054:	491f      	ldr	r1, [pc, #124]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007056:	4313      	orrs	r3, r2
 8007058:	614b      	str	r3, [r1, #20]
 800705a:	e011      	b.n	8007080 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800705c:	4b1d      	ldr	r3, [pc, #116]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007064:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6892      	ldr	r2, [r2, #8]
 800706c:	0211      	lsls	r1, r2, #8
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	6912      	ldr	r2, [r2, #16]
 8007072:	0852      	lsrs	r2, r2, #1
 8007074:	3a01      	subs	r2, #1
 8007076:	0652      	lsls	r2, r2, #25
 8007078:	430a      	orrs	r2, r1
 800707a:	4916      	ldr	r1, [pc, #88]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800707c:	4313      	orrs	r3, r2
 800707e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007080:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a13      	ldr	r2, [pc, #76]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800708a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708c:	f7fb fce4 	bl	8002a58 <HAL_GetTick>
 8007090:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007092:	e009      	b.n	80070a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007094:	f7fb fce0 	bl	8002a58 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d902      	bls.n	80070a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	73fb      	strb	r3, [r7, #15]
          break;
 80070a6:	e005      	b.n	80070b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070a8:	4b0a      	ldr	r3, [pc, #40]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ef      	beq.n	8007094 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80070ba:	4b06      	ldr	r3, [pc, #24]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4904      	ldr	r1, [pc, #16]	@ (80070d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40021000 	.word	0x40021000

080070d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e049      	b.n	800717e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fb faea 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f000 f968 	bl	80073ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d001      	beq.n	80071a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e047      	b.n	8007230 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a23      	ldr	r2, [pc, #140]	@ (800723c <HAL_TIM_Base_Start+0xb4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ba:	d018      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007240 <HAL_TIM_Base_Start+0xb8>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007244 <HAL_TIM_Base_Start+0xbc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007248 <HAL_TIM_Base_Start+0xc0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1b      	ldr	r2, [pc, #108]	@ (800724c <HAL_TIM_Base_Start+0xc4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_TIM_Base_Start+0x66>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a19      	ldr	r2, [pc, #100]	@ (8007250 <HAL_TIM_Base_Start+0xc8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d115      	bne.n	800721a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <HAL_TIM_Base_Start+0xcc>)
 80071f6:	4013      	ands	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b06      	cmp	r3, #6
 80071fe:	d015      	beq.n	800722c <HAL_TIM_Base_Start+0xa4>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007206:	d011      	beq.n	800722c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007218:	e008      	b.n	800722c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0201 	orr.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e000      	b.n	800722e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40013400 	.word	0x40013400
 8007250:	40014000 	.word	0x40014000
 8007254:	00010007 	.word	0x00010007

08007258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x1c>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b6      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x18a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007292:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b0:	d03e      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0xd8>
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b6:	f200 8087 	bhi.w	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072be:	f000 8086 	beq.w	80073ce <HAL_TIM_ConfigClockSource+0x176>
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c6:	d87f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072c8:	2b70      	cmp	r3, #112	@ 0x70
 80072ca:	d01a      	beq.n	8007302 <HAL_TIM_ConfigClockSource+0xaa>
 80072cc:	2b70      	cmp	r3, #112	@ 0x70
 80072ce:	d87b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072d0:	2b60      	cmp	r3, #96	@ 0x60
 80072d2:	d050      	beq.n	8007376 <HAL_TIM_ConfigClockSource+0x11e>
 80072d4:	2b60      	cmp	r3, #96	@ 0x60
 80072d6:	d877      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072d8:	2b50      	cmp	r3, #80	@ 0x50
 80072da:	d03c      	beq.n	8007356 <HAL_TIM_ConfigClockSource+0xfe>
 80072dc:	2b50      	cmp	r3, #80	@ 0x50
 80072de:	d873      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d058      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x13e>
 80072e4:	2b40      	cmp	r3, #64	@ 0x40
 80072e6:	d86f      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d064      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15e>
 80072ec:	2b30      	cmp	r3, #48	@ 0x30
 80072ee:	d86b      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d060      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15e>
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d867      	bhi.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05c      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15e>
 80072fc:	2b10      	cmp	r3, #16
 80072fe:	d05a      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0x15e>
 8007300:	e062      	b.n	80073c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	f000 f98b 	bl	800762c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	609a      	str	r2, [r3, #8]
      break;
 800732e:	e04f      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	f000 f974 	bl	800762c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007352:	609a      	str	r2, [r3, #8]
      break;
 8007354:	e03c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007362:	461a      	mov	r2, r3
 8007364:	f000 f8e8 	bl	8007538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2150      	movs	r1, #80	@ 0x50
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f941 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8007374:	e02c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007382:	461a      	mov	r2, r3
 8007384:	f000 f907 	bl	8007596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2160      	movs	r1, #96	@ 0x60
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f931 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 8007394:	e01c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a2:	461a      	mov	r2, r3
 80073a4:	f000 f8c8 	bl	8007538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2140      	movs	r1, #64	@ 0x40
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f921 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 80073b4:	e00c      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f000 f918 	bl	80075f6 <TIM_ITRx_SetConfig>
      break;
 80073c6:	e003      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	73fb      	strb	r3, [r7, #15]
      break;
 80073cc:	e000      	b.n	80073d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a46      	ldr	r2, [pc, #280]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d00f      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a43      	ldr	r2, [pc, #268]	@ (800751c <TIM_Base_SetConfig+0x130>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00b      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a42      	ldr	r2, [pc, #264]	@ (8007520 <TIM_Base_SetConfig+0x134>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d007      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a41      	ldr	r2, [pc, #260]	@ (8007524 <TIM_Base_SetConfig+0x138>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a40      	ldr	r2, [pc, #256]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a35      	ldr	r2, [pc, #212]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01f      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d01b      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a32      	ldr	r2, [pc, #200]	@ (800751c <TIM_Base_SetConfig+0x130>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d017      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a31      	ldr	r2, [pc, #196]	@ (8007520 <TIM_Base_SetConfig+0x134>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d013      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a30      	ldr	r2, [pc, #192]	@ (8007524 <TIM_Base_SetConfig+0x138>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00f      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2f      	ldr	r2, [pc, #188]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00b      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a2e      	ldr	r2, [pc, #184]	@ (800752c <TIM_Base_SetConfig+0x140>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d007      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2d      	ldr	r2, [pc, #180]	@ (8007530 <TIM_Base_SetConfig+0x144>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_Base_SetConfig+0x9a>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2c      	ldr	r2, [pc, #176]	@ (8007534 <TIM_Base_SetConfig+0x148>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d108      	bne.n	8007498 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a16      	ldr	r2, [pc, #88]	@ (8007518 <TIM_Base_SetConfig+0x12c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a18      	ldr	r2, [pc, #96]	@ (8007528 <TIM_Base_SetConfig+0x13c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a17      	ldr	r2, [pc, #92]	@ (800752c <TIM_Base_SetConfig+0x140>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a16      	ldr	r2, [pc, #88]	@ (8007530 <TIM_Base_SetConfig+0x144>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0xf8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <TIM_Base_SetConfig+0x148>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d105      	bne.n	800750a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]
  }
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00
 800751c:	40000400 	.word	0x40000400
 8007520:	40000800 	.word	0x40000800
 8007524:	40000c00 	.word	0x40000c00
 8007528:	40013400 	.word	0x40013400
 800752c:	40014000 	.word	0x40014000
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800

08007538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f023 030a 	bic.w	r3, r3, #10
 8007574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4313      	orrs	r3, r2
 800757c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007596:	b480      	push	{r7}
 8007598:	b087      	sub	sp, #28
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1b      	ldr	r3, [r3, #32]
 80075ac:	f023 0210 	bic.w	r2, r3, #16
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	621a      	str	r2, [r3, #32]
}
 80075ea:	bf00      	nop
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	f043 0307 	orr.w	r3, r3, #7
 8007618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	021a      	lsls	r2, r3, #8
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	431a      	orrs	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	609a      	str	r2, [r3, #8]
}
 8007660:	bf00      	nop
 8007662:	371c      	adds	r7, #28
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007680:	2302      	movs	r3, #2
 8007682:	e068      	b.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2d      	ldr	r2, [pc, #180]	@ (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d108      	bne.n	80076ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80076be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d01d      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f6:	d018      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1b      	ldr	r2, [pc, #108]	@ (800776c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d013      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1a      	ldr	r2, [pc, #104]	@ (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00e      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a18      	ldr	r2, [pc, #96]	@ (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d009      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a13      	ldr	r2, [pc, #76]	@ (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d004      	beq.n	800772a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a14      	ldr	r2, [pc, #80]	@ (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d10c      	bne.n	8007744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	4313      	orrs	r3, r2
 800773a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40013400 	.word	0x40013400
 800776c:	40000400 	.word	0x40000400
 8007770:	40000800 	.word	0x40000800
 8007774:	40000c00 	.word	0x40000c00
 8007778:	40014000 	.word	0x40014000

0800777c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e040      	b.n	8007810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fa ffce 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2224      	movs	r2, #36	@ 0x24
 80077a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0201 	bic.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fb6a 	bl	8007e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f8af 	bl	800792c <UART_SetConfig>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e01b      	b.n	8007810 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fbe9 	bl	8007fe0 <UART_CheckIdleState>
 800780e:	4603      	mov	r3, r0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	@ 0x28
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800782c:	2b20      	cmp	r3, #32
 800782e:	d177      	bne.n	8007920 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_UART_Transmit+0x24>
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e070      	b.n	8007922 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2221      	movs	r2, #33	@ 0x21
 800784c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800784e:	f7fb f903 	bl	8002a58 <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786c:	d108      	bne.n	8007880 <HAL_UART_Transmit+0x68>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e003      	b.n	8007888 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007888:	e02f      	b.n	80078ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	2180      	movs	r1, #128	@ 0x80
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 fc4b 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e03b      	b.n	8007922 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	881a      	ldrh	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078bc:	b292      	uxth	r2, r2
 80078be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	3302      	adds	r3, #2
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	e007      	b.n	80078d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	3301      	adds	r3, #1
 80078d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80078de:	b29b      	uxth	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1c9      	bne.n	800788a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2200      	movs	r2, #0
 80078fe:	2140      	movs	r1, #64	@ 0x40
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fc15 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e005      	b.n	8007922 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e000      	b.n	8007922 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800792c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007930:	b08a      	sub	sp, #40	@ 0x28
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	431a      	orrs	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	431a      	orrs	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	4313      	orrs	r3, r2
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4ba4      	ldr	r3, [pc, #656]	@ (8007bec <UART_SetConfig+0x2c0>)
 800795c:	4013      	ands	r3, r2
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007964:	430b      	orrs	r3, r1
 8007966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a99      	ldr	r2, [pc, #612]	@ (8007bf0 <UART_SetConfig+0x2c4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007994:	4313      	orrs	r3, r2
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a8:	430a      	orrs	r2, r1
 80079aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a90      	ldr	r2, [pc, #576]	@ (8007bf4 <UART_SetConfig+0x2c8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d126      	bne.n	8007a04 <UART_SetConfig+0xd8>
 80079b6:	4b90      	ldr	r3, [pc, #576]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d81b      	bhi.n	80079fc <UART_SetConfig+0xd0>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0xa0>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	080079f5 	.word	0x080079f5
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079e2:	e116      	b.n	8007c12 <UART_SetConfig+0x2e6>
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ea:	e112      	b.n	8007c12 <UART_SetConfig+0x2e6>
 80079ec:	2304      	movs	r3, #4
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f2:	e10e      	b.n	8007c12 <UART_SetConfig+0x2e6>
 80079f4:	2308      	movs	r3, #8
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fa:	e10a      	b.n	8007c12 <UART_SetConfig+0x2e6>
 80079fc:	2310      	movs	r3, #16
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a02:	e106      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a7c      	ldr	r2, [pc, #496]	@ (8007bfc <UART_SetConfig+0x2d0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d138      	bne.n	8007a80 <UART_SetConfig+0x154>
 8007a0e:	4b7a      	ldr	r3, [pc, #488]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 8007a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a14:	f003 030c 	and.w	r3, r3, #12
 8007a18:	2b0c      	cmp	r3, #12
 8007a1a:	d82d      	bhi.n	8007a78 <UART_SetConfig+0x14c>
 8007a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a24 <UART_SetConfig+0xf8>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a59 	.word	0x08007a59
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007a69 	.word	0x08007a69
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a79 	.word	0x08007a79
 8007a40:	08007a79 	.word	0x08007a79
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	08007a79 	.word	0x08007a79
 8007a4c:	08007a79 	.word	0x08007a79
 8007a50:	08007a79 	.word	0x08007a79
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e0d8      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a60:	2302      	movs	r3, #2
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e0d4      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6e:	e0d0      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a70:	2308      	movs	r3, #8
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a76:	e0cc      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a7e:	e0c8      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5e      	ldr	r2, [pc, #376]	@ (8007c00 <UART_SetConfig+0x2d4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d125      	bne.n	8007ad6 <UART_SetConfig+0x1aa>
 8007a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 8007a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a94:	2b30      	cmp	r3, #48	@ 0x30
 8007a96:	d016      	beq.n	8007ac6 <UART_SetConfig+0x19a>
 8007a98:	2b30      	cmp	r3, #48	@ 0x30
 8007a9a:	d818      	bhi.n	8007ace <UART_SetConfig+0x1a2>
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d00a      	beq.n	8007ab6 <UART_SetConfig+0x18a>
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d814      	bhi.n	8007ace <UART_SetConfig+0x1a2>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <UART_SetConfig+0x182>
 8007aa8:	2b10      	cmp	r3, #16
 8007aaa:	d008      	beq.n	8007abe <UART_SetConfig+0x192>
 8007aac:	e00f      	b.n	8007ace <UART_SetConfig+0x1a2>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab4:	e0ad      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007abc:	e0a9      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007abe:	2304      	movs	r3, #4
 8007ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac4:	e0a5      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007ac6:	2308      	movs	r3, #8
 8007ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007acc:	e0a1      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007ace:	2310      	movs	r3, #16
 8007ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad4:	e09d      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a4a      	ldr	r2, [pc, #296]	@ (8007c04 <UART_SetConfig+0x2d8>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d125      	bne.n	8007b2c <UART_SetConfig+0x200>
 8007ae0:	4b45      	ldr	r3, [pc, #276]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 8007ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007aea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007aec:	d016      	beq.n	8007b1c <UART_SetConfig+0x1f0>
 8007aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8007af0:	d818      	bhi.n	8007b24 <UART_SetConfig+0x1f8>
 8007af2:	2b80      	cmp	r3, #128	@ 0x80
 8007af4:	d00a      	beq.n	8007b0c <UART_SetConfig+0x1e0>
 8007af6:	2b80      	cmp	r3, #128	@ 0x80
 8007af8:	d814      	bhi.n	8007b24 <UART_SetConfig+0x1f8>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <UART_SetConfig+0x1d8>
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d008      	beq.n	8007b14 <UART_SetConfig+0x1e8>
 8007b02:	e00f      	b.n	8007b24 <UART_SetConfig+0x1f8>
 8007b04:	2300      	movs	r3, #0
 8007b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b0a:	e082      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b12:	e07e      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b14:	2304      	movs	r3, #4
 8007b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b1a:	e07a      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b1c:	2308      	movs	r3, #8
 8007b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b22:	e076      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b24:	2310      	movs	r3, #16
 8007b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2a:	e072      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a35      	ldr	r2, [pc, #212]	@ (8007c08 <UART_SetConfig+0x2dc>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d12a      	bne.n	8007b8c <UART_SetConfig+0x260>
 8007b36:	4b30      	ldr	r3, [pc, #192]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b44:	d01a      	beq.n	8007b7c <UART_SetConfig+0x250>
 8007b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b4a:	d81b      	bhi.n	8007b84 <UART_SetConfig+0x258>
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b50:	d00c      	beq.n	8007b6c <UART_SetConfig+0x240>
 8007b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b56:	d815      	bhi.n	8007b84 <UART_SetConfig+0x258>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <UART_SetConfig+0x238>
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b60:	d008      	beq.n	8007b74 <UART_SetConfig+0x248>
 8007b62:	e00f      	b.n	8007b84 <UART_SetConfig+0x258>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b6a:	e052      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b72:	e04e      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b7a:	e04a      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b82:	e046      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b8a:	e042      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a17      	ldr	r2, [pc, #92]	@ (8007bf0 <UART_SetConfig+0x2c4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d13a      	bne.n	8007c0c <UART_SetConfig+0x2e0>
 8007b96:	4b18      	ldr	r3, [pc, #96]	@ (8007bf8 <UART_SetConfig+0x2cc>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ba4:	d01a      	beq.n	8007bdc <UART_SetConfig+0x2b0>
 8007ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007baa:	d81b      	bhi.n	8007be4 <UART_SetConfig+0x2b8>
 8007bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb0:	d00c      	beq.n	8007bcc <UART_SetConfig+0x2a0>
 8007bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bb6:	d815      	bhi.n	8007be4 <UART_SetConfig+0x2b8>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <UART_SetConfig+0x298>
 8007bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc0:	d008      	beq.n	8007bd4 <UART_SetConfig+0x2a8>
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x2b8>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bca:	e022      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bd2:	e01e      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bda:	e01a      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be2:	e016      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bea:	e012      	b.n	8007c12 <UART_SetConfig+0x2e6>
 8007bec:	efff69f3 	.word	0xefff69f3
 8007bf0:	40008000 	.word	0x40008000
 8007bf4:	40013800 	.word	0x40013800
 8007bf8:	40021000 	.word	0x40021000
 8007bfc:	40004400 	.word	0x40004400
 8007c00:	40004800 	.word	0x40004800
 8007c04:	40004c00 	.word	0x40004c00
 8007c08:	40005000 	.word	0x40005000
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a9f      	ldr	r2, [pc, #636]	@ (8007e94 <UART_SetConfig+0x568>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d17a      	bne.n	8007d12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d824      	bhi.n	8007c6e <UART_SetConfig+0x342>
 8007c24:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <UART_SetConfig+0x300>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c6f 	.word	0x08007c6f
 8007c34:	08007c59 	.word	0x08007c59
 8007c38:	08007c6f 	.word	0x08007c6f
 8007c3c:	08007c5f 	.word	0x08007c5f
 8007c40:	08007c6f 	.word	0x08007c6f
 8007c44:	08007c6f 	.word	0x08007c6f
 8007c48:	08007c6f 	.word	0x08007c6f
 8007c4c:	08007c67 	.word	0x08007c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c50:	f7fe fcfa 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007c54:	61f8      	str	r0, [r7, #28]
        break;
 8007c56:	e010      	b.n	8007c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c58:	4b8f      	ldr	r3, [pc, #572]	@ (8007e98 <UART_SetConfig+0x56c>)
 8007c5a:	61fb      	str	r3, [r7, #28]
        break;
 8007c5c:	e00d      	b.n	8007c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c5e:	f7fe fc5b 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8007c62:	61f8      	str	r0, [r7, #28]
        break;
 8007c64:	e009      	b.n	8007c7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c6a:	61fb      	str	r3, [r7, #28]
        break;
 8007c6c:	e005      	b.n	8007c7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 80fb 	beq.w	8007e78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d305      	bcc.n	8007c9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d903      	bls.n	8007ca6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ca4:	e0e8      	b.n	8007e78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	461c      	mov	r4, r3
 8007cac:	4615      	mov	r5, r2
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	022b      	lsls	r3, r5, #8
 8007cb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007cbc:	0222      	lsls	r2, r4, #8
 8007cbe:	68f9      	ldr	r1, [r7, #12]
 8007cc0:	6849      	ldr	r1, [r1, #4]
 8007cc2:	0849      	lsrs	r1, r1, #1
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4688      	mov	r8, r1
 8007cc8:	4681      	mov	r9, r0
 8007cca:	eb12 0a08 	adds.w	sl, r2, r8
 8007cce:	eb43 0b09 	adc.w	fp, r3, r9
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	f7f9 fa78 	bl	80011d8 <__aeabi_uldivmod>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4613      	mov	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cf6:	d308      	bcc.n	8007d0a <UART_SetConfig+0x3de>
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cfe:	d204      	bcs.n	8007d0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	e0b6      	b.n	8007e78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d10:	e0b2      	b.n	8007e78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d1a:	d15e      	bne.n	8007dda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d828      	bhi.n	8007d76 <UART_SetConfig+0x44a>
 8007d24:	a201      	add	r2, pc, #4	@ (adr r2, 8007d2c <UART_SetConfig+0x400>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	08007d77 	.word	0x08007d77
 8007d3c:	08007d67 	.word	0x08007d67
 8007d40:	08007d77 	.word	0x08007d77
 8007d44:	08007d77 	.word	0x08007d77
 8007d48:	08007d77 	.word	0x08007d77
 8007d4c:	08007d6f 	.word	0x08007d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d50:	f7fe fc7a 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007d54:	61f8      	str	r0, [r7, #28]
        break;
 8007d56:	e014      	b.n	8007d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d58:	f7fe fc8c 	bl	8006674 <HAL_RCC_GetPCLK2Freq>
 8007d5c:	61f8      	str	r0, [r7, #28]
        break;
 8007d5e:	e010      	b.n	8007d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d60:	4b4d      	ldr	r3, [pc, #308]	@ (8007e98 <UART_SetConfig+0x56c>)
 8007d62:	61fb      	str	r3, [r7, #28]
        break;
 8007d64:	e00d      	b.n	8007d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d66:	f7fe fbd7 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8007d6a:	61f8      	str	r0, [r7, #28]
        break;
 8007d6c:	e009      	b.n	8007d82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d72:	61fb      	str	r3, [r7, #28]
        break;
 8007d74:	e005      	b.n	8007d82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d077      	beq.n	8007e78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	005a      	lsls	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	441a      	add	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d916      	bls.n	8007dd2 <UART_SetConfig+0x4a6>
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007daa:	d212      	bcs.n	8007dd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f023 030f 	bic.w	r3, r3, #15
 8007db4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	8afb      	ldrh	r3, [r7, #22]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	8afa      	ldrh	r2, [r7, #22]
 8007dce:	60da      	str	r2, [r3, #12]
 8007dd0:	e052      	b.n	8007e78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007dd8:	e04e      	b.n	8007e78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d827      	bhi.n	8007e32 <UART_SetConfig+0x506>
 8007de2:	a201      	add	r2, pc, #4	@ (adr r2, 8007de8 <UART_SetConfig+0x4bc>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e1d 	.word	0x08007e1d
 8007df4:	08007e33 	.word	0x08007e33
 8007df8:	08007e23 	.word	0x08007e23
 8007dfc:	08007e33 	.word	0x08007e33
 8007e00:	08007e33 	.word	0x08007e33
 8007e04:	08007e33 	.word	0x08007e33
 8007e08:	08007e2b 	.word	0x08007e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e0c:	f7fe fc1c 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007e10:	61f8      	str	r0, [r7, #28]
        break;
 8007e12:	e014      	b.n	8007e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e14:	f7fe fc2e 	bl	8006674 <HAL_RCC_GetPCLK2Freq>
 8007e18:	61f8      	str	r0, [r7, #28]
        break;
 8007e1a:	e010      	b.n	8007e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e98 <UART_SetConfig+0x56c>)
 8007e1e:	61fb      	str	r3, [r7, #28]
        break;
 8007e20:	e00d      	b.n	8007e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e22:	f7fe fb79 	bl	8006518 <HAL_RCC_GetSysClockFreq>
 8007e26:	61f8      	str	r0, [r7, #28]
        break;
 8007e28:	e009      	b.n	8007e3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2e:	61fb      	str	r3, [r7, #28]
        break;
 8007e30:	e005      	b.n	8007e3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d019      	beq.n	8007e78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	085a      	lsrs	r2, r3, #1
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	2b0f      	cmp	r3, #15
 8007e5c:	d909      	bls.n	8007e72 <UART_SetConfig+0x546>
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e64:	d205      	bcs.n	8007e72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60da      	str	r2, [r3, #12]
 8007e70:	e002      	b.n	8007e78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	@ 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e92:	bf00      	nop
 8007e94:	40008000 	.word	0x40008000
 8007e98:	00f42400 	.word	0x00f42400

08007e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f9a:	d10a      	bne.n	8007fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b098      	sub	sp, #96	@ 0x60
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff0:	f7fa fd32 	bl	8002a58 <HAL_GetTick>
 8007ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d12e      	bne.n	8008062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f88c 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d021      	beq.n	8008062 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	653b      	str	r3, [r7, #80]	@ 0x50
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800803c:	647b      	str	r3, [r7, #68]	@ 0x44
 800803e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e6      	bne.n	800801e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e062      	b.n	8008128 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b04      	cmp	r3, #4
 800806e:	d149      	bne.n	8008104 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008078:	2200      	movs	r2, #0
 800807a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f856 	bl	8008130 <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d03c      	beq.n	8008104 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	e853 3f00 	ldrex	r3, [r3]
 8008096:	623b      	str	r3, [r7, #32]
   return(result);
 8008098:	6a3b      	ldr	r3, [r7, #32]
 800809a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800809e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80080aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e6      	bne.n	800808a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0301 	bic.w	r3, r3, #1
 80080d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3308      	adds	r3, #8
 80080da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080dc:	61fa      	str	r2, [r7, #28]
 80080de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e0:	69b9      	ldr	r1, [r7, #24]
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	e841 2300 	strex	r3, r2, [r1]
 80080e8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1e5      	bne.n	80080bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e011      	b.n	8008128 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3758      	adds	r7, #88	@ 0x58
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	4613      	mov	r3, r2
 800813e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008140:	e04f      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d04b      	beq.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800814a:	f7fa fc85 	bl	8002a58 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	429a      	cmp	r2, r3
 8008158:	d302      	bcc.n	8008160 <UART_WaitOnFlagUntilTimeout+0x30>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e04e      	b.n	8008202 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d037      	beq.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b80      	cmp	r3, #128	@ 0x80
 8008176:	d034      	beq.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	d031      	beq.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f003 0308 	and.w	r3, r3, #8
 8008188:	2b08      	cmp	r3, #8
 800818a:	d110      	bne.n	80081ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2208      	movs	r2, #8
 8008192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 f838 	bl	800820a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2208      	movs	r2, #8
 800819e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e029      	b.n	8008202 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081bc:	d111      	bne.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f81e 	bl	800820a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e00f      	b.n	8008202 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4013      	ands	r3, r2
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	bf0c      	ite	eq
 80081f2:	2301      	moveq	r3, #1
 80081f4:	2300      	movne	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d0a0      	beq.n	8008142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800820a:	b480      	push	{r7}
 800820c:	b095      	sub	sp, #84	@ 0x54
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	e853 3f00 	ldrex	r3, [r3]
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008230:	643b      	str	r3, [r7, #64]	@ 0x40
 8008232:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800823e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e6      	bne.n	8008212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	61fb      	str	r3, [r7, #28]
   return(result);
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800826a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e5      	bne.n	8008244 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800827c:	2b01      	cmp	r3, #1
 800827e:	d118      	bne.n	80082b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	60bb      	str	r3, [r7, #8]
   return(result);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	f023 0310 	bic.w	r3, r3, #16
 8008294:	647b      	str	r3, [r7, #68]	@ 0x44
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829e:	61bb      	str	r3, [r7, #24]
 80082a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6979      	ldr	r1, [r7, #20]
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	613b      	str	r3, [r7, #16]
   return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e6      	bne.n	8008280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80082c6:	bf00      	nop
 80082c8:	3754      	adds	r7, #84	@ 0x54
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <arm_rfft_fast_init_f32>:
 80082d4:	084b      	lsrs	r3, r1, #1
 80082d6:	2b80      	cmp	r3, #128	@ 0x80
 80082d8:	b410      	push	{r4}
 80082da:	8201      	strh	r1, [r0, #16]
 80082dc:	8003      	strh	r3, [r0, #0]
 80082de:	d047      	beq.n	8008370 <arm_rfft_fast_init_f32+0x9c>
 80082e0:	d917      	bls.n	8008312 <arm_rfft_fast_init_f32+0x3e>
 80082e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e6:	d03d      	beq.n	8008364 <arm_rfft_fast_init_f32+0x90>
 80082e8:	d929      	bls.n	800833e <arm_rfft_fast_init_f32+0x6a>
 80082ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082ee:	d020      	beq.n	8008332 <arm_rfft_fast_init_f32+0x5e>
 80082f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082f4:	d113      	bne.n	800831e <arm_rfft_fast_init_f32+0x4a>
 80082f6:	4921      	ldr	r1, [pc, #132]	@ (800837c <arm_rfft_fast_init_f32+0xa8>)
 80082f8:	4a21      	ldr	r2, [pc, #132]	@ (8008380 <arm_rfft_fast_init_f32+0xac>)
 80082fa:	4b22      	ldr	r3, [pc, #136]	@ (8008384 <arm_rfft_fast_init_f32+0xb0>)
 80082fc:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8008300:	8184      	strh	r4, [r0, #12]
 8008302:	6081      	str	r1, [r0, #8]
 8008304:	6042      	str	r2, [r0, #4]
 8008306:	6143      	str	r3, [r0, #20]
 8008308:	2000      	movs	r0, #0
 800830a:	b240      	sxtb	r0, r0
 800830c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	2b20      	cmp	r3, #32
 8008314:	d01c      	beq.n	8008350 <arm_rfft_fast_init_f32+0x7c>
 8008316:	2b40      	cmp	r3, #64	@ 0x40
 8008318:	d006      	beq.n	8008328 <arm_rfft_fast_init_f32+0x54>
 800831a:	2b10      	cmp	r3, #16
 800831c:	d01d      	beq.n	800835a <arm_rfft_fast_init_f32+0x86>
 800831e:	20ff      	movs	r0, #255	@ 0xff
 8008320:	b240      	sxtb	r0, r0
 8008322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	2438      	movs	r4, #56	@ 0x38
 800832a:	4917      	ldr	r1, [pc, #92]	@ (8008388 <arm_rfft_fast_init_f32+0xb4>)
 800832c:	4a17      	ldr	r2, [pc, #92]	@ (800838c <arm_rfft_fast_init_f32+0xb8>)
 800832e:	4b18      	ldr	r3, [pc, #96]	@ (8008390 <arm_rfft_fast_init_f32+0xbc>)
 8008330:	e7e6      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 8008332:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8008336:	4917      	ldr	r1, [pc, #92]	@ (8008394 <arm_rfft_fast_init_f32+0xc0>)
 8008338:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <arm_rfft_fast_init_f32+0xc4>)
 800833a:	4b18      	ldr	r3, [pc, #96]	@ (800839c <arm_rfft_fast_init_f32+0xc8>)
 800833c:	e7e0      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 800833e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008342:	d1ec      	bne.n	800831e <arm_rfft_fast_init_f32+0x4a>
 8008344:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8008348:	4915      	ldr	r1, [pc, #84]	@ (80083a0 <arm_rfft_fast_init_f32+0xcc>)
 800834a:	4a16      	ldr	r2, [pc, #88]	@ (80083a4 <arm_rfft_fast_init_f32+0xd0>)
 800834c:	4b16      	ldr	r3, [pc, #88]	@ (80083a8 <arm_rfft_fast_init_f32+0xd4>)
 800834e:	e7d7      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 8008350:	2430      	movs	r4, #48	@ 0x30
 8008352:	4916      	ldr	r1, [pc, #88]	@ (80083ac <arm_rfft_fast_init_f32+0xd8>)
 8008354:	4a16      	ldr	r2, [pc, #88]	@ (80083b0 <arm_rfft_fast_init_f32+0xdc>)
 8008356:	4b17      	ldr	r3, [pc, #92]	@ (80083b4 <arm_rfft_fast_init_f32+0xe0>)
 8008358:	e7d2      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 800835a:	2414      	movs	r4, #20
 800835c:	4916      	ldr	r1, [pc, #88]	@ (80083b8 <arm_rfft_fast_init_f32+0xe4>)
 800835e:	4a17      	ldr	r2, [pc, #92]	@ (80083bc <arm_rfft_fast_init_f32+0xe8>)
 8008360:	4b17      	ldr	r3, [pc, #92]	@ (80083c0 <arm_rfft_fast_init_f32+0xec>)
 8008362:	e7cd      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 8008364:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8008368:	4916      	ldr	r1, [pc, #88]	@ (80083c4 <arm_rfft_fast_init_f32+0xf0>)
 800836a:	4a17      	ldr	r2, [pc, #92]	@ (80083c8 <arm_rfft_fast_init_f32+0xf4>)
 800836c:	4b17      	ldr	r3, [pc, #92]	@ (80083cc <arm_rfft_fast_init_f32+0xf8>)
 800836e:	e7c7      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 8008370:	24d0      	movs	r4, #208	@ 0xd0
 8008372:	4917      	ldr	r1, [pc, #92]	@ (80083d0 <arm_rfft_fast_init_f32+0xfc>)
 8008374:	4a17      	ldr	r2, [pc, #92]	@ (80083d4 <arm_rfft_fast_init_f32+0x100>)
 8008376:	4b18      	ldr	r3, [pc, #96]	@ (80083d8 <arm_rfft_fast_init_f32+0x104>)
 8008378:	e7c2      	b.n	8008300 <arm_rfft_fast_init_f32+0x2c>
 800837a:	bf00      	nop
 800837c:	0801a6d8 	.word	0x0801a6d8
 8008380:	0800b8d0 	.word	0x0800b8d0
 8008384:	08011a40 	.word	0x08011a40
 8008388:	0800f9d0 	.word	0x0800f9d0
 800838c:	0801c498 	.word	0x0801c498
 8008390:	0801e988 	.word	0x0801e988
 8008394:	080183c0 	.word	0x080183c0
 8008398:	080162c0 	.word	0x080162c0
 800839c:	0800fa40 	.word	0x0800fa40
 80083a0:	0801e618 	.word	0x0801e618
 80083a4:	08015a40 	.word	0x08015a40
 80083a8:	0801c698 	.word	0x0801c698
 80083ac:	08019278 	.word	0x08019278
 80083b0:	080182c0 	.word	0x080182c0
 80083b4:	0800f8d0 	.word	0x0800f8d0
 80083b8:	080191d0 	.word	0x080191d0
 80083bc:	08016240 	.word	0x08016240
 80083c0:	080191f8 	.word	0x080191f8
 80083c4:	0801ce98 	.word	0x0801ce98
 80083c8:	080196d8 	.word	0x080196d8
 80083cc:	0801d218 	.word	0x0801d218
 80083d0:	0801eb88 	.word	0x0801eb88
 80083d4:	080192d8 	.word	0x080192d8
 80083d8:	0801e218 	.word	0x0801e218

080083dc <arm_rfft_fast_f32>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	b089      	sub	sp, #36	@ 0x24
 80083e2:	460e      	mov	r6, r1
 80083e4:	9205      	str	r2, [sp, #20]
 80083e6:	8a02      	ldrh	r2, [r0, #16]
 80083e8:	9006      	str	r0, [sp, #24]
 80083ea:	0852      	lsrs	r2, r2, #1
 80083ec:	8002      	strh	r2, [r0, #0]
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f040 8097 	bne.w	8008524 <arm_rfft_fast_f32+0x148>
 80083f6:	461a      	mov	r2, r3
 80083f8:	2301      	movs	r3, #1
 80083fa:	f000 fe35 	bl	8009068 <arm_cfft_f32>
 80083fe:	9a06      	ldr	r2, [sp, #24]
 8008400:	6830      	ldr	r0, [r6, #0]
 8008402:	8813      	ldrh	r3, [r2, #0]
 8008404:	6954      	ldr	r4, [r2, #20]
 8008406:	3b01      	subs	r3, #1
 8008408:	4601      	mov	r1, r0
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	f7f8 fc8c 	bl	8000d28 <__addsf3>
 8008410:	4605      	mov	r5, r0
 8008412:	6870      	ldr	r0, [r6, #4]
 8008414:	4601      	mov	r1, r0
 8008416:	f7f8 fc87 	bl	8000d28 <__addsf3>
 800841a:	4607      	mov	r7, r0
 800841c:	4639      	mov	r1, r7
 800841e:	4628      	mov	r0, r5
 8008420:	f7f8 fc82 	bl	8000d28 <__addsf3>
 8008424:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008428:	f7f8 fd86 	bl	8000f38 <__aeabi_fmul>
 800842c:	4639      	mov	r1, r7
 800842e:	9f05      	ldr	r7, [sp, #20]
 8008430:	6038      	str	r0, [r7, #0]
 8008432:	4628      	mov	r0, r5
 8008434:	f7f8 fc76 	bl	8000d24 <__aeabi_fsub>
 8008438:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800843c:	f7f8 fd7c 	bl	8000f38 <__aeabi_fmul>
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8008448:	f106 0210 	add.w	r2, r6, #16
 800844c:	f1a3 0c08 	sub.w	ip, r3, #8
 8008450:	f107 0510 	add.w	r5, r7, #16
 8008454:	3410      	adds	r4, #16
 8008456:	4666      	mov	r6, ip
 8008458:	4617      	mov	r7, r2
 800845a:	68f1      	ldr	r1, [r6, #12]
 800845c:	68b2      	ldr	r2, [r6, #8]
 800845e:	f857 3c08 	ldr.w	r3, [r7, #-8]
 8008462:	9206      	str	r2, [sp, #24]
 8008464:	4688      	mov	r8, r1
 8008466:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800846a:	9100      	str	r1, [sp, #0]
 800846c:	4610      	mov	r0, r2
 800846e:	4619      	mov	r1, r3
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	f7f8 fc57 	bl	8000d24 <__aeabi_fsub>
 8008476:	9900      	ldr	r1, [sp, #0]
 8008478:	f8cd 8008 	str.w	r8, [sp, #8]
 800847c:	4683      	mov	fp, r0
 800847e:	4640      	mov	r0, r8
 8008480:	f7f8 fc52 	bl	8000d28 <__addsf3>
 8008484:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8008488:	f854 9c08 	ldr.w	r9, [r4, #-8]
 800848c:	4680      	mov	r8, r0
 800848e:	4641      	mov	r1, r8
 8008490:	4650      	mov	r0, sl
 8008492:	f7f8 fd51 	bl	8000f38 <__aeabi_fmul>
 8008496:	4659      	mov	r1, fp
 8008498:	9003      	str	r0, [sp, #12]
 800849a:	4648      	mov	r0, r9
 800849c:	f7f8 fd4c 	bl	8000f38 <__aeabi_fmul>
 80084a0:	9b05      	ldr	r3, [sp, #20]
 80084a2:	9a06      	ldr	r2, [sp, #24]
 80084a4:	9004      	str	r0, [sp, #16]
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7f8 fc3d 	bl	8000d28 <__addsf3>
 80084ae:	f8dd c010 	ldr.w	ip, [sp, #16]
 80084b2:	4601      	mov	r1, r0
 80084b4:	4660      	mov	r0, ip
 80084b6:	f7f8 fc37 	bl	8000d28 <__addsf3>
 80084ba:	4601      	mov	r1, r0
 80084bc:	9803      	ldr	r0, [sp, #12]
 80084be:	f7f8 fc33 	bl	8000d28 <__addsf3>
 80084c2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80084c6:	f7f8 fd37 	bl	8000f38 <__aeabi_fmul>
 80084ca:	4659      	mov	r1, fp
 80084cc:	f845 0c08 	str.w	r0, [r5, #-8]
 80084d0:	4650      	mov	r0, sl
 80084d2:	f7f8 fd31 	bl	8000f38 <__aeabi_fmul>
 80084d6:	9902      	ldr	r1, [sp, #8]
 80084d8:	4682      	mov	sl, r0
 80084da:	9800      	ldr	r0, [sp, #0]
 80084dc:	f7f8 fc22 	bl	8000d24 <__aeabi_fsub>
 80084e0:	4601      	mov	r1, r0
 80084e2:	4650      	mov	r0, sl
 80084e4:	f7f8 fc20 	bl	8000d28 <__addsf3>
 80084e8:	4641      	mov	r1, r8
 80084ea:	4682      	mov	sl, r0
 80084ec:	4648      	mov	r0, r9
 80084ee:	f7f8 fd23 	bl	8000f38 <__aeabi_fmul>
 80084f2:	4601      	mov	r1, r0
 80084f4:	4650      	mov	r0, sl
 80084f6:	f7f8 fc15 	bl	8000d24 <__aeabi_fsub>
 80084fa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80084fe:	f7f8 fd1b 	bl	8000f38 <__aeabi_fmul>
 8008502:	9b01      	ldr	r3, [sp, #4]
 8008504:	f845 0c04 	str.w	r0, [r5, #-4]
 8008508:	3b01      	subs	r3, #1
 800850a:	f1a6 0608 	sub.w	r6, r6, #8
 800850e:	f107 0708 	add.w	r7, r7, #8
 8008512:	f104 0408 	add.w	r4, r4, #8
 8008516:	f105 0508 	add.w	r5, r5, #8
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	d19d      	bne.n	800845a <arm_rfft_fast_f32+0x7e>
 800851e:	b009      	add	sp, #36	@ 0x24
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	680d      	ldr	r5, [r1, #0]
 8008526:	684f      	ldr	r7, [r1, #4]
 8008528:	6944      	ldr	r4, [r0, #20]
 800852a:	1e53      	subs	r3, r2, #1
 800852c:	4639      	mov	r1, r7
 800852e:	4628      	mov	r0, r5
 8008530:	9302      	str	r3, [sp, #8]
 8008532:	f7f8 fbf9 	bl	8000d28 <__addsf3>
 8008536:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800853a:	f7f8 fcfd 	bl	8000f38 <__aeabi_fmul>
 800853e:	4639      	mov	r1, r7
 8008540:	9f05      	ldr	r7, [sp, #20]
 8008542:	6038      	str	r0, [r7, #0]
 8008544:	4628      	mov	r0, r5
 8008546:	f7f8 fbed 	bl	8000d24 <__aeabi_fsub>
 800854a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800854e:	f7f8 fcf3 	bl	8000f38 <__aeabi_fmul>
 8008552:	9b02      	ldr	r3, [sp, #8]
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	00dd      	lsls	r5, r3, #3
 8008558:	2b00      	cmp	r3, #0
 800855a:	d06b      	beq.n	8008634 <arm_rfft_fast_f32+0x258>
 800855c:	3d08      	subs	r5, #8
 800855e:	f104 0310 	add.w	r3, r4, #16
 8008562:	4435      	add	r5, r6
 8008564:	f106 0410 	add.w	r4, r6, #16
 8008568:	f107 0610 	add.w	r6, r7, #16
 800856c:	46b0      	mov	r8, r6
 800856e:	461f      	mov	r7, r3
 8008570:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8008574:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008578:	68eb      	ldr	r3, [r5, #12]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4661      	mov	r1, ip
 800857e:	4610      	mov	r0, r2
 8008580:	f8cd c010 	str.w	ip, [sp, #16]
 8008584:	9203      	str	r2, [sp, #12]
 8008586:	f7f8 fbcd 	bl	8000d24 <__aeabi_fsub>
 800858a:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800858e:	f857 9c08 	ldr.w	r9, [r7, #-8]
 8008592:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8008596:	4606      	mov	r6, r0
 8008598:	4651      	mov	r1, sl
 800859a:	9800      	ldr	r0, [sp, #0]
 800859c:	f7f8 fbc4 	bl	8000d28 <__addsf3>
 80085a0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80085a4:	9a03      	ldr	r2, [sp, #12]
 80085a6:	9001      	str	r0, [sp, #4]
 80085a8:	4611      	mov	r1, r2
 80085aa:	4660      	mov	r0, ip
 80085ac:	f7f8 fbbc 	bl	8000d28 <__addsf3>
 80085b0:	4631      	mov	r1, r6
 80085b2:	9003      	str	r0, [sp, #12]
 80085b4:	4648      	mov	r0, r9
 80085b6:	f7f8 fcbf 	bl	8000f38 <__aeabi_fmul>
 80085ba:	9a03      	ldr	r2, [sp, #12]
 80085bc:	4601      	mov	r1, r0
 80085be:	4610      	mov	r0, r2
 80085c0:	f7f8 fbb0 	bl	8000d24 <__aeabi_fsub>
 80085c4:	9901      	ldr	r1, [sp, #4]
 80085c6:	9003      	str	r0, [sp, #12]
 80085c8:	4658      	mov	r0, fp
 80085ca:	f7f8 fcb5 	bl	8000f38 <__aeabi_fmul>
 80085ce:	9a03      	ldr	r2, [sp, #12]
 80085d0:	4601      	mov	r1, r0
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7f8 fba6 	bl	8000d24 <__aeabi_fsub>
 80085d8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80085dc:	f7f8 fcac 	bl	8000f38 <__aeabi_fmul>
 80085e0:	4631      	mov	r1, r6
 80085e2:	f848 0c08 	str.w	r0, [r8, #-8]
 80085e6:	4658      	mov	r0, fp
 80085e8:	f7f8 fca6 	bl	8000f38 <__aeabi_fmul>
 80085ec:	9900      	ldr	r1, [sp, #0]
 80085ee:	4606      	mov	r6, r0
 80085f0:	4650      	mov	r0, sl
 80085f2:	f7f8 fb97 	bl	8000d24 <__aeabi_fsub>
 80085f6:	4601      	mov	r1, r0
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7f8 fb95 	bl	8000d28 <__addsf3>
 80085fe:	9901      	ldr	r1, [sp, #4]
 8008600:	4606      	mov	r6, r0
 8008602:	4648      	mov	r0, r9
 8008604:	f7f8 fc98 	bl	8000f38 <__aeabi_fmul>
 8008608:	4601      	mov	r1, r0
 800860a:	4630      	mov	r0, r6
 800860c:	f7f8 fb8a 	bl	8000d24 <__aeabi_fsub>
 8008610:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008614:	f7f8 fc90 	bl	8000f38 <__aeabi_fmul>
 8008618:	9b02      	ldr	r3, [sp, #8]
 800861a:	f848 0c04 	str.w	r0, [r8, #-4]
 800861e:	3b01      	subs	r3, #1
 8008620:	f1a5 0508 	sub.w	r5, r5, #8
 8008624:	f104 0408 	add.w	r4, r4, #8
 8008628:	f107 0708 	add.w	r7, r7, #8
 800862c:	f108 0808 	add.w	r8, r8, #8
 8008630:	9302      	str	r3, [sp, #8]
 8008632:	d19d      	bne.n	8008570 <arm_rfft_fast_f32+0x194>
 8008634:	9806      	ldr	r0, [sp, #24]
 8008636:	9905      	ldr	r1, [sp, #20]
 8008638:	9a07      	ldr	r2, [sp, #28]
 800863a:	2301      	movs	r3, #1
 800863c:	b009      	add	sp, #36	@ 0x24
 800863e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008642:	f000 bd11 	b.w	8009068 <arm_cfft_f32>
 8008646:	bf00      	nop

08008648 <arm_cfft_radix8by2_f32>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4602      	mov	r2, r0
 800864e:	b093      	sub	sp, #76	@ 0x4c
 8008650:	8813      	ldrh	r3, [r2, #0]
 8008652:	900e      	str	r0, [sp, #56]	@ 0x38
 8008654:	085c      	lsrs	r4, r3, #1
 8008656:	4608      	mov	r0, r1
 8008658:	9111      	str	r1, [sp, #68]	@ 0x44
 800865a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800865e:	08db      	lsrs	r3, r3, #3
 8008660:	6852      	ldr	r2, [r2, #4]
 8008662:	9410      	str	r4, [sp, #64]	@ 0x40
 8008664:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008668:	910f      	str	r1, [sp, #60]	@ 0x3c
 800866a:	f000 8137 	beq.w	80088dc <arm_cfft_radix8by2_f32+0x294>
 800866e:	f10c 0c10 	add.w	ip, ip, #16
 8008672:	eb00 070c 	add.w	r7, r0, ip
 8008676:	f101 0910 	add.w	r9, r1, #16
 800867a:	3210      	adds	r2, #16
 800867c:	448c      	add	ip, r1
 800867e:	46ca      	mov	sl, r9
 8008680:	9200      	str	r2, [sp, #0]
 8008682:	f100 0610 	add.w	r6, r0, #16
 8008686:	930a      	str	r3, [sp, #40]	@ 0x28
 8008688:	46e1      	mov	r9, ip
 800868a:	46bb      	mov	fp, r7
 800868c:	f85a cc10 	ldr.w	ip, [sl, #-16]
 8008690:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 8008694:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 8008698:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800869c:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 80086a0:	f85b ec08 	ldr.w	lr, [fp, #-8]
 80086a4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80086a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80086aa:	900c      	str	r0, [sp, #48]	@ 0x30
 80086ac:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 80086b0:	f859 0c08 	ldr.w	r0, [r9, #-8]
 80086b4:	f856 8c08 	ldr.w	r8, [r6, #-8]
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80086c0:	f859 2c10 	ldr.w	r2, [r9, #-16]
 80086c4:	f8cd e010 	str.w	lr, [sp, #16]
 80086c8:	9107      	str	r1, [sp, #28]
 80086ca:	f859 ec04 	ldr.w	lr, [r9, #-4]
 80086ce:	9008      	str	r0, [sp, #32]
 80086d0:	4661      	mov	r1, ip
 80086d2:	4620      	mov	r0, r4
 80086d4:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	9206      	str	r2, [sp, #24]
 80086dc:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 80086e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80086e4:	f7f8 fb20 	bl	8000d28 <__addsf3>
 80086e8:	f85a 7c0c 	ldr.w	r7, [sl, #-12]
 80086ec:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80086f0:	f846 0c10 	str.w	r0, [r6, #-16]
 80086f4:	4639      	mov	r1, r7
 80086f6:	9801      	ldr	r0, [sp, #4]
 80086f8:	f856 8c04 	ldr.w	r8, [r6, #-4]
 80086fc:	f7f8 fb14 	bl	8000d28 <__addsf3>
 8008700:	9903      	ldr	r1, [sp, #12]
 8008702:	f846 0c0c 	str.w	r0, [r6, #-12]
 8008706:	9802      	ldr	r0, [sp, #8]
 8008708:	f7f8 fb0e 	bl	8000d28 <__addsf3>
 800870c:	4629      	mov	r1, r5
 800870e:	f846 0c08 	str.w	r0, [r6, #-8]
 8008712:	4640      	mov	r0, r8
 8008714:	f7f8 fb08 	bl	8000d28 <__addsf3>
 8008718:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800871c:	f846 0c04 	str.w	r0, [r6, #-4]
 8008720:	4661      	mov	r1, ip
 8008722:	4620      	mov	r0, r4
 8008724:	f7f8 fafe 	bl	8000d24 <__aeabi_fsub>
 8008728:	4639      	mov	r1, r7
 800872a:	4604      	mov	r4, r0
 800872c:	9801      	ldr	r0, [sp, #4]
 800872e:	f7f8 faf9 	bl	8000d24 <__aeabi_fsub>
 8008732:	9903      	ldr	r1, [sp, #12]
 8008734:	4607      	mov	r7, r0
 8008736:	9802      	ldr	r0, [sp, #8]
 8008738:	f7f8 faf4 	bl	8000d24 <__aeabi_fsub>
 800873c:	4629      	mov	r1, r5
 800873e:	9001      	str	r0, [sp, #4]
 8008740:	4640      	mov	r0, r8
 8008742:	f7f8 faef 	bl	8000d24 <__aeabi_fsub>
 8008746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008748:	900d      	str	r0, [sp, #52]	@ 0x34
 800874a:	9906      	ldr	r1, [sp, #24]
 800874c:	4628      	mov	r0, r5
 800874e:	f7f8 faeb 	bl	8000d28 <__addsf3>
 8008752:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8008756:	9907      	ldr	r1, [sp, #28]
 8008758:	f84b 0c10 	str.w	r0, [fp, #-16]
 800875c:	4640      	mov	r0, r8
 800875e:	f7f8 fae3 	bl	8000d28 <__addsf3>
 8008762:	9908      	ldr	r1, [sp, #32]
 8008764:	f84b 0c0c 	str.w	r0, [fp, #-12]
 8008768:	9804      	ldr	r0, [sp, #16]
 800876a:	f7f8 fadd 	bl	8000d28 <__addsf3>
 800876e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008770:	f84b 0c08 	str.w	r0, [fp, #-8]
 8008774:	9805      	ldr	r0, [sp, #20]
 8008776:	f7f8 fad7 	bl	8000d28 <__addsf3>
 800877a:	4629      	mov	r1, r5
 800877c:	f84b 0c04 	str.w	r0, [fp, #-4]
 8008780:	9806      	ldr	r0, [sp, #24]
 8008782:	f7f8 facf 	bl	8000d24 <__aeabi_fsub>
 8008786:	4641      	mov	r1, r8
 8008788:	9002      	str	r0, [sp, #8]
 800878a:	9807      	ldr	r0, [sp, #28]
 800878c:	f7f8 faca 	bl	8000d24 <__aeabi_fsub>
 8008790:	9904      	ldr	r1, [sp, #16]
 8008792:	9006      	str	r0, [sp, #24]
 8008794:	9808      	ldr	r0, [sp, #32]
 8008796:	f7f8 fac5 	bl	8000d24 <__aeabi_fsub>
 800879a:	9905      	ldr	r1, [sp, #20]
 800879c:	9003      	str	r0, [sp, #12]
 800879e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087a0:	f7f8 fac0 	bl	8000d24 <__aeabi_fsub>
 80087a4:	9a00      	ldr	r2, [sp, #0]
 80087a6:	9004      	str	r0, [sp, #16]
 80087a8:	f852 5c10 	ldr.w	r5, [r2, #-16]
 80087ac:	f852 8c0c 	ldr.w	r8, [r2, #-12]
 80087b0:	4629      	mov	r1, r5
 80087b2:	4620      	mov	r0, r4
 80087b4:	f7f8 fbc0 	bl	8000f38 <__aeabi_fmul>
 80087b8:	4641      	mov	r1, r8
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	4638      	mov	r0, r7
 80087be:	f7f8 fbbb 	bl	8000f38 <__aeabi_fmul>
 80087c2:	9b05      	ldr	r3, [sp, #20]
 80087c4:	4601      	mov	r1, r0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f8 faae 	bl	8000d28 <__addsf3>
 80087cc:	4629      	mov	r1, r5
 80087ce:	f84a 0c10 	str.w	r0, [sl, #-16]
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7f8 fbb0 	bl	8000f38 <__aeabi_fmul>
 80087d8:	4641      	mov	r1, r8
 80087da:	4607      	mov	r7, r0
 80087dc:	4620      	mov	r0, r4
 80087de:	f7f8 fbab 	bl	8000f38 <__aeabi_fmul>
 80087e2:	4601      	mov	r1, r0
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7f8 fa9d 	bl	8000d24 <__aeabi_fsub>
 80087ea:	4641      	mov	r1, r8
 80087ec:	f84a 0c0c 	str.w	r0, [sl, #-12]
 80087f0:	9802      	ldr	r0, [sp, #8]
 80087f2:	f7f8 fba1 	bl	8000f38 <__aeabi_fmul>
 80087f6:	9f06      	ldr	r7, [sp, #24]
 80087f8:	4604      	mov	r4, r0
 80087fa:	4629      	mov	r1, r5
 80087fc:	4638      	mov	r0, r7
 80087fe:	f7f8 fb9b 	bl	8000f38 <__aeabi_fmul>
 8008802:	4601      	mov	r1, r0
 8008804:	4620      	mov	r0, r4
 8008806:	f7f8 fa8d 	bl	8000d24 <__aeabi_fsub>
 800880a:	4641      	mov	r1, r8
 800880c:	f849 0c10 	str.w	r0, [r9, #-16]
 8008810:	4638      	mov	r0, r7
 8008812:	f7f8 fb91 	bl	8000f38 <__aeabi_fmul>
 8008816:	4629      	mov	r1, r5
 8008818:	4604      	mov	r4, r0
 800881a:	9802      	ldr	r0, [sp, #8]
 800881c:	f7f8 fb8c 	bl	8000f38 <__aeabi_fmul>
 8008820:	4601      	mov	r1, r0
 8008822:	4620      	mov	r0, r4
 8008824:	f7f8 fa80 	bl	8000d28 <__addsf3>
 8008828:	9a00      	ldr	r2, [sp, #0]
 800882a:	f849 0c0c 	str.w	r0, [r9, #-12]
 800882e:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8008832:	9801      	ldr	r0, [sp, #4]
 8008834:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008838:	4621      	mov	r1, r4
 800883a:	f7f8 fb7d 	bl	8000f38 <__aeabi_fmul>
 800883e:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8008842:	4607      	mov	r7, r0
 8008844:	4629      	mov	r1, r5
 8008846:	4640      	mov	r0, r8
 8008848:	f7f8 fb76 	bl	8000f38 <__aeabi_fmul>
 800884c:	4601      	mov	r1, r0
 800884e:	4638      	mov	r0, r7
 8008850:	f7f8 fa6a 	bl	8000d28 <__addsf3>
 8008854:	4621      	mov	r1, r4
 8008856:	f84a 0c08 	str.w	r0, [sl, #-8]
 800885a:	4640      	mov	r0, r8
 800885c:	f7f8 fb6c 	bl	8000f38 <__aeabi_fmul>
 8008860:	4629      	mov	r1, r5
 8008862:	4607      	mov	r7, r0
 8008864:	9801      	ldr	r0, [sp, #4]
 8008866:	f7f8 fb67 	bl	8000f38 <__aeabi_fmul>
 800886a:	4601      	mov	r1, r0
 800886c:	4638      	mov	r0, r7
 800886e:	f7f8 fa59 	bl	8000d24 <__aeabi_fsub>
 8008872:	4629      	mov	r1, r5
 8008874:	f84a 0c04 	str.w	r0, [sl, #-4]
 8008878:	9803      	ldr	r0, [sp, #12]
 800887a:	f7f8 fb5d 	bl	8000f38 <__aeabi_fmul>
 800887e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008882:	4607      	mov	r7, r0
 8008884:	4621      	mov	r1, r4
 8008886:	4640      	mov	r0, r8
 8008888:	f7f8 fb56 	bl	8000f38 <__aeabi_fmul>
 800888c:	4601      	mov	r1, r0
 800888e:	4638      	mov	r0, r7
 8008890:	f7f8 fa48 	bl	8000d24 <__aeabi_fsub>
 8008894:	4629      	mov	r1, r5
 8008896:	f849 0c08 	str.w	r0, [r9, #-8]
 800889a:	4640      	mov	r0, r8
 800889c:	f7f8 fb4c 	bl	8000f38 <__aeabi_fmul>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4605      	mov	r5, r0
 80088a4:	9803      	ldr	r0, [sp, #12]
 80088a6:	f7f8 fb47 	bl	8000f38 <__aeabi_fmul>
 80088aa:	4601      	mov	r1, r0
 80088ac:	4628      	mov	r0, r5
 80088ae:	f7f8 fa3b 	bl	8000d28 <__addsf3>
 80088b2:	9b00      	ldr	r3, [sp, #0]
 80088b4:	f849 0c04 	str.w	r0, [r9, #-4]
 80088b8:	3310      	adds	r3, #16
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088be:	3b01      	subs	r3, #1
 80088c0:	f106 0610 	add.w	r6, r6, #16
 80088c4:	f10b 0b10 	add.w	fp, fp, #16
 80088c8:	f10a 0a10 	add.w	sl, sl, #16
 80088cc:	f109 0910 	add.w	r9, r9, #16
 80088d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d2:	f47f aedb 	bne.w	800868c <arm_cfft_radix8by2_f32+0x44>
 80088d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 80088e0:	2302      	movs	r3, #2
 80088e2:	4621      	mov	r1, r4
 80088e4:	f000 fc3e 	bl	8009164 <arm_radix8_butterfly_f32>
 80088e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ea:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	4621      	mov	r1, r4
 80088f0:	2302      	movs	r3, #2
 80088f2:	b013      	add	sp, #76	@ 0x4c
 80088f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	f000 bc34 	b.w	8009164 <arm_radix8_butterfly_f32>

080088fc <arm_cfft_radix8by4_f32>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	8804      	ldrh	r4, [r0, #0]
 8008902:	6843      	ldr	r3, [r0, #4]
 8008904:	680e      	ldr	r6, [r1, #0]
 8008906:	b0a7      	sub	sp, #156	@ 0x9c
 8008908:	0864      	lsrs	r4, r4, #1
 800890a:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800890e:	9302      	str	r3, [sp, #8]
 8008910:	eb01 0309 	add.w	r3, r1, r9
 8008914:	461f      	mov	r7, r3
 8008916:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800891a:	9025      	str	r0, [sp, #148]	@ 0x94
 800891c:	911a      	str	r1, [sp, #104]	@ 0x68
 800891e:	9318      	str	r3, [sp, #96]	@ 0x60
 8008920:	4629      	mov	r1, r5
 8008922:	444b      	add	r3, r9
 8008924:	4630      	mov	r0, r6
 8008926:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008928:	f7f8 f9fe 	bl	8000d28 <__addsf3>
 800892c:	4629      	mov	r1, r5
 800892e:	4683      	mov	fp, r0
 8008930:	4630      	mov	r0, r6
 8008932:	f7f8 f9f7 	bl	8000d24 <__aeabi_fsub>
 8008936:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800893a:	6855      	ldr	r5, [r2, #4]
 800893c:	684e      	ldr	r6, [r1, #4]
 800893e:	9000      	str	r0, [sp, #0]
 8008940:	4629      	mov	r1, r5
 8008942:	4630      	mov	r0, r6
 8008944:	f7f8 f9f0 	bl	8000d28 <__addsf3>
 8008948:	4629      	mov	r1, r5
 800894a:	4682      	mov	sl, r0
 800894c:	4630      	mov	r0, r6
 800894e:	f7f8 f9e9 	bl	8000d24 <__aeabi_fsub>
 8008952:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8008954:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8008956:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 800895a:	9001      	str	r0, [sp, #4]
 800895c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8008960:	9718      	str	r7, [sp, #96]	@ 0x60
 8008962:	4631      	mov	r1, r6
 8008964:	4658      	mov	r0, fp
 8008966:	f7f8 f9df 	bl	8000d28 <__addsf3>
 800896a:	4601      	mov	r1, r0
 800896c:	4628      	mov	r0, r5
 800896e:	f7f8 f9db 	bl	8000d28 <__addsf3>
 8008972:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008976:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800897a:	468e      	mov	lr, r1
 800897c:	eb02 0709 	add.w	r7, r2, r9
 8008980:	9719      	str	r7, [sp, #100]	@ 0x64
 8008982:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008984:	687f      	ldr	r7, [r7, #4]
 8008986:	f84e 0b08 	str.w	r0, [lr], #8
 800898a:	4650      	mov	r0, sl
 800898c:	6851      	ldr	r1, [r2, #4]
 800898e:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
 8008992:	f7f8 f9c9 	bl	8000d28 <__addsf3>
 8008996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008998:	6859      	ldr	r1, [r3, #4]
 800899a:	f7f8 f9c5 	bl	8000d28 <__addsf3>
 800899e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80089a0:	9900      	ldr	r1, [sp, #0]
 80089a2:	6058      	str	r0, [r3, #4]
 80089a4:	4640      	mov	r0, r8
 80089a6:	f7f8 f9bf 	bl	8000d28 <__addsf3>
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f8 f9ba 	bl	8000d24 <__aeabi_fsub>
 80089b0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80089b2:	4631      	mov	r1, r6
 80089b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80089b8:	9801      	ldr	r0, [sp, #4]
 80089ba:	f7f8 f9b3 	bl	8000d24 <__aeabi_fsub>
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f8 f9b2 	bl	8000d28 <__addsf3>
 80089c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80089c6:	4631      	mov	r1, r6
 80089c8:	6058      	str	r0, [r3, #4]
 80089ca:	4658      	mov	r0, fp
 80089cc:	f7f8 f9aa 	bl	8000d24 <__aeabi_fsub>
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f8 f9a7 	bl	8000d24 <__aeabi_fsub>
 80089d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80089d8:	4641      	mov	r1, r8
 80089da:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80089de:	4650      	mov	r0, sl
 80089e0:	f7f8 f9a0 	bl	8000d24 <__aeabi_fsub>
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f8 f99d 	bl	8000d24 <__aeabi_fsub>
 80089ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80089ec:	4641      	mov	r1, r8
 80089ee:	6058      	str	r0, [r3, #4]
 80089f0:	9800      	ldr	r0, [sp, #0]
 80089f2:	f7f8 f997 	bl	8000d24 <__aeabi_fsub>
 80089f6:	4601      	mov	r1, r0
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7f8 f995 	bl	8000d28 <__addsf3>
 80089fe:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8008a00:	4631      	mov	r1, r6
 8008a02:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8008a06:	9801      	ldr	r0, [sp, #4]
 8008a08:	f7f8 f98e 	bl	8000d28 <__addsf3>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f8 f989 	bl	8000d24 <__aeabi_fsub>
 8008a12:	0866      	lsrs	r6, r4, #1
 8008a14:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	9624      	str	r6, [sp, #144]	@ 0x90
 8008a1a:	1eb1      	subs	r1, r6, #2
 8008a1c:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 8008a1e:	f104 0208 	add.w	r2, r4, #8
 8008a22:	6070      	str	r0, [r6, #4]
 8008a24:	921e      	str	r2, [sp, #120]	@ 0x78
 8008a26:	4630      	mov	r0, r6
 8008a28:	f103 0208 	add.w	r2, r3, #8
 8008a2c:	3008      	adds	r0, #8
 8008a2e:	9220      	str	r2, [sp, #128]	@ 0x80
 8008a30:	f103 0210 	add.w	r2, r3, #16
 8008a34:	4635      	mov	r5, r6
 8008a36:	901c      	str	r0, [sp, #112]	@ 0x70
 8008a38:	463e      	mov	r6, r7
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	9221      	str	r2, [sp, #132]	@ 0x84
 8008a3e:	4617      	mov	r7, r2
 8008a40:	f103 0218 	add.w	r2, r3, #24
 8008a44:	3008      	adds	r0, #8
 8008a46:	9222      	str	r2, [sp, #136]	@ 0x88
 8008a48:	084a      	lsrs	r2, r1, #1
 8008a4a:	901f      	str	r0, [sp, #124]	@ 0x7c
 8008a4c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008a4e:	f000 821d 	beq.w	8008e8c <arm_cfft_radix8by4_f32+0x590>
 8008a52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a54:	9706      	str	r7, [sp, #24]
 8008a56:	3110      	adds	r1, #16
 8008a58:	4694      	mov	ip, r2
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f1a9 020c 	sub.w	r2, r9, #12
 8008a60:	9102      	str	r1, [sp, #8]
 8008a62:	f103 0120 	add.w	r1, r3, #32
 8008a66:	3330      	adds	r3, #48	@ 0x30
 8008a68:	4410      	add	r0, r2
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f106 0310 	add.w	r3, r6, #16
 8008a72:	f104 0910 	add.w	r9, r4, #16
 8008a76:	f1a6 0b0c 	sub.w	fp, r6, #12
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	f105 0810 	add.w	r8, r5, #16
 8008a80:	4613      	mov	r3, r2
 8008a82:	46ca      	mov	sl, r9
 8008a84:	4662      	mov	r2, ip
 8008a86:	9003      	str	r0, [sp, #12]
 8008a88:	9105      	str	r1, [sp, #20]
 8008a8a:	46d9      	mov	r9, fp
 8008a8c:	f8cd 8000 	str.w	r8, [sp]
 8008a90:	469c      	mov	ip, r3
 8008a92:	9e02      	ldr	r6, [sp, #8]
 8008a94:	9f01      	ldr	r7, [sp, #4]
 8008a96:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8008a9a:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8008a9e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8008aa8:	f7f8 f93e 	bl	8000d28 <__addsf3>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f7f8 f937 	bl	8000d24 <__aeabi_fsub>
 8008ab6:	f856 5c04 	ldr.w	r5, [r6, #-4]
 8008aba:	f857 4c04 	ldr.w	r4, [r7, #-4]
 8008abe:	9007      	str	r0, [sp, #28]
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	9602      	str	r6, [sp, #8]
 8008ac6:	9701      	str	r7, [sp, #4]
 8008ac8:	f7f8 f92e 	bl	8000d28 <__addsf3>
 8008acc:	4621      	mov	r1, r4
 8008ace:	4607      	mov	r7, r0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	f7f8 f927 	bl	8000d24 <__aeabi_fsub>
 8008ad6:	9c00      	ldr	r4, [sp, #0]
 8008ad8:	f85a bc04 	ldr.w	fp, [sl, #-4]
 8008adc:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008ae0:	9907      	ldr	r1, [sp, #28]
 8008ae2:	9008      	str	r0, [sp, #32]
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f7f8 f91f 	bl	8000d28 <__addsf3>
 8008aea:	4631      	mov	r1, r6
 8008aec:	f7f8 f91a 	bl	8000d24 <__aeabi_fsub>
 8008af0:	f85a 5c08 	ldr.w	r5, [sl, #-8]
 8008af4:	9400      	str	r4, [sp, #0]
 8008af6:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8008afa:	9009      	str	r0, [sp, #36]	@ 0x24
 8008afc:	4629      	mov	r1, r5
 8008afe:	9808      	ldr	r0, [sp, #32]
 8008b00:	f7f8 f910 	bl	8000d24 <__aeabi_fsub>
 8008b04:	4621      	mov	r1, r4
 8008b06:	f7f8 f90f 	bl	8000d28 <__addsf3>
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	9010      	str	r0, [sp, #64]	@ 0x40
 8008b0e:	4640      	mov	r0, r8
 8008b10:	f7f8 f908 	bl	8000d24 <__aeabi_fsub>
 8008b14:	4621      	mov	r1, r4
 8008b16:	f7f8 f905 	bl	8000d24 <__aeabi_fsub>
 8008b1a:	4659      	mov	r1, fp
 8008b1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7f8 f900 	bl	8000d24 <__aeabi_fsub>
 8008b24:	4631      	mov	r1, r6
 8008b26:	f7f8 f8fd 	bl	8000d24 <__aeabi_fsub>
 8008b2a:	4659      	mov	r1, fp
 8008b2c:	9011      	str	r0, [sp, #68]	@ 0x44
 8008b2e:	9807      	ldr	r0, [sp, #28]
 8008b30:	f7f8 f8f8 	bl	8000d24 <__aeabi_fsub>
 8008b34:	4601      	mov	r1, r0
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7f8 f8f6 	bl	8000d28 <__addsf3>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	9007      	str	r0, [sp, #28]
 8008b40:	9808      	ldr	r0, [sp, #32]
 8008b42:	f7f8 f8f1 	bl	8000d28 <__addsf3>
 8008b46:	4621      	mov	r1, r4
 8008b48:	f7f8 f8ec 	bl	8000d24 <__aeabi_fsub>
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b50:	4640      	mov	r0, r8
 8008b52:	f7f8 f8e9 	bl	8000d28 <__addsf3>
 8008b56:	4601      	mov	r1, r0
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f7f8 f8e5 	bl	8000d28 <__addsf3>
 8008b5e:	9d02      	ldr	r5, [sp, #8]
 8008b60:	f845 0c08 	str.w	r0, [r5, #-8]
 8008b64:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7f8 f8dd 	bl	8000d28 <__addsf3>
 8008b6e:	9900      	ldr	r1, [sp, #0]
 8008b70:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8008b74:	f7f8 f8d8 	bl	8000d28 <__addsf3>
 8008b78:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8008b7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008b7e:	f845 0c04 	str.w	r0, [r5, #-4]
 8008b82:	eb03 040c 	add.w	r4, r3, ip
 8008b86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b88:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8008b8c:	9502      	str	r5, [sp, #8]
 8008b8e:	4463      	add	r3, ip
 8008b90:	461f      	mov	r7, r3
 8008b92:	4630      	mov	r0, r6
 8008b94:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8008b98:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	f7f8 f8c3 	bl	8000d28 <__addsf3>
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	9008      	str	r0, [sp, #32]
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f7f8 f8bc 	bl	8000d24 <__aeabi_fsub>
 8008bac:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8008bb0:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8008bb4:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008bb6:	4683      	mov	fp, r0
 8008bb8:	4629      	mov	r1, r5
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7f8 f8b4 	bl	8000d28 <__addsf3>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7f8 f8ad 	bl	8000d24 <__aeabi_fsub>
 8008bca:	9e03      	ldr	r6, [sp, #12]
 8008bcc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8008bd0:	68b5      	ldr	r5, [r6, #8]
 8008bd2:	900c      	str	r0, [sp, #48]	@ 0x30
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	f7f8 f8a4 	bl	8000d24 <__aeabi_fsub>
 8008bdc:	4659      	mov	r1, fp
 8008bde:	9015      	str	r0, [sp, #84]	@ 0x54
 8008be0:	f7f8 f8a2 	bl	8000d28 <__addsf3>
 8008be4:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8008be8:	9603      	str	r6, [sp, #12]
 8008bea:	6876      	ldr	r6, [r6, #4]
 8008bec:	9013      	str	r0, [sp, #76]	@ 0x4c
 8008bee:	4641      	mov	r1, r8
 8008bf0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8008bf2:	f7f8 f897 	bl	8000d24 <__aeabi_fsub>
 8008bf6:	4631      	mov	r1, r6
 8008bf8:	f7f8 f896 	bl	8000d28 <__addsf3>
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	900d      	str	r0, [sp, #52]	@ 0x34
 8008c00:	9808      	ldr	r0, [sp, #32]
 8008c02:	f7f8 f88f 	bl	8000d24 <__aeabi_fsub>
 8008c06:	4631      	mov	r1, r6
 8008c08:	f7f8 f88c 	bl	8000d24 <__aeabi_fsub>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c10:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c12:	f7f8 f887 	bl	8000d24 <__aeabi_fsub>
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7f8 f884 	bl	8000d24 <__aeabi_fsub>
 8008c1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8008c1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c20:	4659      	mov	r1, fp
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f8 f87e 	bl	8000d24 <__aeabi_fsub>
 8008c28:	4641      	mov	r1, r8
 8008c2a:	4683      	mov	fp, r0
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7f8 f879 	bl	8000d24 <__aeabi_fsub>
 8008c32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008c34:	f7f8 f876 	bl	8000d24 <__aeabi_fsub>
 8008c38:	4639      	mov	r1, r7
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c3e:	f7f8 f873 	bl	8000d28 <__addsf3>
 8008c42:	4601      	mov	r1, r0
 8008c44:	4628      	mov	r0, r5
 8008c46:	f7f8 f86f 	bl	8000d28 <__addsf3>
 8008c4a:	f844 0c04 	str.w	r0, [r4, #-4]
 8008c4e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c52:	9808      	ldr	r0, [sp, #32]
 8008c54:	f7f8 f868 	bl	8000d28 <__addsf3>
 8008c58:	9d03      	ldr	r5, [sp, #12]
 8008c5a:	6869      	ldr	r1, [r5, #4]
 8008c5c:	f7f8 f864 	bl	8000d28 <__addsf3>
 8008c60:	9a06      	ldr	r2, [sp, #24]
 8008c62:	f844 0c08 	str.w	r0, [r4, #-8]
 8008c66:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8008c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c6c:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8008c70:	4621      	mov	r1, r4
 8008c72:	f7f8 f961 	bl	8000f38 <__aeabi_fmul>
 8008c76:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8008c78:	4680      	mov	r8, r0
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	4638      	mov	r0, r7
 8008c7e:	f7f8 f95b 	bl	8000f38 <__aeabi_fmul>
 8008c82:	4601      	mov	r1, r0
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7f8 f84f 	bl	8000d28 <__addsf3>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f84a 0c08 	str.w	r0, [sl, #-8]
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7f8 f951 	bl	8000f38 <__aeabi_fmul>
 8008c96:	4629      	mov	r1, r5
 8008c98:	4680      	mov	r8, r0
 8008c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c9c:	f7f8 f94c 	bl	8000f38 <__aeabi_fmul>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7f8 f83e 	bl	8000d24 <__aeabi_fsub>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f84a 0c04 	str.w	r0, [sl, #-4]
 8008cae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008cb0:	f7f8 f942 	bl	8000f38 <__aeabi_fmul>
 8008cb4:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4638      	mov	r0, r7
 8008cbc:	f7f8 f93c 	bl	8000f38 <__aeabi_fmul>
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f7f8 f82e 	bl	8000d24 <__aeabi_fsub>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f8c9 0008 	str.w	r0, [r9, #8]
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7f8 f932 	bl	8000f38 <__aeabi_fmul>
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008cda:	f7f8 f92d 	bl	8000f38 <__aeabi_fmul>
 8008cde:	4601      	mov	r1, r0
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f7f8 f821 	bl	8000d28 <__addsf3>
 8008ce6:	9d05      	ldr	r5, [sp, #20]
 8008ce8:	f8c9 0004 	str.w	r0, [r9, #4]
 8008cec:	f855 4c10 	ldr.w	r4, [r5, #-16]
 8008cf0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cf2:	f855 5c0c 	ldr.w	r5, [r5, #-12]
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	f7f8 f91e 	bl	8000f38 <__aeabi_fmul>
 8008cfc:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008d00:	4607      	mov	r7, r0
 8008d02:	4629      	mov	r1, r5
 8008d04:	4640      	mov	r0, r8
 8008d06:	f7f8 f917 	bl	8000f38 <__aeabi_fmul>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f7f8 f80b 	bl	8000d28 <__addsf3>
 8008d12:	9f01      	ldr	r7, [sp, #4]
 8008d14:	4621      	mov	r1, r4
 8008d16:	f847 0c08 	str.w	r0, [r7, #-8]
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7f8 f90c 	bl	8000f38 <__aeabi_fmul>
 8008d20:	4629      	mov	r1, r5
 8008d22:	4607      	mov	r7, r0
 8008d24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d26:	f7f8 f907 	bl	8000f38 <__aeabi_fmul>
 8008d2a:	4601      	mov	r1, r0
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7f7 fff9 	bl	8000d24 <__aeabi_fsub>
 8008d32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d34:	9f01      	ldr	r7, [sp, #4]
 8008d36:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8008d3a:	f847 0c04 	str.w	r0, [r7, #-4]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f8 f8f9 	bl	8000f38 <__aeabi_fmul>
 8008d46:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7f8 f8f2 	bl	8000f38 <__aeabi_fmul>
 8008d54:	4601      	mov	r1, r0
 8008d56:	4638      	mov	r0, r7
 8008d58:	f7f7 ffe4 	bl	8000d24 <__aeabi_fsub>
 8008d5c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f847 0c04 	str.w	r0, [r7, #-4]
 8008d64:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008d66:	f7f8 f8e7 	bl	8000f38 <__aeabi_fmul>
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	4640      	mov	r0, r8
 8008d70:	f7f8 f8e2 	bl	8000f38 <__aeabi_fmul>
 8008d74:	4601      	mov	r1, r0
 8008d76:	4628      	mov	r0, r5
 8008d78:	f7f7 ffd4 	bl	8000d24 <__aeabi_fsub>
 8008d7c:	f847 0c08 	str.w	r0, [r7, #-8]
 8008d80:	9f04      	ldr	r7, [sp, #16]
 8008d82:	9807      	ldr	r0, [sp, #28]
 8008d84:	f857 4c18 	ldr.w	r4, [r7, #-24]
 8008d88:	f857 5c14 	ldr.w	r5, [r7, #-20]
 8008d8c:	4621      	mov	r1, r4
 8008d8e:	f7f8 f8d3 	bl	8000f38 <__aeabi_fmul>
 8008d92:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8008d96:	4607      	mov	r7, r0
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	f7f8 f8cc 	bl	8000f38 <__aeabi_fmul>
 8008da0:	4601      	mov	r1, r0
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7f7 ffc0 	bl	8000d28 <__addsf3>
 8008da8:	9b00      	ldr	r3, [sp, #0]
 8008daa:	4621      	mov	r1, r4
 8008dac:	f843 0c08 	str.w	r0, [r3, #-8]
 8008db0:	4640      	mov	r0, r8
 8008db2:	f7f8 f8c1 	bl	8000f38 <__aeabi_fmul>
 8008db6:	4629      	mov	r1, r5
 8008db8:	4607      	mov	r7, r0
 8008dba:	9807      	ldr	r0, [sp, #28]
 8008dbc:	f7f8 f8bc 	bl	8000f38 <__aeabi_fmul>
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	f7f7 ffae 	bl	8000d24 <__aeabi_fsub>
 8008dc8:	9a00      	ldr	r2, [sp, #0]
 8008dca:	4629      	mov	r1, r5
 8008dcc:	f842 0c04 	str.w	r0, [r2, #-4]
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f7f8 f8b1 	bl	8000f38 <__aeabi_fmul>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4607      	mov	r7, r0
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f7f8 f8ac 	bl	8000f38 <__aeabi_fmul>
 8008de0:	4601      	mov	r1, r0
 8008de2:	4638      	mov	r0, r7
 8008de4:	f7f7 ff9e 	bl	8000d24 <__aeabi_fsub>
 8008de8:	9f03      	ldr	r7, [sp, #12]
 8008dea:	4629      	mov	r1, r5
 8008dec:	60b8      	str	r0, [r7, #8]
 8008dee:	4658      	mov	r0, fp
 8008df0:	f7f8 f8a2 	bl	8000f38 <__aeabi_fmul>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4605      	mov	r5, r0
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7f8 f89d 	bl	8000f38 <__aeabi_fmul>
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4628      	mov	r0, r5
 8008e02:	f7f7 ff91 	bl	8000d28 <__addsf3>
 8008e06:	9902      	ldr	r1, [sp, #8]
 8008e08:	9c06      	ldr	r4, [sp, #24]
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	9a00      	ldr	r2, [sp, #0]
 8008e0e:	9f03      	ldr	r7, [sp, #12]
 8008e10:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460e      	mov	r6, r1
 8008e18:	3608      	adds	r6, #8
 8008e1a:	9602      	str	r6, [sp, #8]
 8008e1c:	4626      	mov	r6, r4
 8008e1e:	3608      	adds	r6, #8
 8008e20:	9901      	ldr	r1, [sp, #4]
 8008e22:	9c04      	ldr	r4, [sp, #16]
 8008e24:	9606      	str	r6, [sp, #24]
 8008e26:	f103 0610 	add.w	r6, r3, #16
 8008e2a:	f102 0308 	add.w	r3, r2, #8
 8008e2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	3108      	adds	r1, #8
 8008e34:	9101      	str	r1, [sp, #4]
 8008e36:	f1a7 0308 	sub.w	r3, r7, #8
 8008e3a:	f104 0118 	add.w	r1, r4, #24
 8008e3e:	3a01      	subs	r2, #1
 8008e40:	f1ac 0c08 	sub.w	ip, ip, #8
 8008e44:	f10a 0a08 	add.w	sl, sl, #8
 8008e48:	f1a9 0908 	sub.w	r9, r9, #8
 8008e4c:	9605      	str	r6, [sp, #20]
 8008e4e:	9104      	str	r1, [sp, #16]
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	f47f ae1e 	bne.w	8008a92 <arm_cfft_radix8by4_f32+0x196>
 8008e56:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8008e58:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8008e5a:	00cb      	lsls	r3, r1, #3
 8008e5c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008e60:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008e64:	9121      	str	r1, [sp, #132]	@ 0x84
 8008e66:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8008e68:	4419      	add	r1, r3
 8008e6a:	911d      	str	r1, [sp, #116]	@ 0x74
 8008e6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008e6e:	4419      	add	r1, r3
 8008e70:	9120      	str	r1, [sp, #128]	@ 0x80
 8008e72:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008e74:	4419      	add	r1, r3
 8008e76:	911e      	str	r1, [sp, #120]	@ 0x78
 8008e78:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8008e7a:	4419      	add	r1, r3
 8008e7c:	911f      	str	r1, [sp, #124]	@ 0x7c
 8008e7e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008e80:	4419      	add	r1, r3
 8008e82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e84:	911c      	str	r1, [sp, #112]	@ 0x70
 8008e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8a:	9322      	str	r3, [sp, #136]	@ 0x88
 8008e8c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8008e8e:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008e90:	6835      	ldr	r5, [r6, #0]
 8008e92:	683c      	ldr	r4, [r7, #0]
 8008e94:	4628      	mov	r0, r5
 8008e96:	4621      	mov	r1, r4
 8008e98:	f7f7 ff46 	bl	8000d28 <__addsf3>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4681      	mov	r9, r0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f7f7 ff3f 	bl	8000d24 <__aeabi_fsub>
 8008ea6:	6875      	ldr	r5, [r6, #4]
 8008ea8:	687c      	ldr	r4, [r7, #4]
 8008eaa:	961d      	str	r6, [sp, #116]	@ 0x74
 8008eac:	4683      	mov	fp, r0
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	971f      	str	r7, [sp, #124]	@ 0x7c
 8008eb4:	f7f7 ff38 	bl	8000d28 <__addsf3>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4680      	mov	r8, r0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	f7f7 ff31 	bl	8000d24 <__aeabi_fsub>
 8008ec2:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8008ec4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008ec6:	6867      	ldr	r7, [r4, #4]
 8008ec8:	685e      	ldr	r6, [r3, #4]
 8008eca:	4682      	mov	sl, r0
 8008ecc:	4659      	mov	r1, fp
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7f7 ff2a 	bl	8000d28 <__addsf3>
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	f7f7 ff25 	bl	8000d24 <__aeabi_fsub>
 8008eda:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8008edc:	6825      	ldr	r5, [r4, #0]
 8008ede:	941e      	str	r4, [sp, #120]	@ 0x78
 8008ee0:	680c      	ldr	r4, [r1, #0]
 8008ee2:	9000      	str	r0, [sp, #0]
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	f7f7 ff1c 	bl	8000d24 <__aeabi_fsub>
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7f7 ff1b 	bl	8000d28 <__addsf3>
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	9001      	str	r0, [sp, #4]
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	f7f7 ff14 	bl	8000d24 <__aeabi_fsub>
 8008efc:	4621      	mov	r1, r4
 8008efe:	f7f7 ff11 	bl	8000d24 <__aeabi_fsub>
 8008f02:	4639      	mov	r1, r7
 8008f04:	9002      	str	r0, [sp, #8]
 8008f06:	4640      	mov	r0, r8
 8008f08:	f7f7 ff0c 	bl	8000d24 <__aeabi_fsub>
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	f7f7 ff09 	bl	8000d24 <__aeabi_fsub>
 8008f12:	4639      	mov	r1, r7
 8008f14:	9003      	str	r0, [sp, #12]
 8008f16:	4658      	mov	r0, fp
 8008f18:	f7f7 ff04 	bl	8000d24 <__aeabi_fsub>
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7f7 ff02 	bl	8000d28 <__addsf3>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4606      	mov	r6, r0
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f7f7 fefd 	bl	8000d28 <__addsf3>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	f7f7 fef8 	bl	8000d24 <__aeabi_fsub>
 8008f34:	4629      	mov	r1, r5
 8008f36:	4682      	mov	sl, r0
 8008f38:	4648      	mov	r0, r9
 8008f3a:	f7f7 fef5 	bl	8000d28 <__addsf3>
 8008f3e:	4601      	mov	r1, r0
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7f7 fef1 	bl	8000d28 <__addsf3>
 8008f46:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008f48:	6028      	str	r0, [r5, #0]
 8008f4a:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	f7f7 feea 	bl	8000d28 <__addsf3>
 8008f54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f56:	6851      	ldr	r1, [r2, #4]
 8008f58:	f7f7 fee6 	bl	8000d28 <__addsf3>
 8008f5c:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8008f5e:	6068      	str	r0, [r5, #4]
 8008f60:	6825      	ldr	r5, [r4, #0]
 8008f62:	f8dd 9000 	ldr.w	r9, [sp]
 8008f66:	6864      	ldr	r4, [r4, #4]
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4648      	mov	r0, r9
 8008f6c:	f7f7 ffe4 	bl	8000f38 <__aeabi_fmul>
 8008f70:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008f74:	4680      	mov	r8, r0
 8008f76:	4621      	mov	r1, r4
 8008f78:	4658      	mov	r0, fp
 8008f7a:	f7f7 ffdd 	bl	8000f38 <__aeabi_fmul>
 8008f7e:	4601      	mov	r1, r0
 8008f80:	4640      	mov	r0, r8
 8008f82:	f7f7 fed1 	bl	8000d28 <__addsf3>
 8008f86:	4629      	mov	r1, r5
 8008f88:	6038      	str	r0, [r7, #0]
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f7f7 ffd4 	bl	8000f38 <__aeabi_fmul>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4605      	mov	r5, r0
 8008f94:	4648      	mov	r0, r9
 8008f96:	f7f7 ffcf 	bl	8000f38 <__aeabi_fmul>
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f7f7 fec1 	bl	8000d24 <__aeabi_fsub>
 8008fa2:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008fac:	6864      	ldr	r4, [r4, #4]
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4648      	mov	r0, r9
 8008fb2:	f7f7 ffc1 	bl	8000f38 <__aeabi_fmul>
 8008fb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008fba:	4607      	mov	r7, r0
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	f7f7 ffba 	bl	8000f38 <__aeabi_fmul>
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f7f7 feae 	bl	8000d28 <__addsf3>
 8008fcc:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8008fce:	4629      	mov	r1, r5
 8008fd0:	6038      	str	r0, [r7, #0]
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	f7f7 ffb0 	bl	8000f38 <__aeabi_fmul>
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4605      	mov	r5, r0
 8008fdc:	4648      	mov	r0, r9
 8008fde:	f7f7 ffab 	bl	8000f38 <__aeabi_fmul>
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f7f7 fe9d 	bl	8000d24 <__aeabi_fsub>
 8008fea:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	680d      	ldr	r5, [r1, #0]
 8008ff0:	684c      	ldr	r4, [r1, #4]
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 ff9f 	bl	8000f38 <__aeabi_fmul>
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	4650      	mov	r0, sl
 8009000:	f7f7 ff9a 	bl	8000f38 <__aeabi_fmul>
 8009004:	4601      	mov	r1, r0
 8009006:	4638      	mov	r0, r7
 8009008:	f7f7 fe8e 	bl	8000d28 <__addsf3>
 800900c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800900e:	4629      	mov	r1, r5
 8009010:	6038      	str	r0, [r7, #0]
 8009012:	4650      	mov	r0, sl
 8009014:	f7f7 ff90 	bl	8000f38 <__aeabi_fmul>
 8009018:	4621      	mov	r1, r4
 800901a:	4605      	mov	r5, r0
 800901c:	4630      	mov	r0, r6
 800901e:	f7f7 ff8b 	bl	8000f38 <__aeabi_fmul>
 8009022:	4601      	mov	r1, r0
 8009024:	4628      	mov	r0, r5
 8009026:	f7f7 fe7d 	bl	8000d24 <__aeabi_fsub>
 800902a:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 800902e:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6872      	ldr	r2, [r6, #4]
 8009034:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8009036:	4621      	mov	r1, r4
 8009038:	2304      	movs	r3, #4
 800903a:	f000 f893 	bl	8009164 <arm_radix8_butterfly_f32>
 800903e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8009040:	6872      	ldr	r2, [r6, #4]
 8009042:	4621      	mov	r1, r4
 8009044:	2304      	movs	r3, #4
 8009046:	f000 f88d 	bl	8009164 <arm_radix8_butterfly_f32>
 800904a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800904c:	6872      	ldr	r2, [r6, #4]
 800904e:	4621      	mov	r1, r4
 8009050:	2304      	movs	r3, #4
 8009052:	f000 f887 	bl	8009164 <arm_radix8_butterfly_f32>
 8009056:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009058:	6872      	ldr	r2, [r6, #4]
 800905a:	4621      	mov	r1, r4
 800905c:	2304      	movs	r3, #4
 800905e:	b027      	add	sp, #156	@ 0x9c
 8009060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	f000 b87e 	b.w	8009164 <arm_radix8_butterfly_f32>

08009068 <arm_cfft_f32>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	2a01      	cmp	r2, #1
 800906e:	4606      	mov	r6, r0
 8009070:	4617      	mov	r7, r2
 8009072:	460c      	mov	r4, r1
 8009074:	4698      	mov	r8, r3
 8009076:	8805      	ldrh	r5, [r0, #0]
 8009078:	d058      	beq.n	800912c <arm_cfft_f32+0xc4>
 800907a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800907e:	d050      	beq.n	8009122 <arm_cfft_f32+0xba>
 8009080:	d916      	bls.n	80090b0 <arm_cfft_f32+0x48>
 8009082:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8009086:	d01a      	beq.n	80090be <arm_cfft_f32+0x56>
 8009088:	d960      	bls.n	800914c <arm_cfft_f32+0xe4>
 800908a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800908e:	d048      	beq.n	8009122 <arm_cfft_f32+0xba>
 8009090:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8009094:	d105      	bne.n	80090a2 <arm_cfft_f32+0x3a>
 8009096:	4620      	mov	r0, r4
 8009098:	4629      	mov	r1, r5
 800909a:	6872      	ldr	r2, [r6, #4]
 800909c:	2301      	movs	r3, #1
 800909e:	f000 f861 	bl	8009164 <arm_radix8_butterfly_f32>
 80090a2:	f1b8 0f00 	cmp.w	r8, #0
 80090a6:	d111      	bne.n	80090cc <arm_cfft_f32+0x64>
 80090a8:	2f01      	cmp	r7, #1
 80090aa:	d016      	beq.n	80090da <arm_cfft_f32+0x72>
 80090ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b0:	2d20      	cmp	r5, #32
 80090b2:	d036      	beq.n	8009122 <arm_cfft_f32+0xba>
 80090b4:	d94e      	bls.n	8009154 <arm_cfft_f32+0xec>
 80090b6:	2d40      	cmp	r5, #64	@ 0x40
 80090b8:	d0ed      	beq.n	8009096 <arm_cfft_f32+0x2e>
 80090ba:	2d80      	cmp	r5, #128	@ 0x80
 80090bc:	d1f1      	bne.n	80090a2 <arm_cfft_f32+0x3a>
 80090be:	4630      	mov	r0, r6
 80090c0:	4621      	mov	r1, r4
 80090c2:	f7ff fac1 	bl	8008648 <arm_cfft_radix8by2_f32>
 80090c6:	f1b8 0f00 	cmp.w	r8, #0
 80090ca:	d0ed      	beq.n	80090a8 <arm_cfft_f32+0x40>
 80090cc:	4620      	mov	r0, r4
 80090ce:	89b1      	ldrh	r1, [r6, #12]
 80090d0:	68b2      	ldr	r2, [r6, #8]
 80090d2:	f7f7 f87d 	bl	80001d0 <arm_bitreversal_32>
 80090d6:	2f01      	cmp	r7, #1
 80090d8:	d1e8      	bne.n	80090ac <arm_cfft_f32+0x44>
 80090da:	4628      	mov	r0, r5
 80090dc:	f7f7 fed4 	bl	8000e88 <__aeabi_ui2f>
 80090e0:	4601      	mov	r1, r0
 80090e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80090e6:	f7f7 ffdb 	bl	80010a0 <__aeabi_fdiv>
 80090ea:	4607      	mov	r7, r0
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	d0dd      	beq.n	80090ac <arm_cfft_f32+0x44>
 80090f0:	3408      	adds	r4, #8
 80090f2:	2600      	movs	r6, #0
 80090f4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80090f8:	4639      	mov	r1, r7
 80090fa:	f7f7 ff1d 	bl	8000f38 <__aeabi_fmul>
 80090fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009102:	f844 0c08 	str.w	r0, [r4, #-8]
 8009106:	4639      	mov	r1, r7
 8009108:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 800910c:	f7f7 ff14 	bl	8000f38 <__aeabi_fmul>
 8009110:	3601      	adds	r6, #1
 8009112:	42b5      	cmp	r5, r6
 8009114:	f844 0c04 	str.w	r0, [r4, #-4]
 8009118:	f104 0408 	add.w	r4, r4, #8
 800911c:	d1ea      	bne.n	80090f4 <arm_cfft_f32+0x8c>
 800911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009122:	4630      	mov	r0, r6
 8009124:	4621      	mov	r1, r4
 8009126:	f7ff fbe9 	bl	80088fc <arm_cfft_radix8by4_f32>
 800912a:	e7ba      	b.n	80090a2 <arm_cfft_f32+0x3a>
 800912c:	b1ad      	cbz	r5, 800915a <arm_cfft_f32+0xf2>
 800912e:	f101 030c 	add.w	r3, r1, #12
 8009132:	2100      	movs	r1, #0
 8009134:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8009138:	3101      	adds	r1, #1
 800913a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800913e:	428d      	cmp	r5, r1
 8009140:	f843 2c08 	str.w	r2, [r3, #-8]
 8009144:	f103 0308 	add.w	r3, r3, #8
 8009148:	d1f4      	bne.n	8009134 <arm_cfft_f32+0xcc>
 800914a:	e796      	b.n	800907a <arm_cfft_f32+0x12>
 800914c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8009150:	d0a1      	beq.n	8009096 <arm_cfft_f32+0x2e>
 8009152:	e7a6      	b.n	80090a2 <arm_cfft_f32+0x3a>
 8009154:	2d10      	cmp	r5, #16
 8009156:	d0b2      	beq.n	80090be <arm_cfft_f32+0x56>
 8009158:	e7a3      	b.n	80090a2 <arm_cfft_f32+0x3a>
 800915a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800915e:	d890      	bhi.n	8009082 <arm_cfft_f32+0x1a>
 8009160:	e7a6      	b.n	80090b0 <arm_cfft_f32+0x48>
 8009162:	bf00      	nop

08009164 <arm_radix8_butterfly_f32>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	b0b1      	sub	sp, #196	@ 0xc4
 800916a:	4607      	mov	r7, r0
 800916c:	932c      	str	r3, [sp, #176]	@ 0xb0
 800916e:	9119      	str	r1, [sp, #100]	@ 0x64
 8009170:	9029      	str	r0, [sp, #164]	@ 0xa4
 8009172:	9225      	str	r2, [sp, #148]	@ 0x94
 8009174:	460b      	mov	r3, r1
 8009176:	9118      	str	r1, [sp, #96]	@ 0x60
 8009178:	08db      	lsrs	r3, r3, #3
 800917a:	00d9      	lsls	r1, r3, #3
 800917c:	460c      	mov	r4, r1
 800917e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009180:	4639      	mov	r1, r7
 8009182:	4421      	add	r1, r4
 8009184:	005a      	lsls	r2, r3, #1
 8009186:	9111      	str	r1, [sp, #68]	@ 0x44
 8009188:	461e      	mov	r6, r3
 800918a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800918c:	9214      	str	r2, [sp, #80]	@ 0x50
 800918e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009190:	9322      	str	r3, [sp, #136]	@ 0x88
 8009192:	441a      	add	r2, r3
 8009194:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8009198:	ebc6 7146 	rsb	r1, r6, r6, lsl #29
 800919c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80091a0:	eb03 0446 	add.w	r4, r3, r6, lsl #1
 80091a4:	1828      	adds	r0, r5, r0
 80091a6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80091aa:	00c9      	lsls	r1, r1, #3
 80091ac:	9008      	str	r0, [sp, #32]
 80091ae:	9103      	str	r1, [sp, #12]
 80091b0:	1d15      	adds	r5, r2, #4
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	9c03      	ldr	r4, [sp, #12]
 80091bc:	9a08      	ldr	r2, [sp, #32]
 80091be:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80091c0:	4422      	add	r2, r4
 80091c2:	eba6 0086 	sub.w	r0, r6, r6, lsl #2
 80091c6:	ebc6 7106 	rsb	r1, r6, r6, lsl #28
 80091ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80091cc:	00c2      	lsls	r2, r0, #3
 80091ce:	9204      	str	r2, [sp, #16]
 80091d0:	010a      	lsls	r2, r1, #4
 80091d2:	9205      	str	r2, [sp, #20]
 80091d4:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80091d8:	0132      	lsls	r2, r6, #4
 80091da:	2300      	movs	r3, #0
 80091dc:	46ba      	mov	sl, r7
 80091de:	9202      	str	r2, [sp, #8]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	462f      	mov	r7, r5
 80091e4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80091e6:	9e00      	ldr	r6, [sp, #0]
 80091e8:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 80091ec:	461a      	mov	r2, r3
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	f852 5036 	ldr.w	r5, [r2, r6, lsl #3]
 80091f4:	f85a 4003 	ldr.w	r4, [sl, r3]
 80091f8:	4628      	mov	r0, r5
 80091fa:	4621      	mov	r1, r4
 80091fc:	f7f7 fd94 	bl	8000d28 <__addsf3>
 8009200:	4621      	mov	r1, r4
 8009202:	4683      	mov	fp, r0
 8009204:	4628      	mov	r0, r5
 8009206:	f7f7 fd8d 	bl	8000d24 <__aeabi_fsub>
 800920a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800920c:	9b01      	ldr	r3, [sp, #4]
 800920e:	9009      	str	r0, [sp, #36]	@ 0x24
 8009210:	4611      	mov	r1, r2
 8009212:	f853 4c04 	ldr.w	r4, [r3, #-4]
 8009216:	f851 5036 	ldr.w	r5, [r1, r6, lsl #3]
 800921a:	9600      	str	r6, [sp, #0]
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f7f7 fd82 	bl	8000d28 <__addsf3>
 8009224:	4621      	mov	r1, r4
 8009226:	4606      	mov	r6, r0
 8009228:	4628      	mov	r0, r5
 800922a:	f7f7 fd7b 	bl	8000d24 <__aeabi_fsub>
 800922e:	9908      	ldr	r1, [sp, #32]
 8009230:	900a      	str	r0, [sp, #40]	@ 0x28
 8009232:	460c      	mov	r4, r1
 8009234:	9900      	ldr	r1, [sp, #0]
 8009236:	f854 8031 	ldr.w	r8, [r4, r1, lsl #3]
 800923a:	9c03      	ldr	r4, [sp, #12]
 800923c:	f85a 5004 	ldr.w	r5, [sl, r4]
 8009240:	4640      	mov	r0, r8
 8009242:	4629      	mov	r1, r5
 8009244:	f7f7 fd70 	bl	8000d28 <__addsf3>
 8009248:	4629      	mov	r1, r5
 800924a:	4604      	mov	r4, r0
 800924c:	4640      	mov	r0, r8
 800924e:	f7f7 fd69 	bl	8000d24 <__aeabi_fsub>
 8009252:	f857 9c04 	ldr.w	r9, [r7, #-4]
 8009256:	f8da 8000 	ldr.w	r8, [sl]
 800925a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800925c:	4641      	mov	r1, r8
 800925e:	4648      	mov	r0, r9
 8009260:	f7f7 fd62 	bl	8000d28 <__addsf3>
 8009264:	4641      	mov	r1, r8
 8009266:	4605      	mov	r5, r0
 8009268:	4648      	mov	r0, r9
 800926a:	f7f7 fd5b 	bl	8000d24 <__aeabi_fsub>
 800926e:	4621      	mov	r1, r4
 8009270:	900c      	str	r0, [sp, #48]	@ 0x30
 8009272:	4658      	mov	r0, fp
 8009274:	f7f7 fd56 	bl	8000d24 <__aeabi_fsub>
 8009278:	46d8      	mov	r8, fp
 800927a:	4621      	mov	r1, r4
 800927c:	4683      	mov	fp, r0
 800927e:	4640      	mov	r0, r8
 8009280:	f7f7 fd52 	bl	8000d28 <__addsf3>
 8009284:	4629      	mov	r1, r5
 8009286:	4604      	mov	r4, r0
 8009288:	4630      	mov	r0, r6
 800928a:	f7f7 fd4b 	bl	8000d24 <__aeabi_fsub>
 800928e:	4629      	mov	r1, r5
 8009290:	900d      	str	r0, [sp, #52]	@ 0x34
 8009292:	4630      	mov	r0, r6
 8009294:	f7f7 fd48 	bl	8000d28 <__addsf3>
 8009298:	4605      	mov	r5, r0
 800929a:	4629      	mov	r1, r5
 800929c:	4620      	mov	r0, r4
 800929e:	f7f7 fd43 	bl	8000d28 <__addsf3>
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7f7 fd39 	bl	8000d24 <__aeabi_fsub>
 80092b2:	9d04      	ldr	r5, [sp, #16]
 80092b4:	f84a 0005 	str.w	r0, [sl, r5]
 80092b8:	9922      	ldr	r1, [sp, #136]	@ 0x88
 80092ba:	597d      	ldr	r5, [r7, r5]
 80092bc:	f857 4031 	ldr.w	r4, [r7, r1, lsl #3]
 80092c0:	4628      	mov	r0, r5
 80092c2:	4621      	mov	r1, r4
 80092c4:	f7f7 fd30 	bl	8000d28 <__addsf3>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4680      	mov	r8, r0
 80092cc:	4628      	mov	r0, r5
 80092ce:	f7f7 fd29 	bl	8000d24 <__aeabi_fsub>
 80092d2:	9a02      	ldr	r2, [sp, #8]
 80092d4:	9e05      	ldr	r6, [sp, #20]
 80092d6:	58bc      	ldr	r4, [r7, r2]
 80092d8:	59bd      	ldr	r5, [r7, r6]
 80092da:	900e      	str	r0, [sp, #56]	@ 0x38
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f7f7 fd22 	bl	8000d28 <__addsf3>
 80092e4:	4621      	mov	r1, r4
 80092e6:	9006      	str	r0, [sp, #24]
 80092e8:	4628      	mov	r0, r5
 80092ea:	f7f7 fd1b 	bl	8000d24 <__aeabi_fsub>
 80092ee:	9a01      	ldr	r2, [sp, #4]
 80092f0:	9e03      	ldr	r6, [sp, #12]
 80092f2:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80092f4:	59bd      	ldr	r5, [r7, r6]
 80092f6:	f852 4034 	ldr.w	r4, [r2, r4, lsl #3]
 80092fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f7f7 fd12 	bl	8000d28 <__addsf3>
 8009304:	4621      	mov	r1, r4
 8009306:	4606      	mov	r6, r0
 8009308:	4628      	mov	r0, r5
 800930a:	f7f7 fd0b 	bl	8000d24 <__aeabi_fsub>
 800930e:	9c01      	ldr	r4, [sp, #4]
 8009310:	9905      	ldr	r1, [sp, #20]
 8009312:	9007      	str	r0, [sp, #28]
 8009314:	5865      	ldr	r5, [r4, r1]
 8009316:	f8da 4004 	ldr.w	r4, [sl, #4]
 800931a:	4628      	mov	r0, r5
 800931c:	4621      	mov	r1, r4
 800931e:	f7f7 fd03 	bl	8000d28 <__addsf3>
 8009322:	4621      	mov	r1, r4
 8009324:	4681      	mov	r9, r0
 8009326:	4628      	mov	r0, r5
 8009328:	f7f7 fcfc 	bl	8000d24 <__aeabi_fsub>
 800932c:	4631      	mov	r1, r6
 800932e:	4605      	mov	r5, r0
 8009330:	4640      	mov	r0, r8
 8009332:	f7f7 fcf7 	bl	8000d24 <__aeabi_fsub>
 8009336:	4631      	mov	r1, r6
 8009338:	4604      	mov	r4, r0
 800933a:	4640      	mov	r0, r8
 800933c:	f7f7 fcf4 	bl	8000d28 <__addsf3>
 8009340:	4649      	mov	r1, r9
 8009342:	4680      	mov	r8, r0
 8009344:	9806      	ldr	r0, [sp, #24]
 8009346:	f7f7 fced 	bl	8000d24 <__aeabi_fsub>
 800934a:	4649      	mov	r1, r9
 800934c:	4606      	mov	r6, r0
 800934e:	9806      	ldr	r0, [sp, #24]
 8009350:	f7f7 fcea 	bl	8000d28 <__addsf3>
 8009354:	4681      	mov	r9, r0
 8009356:	4649      	mov	r1, r9
 8009358:	4640      	mov	r0, r8
 800935a:	f7f7 fce5 	bl	8000d28 <__addsf3>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	4649      	mov	r1, r9
 8009362:	50b8      	str	r0, [r7, r2]
 8009364:	4640      	mov	r0, r8
 8009366:	f7f7 fcdd 	bl	8000d24 <__aeabi_fsub>
 800936a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800936c:	4631      	mov	r1, r6
 800936e:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 8009372:	4658      	mov	r0, fp
 8009374:	f7f7 fcd8 	bl	8000d28 <__addsf3>
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	9a00      	ldr	r2, [sp, #0]
 800937c:	469e      	mov	lr, r3
 800937e:	4631      	mov	r1, r6
 8009380:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 8009384:	4658      	mov	r0, fp
 8009386:	f7f7 fccd 	bl	8000d24 <__aeabi_fsub>
 800938a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800938e:	9e03      	ldr	r6, [sp, #12]
 8009390:	4659      	mov	r1, fp
 8009392:	f84a 0006 	str.w	r0, [sl, r6]
 8009396:	4620      	mov	r0, r4
 8009398:	f7f7 fcc4 	bl	8000d24 <__aeabi_fsub>
 800939c:	9e03      	ldr	r6, [sp, #12]
 800939e:	4659      	mov	r1, fp
 80093a0:	51b8      	str	r0, [r7, r6]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7f7 fcc0 	bl	8000d28 <__addsf3>
 80093a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80093ac:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80093b0:	9e01      	ldr	r6, [sp, #4]
 80093b2:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80093b4:	4641      	mov	r1, r8
 80093b6:	f846 0034 	str.w	r0, [r6, r4, lsl #3]
 80093ba:	4658      	mov	r0, fp
 80093bc:	f7f7 fcb2 	bl	8000d24 <__aeabi_fsub>
 80093c0:	497e      	ldr	r1, [pc, #504]	@ (80095bc <arm_radix8_butterfly_f32+0x458>)
 80093c2:	f7f7 fdb9 	bl	8000f38 <__aeabi_fmul>
 80093c6:	4641      	mov	r1, r8
 80093c8:	4681      	mov	r9, r0
 80093ca:	4658      	mov	r0, fp
 80093cc:	f7f7 fcac 	bl	8000d28 <__addsf3>
 80093d0:	497a      	ldr	r1, [pc, #488]	@ (80095bc <arm_radix8_butterfly_f32+0x458>)
 80093d2:	f7f7 fdb1 	bl	8000f38 <__aeabi_fmul>
 80093d6:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 80093da:	4604      	mov	r4, r0
 80093dc:	4629      	mov	r1, r5
 80093de:	4640      	mov	r0, r8
 80093e0:	f7f7 fca0 	bl	8000d24 <__aeabi_fsub>
 80093e4:	4975      	ldr	r1, [pc, #468]	@ (80095bc <arm_radix8_butterfly_f32+0x458>)
 80093e6:	f7f7 fda7 	bl	8000f38 <__aeabi_fmul>
 80093ea:	4629      	mov	r1, r5
 80093ec:	4606      	mov	r6, r0
 80093ee:	4640      	mov	r0, r8
 80093f0:	f7f7 fc9a 	bl	8000d28 <__addsf3>
 80093f4:	4971      	ldr	r1, [pc, #452]	@ (80095bc <arm_radix8_butterfly_f32+0x458>)
 80093f6:	f7f7 fd9f 	bl	8000f38 <__aeabi_fmul>
 80093fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80093fc:	4683      	mov	fp, r0
 80093fe:	4649      	mov	r1, r9
 8009400:	4628      	mov	r0, r5
 8009402:	f7f7 fc8f 	bl	8000d24 <__aeabi_fsub>
 8009406:	4649      	mov	r1, r9
 8009408:	4680      	mov	r8, r0
 800940a:	4628      	mov	r0, r5
 800940c:	f7f7 fc8c 	bl	8000d28 <__addsf3>
 8009410:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8009414:	9006      	str	r0, [sp, #24]
 8009416:	4621      	mov	r1, r4
 8009418:	4648      	mov	r0, r9
 800941a:	f7f7 fc83 	bl	8000d24 <__aeabi_fsub>
 800941e:	4621      	mov	r1, r4
 8009420:	4605      	mov	r5, r0
 8009422:	4648      	mov	r0, r9
 8009424:	f7f7 fc80 	bl	8000d28 <__addsf3>
 8009428:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800942c:	9009      	str	r0, [sp, #36]	@ 0x24
 800942e:	4631      	mov	r1, r6
 8009430:	4648      	mov	r0, r9
 8009432:	f7f7 fc77 	bl	8000d24 <__aeabi_fsub>
 8009436:	4631      	mov	r1, r6
 8009438:	4604      	mov	r4, r0
 800943a:	4648      	mov	r0, r9
 800943c:	f7f7 fc74 	bl	8000d28 <__addsf3>
 8009440:	4659      	mov	r1, fp
 8009442:	4606      	mov	r6, r0
 8009444:	9807      	ldr	r0, [sp, #28]
 8009446:	f7f7 fc6d 	bl	8000d24 <__aeabi_fsub>
 800944a:	4659      	mov	r1, fp
 800944c:	4681      	mov	r9, r0
 800944e:	9807      	ldr	r0, [sp, #28]
 8009450:	f7f7 fc6a 	bl	8000d28 <__addsf3>
 8009454:	4683      	mov	fp, r0
 8009456:	4659      	mov	r1, fp
 8009458:	9806      	ldr	r0, [sp, #24]
 800945a:	f7f7 fc65 	bl	8000d28 <__addsf3>
 800945e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009460:	469e      	mov	lr, r3
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	4659      	mov	r1, fp
 8009466:	f84e 0033 	str.w	r0, [lr, r3, lsl #3]
 800946a:	9806      	ldr	r0, [sp, #24]
 800946c:	f7f7 fc5a 	bl	8000d24 <__aeabi_fsub>
 8009470:	4649      	mov	r1, r9
 8009472:	f8ca 0000 	str.w	r0, [sl]
 8009476:	4640      	mov	r0, r8
 8009478:	f7f7 fc56 	bl	8000d28 <__addsf3>
 800947c:	9a01      	ldr	r2, [sp, #4]
 800947e:	4649      	mov	r1, r9
 8009480:	f842 0c04 	str.w	r0, [r2, #-4]
 8009484:	4640      	mov	r0, r8
 8009486:	f7f7 fc4d 	bl	8000d24 <__aeabi_fsub>
 800948a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 800948e:	f847 0c04 	str.w	r0, [r7, #-4]
 8009492:	4641      	mov	r1, r8
 8009494:	4630      	mov	r0, r6
 8009496:	f7f7 fc45 	bl	8000d24 <__aeabi_fsub>
 800949a:	9b05      	ldr	r3, [sp, #20]
 800949c:	4641      	mov	r1, r8
 800949e:	50f8      	str	r0, [r7, r3]
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7f7 fc41 	bl	8000d28 <__addsf3>
 80094a6:	4629      	mov	r1, r5
 80094a8:	f8ca 0004 	str.w	r0, [sl, #4]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f7f7 fc39 	bl	8000d24 <__aeabi_fsub>
 80094b2:	4629      	mov	r1, r5
 80094b4:	9d02      	ldr	r5, [sp, #8]
 80094b6:	5178      	str	r0, [r7, r5]
 80094b8:	4620      	mov	r0, r4
 80094ba:	f7f7 fc35 	bl	8000d28 <__addsf3>
 80094be:	9b00      	ldr	r3, [sp, #0]
 80094c0:	9a01      	ldr	r2, [sp, #4]
 80094c2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80094c4:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 80094c8:	9905      	ldr	r1, [sp, #20]
 80094ca:	191c      	adds	r4, r3, r4
 80094cc:	4613      	mov	r3, r2
 80094ce:	4463      	add	r3, ip
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d4:	9400      	str	r4, [sp, #0]
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	44e2      	add	sl, ip
 80094da:	5050      	str	r0, [r2, r1]
 80094dc:	4467      	add	r7, ip
 80094de:	f63f ae81 	bhi.w	80091e4 <arm_radix8_butterfly_f32+0x80>
 80094e2:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 80094e4:	2d07      	cmp	r5, #7
 80094e6:	f240 82e8 	bls.w	8009aba <arm_radix8_butterfly_f32+0x956>
 80094ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80094ee:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80094f0:	461a      	mov	r2, r3
 80094f2:	1b73      	subs	r3, r6, r5
 80094f4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	1908      	adds	r0, r1, r4
 80094fc:	442a      	add	r2, r5
 80094fe:	9305      	str	r3, [sp, #20]
 8009500:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009502:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8009504:	00c9      	lsls	r1, r1, #3
 8009506:	00c0      	lsls	r0, r0, #3
 8009508:	0112      	lsls	r2, r2, #4
 800950a:	460f      	mov	r7, r1
 800950c:	912f      	str	r1, [sp, #188]	@ 0xbc
 800950e:	9206      	str	r2, [sp, #24]
 8009510:	4621      	mov	r1, r4
 8009512:	181a      	adds	r2, r3, r0
 8009514:	00e4      	lsls	r4, r4, #3
 8009516:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009518:	19da      	adds	r2, r3, r7
 800951a:	4423      	add	r3, r4
 800951c:	9326      	str	r3, [sp, #152]	@ 0x98
 800951e:	016b      	lsls	r3, r5, #5
 8009520:	942d      	str	r4, [sp, #180]	@ 0xb4
 8009522:	9304      	str	r3, [sp, #16]
 8009524:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8009526:	902e      	str	r0, [sp, #184]	@ 0xb8
 8009528:	2301      	movs	r3, #1
 800952a:	9227      	str	r2, [sp, #156]	@ 0x9c
 800952c:	9123      	str	r1, [sp, #140]	@ 0x8c
 800952e:	9324      	str	r3, [sp, #144]	@ 0x90
 8009530:	46b0      	mov	r8, r6
 8009532:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009534:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8009536:	010f      	lsls	r7, r1, #4
 8009538:	19c6      	adds	r6, r0, r7
 800953a:	00cb      	lsls	r3, r1, #3
 800953c:	18f5      	adds	r5, r6, r3
 800953e:	eb05 0903 	add.w	r9, r5, r3
 8009542:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009546:	1a5b      	subs	r3, r3, r1
 8009548:	eb09 0ec2 	add.w	lr, r9, r2, lsl #3
 800954c:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8009550:	930c      	str	r3, [sp, #48]	@ 0x30
 8009552:	0149      	lsls	r1, r1, #5
 8009554:	f8de 3004 	ldr.w	r3, [lr, #4]
 8009558:	686d      	ldr	r5, [r5, #4]
 800955a:	9321      	str	r3, [sp, #132]	@ 0x84
 800955c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009560:	59c7      	ldr	r7, [r0, r7]
 8009562:	951e      	str	r5, [sp, #120]	@ 0x78
 8009564:	930e      	str	r3, [sp, #56]	@ 0x38
 8009566:	4605      	mov	r5, r0
 8009568:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
 800956c:	5840      	ldr	r0, [r0, r1]
 800956e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009570:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009572:	931a      	str	r3, [sp, #104]	@ 0x68
 8009574:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
 8009578:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800957a:	9309      	str	r3, [sp, #36]	@ 0x24
 800957c:	6813      	ldr	r3, [r2, #0]
 800957e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009580:	680b      	ldr	r3, [r1, #0]
 8009582:	931c      	str	r3, [sp, #112]	@ 0x70
 8009584:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009586:	6876      	ldr	r6, [r6, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	930d      	str	r3, [sp, #52]	@ 0x34
 800958c:	6853      	ldr	r3, [r2, #4]
 800958e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8009590:	684b      	ldr	r3, [r1, #4]
 8009592:	970a      	str	r7, [sp, #40]	@ 0x28
 8009594:	f108 0208 	add.w	r2, r8, #8
 8009598:	961d      	str	r6, [sp, #116]	@ 0x74
 800959a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800959c:	9320      	str	r3, [sp, #128]	@ 0x80
 800959e:	f104 0308 	add.w	r3, r4, #8
 80095a2:	461f      	mov	r7, r3
 80095a4:	932b      	str	r3, [sp, #172]	@ 0xac
 80095a6:	922a      	str	r2, [sp, #168]	@ 0xa8
 80095a8:	f104 010c 	add.w	r1, r4, #12
 80095ac:	f108 030c 	add.w	r3, r8, #12
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80095b4:	9100      	str	r1, [sp, #0]
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	46bb      	mov	fp, r7
 80095ba:	e001      	b.n	80095c0 <arm_radix8_butterfly_f32+0x45c>
 80095bc:	3f3504f3 	.word	0x3f3504f3
 80095c0:	9b00      	ldr	r3, [sp, #0]
 80095c2:	9f04      	ldr	r7, [sp, #16]
 80095c4:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80095c8:	f85b 4007 	ldr.w	r4, [fp, r7]
 80095cc:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	9216      	str	r2, [sp, #88]	@ 0x58
 80095d6:	f7f7 fba7 	bl	8000d28 <__addsf3>
 80095da:	4621      	mov	r1, r4
 80095dc:	4606      	mov	r6, r0
 80095de:	4628      	mov	r0, r5
 80095e0:	f7f7 fba0 	bl	8000d24 <__aeabi_fsub>
 80095e4:	9c01      	ldr	r4, [sp, #4]
 80095e6:	9903      	ldr	r1, [sp, #12]
 80095e8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80095ea:	46a6      	mov	lr, r4
 80095ec:	f851 5c04 	ldr.w	r5, [r1, #-4]
 80095f0:	f85e 4007 	ldr.w	r4, [lr, r7]
 80095f4:	9704      	str	r7, [sp, #16]
 80095f6:	4621      	mov	r1, r4
 80095f8:	4628      	mov	r0, r5
 80095fa:	f7f7 fb95 	bl	8000d28 <__addsf3>
 80095fe:	4621      	mov	r1, r4
 8009600:	4607      	mov	r7, r0
 8009602:	4628      	mov	r0, r5
 8009604:	f7f7 fb8e 	bl	8000d24 <__aeabi_fsub>
 8009608:	9902      	ldr	r1, [sp, #8]
 800960a:	9d06      	ldr	r5, [sp, #24]
 800960c:	f85b 8001 	ldr.w	r8, [fp, r1]
 8009610:	f85b 5005 	ldr.w	r5, [fp, r5]
 8009614:	9010      	str	r0, [sp, #64]	@ 0x40
 8009616:	4629      	mov	r1, r5
 8009618:	4640      	mov	r0, r8
 800961a:	f7f7 fb85 	bl	8000d28 <__addsf3>
 800961e:	4629      	mov	r1, r5
 8009620:	4604      	mov	r4, r0
 8009622:	4640      	mov	r0, r8
 8009624:	f7f7 fb7e 	bl	8000d24 <__aeabi_fsub>
 8009628:	9d01      	ldr	r5, [sp, #4]
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	9011      	str	r0, [sp, #68]	@ 0x44
 800962e:	46ae      	mov	lr, r5
 8009630:	9d02      	ldr	r5, [sp, #8]
 8009632:	f85b 8002 	ldr.w	r8, [fp, r2]
 8009636:	f85e 9005 	ldr.w	r9, [lr, r5]
 800963a:	4641      	mov	r1, r8
 800963c:	4648      	mov	r0, r9
 800963e:	f7f7 fb73 	bl	8000d28 <__addsf3>
 8009642:	4641      	mov	r1, r8
 8009644:	4605      	mov	r5, r0
 8009646:	4648      	mov	r0, r9
 8009648:	f7f7 fb6c 	bl	8000d24 <__aeabi_fsub>
 800964c:	4621      	mov	r1, r4
 800964e:	9012      	str	r0, [sp, #72]	@ 0x48
 8009650:	4630      	mov	r0, r6
 8009652:	f7f7 fb67 	bl	8000d24 <__aeabi_fsub>
 8009656:	4621      	mov	r1, r4
 8009658:	9007      	str	r0, [sp, #28]
 800965a:	4630      	mov	r0, r6
 800965c:	f7f7 fb64 	bl	8000d28 <__addsf3>
 8009660:	4629      	mov	r1, r5
 8009662:	4604      	mov	r4, r0
 8009664:	4638      	mov	r0, r7
 8009666:	f7f7 fb5d 	bl	8000d24 <__aeabi_fsub>
 800966a:	4629      	mov	r1, r5
 800966c:	4606      	mov	r6, r0
 800966e:	4638      	mov	r0, r7
 8009670:	f7f7 fb5a 	bl	8000d28 <__addsf3>
 8009674:	4605      	mov	r5, r0
 8009676:	4629      	mov	r1, r5
 8009678:	4620      	mov	r0, r4
 800967a:	f7f7 fb55 	bl	8000d28 <__addsf3>
 800967e:	9a00      	ldr	r2, [sp, #0]
 8009680:	4629      	mov	r1, r5
 8009682:	f842 0c04 	str.w	r0, [r2, #-4]
 8009686:	4620      	mov	r0, r4
 8009688:	f7f7 fb4c 	bl	8000d24 <__aeabi_fsub>
 800968c:	f8db 7004 	ldr.w	r7, [fp, #4]
 8009690:	9900      	ldr	r1, [sp, #0]
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	58cc      	ldr	r4, [r1, r3]
 8009696:	4605      	mov	r5, r0
 8009698:	4621      	mov	r1, r4
 800969a:	4638      	mov	r0, r7
 800969c:	f7f7 fb44 	bl	8000d28 <__addsf3>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4682      	mov	sl, r0
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7f7 fb3d 	bl	8000d24 <__aeabi_fsub>
 80096aa:	9a03      	ldr	r2, [sp, #12]
 80096ac:	9f01      	ldr	r7, [sp, #4]
 80096ae:	9c04      	ldr	r4, [sp, #16]
 80096b0:	687f      	ldr	r7, [r7, #4]
 80096b2:	5914      	ldr	r4, [r2, r4]
 80096b4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80096b6:	4621      	mov	r1, r4
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7f7 fb35 	bl	8000d28 <__addsf3>
 80096be:	4621      	mov	r1, r4
 80096c0:	4681      	mov	r9, r0
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7f7 fb2e 	bl	8000d24 <__aeabi_fsub>
 80096c8:	9a02      	ldr	r2, [sp, #8]
 80096ca:	9b06      	ldr	r3, [sp, #24]
 80096cc:	9900      	ldr	r1, [sp, #0]
 80096ce:	9014      	str	r0, [sp, #80]	@ 0x50
 80096d0:	588f      	ldr	r7, [r1, r2]
 80096d2:	58cc      	ldr	r4, [r1, r3]
 80096d4:	4638      	mov	r0, r7
 80096d6:	4621      	mov	r1, r4
 80096d8:	f7f7 fb26 	bl	8000d28 <__addsf3>
 80096dc:	4621      	mov	r1, r4
 80096de:	4680      	mov	r8, r0
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7f7 fb1f 	bl	8000d24 <__aeabi_fsub>
 80096e6:	9f03      	ldr	r7, [sp, #12]
 80096e8:	9900      	ldr	r1, [sp, #0]
 80096ea:	9c05      	ldr	r4, [sp, #20]
 80096ec:	9008      	str	r0, [sp, #32]
 80096ee:	46be      	mov	lr, r7
 80096f0:	9f02      	ldr	r7, [sp, #8]
 80096f2:	f85e 3007 	ldr.w	r3, [lr, r7]
 80096f6:	590f      	ldr	r7, [r1, r4]
 80096f8:	9315      	str	r3, [sp, #84]	@ 0x54
 80096fa:	4639      	mov	r1, r7
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f7 fb13 	bl	8000d28 <__addsf3>
 8009702:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009704:	4604      	mov	r4, r0
 8009706:	4639      	mov	r1, r7
 8009708:	4618      	mov	r0, r3
 800970a:	f7f7 fb0b 	bl	8000d24 <__aeabi_fsub>
 800970e:	4641      	mov	r1, r8
 8009710:	9015      	str	r0, [sp, #84]	@ 0x54
 8009712:	4650      	mov	r0, sl
 8009714:	f7f7 fb06 	bl	8000d24 <__aeabi_fsub>
 8009718:	4641      	mov	r1, r8
 800971a:	4607      	mov	r7, r0
 800971c:	4650      	mov	r0, sl
 800971e:	f7f7 fb03 	bl	8000d28 <__addsf3>
 8009722:	4621      	mov	r1, r4
 8009724:	4680      	mov	r8, r0
 8009726:	4648      	mov	r0, r9
 8009728:	f7f7 fafc 	bl	8000d24 <__aeabi_fsub>
 800972c:	4621      	mov	r1, r4
 800972e:	4682      	mov	sl, r0
 8009730:	4648      	mov	r0, r9
 8009732:	f7f7 faf9 	bl	8000d28 <__addsf3>
 8009736:	4651      	mov	r1, sl
 8009738:	4681      	mov	r9, r0
 800973a:	9807      	ldr	r0, [sp, #28]
 800973c:	f7f7 faf4 	bl	8000d28 <__addsf3>
 8009740:	4651      	mov	r1, sl
 8009742:	4604      	mov	r4, r0
 8009744:	9807      	ldr	r0, [sp, #28]
 8009746:	f7f7 faed 	bl	8000d24 <__aeabi_fsub>
 800974a:	4649      	mov	r1, r9
 800974c:	4682      	mov	sl, r0
 800974e:	4640      	mov	r0, r8
 8009750:	f7f7 faea 	bl	8000d28 <__addsf3>
 8009754:	4649      	mov	r1, r9
 8009756:	f8cb 0004 	str.w	r0, [fp, #4]
 800975a:	4640      	mov	r0, r8
 800975c:	f7f7 fae2 	bl	8000d24 <__aeabi_fsub>
 8009760:	4631      	mov	r1, r6
 8009762:	4681      	mov	r9, r0
 8009764:	4638      	mov	r0, r7
 8009766:	f7f7 fadd 	bl	8000d24 <__aeabi_fsub>
 800976a:	4631      	mov	r1, r6
 800976c:	4680      	mov	r8, r0
 800976e:	4638      	mov	r0, r7
 8009770:	f7f7 fada 	bl	8000d28 <__addsf3>
 8009774:	4629      	mov	r1, r5
 8009776:	4606      	mov	r6, r0
 8009778:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800977a:	f7f7 fbdd 	bl	8000f38 <__aeabi_fmul>
 800977e:	4649      	mov	r1, r9
 8009780:	4607      	mov	r7, r0
 8009782:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009784:	f7f7 fbd8 	bl	8000f38 <__aeabi_fmul>
 8009788:	4601      	mov	r1, r0
 800978a:	4638      	mov	r0, r7
 800978c:	f7f7 facc 	bl	8000d28 <__addsf3>
 8009790:	9a04      	ldr	r2, [sp, #16]
 8009792:	4649      	mov	r1, r9
 8009794:	f84b 0002 	str.w	r0, [fp, r2]
 8009798:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800979a:	f7f7 fbcd 	bl	8000f38 <__aeabi_fmul>
 800979e:	4629      	mov	r1, r5
 80097a0:	4607      	mov	r7, r0
 80097a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80097a4:	f7f7 fbc8 	bl	8000f38 <__aeabi_fmul>
 80097a8:	4601      	mov	r1, r0
 80097aa:	4638      	mov	r0, r7
 80097ac:	f7f7 faba 	bl	8000d24 <__aeabi_fsub>
 80097b0:	9f00      	ldr	r7, [sp, #0]
 80097b2:	9d04      	ldr	r5, [sp, #16]
 80097b4:	4621      	mov	r1, r4
 80097b6:	5178      	str	r0, [r7, r5]
 80097b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097ba:	f7f7 fbbd 	bl	8000f38 <__aeabi_fmul>
 80097be:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 80097c2:	4605      	mov	r5, r0
 80097c4:	4641      	mov	r1, r8
 80097c6:	4648      	mov	r0, r9
 80097c8:	f7f7 fbb6 	bl	8000f38 <__aeabi_fmul>
 80097cc:	4601      	mov	r1, r0
 80097ce:	4628      	mov	r0, r5
 80097d0:	f7f7 faaa 	bl	8000d28 <__addsf3>
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	4641      	mov	r1, r8
 80097d8:	f84b 0003 	str.w	r0, [fp, r3]
 80097dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097de:	f7f7 fbab 	bl	8000f38 <__aeabi_fmul>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4605      	mov	r5, r0
 80097e6:	4648      	mov	r0, r9
 80097e8:	f7f7 fba6 	bl	8000f38 <__aeabi_fmul>
 80097ec:	4601      	mov	r1, r0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7f7 fa98 	bl	8000d24 <__aeabi_fsub>
 80097f4:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 80097f8:	9c02      	ldr	r4, [sp, #8]
 80097fa:	4651      	mov	r1, sl
 80097fc:	5138      	str	r0, [r7, r4]
 80097fe:	4640      	mov	r0, r8
 8009800:	f7f7 fb9a 	bl	8000f38 <__aeabi_fmul>
 8009804:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 8009808:	4604      	mov	r4, r0
 800980a:	4631      	mov	r1, r6
 800980c:	4648      	mov	r0, r9
 800980e:	f7f7 fb93 	bl	8000f38 <__aeabi_fmul>
 8009812:	4601      	mov	r1, r0
 8009814:	4620      	mov	r0, r4
 8009816:	f7f7 fa87 	bl	8000d28 <__addsf3>
 800981a:	4631      	mov	r1, r6
 800981c:	9e06      	ldr	r6, [sp, #24]
 800981e:	f84b 0006 	str.w	r0, [fp, r6]
 8009822:	4640      	mov	r0, r8
 8009824:	f7f7 fb88 	bl	8000f38 <__aeabi_fmul>
 8009828:	4651      	mov	r1, sl
 800982a:	4604      	mov	r4, r0
 800982c:	4648      	mov	r0, r9
 800982e:	f7f7 fb83 	bl	8000f38 <__aeabi_fmul>
 8009832:	4601      	mov	r1, r0
 8009834:	4620      	mov	r0, r4
 8009836:	f7f7 fa75 	bl	8000d24 <__aeabi_fsub>
 800983a:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800983e:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8009842:	51b8      	str	r0, [r7, r6]
 8009844:	4641      	mov	r1, r8
 8009846:	4648      	mov	r0, r9
 8009848:	9700      	str	r7, [sp, #0]
 800984a:	f7f7 fa6b 	bl	8000d24 <__aeabi_fsub>
 800984e:	499c      	ldr	r1, [pc, #624]	@ (8009ac0 <arm_radix8_butterfly_f32+0x95c>)
 8009850:	f7f7 fb72 	bl	8000f38 <__aeabi_fmul>
 8009854:	4641      	mov	r1, r8
 8009856:	4604      	mov	r4, r0
 8009858:	4648      	mov	r0, r9
 800985a:	f7f7 fa65 	bl	8000d28 <__addsf3>
 800985e:	4998      	ldr	r1, [pc, #608]	@ (8009ac0 <arm_radix8_butterfly_f32+0x95c>)
 8009860:	f7f7 fb6a 	bl	8000f38 <__aeabi_fmul>
 8009864:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009868:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800986c:	4607      	mov	r7, r0
 800986e:	4641      	mov	r1, r8
 8009870:	4650      	mov	r0, sl
 8009872:	f7f7 fa57 	bl	8000d24 <__aeabi_fsub>
 8009876:	4992      	ldr	r1, [pc, #584]	@ (8009ac0 <arm_radix8_butterfly_f32+0x95c>)
 8009878:	f7f7 fb5e 	bl	8000f38 <__aeabi_fmul>
 800987c:	4641      	mov	r1, r8
 800987e:	4681      	mov	r9, r0
 8009880:	4650      	mov	r0, sl
 8009882:	f7f7 fa51 	bl	8000d28 <__addsf3>
 8009886:	498e      	ldr	r1, [pc, #568]	@ (8009ac0 <arm_radix8_butterfly_f32+0x95c>)
 8009888:	f7f7 fb56 	bl	8000f38 <__aeabi_fmul>
 800988c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800988e:	4605      	mov	r5, r0
 8009890:	4621      	mov	r1, r4
 8009892:	4630      	mov	r0, r6
 8009894:	f7f7 fa46 	bl	8000d24 <__aeabi_fsub>
 8009898:	4621      	mov	r1, r4
 800989a:	9007      	str	r0, [sp, #28]
 800989c:	4630      	mov	r0, r6
 800989e:	f7f7 fa43 	bl	8000d28 <__addsf3>
 80098a2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80098a6:	4604      	mov	r4, r0
 80098a8:	4639      	mov	r1, r7
 80098aa:	4640      	mov	r0, r8
 80098ac:	f7f7 fa3a 	bl	8000d24 <__aeabi_fsub>
 80098b0:	4639      	mov	r1, r7
 80098b2:	4606      	mov	r6, r0
 80098b4:	4640      	mov	r0, r8
 80098b6:	f7f7 fa37 	bl	8000d28 <__addsf3>
 80098ba:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80098be:	4680      	mov	r8, r0
 80098c0:	4649      	mov	r1, r9
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7f7 fa2e 	bl	8000d24 <__aeabi_fsub>
 80098c8:	4649      	mov	r1, r9
 80098ca:	4607      	mov	r7, r0
 80098cc:	4650      	mov	r0, sl
 80098ce:	f7f7 fa2b 	bl	8000d28 <__addsf3>
 80098d2:	4629      	mov	r1, r5
 80098d4:	4681      	mov	r9, r0
 80098d6:	9808      	ldr	r0, [sp, #32]
 80098d8:	f7f7 fa24 	bl	8000d24 <__aeabi_fsub>
 80098dc:	4629      	mov	r1, r5
 80098de:	4682      	mov	sl, r0
 80098e0:	9808      	ldr	r0, [sp, #32]
 80098e2:	f7f7 fa21 	bl	8000d28 <__addsf3>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4619      	mov	r1, r3
 80098ea:	4620      	mov	r0, r4
 80098ec:	9308      	str	r3, [sp, #32]
 80098ee:	f7f7 fa1b 	bl	8000d28 <__addsf3>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	4605      	mov	r5, r0
 80098f6:	4619      	mov	r1, r3
 80098f8:	4620      	mov	r0, r4
 80098fa:	f7f7 fa13 	bl	8000d24 <__aeabi_fsub>
 80098fe:	4651      	mov	r1, sl
 8009900:	4604      	mov	r4, r0
 8009902:	9807      	ldr	r0, [sp, #28]
 8009904:	f7f7 fa10 	bl	8000d28 <__addsf3>
 8009908:	4651      	mov	r1, sl
 800990a:	9008      	str	r0, [sp, #32]
 800990c:	9807      	ldr	r0, [sp, #28]
 800990e:	f7f7 fa09 	bl	8000d24 <__aeabi_fsub>
 8009912:	4641      	mov	r1, r8
 8009914:	9007      	str	r0, [sp, #28]
 8009916:	4648      	mov	r0, r9
 8009918:	f7f7 fa04 	bl	8000d24 <__aeabi_fsub>
 800991c:	4641      	mov	r1, r8
 800991e:	4682      	mov	sl, r0
 8009920:	4648      	mov	r0, r9
 8009922:	f7f7 fa01 	bl	8000d28 <__addsf3>
 8009926:	4631      	mov	r1, r6
 8009928:	4681      	mov	r9, r0
 800992a:	4638      	mov	r0, r7
 800992c:	f7f7 f9fa 	bl	8000d24 <__aeabi_fsub>
 8009930:	4631      	mov	r1, r6
 8009932:	4680      	mov	r8, r0
 8009934:	4638      	mov	r0, r7
 8009936:	f7f7 f9f7 	bl	8000d28 <__addsf3>
 800993a:	4629      	mov	r1, r5
 800993c:	4606      	mov	r6, r0
 800993e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009940:	f7f7 fafa 	bl	8000f38 <__aeabi_fmul>
 8009944:	4651      	mov	r1, sl
 8009946:	4607      	mov	r7, r0
 8009948:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800994a:	f7f7 faf5 	bl	8000f38 <__aeabi_fmul>
 800994e:	4601      	mov	r1, r0
 8009950:	4638      	mov	r0, r7
 8009952:	f7f7 f9e9 	bl	8000d28 <__addsf3>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	4651      	mov	r1, sl
 800995a:	f843 0c04 	str.w	r0, [r3, #-4]
 800995e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009960:	f7f7 faea 	bl	8000f38 <__aeabi_fmul>
 8009964:	4629      	mov	r1, r5
 8009966:	4607      	mov	r7, r0
 8009968:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800996a:	f7f7 fae5 	bl	8000f38 <__aeabi_fmul>
 800996e:	4601      	mov	r1, r0
 8009970:	4638      	mov	r0, r7
 8009972:	f7f7 f9d7 	bl	8000d24 <__aeabi_fsub>
 8009976:	9f01      	ldr	r7, [sp, #4]
 8009978:	4621      	mov	r1, r4
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800997e:	f7f7 fadb 	bl	8000f38 <__aeabi_fmul>
 8009982:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 8009986:	4605      	mov	r5, r0
 8009988:	4649      	mov	r1, r9
 800998a:	4650      	mov	r0, sl
 800998c:	f7f7 fad4 	bl	8000f38 <__aeabi_fmul>
 8009990:	4601      	mov	r1, r0
 8009992:	4628      	mov	r0, r5
 8009994:	f7f7 f9c8 	bl	8000d28 <__addsf3>
 8009998:	9a05      	ldr	r2, [sp, #20]
 800999a:	4649      	mov	r1, r9
 800999c:	f84b 0002 	str.w	r0, [fp, r2]
 80099a0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80099a2:	f7f7 fac9 	bl	8000f38 <__aeabi_fmul>
 80099a6:	4621      	mov	r1, r4
 80099a8:	4605      	mov	r5, r0
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f7 fac4 	bl	8000f38 <__aeabi_fmul>
 80099b0:	4601      	mov	r1, r0
 80099b2:	4628      	mov	r0, r5
 80099b4:	f7f7 f9b6 	bl	8000d24 <__aeabi_fsub>
 80099b8:	9908      	ldr	r1, [sp, #32]
 80099ba:	9a05      	ldr	r2, [sp, #20]
 80099bc:	9d00      	ldr	r5, [sp, #0]
 80099be:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 80099c2:	50a8      	str	r0, [r5, r2]
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7f7 fab7 	bl	8000f38 <__aeabi_fmul>
 80099ca:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 80099ce:	4604      	mov	r4, r0
 80099d0:	4641      	mov	r1, r8
 80099d2:	4648      	mov	r0, r9
 80099d4:	f7f7 fab0 	bl	8000f38 <__aeabi_fmul>
 80099d8:	4601      	mov	r1, r0
 80099da:	4620      	mov	r0, r4
 80099dc:	f7f7 f9a4 	bl	8000d28 <__addsf3>
 80099e0:	463a      	mov	r2, r7
 80099e2:	9701      	str	r7, [sp, #4]
 80099e4:	9f04      	ldr	r7, [sp, #16]
 80099e6:	4641      	mov	r1, r8
 80099e8:	51d0      	str	r0, [r2, r7]
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7f7 faa4 	bl	8000f38 <__aeabi_fmul>
 80099f0:	9908      	ldr	r1, [sp, #32]
 80099f2:	4604      	mov	r4, r0
 80099f4:	4648      	mov	r0, r9
 80099f6:	f7f7 fa9f 	bl	8000f38 <__aeabi_fmul>
 80099fa:	4601      	mov	r1, r0
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7f7 f991 	bl	8000d24 <__aeabi_fsub>
 8009a02:	9a03      	ldr	r2, [sp, #12]
 8009a04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a08:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 8009a0c:	51d0      	str	r0, [r2, r7]
 8009a0e:	4651      	mov	r1, sl
 8009a10:	4648      	mov	r0, r9
 8009a12:	f7f7 fa91 	bl	8000f38 <__aeabi_fmul>
 8009a16:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4640      	mov	r0, r8
 8009a20:	f7f7 fa8a 	bl	8000f38 <__aeabi_fmul>
 8009a24:	4601      	mov	r1, r0
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7f7 f97e 	bl	8000d28 <__addsf3>
 8009a2c:	9f01      	ldr	r7, [sp, #4]
 8009a2e:	4631      	mov	r1, r6
 8009a30:	9e02      	ldr	r6, [sp, #8]
 8009a32:	51b8      	str	r0, [r7, r6]
 8009a34:	4648      	mov	r0, r9
 8009a36:	f7f7 fa7f 	bl	8000f38 <__aeabi_fmul>
 8009a3a:	4651      	mov	r1, sl
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f7f7 fa7a 	bl	8000f38 <__aeabi_fmul>
 8009a44:	4601      	mov	r1, r0
 8009a46:	4620      	mov	r0, r4
 8009a48:	f7f7 f96c 	bl	8000d24 <__aeabi_fsub>
 8009a4c:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8009a50:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009a52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a54:	9f01      	ldr	r7, [sp, #4]
 8009a56:	9b03      	ldr	r3, [sp, #12]
 8009a58:	440a      	add	r2, r1
 8009a5a:	eb05 010c 	add.w	r1, r5, ip
 8009a5e:	9100      	str	r1, [sp, #0]
 8009a60:	5198      	str	r0, [r3, r6]
 8009a62:	eb07 010c 	add.w	r1, r7, ip
 8009a66:	4463      	add	r3, ip
 8009a68:	9101      	str	r1, [sp, #4]
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	44e3      	add	fp, ip
 8009a72:	f63f ada5 	bhi.w	80095c0 <arm_radix8_butterfly_f32+0x45c>
 8009a76:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a78:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8009a7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a7c:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 8009a7e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 8009a82:	440a      	add	r2, r1
 8009a84:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009a86:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8009a88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009a8a:	440a      	add	r2, r1
 8009a8c:	9226      	str	r2, [sp, #152]	@ 0x98
 8009a8e:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8009a90:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8009a92:	440a      	add	r2, r1
 8009a94:	9227      	str	r2, [sp, #156]	@ 0x9c
 8009a96:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8009a98:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8009a9a:	440a      	add	r2, r1
 8009a9c:	9228      	str	r2, [sp, #160]	@ 0xa0
 8009a9e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	9324      	str	r3, [sp, #144]	@ 0x90
 8009aa6:	f47f ad44 	bne.w	8009532 <arm_radix8_butterfly_f32+0x3ce>
 8009aaa:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	@ 0xb4
 8009aae:	932c      	str	r3, [sp, #176]	@ 0xb0
 8009ab0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009ab2:	9318      	str	r3, [sp, #96]	@ 0x60
 8009ab4:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8009ab6:	f7ff bb5f 	b.w	8009178 <arm_radix8_butterfly_f32+0x14>
 8009aba:	b031      	add	sp, #196	@ 0xc4
 8009abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac0:	3f3504f3 	.word	0x3f3504f3

08009ac4 <siprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	b500      	push	{lr}
 8009ac8:	b09c      	sub	sp, #112	@ 0x70
 8009aca:	ab1d      	add	r3, sp, #116	@ 0x74
 8009acc:	9002      	str	r0, [sp, #8]
 8009ace:	9006      	str	r0, [sp, #24]
 8009ad0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ad4:	4809      	ldr	r0, [pc, #36]	@ (8009afc <siprintf+0x38>)
 8009ad6:	9107      	str	r1, [sp, #28]
 8009ad8:	9104      	str	r1, [sp, #16]
 8009ada:	4909      	ldr	r1, [pc, #36]	@ (8009b00 <siprintf+0x3c>)
 8009adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae0:	9105      	str	r1, [sp, #20]
 8009ae2:	6800      	ldr	r0, [r0, #0]
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	a902      	add	r1, sp, #8
 8009ae8:	f000 f994 	bl	8009e14 <_svfiprintf_r>
 8009aec:	9b02      	ldr	r3, [sp, #8]
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	b01c      	add	sp, #112	@ 0x70
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b003      	add	sp, #12
 8009afa:	4770      	bx	lr
 8009afc:	20000010 	.word	0x20000010
 8009b00:	ffff0208 	.word	0xffff0208

08009b04 <memset>:
 8009b04:	4402      	add	r2, r0
 8009b06:	4603      	mov	r3, r0
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <memset+0xa>
 8009b0c:	4770      	bx	lr
 8009b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b12:	e7f9      	b.n	8009b08 <memset+0x4>

08009b14 <__errno>:
 8009b14:	4b01      	ldr	r3, [pc, #4]	@ (8009b1c <__errno+0x8>)
 8009b16:	6818      	ldr	r0, [r3, #0]
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	20000010 	.word	0x20000010

08009b20 <__libc_init_array>:
 8009b20:	b570      	push	{r4, r5, r6, lr}
 8009b22:	4d0d      	ldr	r5, [pc, #52]	@ (8009b58 <__libc_init_array+0x38>)
 8009b24:	4c0d      	ldr	r4, [pc, #52]	@ (8009b5c <__libc_init_array+0x3c>)
 8009b26:	1b64      	subs	r4, r4, r5
 8009b28:	10a4      	asrs	r4, r4, #2
 8009b2a:	2600      	movs	r6, #0
 8009b2c:	42a6      	cmp	r6, r4
 8009b2e:	d109      	bne.n	8009b44 <__libc_init_array+0x24>
 8009b30:	4d0b      	ldr	r5, [pc, #44]	@ (8009b60 <__libc_init_array+0x40>)
 8009b32:	4c0c      	ldr	r4, [pc, #48]	@ (8009b64 <__libc_init_array+0x44>)
 8009b34:	f001 fe50 	bl	800b7d8 <_init>
 8009b38:	1b64      	subs	r4, r4, r5
 8009b3a:	10a4      	asrs	r4, r4, #2
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	d105      	bne.n	8009b4e <__libc_init_array+0x2e>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b48:	4798      	blx	r3
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7ee      	b.n	8009b2c <__libc_init_array+0xc>
 8009b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b52:	4798      	blx	r3
 8009b54:	3601      	adds	r6, #1
 8009b56:	e7f2      	b.n	8009b3e <__libc_init_array+0x1e>
 8009b58:	0801ef78 	.word	0x0801ef78
 8009b5c:	0801ef78 	.word	0x0801ef78
 8009b60:	0801ef78 	.word	0x0801ef78
 8009b64:	0801ef7c 	.word	0x0801ef7c

08009b68 <__retarget_lock_acquire_recursive>:
 8009b68:	4770      	bx	lr

08009b6a <__retarget_lock_release_recursive>:
 8009b6a:	4770      	bx	lr

08009b6c <_free_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4605      	mov	r5, r0
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d041      	beq.n	8009bf8 <_free_r+0x8c>
 8009b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b78:	1f0c      	subs	r4, r1, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfb8      	it	lt
 8009b7e:	18e4      	addlt	r4, r4, r3
 8009b80:	f000 f8e0 	bl	8009d44 <__malloc_lock>
 8009b84:	4a1d      	ldr	r2, [pc, #116]	@ (8009bfc <_free_r+0x90>)
 8009b86:	6813      	ldr	r3, [r2, #0]
 8009b88:	b933      	cbnz	r3, 8009b98 <_free_r+0x2c>
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	6014      	str	r4, [r2, #0]
 8009b8e:	4628      	mov	r0, r5
 8009b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b94:	f000 b8dc 	b.w	8009d50 <__malloc_unlock>
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	d908      	bls.n	8009bae <_free_r+0x42>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	1821      	adds	r1, r4, r0
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	bf01      	itttt	eq
 8009ba4:	6819      	ldreq	r1, [r3, #0]
 8009ba6:	685b      	ldreq	r3, [r3, #4]
 8009ba8:	1809      	addeq	r1, r1, r0
 8009baa:	6021      	streq	r1, [r4, #0]
 8009bac:	e7ed      	b.n	8009b8a <_free_r+0x1e>
 8009bae:	461a      	mov	r2, r3
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	b10b      	cbz	r3, 8009bb8 <_free_r+0x4c>
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	d9fa      	bls.n	8009bae <_free_r+0x42>
 8009bb8:	6811      	ldr	r1, [r2, #0]
 8009bba:	1850      	adds	r0, r2, r1
 8009bbc:	42a0      	cmp	r0, r4
 8009bbe:	d10b      	bne.n	8009bd8 <_free_r+0x6c>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	4401      	add	r1, r0
 8009bc4:	1850      	adds	r0, r2, r1
 8009bc6:	4283      	cmp	r3, r0
 8009bc8:	6011      	str	r1, [r2, #0]
 8009bca:	d1e0      	bne.n	8009b8e <_free_r+0x22>
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	6053      	str	r3, [r2, #4]
 8009bd2:	4408      	add	r0, r1
 8009bd4:	6010      	str	r0, [r2, #0]
 8009bd6:	e7da      	b.n	8009b8e <_free_r+0x22>
 8009bd8:	d902      	bls.n	8009be0 <_free_r+0x74>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	602b      	str	r3, [r5, #0]
 8009bde:	e7d6      	b.n	8009b8e <_free_r+0x22>
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	1821      	adds	r1, r4, r0
 8009be4:	428b      	cmp	r3, r1
 8009be6:	bf04      	itt	eq
 8009be8:	6819      	ldreq	r1, [r3, #0]
 8009bea:	685b      	ldreq	r3, [r3, #4]
 8009bec:	6063      	str	r3, [r4, #4]
 8009bee:	bf04      	itt	eq
 8009bf0:	1809      	addeq	r1, r1, r0
 8009bf2:	6021      	streq	r1, [r4, #0]
 8009bf4:	6054      	str	r4, [r2, #4]
 8009bf6:	e7ca      	b.n	8009b8e <_free_r+0x22>
 8009bf8:	bd38      	pop	{r3, r4, r5, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200075e0 	.word	0x200075e0

08009c00 <sbrk_aligned>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	4e0f      	ldr	r6, [pc, #60]	@ (8009c40 <sbrk_aligned+0x40>)
 8009c04:	460c      	mov	r4, r1
 8009c06:	6831      	ldr	r1, [r6, #0]
 8009c08:	4605      	mov	r5, r0
 8009c0a:	b911      	cbnz	r1, 8009c12 <sbrk_aligned+0x12>
 8009c0c:	f000 fba6 	bl	800a35c <_sbrk_r>
 8009c10:	6030      	str	r0, [r6, #0]
 8009c12:	4621      	mov	r1, r4
 8009c14:	4628      	mov	r0, r5
 8009c16:	f000 fba1 	bl	800a35c <_sbrk_r>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d103      	bne.n	8009c26 <sbrk_aligned+0x26>
 8009c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c22:	4620      	mov	r0, r4
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	1cc4      	adds	r4, r0, #3
 8009c28:	f024 0403 	bic.w	r4, r4, #3
 8009c2c:	42a0      	cmp	r0, r4
 8009c2e:	d0f8      	beq.n	8009c22 <sbrk_aligned+0x22>
 8009c30:	1a21      	subs	r1, r4, r0
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 fb92 	bl	800a35c <_sbrk_r>
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d1f2      	bne.n	8009c22 <sbrk_aligned+0x22>
 8009c3c:	e7ef      	b.n	8009c1e <sbrk_aligned+0x1e>
 8009c3e:	bf00      	nop
 8009c40:	200075dc 	.word	0x200075dc

08009c44 <_malloc_r>:
 8009c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c48:	1ccd      	adds	r5, r1, #3
 8009c4a:	f025 0503 	bic.w	r5, r5, #3
 8009c4e:	3508      	adds	r5, #8
 8009c50:	2d0c      	cmp	r5, #12
 8009c52:	bf38      	it	cc
 8009c54:	250c      	movcc	r5, #12
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	4606      	mov	r6, r0
 8009c5a:	db01      	blt.n	8009c60 <_malloc_r+0x1c>
 8009c5c:	42a9      	cmp	r1, r5
 8009c5e:	d904      	bls.n	8009c6a <_malloc_r+0x26>
 8009c60:	230c      	movs	r3, #12
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	2000      	movs	r0, #0
 8009c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d40 <_malloc_r+0xfc>
 8009c6e:	f000 f869 	bl	8009d44 <__malloc_lock>
 8009c72:	f8d8 3000 	ldr.w	r3, [r8]
 8009c76:	461c      	mov	r4, r3
 8009c78:	bb44      	cbnz	r4, 8009ccc <_malloc_r+0x88>
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f7ff ffbf 	bl	8009c00 <sbrk_aligned>
 8009c82:	1c43      	adds	r3, r0, #1
 8009c84:	4604      	mov	r4, r0
 8009c86:	d158      	bne.n	8009d3a <_malloc_r+0xf6>
 8009c88:	f8d8 4000 	ldr.w	r4, [r8]
 8009c8c:	4627      	mov	r7, r4
 8009c8e:	2f00      	cmp	r7, #0
 8009c90:	d143      	bne.n	8009d1a <_malloc_r+0xd6>
 8009c92:	2c00      	cmp	r4, #0
 8009c94:	d04b      	beq.n	8009d2e <_malloc_r+0xea>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	4639      	mov	r1, r7
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	eb04 0903 	add.w	r9, r4, r3
 8009ca0:	f000 fb5c 	bl	800a35c <_sbrk_r>
 8009ca4:	4581      	cmp	r9, r0
 8009ca6:	d142      	bne.n	8009d2e <_malloc_r+0xea>
 8009ca8:	6821      	ldr	r1, [r4, #0]
 8009caa:	1a6d      	subs	r5, r5, r1
 8009cac:	4629      	mov	r1, r5
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7ff ffa6 	bl	8009c00 <sbrk_aligned>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d03a      	beq.n	8009d2e <_malloc_r+0xea>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	442b      	add	r3, r5
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8009cc2:	685a      	ldr	r2, [r3, #4]
 8009cc4:	bb62      	cbnz	r2, 8009d20 <_malloc_r+0xdc>
 8009cc6:	f8c8 7000 	str.w	r7, [r8]
 8009cca:	e00f      	b.n	8009cec <_malloc_r+0xa8>
 8009ccc:	6822      	ldr	r2, [r4, #0]
 8009cce:	1b52      	subs	r2, r2, r5
 8009cd0:	d420      	bmi.n	8009d14 <_malloc_r+0xd0>
 8009cd2:	2a0b      	cmp	r2, #11
 8009cd4:	d917      	bls.n	8009d06 <_malloc_r+0xc2>
 8009cd6:	1961      	adds	r1, r4, r5
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	6025      	str	r5, [r4, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	6059      	strne	r1, [r3, #4]
 8009ce0:	6863      	ldr	r3, [r4, #4]
 8009ce2:	bf08      	it	eq
 8009ce4:	f8c8 1000 	streq.w	r1, [r8]
 8009ce8:	5162      	str	r2, [r4, r5]
 8009cea:	604b      	str	r3, [r1, #4]
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 f82f 	bl	8009d50 <__malloc_unlock>
 8009cf2:	f104 000b 	add.w	r0, r4, #11
 8009cf6:	1d23      	adds	r3, r4, #4
 8009cf8:	f020 0007 	bic.w	r0, r0, #7
 8009cfc:	1ac2      	subs	r2, r0, r3
 8009cfe:	bf1c      	itt	ne
 8009d00:	1a1b      	subne	r3, r3, r0
 8009d02:	50a3      	strne	r3, [r4, r2]
 8009d04:	e7af      	b.n	8009c66 <_malloc_r+0x22>
 8009d06:	6862      	ldr	r2, [r4, #4]
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	bf0c      	ite	eq
 8009d0c:	f8c8 2000 	streq.w	r2, [r8]
 8009d10:	605a      	strne	r2, [r3, #4]
 8009d12:	e7eb      	b.n	8009cec <_malloc_r+0xa8>
 8009d14:	4623      	mov	r3, r4
 8009d16:	6864      	ldr	r4, [r4, #4]
 8009d18:	e7ae      	b.n	8009c78 <_malloc_r+0x34>
 8009d1a:	463c      	mov	r4, r7
 8009d1c:	687f      	ldr	r7, [r7, #4]
 8009d1e:	e7b6      	b.n	8009c8e <_malloc_r+0x4a>
 8009d20:	461a      	mov	r2, r3
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	d1fb      	bne.n	8009d20 <_malloc_r+0xdc>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	6053      	str	r3, [r2, #4]
 8009d2c:	e7de      	b.n	8009cec <_malloc_r+0xa8>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	6033      	str	r3, [r6, #0]
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 f80c 	bl	8009d50 <__malloc_unlock>
 8009d38:	e794      	b.n	8009c64 <_malloc_r+0x20>
 8009d3a:	6005      	str	r5, [r0, #0]
 8009d3c:	e7d6      	b.n	8009cec <_malloc_r+0xa8>
 8009d3e:	bf00      	nop
 8009d40:	200075e0 	.word	0x200075e0

08009d44 <__malloc_lock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	@ (8009d4c <__malloc_lock+0x8>)
 8009d46:	f7ff bf0f 	b.w	8009b68 <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	200075d8 	.word	0x200075d8

08009d50 <__malloc_unlock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	@ (8009d58 <__malloc_unlock+0x8>)
 8009d52:	f7ff bf0a 	b.w	8009b6a <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	200075d8 	.word	0x200075d8

08009d5c <__ssputs_r>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	688e      	ldr	r6, [r1, #8]
 8009d62:	461f      	mov	r7, r3
 8009d64:	42be      	cmp	r6, r7
 8009d66:	680b      	ldr	r3, [r1, #0]
 8009d68:	4682      	mov	sl, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	4690      	mov	r8, r2
 8009d6e:	d82d      	bhi.n	8009dcc <__ssputs_r+0x70>
 8009d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d78:	d026      	beq.n	8009dc8 <__ssputs_r+0x6c>
 8009d7a:	6965      	ldr	r5, [r4, #20]
 8009d7c:	6909      	ldr	r1, [r1, #16]
 8009d7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d82:	eba3 0901 	sub.w	r9, r3, r1
 8009d86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d8a:	1c7b      	adds	r3, r7, #1
 8009d8c:	444b      	add	r3, r9
 8009d8e:	106d      	asrs	r5, r5, #1
 8009d90:	429d      	cmp	r5, r3
 8009d92:	bf38      	it	cc
 8009d94:	461d      	movcc	r5, r3
 8009d96:	0553      	lsls	r3, r2, #21
 8009d98:	d527      	bpl.n	8009dea <__ssputs_r+0x8e>
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7ff ff52 	bl	8009c44 <_malloc_r>
 8009da0:	4606      	mov	r6, r0
 8009da2:	b360      	cbz	r0, 8009dfe <__ssputs_r+0xa2>
 8009da4:	6921      	ldr	r1, [r4, #16]
 8009da6:	464a      	mov	r2, r9
 8009da8:	f000 fae8 	bl	800a37c <memcpy>
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009db6:	81a3      	strh	r3, [r4, #12]
 8009db8:	6126      	str	r6, [r4, #16]
 8009dba:	6165      	str	r5, [r4, #20]
 8009dbc:	444e      	add	r6, r9
 8009dbe:	eba5 0509 	sub.w	r5, r5, r9
 8009dc2:	6026      	str	r6, [r4, #0]
 8009dc4:	60a5      	str	r5, [r4, #8]
 8009dc6:	463e      	mov	r6, r7
 8009dc8:	42be      	cmp	r6, r7
 8009dca:	d900      	bls.n	8009dce <__ssputs_r+0x72>
 8009dcc:	463e      	mov	r6, r7
 8009dce:	6820      	ldr	r0, [r4, #0]
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	4641      	mov	r1, r8
 8009dd4:	f000 faa8 	bl	800a328 <memmove>
 8009dd8:	68a3      	ldr	r3, [r4, #8]
 8009dda:	1b9b      	subs	r3, r3, r6
 8009ddc:	60a3      	str	r3, [r4, #8]
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	4433      	add	r3, r6
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	2000      	movs	r0, #0
 8009de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dea:	462a      	mov	r2, r5
 8009dec:	f000 fad4 	bl	800a398 <_realloc_r>
 8009df0:	4606      	mov	r6, r0
 8009df2:	2800      	cmp	r0, #0
 8009df4:	d1e0      	bne.n	8009db8 <__ssputs_r+0x5c>
 8009df6:	6921      	ldr	r1, [r4, #16]
 8009df8:	4650      	mov	r0, sl
 8009dfa:	f7ff feb7 	bl	8009b6c <_free_r>
 8009dfe:	230c      	movs	r3, #12
 8009e00:	f8ca 3000 	str.w	r3, [sl]
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e7e9      	b.n	8009de6 <__ssputs_r+0x8a>
	...

08009e14 <_svfiprintf_r>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	4698      	mov	r8, r3
 8009e1a:	898b      	ldrh	r3, [r1, #12]
 8009e1c:	061b      	lsls	r3, r3, #24
 8009e1e:	b09d      	sub	sp, #116	@ 0x74
 8009e20:	4607      	mov	r7, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	4614      	mov	r4, r2
 8009e26:	d510      	bpl.n	8009e4a <_svfiprintf_r+0x36>
 8009e28:	690b      	ldr	r3, [r1, #16]
 8009e2a:	b973      	cbnz	r3, 8009e4a <_svfiprintf_r+0x36>
 8009e2c:	2140      	movs	r1, #64	@ 0x40
 8009e2e:	f7ff ff09 	bl	8009c44 <_malloc_r>
 8009e32:	6028      	str	r0, [r5, #0]
 8009e34:	6128      	str	r0, [r5, #16]
 8009e36:	b930      	cbnz	r0, 8009e46 <_svfiprintf_r+0x32>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	b01d      	add	sp, #116	@ 0x74
 8009e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e46:	2340      	movs	r3, #64	@ 0x40
 8009e48:	616b      	str	r3, [r5, #20]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e4e:	2320      	movs	r3, #32
 8009e50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e58:	2330      	movs	r3, #48	@ 0x30
 8009e5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ff8 <_svfiprintf_r+0x1e4>
 8009e5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e62:	f04f 0901 	mov.w	r9, #1
 8009e66:	4623      	mov	r3, r4
 8009e68:	469a      	mov	sl, r3
 8009e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e6e:	b10a      	cbz	r2, 8009e74 <_svfiprintf_r+0x60>
 8009e70:	2a25      	cmp	r2, #37	@ 0x25
 8009e72:	d1f9      	bne.n	8009e68 <_svfiprintf_r+0x54>
 8009e74:	ebba 0b04 	subs.w	fp, sl, r4
 8009e78:	d00b      	beq.n	8009e92 <_svfiprintf_r+0x7e>
 8009e7a:	465b      	mov	r3, fp
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff ff6b 	bl	8009d5c <__ssputs_r>
 8009e86:	3001      	adds	r0, #1
 8009e88:	f000 80a7 	beq.w	8009fda <_svfiprintf_r+0x1c6>
 8009e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e8e:	445a      	add	r2, fp
 8009e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e92:	f89a 3000 	ldrb.w	r3, [sl]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 809f 	beq.w	8009fda <_svfiprintf_r+0x1c6>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ea6:	f10a 0a01 	add.w	sl, sl, #1
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	9307      	str	r3, [sp, #28]
 8009eae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009eb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009eb4:	4654      	mov	r4, sl
 8009eb6:	2205      	movs	r2, #5
 8009eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebc:	484e      	ldr	r0, [pc, #312]	@ (8009ff8 <_svfiprintf_r+0x1e4>)
 8009ebe:	f7f6 f9ef 	bl	80002a0 <memchr>
 8009ec2:	9a04      	ldr	r2, [sp, #16]
 8009ec4:	b9d8      	cbnz	r0, 8009efe <_svfiprintf_r+0xea>
 8009ec6:	06d0      	lsls	r0, r2, #27
 8009ec8:	bf44      	itt	mi
 8009eca:	2320      	movmi	r3, #32
 8009ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ed0:	0711      	lsls	r1, r2, #28
 8009ed2:	bf44      	itt	mi
 8009ed4:	232b      	movmi	r3, #43	@ 0x2b
 8009ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eda:	f89a 3000 	ldrb.w	r3, [sl]
 8009ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ee0:	d015      	beq.n	8009f0e <_svfiprintf_r+0xfa>
 8009ee2:	9a07      	ldr	r2, [sp, #28]
 8009ee4:	4654      	mov	r4, sl
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	f04f 0c0a 	mov.w	ip, #10
 8009eec:	4621      	mov	r1, r4
 8009eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef2:	3b30      	subs	r3, #48	@ 0x30
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	d94b      	bls.n	8009f90 <_svfiprintf_r+0x17c>
 8009ef8:	b1b0      	cbz	r0, 8009f28 <_svfiprintf_r+0x114>
 8009efa:	9207      	str	r2, [sp, #28]
 8009efc:	e014      	b.n	8009f28 <_svfiprintf_r+0x114>
 8009efe:	eba0 0308 	sub.w	r3, r0, r8
 8009f02:	fa09 f303 	lsl.w	r3, r9, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	46a2      	mov	sl, r4
 8009f0c:	e7d2      	b.n	8009eb4 <_svfiprintf_r+0xa0>
 8009f0e:	9b03      	ldr	r3, [sp, #12]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	9103      	str	r1, [sp, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bfbb      	ittet	lt
 8009f1a:	425b      	neglt	r3, r3
 8009f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f20:	9307      	strge	r3, [sp, #28]
 8009f22:	9307      	strlt	r3, [sp, #28]
 8009f24:	bfb8      	it	lt
 8009f26:	9204      	strlt	r2, [sp, #16]
 8009f28:	7823      	ldrb	r3, [r4, #0]
 8009f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f2c:	d10a      	bne.n	8009f44 <_svfiprintf_r+0x130>
 8009f2e:	7863      	ldrb	r3, [r4, #1]
 8009f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f32:	d132      	bne.n	8009f9a <_svfiprintf_r+0x186>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	1d1a      	adds	r2, r3, #4
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	9203      	str	r2, [sp, #12]
 8009f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f40:	3402      	adds	r4, #2
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a008 <_svfiprintf_r+0x1f4>
 8009f48:	7821      	ldrb	r1, [r4, #0]
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	f7f6 f9a7 	bl	80002a0 <memchr>
 8009f52:	b138      	cbz	r0, 8009f64 <_svfiprintf_r+0x150>
 8009f54:	9b04      	ldr	r3, [sp, #16]
 8009f56:	eba0 000a 	sub.w	r0, r0, sl
 8009f5a:	2240      	movs	r2, #64	@ 0x40
 8009f5c:	4082      	lsls	r2, r0
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	3401      	adds	r4, #1
 8009f62:	9304      	str	r3, [sp, #16]
 8009f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f68:	4824      	ldr	r0, [pc, #144]	@ (8009ffc <_svfiprintf_r+0x1e8>)
 8009f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f6e:	2206      	movs	r2, #6
 8009f70:	f7f6 f996 	bl	80002a0 <memchr>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d036      	beq.n	8009fe6 <_svfiprintf_r+0x1d2>
 8009f78:	4b21      	ldr	r3, [pc, #132]	@ (800a000 <_svfiprintf_r+0x1ec>)
 8009f7a:	bb1b      	cbnz	r3, 8009fc4 <_svfiprintf_r+0x1b0>
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	3307      	adds	r3, #7
 8009f80:	f023 0307 	bic.w	r3, r3, #7
 8009f84:	3308      	adds	r3, #8
 8009f86:	9303      	str	r3, [sp, #12]
 8009f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8a:	4433      	add	r3, r6
 8009f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f8e:	e76a      	b.n	8009e66 <_svfiprintf_r+0x52>
 8009f90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f94:	460c      	mov	r4, r1
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7a8      	b.n	8009eec <_svfiprintf_r+0xd8>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	9305      	str	r3, [sp, #20]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f04f 0c0a 	mov.w	ip, #10
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fac:	3a30      	subs	r2, #48	@ 0x30
 8009fae:	2a09      	cmp	r2, #9
 8009fb0:	d903      	bls.n	8009fba <_svfiprintf_r+0x1a6>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0c6      	beq.n	8009f44 <_svfiprintf_r+0x130>
 8009fb6:	9105      	str	r1, [sp, #20]
 8009fb8:	e7c4      	b.n	8009f44 <_svfiprintf_r+0x130>
 8009fba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e7f0      	b.n	8009fa6 <_svfiprintf_r+0x192>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4b0e      	ldr	r3, [pc, #56]	@ (800a004 <_svfiprintf_r+0x1f0>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f3af 8000 	nop.w
 8009fd4:	1c42      	adds	r2, r0, #1
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	d1d6      	bne.n	8009f88 <_svfiprintf_r+0x174>
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	065b      	lsls	r3, r3, #25
 8009fde:	f53f af2d 	bmi.w	8009e3c <_svfiprintf_r+0x28>
 8009fe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fe4:	e72c      	b.n	8009e40 <_svfiprintf_r+0x2c>
 8009fe6:	ab03      	add	r3, sp, #12
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	462a      	mov	r2, r5
 8009fec:	4b05      	ldr	r3, [pc, #20]	@ (800a004 <_svfiprintf_r+0x1f0>)
 8009fee:	a904      	add	r1, sp, #16
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f000 f879 	bl	800a0e8 <_printf_i>
 8009ff6:	e7ed      	b.n	8009fd4 <_svfiprintf_r+0x1c0>
 8009ff8:	0801ed28 	.word	0x0801ed28
 8009ffc:	0801ed32 	.word	0x0801ed32
 800a000:	00000000 	.word	0x00000000
 800a004:	08009d5d 	.word	0x08009d5d
 800a008:	0801ed2e 	.word	0x0801ed2e

0800a00c <_printf_common>:
 800a00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a010:	4616      	mov	r6, r2
 800a012:	4698      	mov	r8, r3
 800a014:	688a      	ldr	r2, [r1, #8]
 800a016:	690b      	ldr	r3, [r1, #16]
 800a018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a01c:	4293      	cmp	r3, r2
 800a01e:	bfb8      	it	lt
 800a020:	4613      	movlt	r3, r2
 800a022:	6033      	str	r3, [r6, #0]
 800a024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a028:	4607      	mov	r7, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	b10a      	cbz	r2, 800a032 <_printf_common+0x26>
 800a02e:	3301      	adds	r3, #1
 800a030:	6033      	str	r3, [r6, #0]
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	0699      	lsls	r1, r3, #26
 800a036:	bf42      	ittt	mi
 800a038:	6833      	ldrmi	r3, [r6, #0]
 800a03a:	3302      	addmi	r3, #2
 800a03c:	6033      	strmi	r3, [r6, #0]
 800a03e:	6825      	ldr	r5, [r4, #0]
 800a040:	f015 0506 	ands.w	r5, r5, #6
 800a044:	d106      	bne.n	800a054 <_printf_common+0x48>
 800a046:	f104 0a19 	add.w	sl, r4, #25
 800a04a:	68e3      	ldr	r3, [r4, #12]
 800a04c:	6832      	ldr	r2, [r6, #0]
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	42ab      	cmp	r3, r5
 800a052:	dc26      	bgt.n	800a0a2 <_printf_common+0x96>
 800a054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	3b00      	subs	r3, #0
 800a05c:	bf18      	it	ne
 800a05e:	2301      	movne	r3, #1
 800a060:	0692      	lsls	r2, r2, #26
 800a062:	d42b      	bmi.n	800a0bc <_printf_common+0xb0>
 800a064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a068:	4641      	mov	r1, r8
 800a06a:	4638      	mov	r0, r7
 800a06c:	47c8      	blx	r9
 800a06e:	3001      	adds	r0, #1
 800a070:	d01e      	beq.n	800a0b0 <_printf_common+0xa4>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	f003 0306 	and.w	r3, r3, #6
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	bf02      	ittt	eq
 800a07e:	68e5      	ldreq	r5, [r4, #12]
 800a080:	6833      	ldreq	r3, [r6, #0]
 800a082:	1aed      	subeq	r5, r5, r3
 800a084:	68a3      	ldr	r3, [r4, #8]
 800a086:	bf0c      	ite	eq
 800a088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a08c:	2500      	movne	r5, #0
 800a08e:	4293      	cmp	r3, r2
 800a090:	bfc4      	itt	gt
 800a092:	1a9b      	subgt	r3, r3, r2
 800a094:	18ed      	addgt	r5, r5, r3
 800a096:	2600      	movs	r6, #0
 800a098:	341a      	adds	r4, #26
 800a09a:	42b5      	cmp	r5, r6
 800a09c:	d11a      	bne.n	800a0d4 <_printf_common+0xc8>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	e008      	b.n	800a0b4 <_printf_common+0xa8>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4652      	mov	r2, sl
 800a0a6:	4641      	mov	r1, r8
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	47c8      	blx	r9
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d103      	bne.n	800a0b8 <_printf_common+0xac>
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b8:	3501      	adds	r5, #1
 800a0ba:	e7c6      	b.n	800a04a <_printf_common+0x3e>
 800a0bc:	18e1      	adds	r1, r4, r3
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	2030      	movs	r0, #48	@ 0x30
 800a0c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0c6:	4422      	add	r2, r4
 800a0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	e7c7      	b.n	800a064 <_printf_common+0x58>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4638      	mov	r0, r7
 800a0dc:	47c8      	blx	r9
 800a0de:	3001      	adds	r0, #1
 800a0e0:	d0e6      	beq.n	800a0b0 <_printf_common+0xa4>
 800a0e2:	3601      	adds	r6, #1
 800a0e4:	e7d9      	b.n	800a09a <_printf_common+0x8e>
	...

0800a0e8 <_printf_i>:
 800a0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	7e0f      	ldrb	r7, [r1, #24]
 800a0ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0f0:	2f78      	cmp	r7, #120	@ 0x78
 800a0f2:	4691      	mov	r9, r2
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	469a      	mov	sl, r3
 800a0fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0fe:	d807      	bhi.n	800a110 <_printf_i+0x28>
 800a100:	2f62      	cmp	r7, #98	@ 0x62
 800a102:	d80a      	bhi.n	800a11a <_printf_i+0x32>
 800a104:	2f00      	cmp	r7, #0
 800a106:	f000 80d2 	beq.w	800a2ae <_printf_i+0x1c6>
 800a10a:	2f58      	cmp	r7, #88	@ 0x58
 800a10c:	f000 80b9 	beq.w	800a282 <_printf_i+0x19a>
 800a110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a118:	e03a      	b.n	800a190 <_printf_i+0xa8>
 800a11a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a11e:	2b15      	cmp	r3, #21
 800a120:	d8f6      	bhi.n	800a110 <_printf_i+0x28>
 800a122:	a101      	add	r1, pc, #4	@ (adr r1, 800a128 <_printf_i+0x40>)
 800a124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a128:	0800a181 	.word	0x0800a181
 800a12c:	0800a195 	.word	0x0800a195
 800a130:	0800a111 	.word	0x0800a111
 800a134:	0800a111 	.word	0x0800a111
 800a138:	0800a111 	.word	0x0800a111
 800a13c:	0800a111 	.word	0x0800a111
 800a140:	0800a195 	.word	0x0800a195
 800a144:	0800a111 	.word	0x0800a111
 800a148:	0800a111 	.word	0x0800a111
 800a14c:	0800a111 	.word	0x0800a111
 800a150:	0800a111 	.word	0x0800a111
 800a154:	0800a295 	.word	0x0800a295
 800a158:	0800a1bf 	.word	0x0800a1bf
 800a15c:	0800a24f 	.word	0x0800a24f
 800a160:	0800a111 	.word	0x0800a111
 800a164:	0800a111 	.word	0x0800a111
 800a168:	0800a2b7 	.word	0x0800a2b7
 800a16c:	0800a111 	.word	0x0800a111
 800a170:	0800a1bf 	.word	0x0800a1bf
 800a174:	0800a111 	.word	0x0800a111
 800a178:	0800a111 	.word	0x0800a111
 800a17c:	0800a257 	.word	0x0800a257
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	1d1a      	adds	r2, r3, #4
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6032      	str	r2, [r6, #0]
 800a188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a18c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a190:	2301      	movs	r3, #1
 800a192:	e09d      	b.n	800a2d0 <_printf_i+0x1e8>
 800a194:	6833      	ldr	r3, [r6, #0]
 800a196:	6820      	ldr	r0, [r4, #0]
 800a198:	1d19      	adds	r1, r3, #4
 800a19a:	6031      	str	r1, [r6, #0]
 800a19c:	0606      	lsls	r6, r0, #24
 800a19e:	d501      	bpl.n	800a1a4 <_printf_i+0xbc>
 800a1a0:	681d      	ldr	r5, [r3, #0]
 800a1a2:	e003      	b.n	800a1ac <_printf_i+0xc4>
 800a1a4:	0645      	lsls	r5, r0, #25
 800a1a6:	d5fb      	bpl.n	800a1a0 <_printf_i+0xb8>
 800a1a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1ac:	2d00      	cmp	r5, #0
 800a1ae:	da03      	bge.n	800a1b8 <_printf_i+0xd0>
 800a1b0:	232d      	movs	r3, #45	@ 0x2d
 800a1b2:	426d      	negs	r5, r5
 800a1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1b8:	4859      	ldr	r0, [pc, #356]	@ (800a320 <_printf_i+0x238>)
 800a1ba:	230a      	movs	r3, #10
 800a1bc:	e011      	b.n	800a1e2 <_printf_i+0xfa>
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	6833      	ldr	r3, [r6, #0]
 800a1c2:	0608      	lsls	r0, r1, #24
 800a1c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1c8:	d402      	bmi.n	800a1d0 <_printf_i+0xe8>
 800a1ca:	0649      	lsls	r1, r1, #25
 800a1cc:	bf48      	it	mi
 800a1ce:	b2ad      	uxthmi	r5, r5
 800a1d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1d2:	4853      	ldr	r0, [pc, #332]	@ (800a320 <_printf_i+0x238>)
 800a1d4:	6033      	str	r3, [r6, #0]
 800a1d6:	bf14      	ite	ne
 800a1d8:	230a      	movne	r3, #10
 800a1da:	2308      	moveq	r3, #8
 800a1dc:	2100      	movs	r1, #0
 800a1de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1e2:	6866      	ldr	r6, [r4, #4]
 800a1e4:	60a6      	str	r6, [r4, #8]
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	bfa2      	ittt	ge
 800a1ea:	6821      	ldrge	r1, [r4, #0]
 800a1ec:	f021 0104 	bicge.w	r1, r1, #4
 800a1f0:	6021      	strge	r1, [r4, #0]
 800a1f2:	b90d      	cbnz	r5, 800a1f8 <_printf_i+0x110>
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	d04b      	beq.n	800a290 <_printf_i+0x1a8>
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1fe:	fb03 5711 	mls	r7, r3, r1, r5
 800a202:	5dc7      	ldrb	r7, [r0, r7]
 800a204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a208:	462f      	mov	r7, r5
 800a20a:	42bb      	cmp	r3, r7
 800a20c:	460d      	mov	r5, r1
 800a20e:	d9f4      	bls.n	800a1fa <_printf_i+0x112>
 800a210:	2b08      	cmp	r3, #8
 800a212:	d10b      	bne.n	800a22c <_printf_i+0x144>
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	07df      	lsls	r7, r3, #31
 800a218:	d508      	bpl.n	800a22c <_printf_i+0x144>
 800a21a:	6923      	ldr	r3, [r4, #16]
 800a21c:	6861      	ldr	r1, [r4, #4]
 800a21e:	4299      	cmp	r1, r3
 800a220:	bfde      	ittt	le
 800a222:	2330      	movle	r3, #48	@ 0x30
 800a224:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a228:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a22c:	1b92      	subs	r2, r2, r6
 800a22e:	6122      	str	r2, [r4, #16]
 800a230:	f8cd a000 	str.w	sl, [sp]
 800a234:	464b      	mov	r3, r9
 800a236:	aa03      	add	r2, sp, #12
 800a238:	4621      	mov	r1, r4
 800a23a:	4640      	mov	r0, r8
 800a23c:	f7ff fee6 	bl	800a00c <_printf_common>
 800a240:	3001      	adds	r0, #1
 800a242:	d14a      	bne.n	800a2da <_printf_i+0x1f2>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	b004      	add	sp, #16
 800a24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f043 0320 	orr.w	r3, r3, #32
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	4833      	ldr	r0, [pc, #204]	@ (800a324 <_printf_i+0x23c>)
 800a258:	2778      	movs	r7, #120	@ 0x78
 800a25a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	6831      	ldr	r1, [r6, #0]
 800a262:	061f      	lsls	r7, r3, #24
 800a264:	f851 5b04 	ldr.w	r5, [r1], #4
 800a268:	d402      	bmi.n	800a270 <_printf_i+0x188>
 800a26a:	065f      	lsls	r7, r3, #25
 800a26c:	bf48      	it	mi
 800a26e:	b2ad      	uxthmi	r5, r5
 800a270:	6031      	str	r1, [r6, #0]
 800a272:	07d9      	lsls	r1, r3, #31
 800a274:	bf44      	itt	mi
 800a276:	f043 0320 	orrmi.w	r3, r3, #32
 800a27a:	6023      	strmi	r3, [r4, #0]
 800a27c:	b11d      	cbz	r5, 800a286 <_printf_i+0x19e>
 800a27e:	2310      	movs	r3, #16
 800a280:	e7ac      	b.n	800a1dc <_printf_i+0xf4>
 800a282:	4827      	ldr	r0, [pc, #156]	@ (800a320 <_printf_i+0x238>)
 800a284:	e7e9      	b.n	800a25a <_printf_i+0x172>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f023 0320 	bic.w	r3, r3, #32
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	e7f6      	b.n	800a27e <_printf_i+0x196>
 800a290:	4616      	mov	r6, r2
 800a292:	e7bd      	b.n	800a210 <_printf_i+0x128>
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	6825      	ldr	r5, [r4, #0]
 800a298:	6961      	ldr	r1, [r4, #20]
 800a29a:	1d18      	adds	r0, r3, #4
 800a29c:	6030      	str	r0, [r6, #0]
 800a29e:	062e      	lsls	r6, r5, #24
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	d501      	bpl.n	800a2a8 <_printf_i+0x1c0>
 800a2a4:	6019      	str	r1, [r3, #0]
 800a2a6:	e002      	b.n	800a2ae <_printf_i+0x1c6>
 800a2a8:	0668      	lsls	r0, r5, #25
 800a2aa:	d5fb      	bpl.n	800a2a4 <_printf_i+0x1bc>
 800a2ac:	8019      	strh	r1, [r3, #0]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	4616      	mov	r6, r2
 800a2b4:	e7bc      	b.n	800a230 <_printf_i+0x148>
 800a2b6:	6833      	ldr	r3, [r6, #0]
 800a2b8:	1d1a      	adds	r2, r3, #4
 800a2ba:	6032      	str	r2, [r6, #0]
 800a2bc:	681e      	ldr	r6, [r3, #0]
 800a2be:	6862      	ldr	r2, [r4, #4]
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7f5 ffec 	bl	80002a0 <memchr>
 800a2c8:	b108      	cbz	r0, 800a2ce <_printf_i+0x1e6>
 800a2ca:	1b80      	subs	r0, r0, r6
 800a2cc:	6060      	str	r0, [r4, #4]
 800a2ce:	6863      	ldr	r3, [r4, #4]
 800a2d0:	6123      	str	r3, [r4, #16]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2d8:	e7aa      	b.n	800a230 <_printf_i+0x148>
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	47d0      	blx	sl
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d0ad      	beq.n	800a244 <_printf_i+0x15c>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	079b      	lsls	r3, r3, #30
 800a2ec:	d413      	bmi.n	800a316 <_printf_i+0x22e>
 800a2ee:	68e0      	ldr	r0, [r4, #12]
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	4298      	cmp	r0, r3
 800a2f4:	bfb8      	it	lt
 800a2f6:	4618      	movlt	r0, r3
 800a2f8:	e7a6      	b.n	800a248 <_printf_i+0x160>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	4649      	mov	r1, r9
 800a300:	4640      	mov	r0, r8
 800a302:	47d0      	blx	sl
 800a304:	3001      	adds	r0, #1
 800a306:	d09d      	beq.n	800a244 <_printf_i+0x15c>
 800a308:	3501      	adds	r5, #1
 800a30a:	68e3      	ldr	r3, [r4, #12]
 800a30c:	9903      	ldr	r1, [sp, #12]
 800a30e:	1a5b      	subs	r3, r3, r1
 800a310:	42ab      	cmp	r3, r5
 800a312:	dcf2      	bgt.n	800a2fa <_printf_i+0x212>
 800a314:	e7eb      	b.n	800a2ee <_printf_i+0x206>
 800a316:	2500      	movs	r5, #0
 800a318:	f104 0619 	add.w	r6, r4, #25
 800a31c:	e7f5      	b.n	800a30a <_printf_i+0x222>
 800a31e:	bf00      	nop
 800a320:	0801ed39 	.word	0x0801ed39
 800a324:	0801ed4a 	.word	0x0801ed4a

0800a328 <memmove>:
 800a328:	4288      	cmp	r0, r1
 800a32a:	b510      	push	{r4, lr}
 800a32c:	eb01 0402 	add.w	r4, r1, r2
 800a330:	d902      	bls.n	800a338 <memmove+0x10>
 800a332:	4284      	cmp	r4, r0
 800a334:	4623      	mov	r3, r4
 800a336:	d807      	bhi.n	800a348 <memmove+0x20>
 800a338:	1e43      	subs	r3, r0, #1
 800a33a:	42a1      	cmp	r1, r4
 800a33c:	d008      	beq.n	800a350 <memmove+0x28>
 800a33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a342:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a346:	e7f8      	b.n	800a33a <memmove+0x12>
 800a348:	4402      	add	r2, r0
 800a34a:	4601      	mov	r1, r0
 800a34c:	428a      	cmp	r2, r1
 800a34e:	d100      	bne.n	800a352 <memmove+0x2a>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35a:	e7f7      	b.n	800a34c <memmove+0x24>

0800a35c <_sbrk_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d06      	ldr	r5, [pc, #24]	@ (800a378 <_sbrk_r+0x1c>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f8 fa94 	bl	8002894 <_sbrk>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_sbrk_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_sbrk_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	200075d4 	.word	0x200075d4

0800a37c <memcpy>:
 800a37c:	440a      	add	r2, r1
 800a37e:	4291      	cmp	r1, r2
 800a380:	f100 33ff 	add.w	r3, r0, #4294967295
 800a384:	d100      	bne.n	800a388 <memcpy+0xc>
 800a386:	4770      	bx	lr
 800a388:	b510      	push	{r4, lr}
 800a38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a392:	4291      	cmp	r1, r2
 800a394:	d1f9      	bne.n	800a38a <memcpy+0xe>
 800a396:	bd10      	pop	{r4, pc}

0800a398 <_realloc_r>:
 800a398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39c:	4680      	mov	r8, r0
 800a39e:	4615      	mov	r5, r2
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	b921      	cbnz	r1, 800a3ae <_realloc_r+0x16>
 800a3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	f7ff bc4b 	b.w	8009c44 <_malloc_r>
 800a3ae:	b92a      	cbnz	r2, 800a3bc <_realloc_r+0x24>
 800a3b0:	f7ff fbdc 	bl	8009b6c <_free_r>
 800a3b4:	2400      	movs	r4, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3bc:	f000 f81a 	bl	800a3f4 <_malloc_usable_size_r>
 800a3c0:	4285      	cmp	r5, r0
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	d802      	bhi.n	800a3cc <_realloc_r+0x34>
 800a3c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3ca:	d8f4      	bhi.n	800a3b6 <_realloc_r+0x1e>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	f7ff fc38 	bl	8009c44 <_malloc_r>
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d0ec      	beq.n	800a3b4 <_realloc_r+0x1c>
 800a3da:	42b5      	cmp	r5, r6
 800a3dc:	462a      	mov	r2, r5
 800a3de:	4621      	mov	r1, r4
 800a3e0:	bf28      	it	cs
 800a3e2:	4632      	movcs	r2, r6
 800a3e4:	f7ff ffca 	bl	800a37c <memcpy>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7ff fbbe 	bl	8009b6c <_free_r>
 800a3f0:	463c      	mov	r4, r7
 800a3f2:	e7e0      	b.n	800a3b6 <_realloc_r+0x1e>

0800a3f4 <_malloc_usable_size_r>:
 800a3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f8:	1f18      	subs	r0, r3, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfbc      	itt	lt
 800a3fe:	580b      	ldrlt	r3, [r1, r0]
 800a400:	18c0      	addlt	r0, r0, r3
 800a402:	4770      	bx	lr

0800a404 <cos>:
 800a404:	b530      	push	{r4, r5, lr}
 800a406:	4d20      	ldr	r5, [pc, #128]	@ (800a488 <cos+0x84>)
 800a408:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a40c:	42ac      	cmp	r4, r5
 800a40e:	b087      	sub	sp, #28
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	d806      	bhi.n	800a424 <cos+0x20>
 800a416:	2200      	movs	r2, #0
 800a418:	2300      	movs	r3, #0
 800a41a:	b007      	add	sp, #28
 800a41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a420:	f000 b92e 	b.w	800a680 <__kernel_cos>
 800a424:	4d19      	ldr	r5, [pc, #100]	@ (800a48c <cos+0x88>)
 800a426:	42ac      	cmp	r4, r5
 800a428:	d903      	bls.n	800a432 <cos+0x2e>
 800a42a:	f7f5 ff8d 	bl	8000348 <__aeabi_dsub>
 800a42e:	b007      	add	sp, #28
 800a430:	bd30      	pop	{r4, r5, pc}
 800a432:	aa02      	add	r2, sp, #8
 800a434:	f000 fa9c 	bl	800a970 <__ieee754_rem_pio2>
 800a438:	f000 0003 	and.w	r0, r0, #3
 800a43c:	2801      	cmp	r0, #1
 800a43e:	d009      	beq.n	800a454 <cos+0x50>
 800a440:	2802      	cmp	r0, #2
 800a442:	d011      	beq.n	800a468 <cos+0x64>
 800a444:	b9b8      	cbnz	r0, 800a476 <cos+0x72>
 800a446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a44e:	f000 f917 	bl	800a680 <__kernel_cos>
 800a452:	e7ec      	b.n	800a42e <cos+0x2a>
 800a454:	9000      	str	r0, [sp, #0]
 800a456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45e:	f000 f9cf 	bl	800a800 <__kernel_sin>
 800a462:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a466:	e7e2      	b.n	800a42e <cos+0x2a>
 800a468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a470:	f000 f906 	bl	800a680 <__kernel_cos>
 800a474:	e7f5      	b.n	800a462 <cos+0x5e>
 800a476:	2301      	movs	r3, #1
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a482:	f000 f9bd 	bl	800a800 <__kernel_sin>
 800a486:	e7d2      	b.n	800a42e <cos+0x2a>
 800a488:	3fe921fb 	.word	0x3fe921fb
 800a48c:	7fefffff 	.word	0x7fefffff

0800a490 <fabs>:
 800a490:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a494:	4619      	mov	r1, r3
 800a496:	4770      	bx	lr

0800a498 <sin>:
 800a498:	b530      	push	{r4, r5, lr}
 800a49a:	4d20      	ldr	r5, [pc, #128]	@ (800a51c <sin+0x84>)
 800a49c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800a4a0:	42ac      	cmp	r4, r5
 800a4a2:	b087      	sub	sp, #28
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	d806      	bhi.n	800a4b8 <sin+0x20>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	f000 f9a5 	bl	800a800 <__kernel_sin>
 800a4b6:	e004      	b.n	800a4c2 <sin+0x2a>
 800a4b8:	4d19      	ldr	r5, [pc, #100]	@ (800a520 <sin+0x88>)
 800a4ba:	42ac      	cmp	r4, r5
 800a4bc:	d903      	bls.n	800a4c6 <sin+0x2e>
 800a4be:	f7f5 ff43 	bl	8000348 <__aeabi_dsub>
 800a4c2:	b007      	add	sp, #28
 800a4c4:	bd30      	pop	{r4, r5, pc}
 800a4c6:	aa02      	add	r2, sp, #8
 800a4c8:	f000 fa52 	bl	800a970 <__ieee754_rem_pio2>
 800a4cc:	f000 0003 	and.w	r0, r0, #3
 800a4d0:	2801      	cmp	r0, #1
 800a4d2:	d009      	beq.n	800a4e8 <sin+0x50>
 800a4d4:	2802      	cmp	r0, #2
 800a4d6:	d00e      	beq.n	800a4f6 <sin+0x5e>
 800a4d8:	b9c0      	cbnz	r0, 800a50c <sin+0x74>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e6:	e7e4      	b.n	800a4b2 <sin+0x1a>
 800a4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f0:	f000 f8c6 	bl	800a680 <__kernel_cos>
 800a4f4:	e7e5      	b.n	800a4c2 <sin+0x2a>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a502:	f000 f97d 	bl	800a800 <__kernel_sin>
 800a506:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800a50a:	e7da      	b.n	800a4c2 <sin+0x2a>
 800a50c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a514:	f000 f8b4 	bl	800a680 <__kernel_cos>
 800a518:	e7f5      	b.n	800a506 <sin+0x6e>
 800a51a:	bf00      	nop
 800a51c:	3fe921fb 	.word	0x3fe921fb
 800a520:	7fefffff 	.word	0x7fefffff

0800a524 <atan2f>:
 800a524:	f000 bc1a 	b.w	800ad5c <__ieee754_atan2f>

0800a528 <sqrtf>:
 800a528:	b508      	push	{r3, lr}
 800a52a:	ed2d 8b02 	vpush	{d8}
 800a52e:	ee08 0a10 	vmov	s16, r0
 800a532:	f000 f81b 	bl	800a56c <__ieee754_sqrtf>
 800a536:	eeb4 8a48 	vcmp.f32	s16, s16
 800a53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53e:	ee07 0a90 	vmov	s15, r0
 800a542:	d60c      	bvs.n	800a55e <sqrtf+0x36>
 800a544:	eddf 8a08 	vldr	s17, [pc, #32]	@ 800a568 <sqrtf+0x40>
 800a548:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a550:	d505      	bpl.n	800a55e <sqrtf+0x36>
 800a552:	f7ff fadf 	bl	8009b14 <__errno>
 800a556:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800a55a:	2321      	movs	r3, #33	@ 0x21
 800a55c:	6003      	str	r3, [r0, #0]
 800a55e:	ecbd 8b02 	vpop	{d8}
 800a562:	ee17 0a90 	vmov	r0, s15
 800a566:	bd08      	pop	{r3, pc}
 800a568:	00000000 	.word	0x00000000

0800a56c <__ieee754_sqrtf>:
 800a56c:	ee07 0a90 	vmov	s15, r0
 800a570:	eef1 7ae7 	vsqrt.f32	s15, s15
 800a574:	ee17 0a90 	vmov	r0, s15
 800a578:	4770      	bx	lr
 800a57a:	0000      	movs	r0, r0
 800a57c:	0000      	movs	r0, r0
	...

0800a580 <floor>:
 800a580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a584:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a588:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a58c:	2e13      	cmp	r6, #19
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	460c      	mov	r4, r1
 800a594:	4605      	mov	r5, r0
 800a596:	4680      	mov	r8, r0
 800a598:	dc35      	bgt.n	800a606 <floor+0x86>
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	da17      	bge.n	800a5ce <floor+0x4e>
 800a59e:	a334      	add	r3, pc, #208	@ (adr r3, 800a670 <floor+0xf0>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f7f5 fed2 	bl	800034c <__adddf3>
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f7f6 fb14 	bl	8000bd8 <__aeabi_dcmpgt>
 800a5b0:	b150      	cbz	r0, 800a5c8 <floor+0x48>
 800a5b2:	2c00      	cmp	r4, #0
 800a5b4:	da57      	bge.n	800a666 <floor+0xe6>
 800a5b6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a5ba:	432c      	orrs	r4, r5
 800a5bc:	2500      	movs	r5, #0
 800a5be:	42ac      	cmp	r4, r5
 800a5c0:	4c2d      	ldr	r4, [pc, #180]	@ (800a678 <floor+0xf8>)
 800a5c2:	bf08      	it	eq
 800a5c4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	e024      	b.n	800a618 <floor+0x98>
 800a5ce:	4f2b      	ldr	r7, [pc, #172]	@ (800a67c <floor+0xfc>)
 800a5d0:	4137      	asrs	r7, r6
 800a5d2:	ea01 0c07 	and.w	ip, r1, r7
 800a5d6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a5da:	d01d      	beq.n	800a618 <floor+0x98>
 800a5dc:	a324      	add	r3, pc, #144	@ (adr r3, 800a670 <floor+0xf0>)
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f7f5 feb3 	bl	800034c <__adddf3>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f7f6 faf5 	bl	8000bd8 <__aeabi_dcmpgt>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0ea      	beq.n	800a5c8 <floor+0x48>
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	bfbe      	ittt	lt
 800a5f6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a5fa:	4133      	asrlt	r3, r6
 800a5fc:	18e4      	addlt	r4, r4, r3
 800a5fe:	ea24 0407 	bic.w	r4, r4, r7
 800a602:	2500      	movs	r5, #0
 800a604:	e7e0      	b.n	800a5c8 <floor+0x48>
 800a606:	2e33      	cmp	r6, #51	@ 0x33
 800a608:	dd0a      	ble.n	800a620 <floor+0xa0>
 800a60a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a60e:	d103      	bne.n	800a618 <floor+0x98>
 800a610:	f7f5 fe9c 	bl	800034c <__adddf3>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4610      	mov	r0, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a620:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a624:	f04f 3cff 	mov.w	ip, #4294967295
 800a628:	fa2c f707 	lsr.w	r7, ip, r7
 800a62c:	4207      	tst	r7, r0
 800a62e:	d0f3      	beq.n	800a618 <floor+0x98>
 800a630:	a30f      	add	r3, pc, #60	@ (adr r3, 800a670 <floor+0xf0>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f7f5 fe89 	bl	800034c <__adddf3>
 800a63a:	2200      	movs	r2, #0
 800a63c:	2300      	movs	r3, #0
 800a63e:	f7f6 facb 	bl	8000bd8 <__aeabi_dcmpgt>
 800a642:	2800      	cmp	r0, #0
 800a644:	d0c0      	beq.n	800a5c8 <floor+0x48>
 800a646:	2c00      	cmp	r4, #0
 800a648:	da0a      	bge.n	800a660 <floor+0xe0>
 800a64a:	2e14      	cmp	r6, #20
 800a64c:	d101      	bne.n	800a652 <floor+0xd2>
 800a64e:	3401      	adds	r4, #1
 800a650:	e006      	b.n	800a660 <floor+0xe0>
 800a652:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a656:	2301      	movs	r3, #1
 800a658:	40b3      	lsls	r3, r6
 800a65a:	441d      	add	r5, r3
 800a65c:	4545      	cmp	r5, r8
 800a65e:	d3f6      	bcc.n	800a64e <floor+0xce>
 800a660:	ea25 0507 	bic.w	r5, r5, r7
 800a664:	e7b0      	b.n	800a5c8 <floor+0x48>
 800a666:	2500      	movs	r5, #0
 800a668:	462c      	mov	r4, r5
 800a66a:	e7ad      	b.n	800a5c8 <floor+0x48>
 800a66c:	f3af 8000 	nop.w
 800a670:	8800759c 	.word	0x8800759c
 800a674:	7e37e43c 	.word	0x7e37e43c
 800a678:	bff00000 	.word	0xbff00000
 800a67c:	000fffff 	.word	0x000fffff

0800a680 <__kernel_cos>:
 800a680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a688:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a68c:	e9cd 2300 	strd	r2, r3, [sp]
 800a690:	4680      	mov	r8, r0
 800a692:	4689      	mov	r9, r1
 800a694:	d204      	bcs.n	800a6a0 <__kernel_cos+0x20>
 800a696:	f7f6 faa9 	bl	8000bec <__aeabi_d2iz>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	f000 8086 	beq.w	800a7ac <__kernel_cos+0x12c>
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f6 f806 	bl	80006b8 <__aeabi_dmul>
 800a6ac:	4b4e      	ldr	r3, [pc, #312]	@ (800a7e8 <__kernel_cos+0x168>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	f7f6 f800 	bl	80006b8 <__aeabi_dmul>
 800a6b8:	a33f      	add	r3, pc, #252	@ (adr r3, 800a7b8 <__kernel_cos+0x138>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	4682      	mov	sl, r0
 800a6c0:	468b      	mov	fp, r1
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7f5 fff7 	bl	80006b8 <__aeabi_dmul>
 800a6ca:	a33d      	add	r3, pc, #244	@ (adr r3, 800a7c0 <__kernel_cos+0x140>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fe3c 	bl	800034c <__adddf3>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	f7f5 ffee 	bl	80006b8 <__aeabi_dmul>
 800a6dc:	a33a      	add	r3, pc, #232	@ (adr r3, 800a7c8 <__kernel_cos+0x148>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fe31 	bl	8000348 <__aeabi_dsub>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	f7f5 ffe5 	bl	80006b8 <__aeabi_dmul>
 800a6ee:	a338      	add	r3, pc, #224	@ (adr r3, 800a7d0 <__kernel_cos+0x150>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 fe2a 	bl	800034c <__adddf3>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 ffdc 	bl	80006b8 <__aeabi_dmul>
 800a700:	a335      	add	r3, pc, #212	@ (adr r3, 800a7d8 <__kernel_cos+0x158>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fe1f 	bl	8000348 <__aeabi_dsub>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 ffd3 	bl	80006b8 <__aeabi_dmul>
 800a712:	a333      	add	r3, pc, #204	@ (adr r3, 800a7e0 <__kernel_cos+0x160>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f7f5 fe18 	bl	800034c <__adddf3>
 800a71c:	4622      	mov	r2, r4
 800a71e:	462b      	mov	r3, r5
 800a720:	f7f5 ffca 	bl	80006b8 <__aeabi_dmul>
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	f7f5 ffc6 	bl	80006b8 <__aeabi_dmul>
 800a72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	4640      	mov	r0, r8
 800a736:	4649      	mov	r1, r9
 800a738:	f7f5 ffbe 	bl	80006b8 <__aeabi_dmul>
 800a73c:	460b      	mov	r3, r1
 800a73e:	4602      	mov	r2, r0
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f7f5 fe00 	bl	8000348 <__aeabi_dsub>
 800a748:	4b28      	ldr	r3, [pc, #160]	@ (800a7ec <__kernel_cos+0x16c>)
 800a74a:	429e      	cmp	r6, r3
 800a74c:	4680      	mov	r8, r0
 800a74e:	4689      	mov	r9, r1
 800a750:	d80e      	bhi.n	800a770 <__kernel_cos+0xf0>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4650      	mov	r0, sl
 800a758:	4659      	mov	r1, fp
 800a75a:	f7f5 fdf5 	bl	8000348 <__aeabi_dsub>
 800a75e:	460b      	mov	r3, r1
 800a760:	4923      	ldr	r1, [pc, #140]	@ (800a7f0 <__kernel_cos+0x170>)
 800a762:	4602      	mov	r2, r0
 800a764:	2000      	movs	r0, #0
 800a766:	f7f5 fdef 	bl	8000348 <__aeabi_dsub>
 800a76a:	b003      	add	sp, #12
 800a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a770:	4b20      	ldr	r3, [pc, #128]	@ (800a7f4 <__kernel_cos+0x174>)
 800a772:	491f      	ldr	r1, [pc, #124]	@ (800a7f0 <__kernel_cos+0x170>)
 800a774:	429e      	cmp	r6, r3
 800a776:	bf8c      	ite	hi
 800a778:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a7f8 <__kernel_cos+0x178>)
 800a77a:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a77e:	2400      	movs	r4, #0
 800a780:	4622      	mov	r2, r4
 800a782:	462b      	mov	r3, r5
 800a784:	2000      	movs	r0, #0
 800a786:	f7f5 fddf 	bl	8000348 <__aeabi_dsub>
 800a78a:	4622      	mov	r2, r4
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	462b      	mov	r3, r5
 800a792:	4650      	mov	r0, sl
 800a794:	4659      	mov	r1, fp
 800a796:	f7f5 fdd7 	bl	8000348 <__aeabi_dsub>
 800a79a:	4642      	mov	r2, r8
 800a79c:	464b      	mov	r3, r9
 800a79e:	f7f5 fdd3 	bl	8000348 <__aeabi_dsub>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	e7dc      	b.n	800a766 <__kernel_cos+0xe6>
 800a7ac:	4910      	ldr	r1, [pc, #64]	@ (800a7f0 <__kernel_cos+0x170>)
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e7db      	b.n	800a76a <__kernel_cos+0xea>
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	be8838d4 	.word	0xbe8838d4
 800a7bc:	bda8fae9 	.word	0xbda8fae9
 800a7c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7c4:	3e21ee9e 	.word	0x3e21ee9e
 800a7c8:	809c52ad 	.word	0x809c52ad
 800a7cc:	3e927e4f 	.word	0x3e927e4f
 800a7d0:	19cb1590 	.word	0x19cb1590
 800a7d4:	3efa01a0 	.word	0x3efa01a0
 800a7d8:	16c15177 	.word	0x16c15177
 800a7dc:	3f56c16c 	.word	0x3f56c16c
 800a7e0:	5555554c 	.word	0x5555554c
 800a7e4:	3fa55555 	.word	0x3fa55555
 800a7e8:	3fe00000 	.word	0x3fe00000
 800a7ec:	3fd33332 	.word	0x3fd33332
 800a7f0:	3ff00000 	.word	0x3ff00000
 800a7f4:	3fe90000 	.word	0x3fe90000
 800a7f8:	3fd20000 	.word	0x3fd20000
 800a7fc:	00000000 	.word	0x00000000

0800a800 <__kernel_sin>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	461f      	mov	r7, r3
 800a806:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a80a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a80e:	b085      	sub	sp, #20
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	4616      	mov	r6, r2
 800a816:	d203      	bcs.n	800a820 <__kernel_sin+0x20>
 800a818:	f7f6 f9e8 	bl	8000bec <__aeabi_d2iz>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d051      	beq.n	800a8c4 <__kernel_sin+0xc4>
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 ff46 	bl	80006b8 <__aeabi_dmul>
 800a82c:	4682      	mov	sl, r0
 800a82e:	468b      	mov	fp, r1
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 ff3e 	bl	80006b8 <__aeabi_dmul>
 800a83c:	a341      	add	r3, pc, #260	@ (adr r3, 800a944 <__kernel_sin+0x144>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	4680      	mov	r8, r0
 800a844:	4689      	mov	r9, r1
 800a846:	4650      	mov	r0, sl
 800a848:	4659      	mov	r1, fp
 800a84a:	f7f5 ff35 	bl	80006b8 <__aeabi_dmul>
 800a84e:	a33f      	add	r3, pc, #252	@ (adr r3, 800a94c <__kernel_sin+0x14c>)
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f7f5 fd78 	bl	8000348 <__aeabi_dsub>
 800a858:	4652      	mov	r2, sl
 800a85a:	465b      	mov	r3, fp
 800a85c:	f7f5 ff2c 	bl	80006b8 <__aeabi_dmul>
 800a860:	a33c      	add	r3, pc, #240	@ (adr r3, 800a954 <__kernel_sin+0x154>)
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	f7f5 fd71 	bl	800034c <__adddf3>
 800a86a:	4652      	mov	r2, sl
 800a86c:	465b      	mov	r3, fp
 800a86e:	f7f5 ff23 	bl	80006b8 <__aeabi_dmul>
 800a872:	a33a      	add	r3, pc, #232	@ (adr r3, 800a95c <__kernel_sin+0x15c>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	f7f5 fd66 	bl	8000348 <__aeabi_dsub>
 800a87c:	4652      	mov	r2, sl
 800a87e:	465b      	mov	r3, fp
 800a880:	f7f5 ff1a 	bl	80006b8 <__aeabi_dmul>
 800a884:	a337      	add	r3, pc, #220	@ (adr r3, 800a964 <__kernel_sin+0x164>)
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fd5f 	bl	800034c <__adddf3>
 800a88e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a890:	e9cd 0100 	strd	r0, r1, [sp]
 800a894:	b9db      	cbnz	r3, 800a8ce <__kernel_sin+0xce>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4650      	mov	r0, sl
 800a89c:	4659      	mov	r1, fp
 800a89e:	f7f5 ff0b 	bl	80006b8 <__aeabi_dmul>
 800a8a2:	a325      	add	r3, pc, #148	@ (adr r3, 800a938 <__kernel_sin+0x138>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	f7f5 fd4e 	bl	8000348 <__aeabi_dsub>
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	f7f5 ff02 	bl	80006b8 <__aeabi_dmul>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	f7f5 fd46 	bl	800034c <__adddf3>
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	460d      	mov	r5, r1
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	b005      	add	sp, #20
 800a8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a940 <__kernel_sin+0x140>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4639      	mov	r1, r7
 800a8d6:	f7f5 feef 	bl	80006b8 <__aeabi_dmul>
 800a8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fee7 	bl	80006b8 <__aeabi_dmul>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f2:	f7f5 fd29 	bl	8000348 <__aeabi_dsub>
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	465b      	mov	r3, fp
 800a8fa:	f7f5 fedd 	bl	80006b8 <__aeabi_dmul>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	f7f5 fd21 	bl	8000348 <__aeabi_dsub>
 800a906:	a30c      	add	r3, pc, #48	@ (adr r3, 800a938 <__kernel_sin+0x138>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	f7f5 fed0 	bl	80006b8 <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4630      	mov	r0, r6
 800a91e:	4639      	mov	r1, r7
 800a920:	f7f5 fd14 	bl	800034c <__adddf3>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4620      	mov	r0, r4
 800a92a:	4629      	mov	r1, r5
 800a92c:	f7f5 fd0c 	bl	8000348 <__aeabi_dsub>
 800a930:	e7c6      	b.n	800a8c0 <__kernel_sin+0xc0>
 800a932:	bf00      	nop
 800a934:	f3af 8000 	nop.w
 800a938:	55555549 	.word	0x55555549
 800a93c:	3fc55555 	.word	0x3fc55555
 800a940:	3fe00000 	.word	0x3fe00000
 800a944:	5acfd57c 	.word	0x5acfd57c
 800a948:	3de5d93a 	.word	0x3de5d93a
 800a94c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a950:	3e5ae5e6 	.word	0x3e5ae5e6
 800a954:	57b1fe7d 	.word	0x57b1fe7d
 800a958:	3ec71de3 	.word	0x3ec71de3
 800a95c:	19c161d5 	.word	0x19c161d5
 800a960:	3f2a01a0 	.word	0x3f2a01a0
 800a964:	1110f8a6 	.word	0x1110f8a6
 800a968:	3f811111 	.word	0x3f811111
 800a96c:	00000000 	.word	0x00000000

0800a970 <__ieee754_rem_pio2>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	4bc4      	ldr	r3, [pc, #784]	@ (800ac88 <__ieee754_rem_pio2+0x318>)
 800a976:	b08d      	sub	sp, #52	@ 0x34
 800a978:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a97c:	4598      	cmp	r8, r3
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	4614      	mov	r4, r2
 800a984:	9104      	str	r1, [sp, #16]
 800a986:	d807      	bhi.n	800a998 <__ieee754_rem_pio2+0x28>
 800a988:	e9c2 6700 	strd	r6, r7, [r2]
 800a98c:	2300      	movs	r3, #0
 800a98e:	2200      	movs	r2, #0
 800a990:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a994:	2500      	movs	r5, #0
 800a996:	e026      	b.n	800a9e6 <__ieee754_rem_pio2+0x76>
 800a998:	4bbc      	ldr	r3, [pc, #752]	@ (800ac8c <__ieee754_rem_pio2+0x31c>)
 800a99a:	4598      	cmp	r8, r3
 800a99c:	d876      	bhi.n	800aa8c <__ieee754_rem_pio2+0x11c>
 800a99e:	9b04      	ldr	r3, [sp, #16]
 800a9a0:	4dbb      	ldr	r5, [pc, #748]	@ (800ac90 <__ieee754_rem_pio2+0x320>)
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	a3aa      	add	r3, pc, #680	@ (adr r3, 800ac50 <__ieee754_rem_pio2+0x2e0>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	dd38      	ble.n	800aa1e <__ieee754_rem_pio2+0xae>
 800a9ac:	f7f5 fccc 	bl	8000348 <__aeabi_dsub>
 800a9b0:	45a8      	cmp	r8, r5
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	d01a      	beq.n	800a9ee <__ieee754_rem_pio2+0x7e>
 800a9b8:	a3a7      	add	r3, pc, #668	@ (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e8>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fcc3 	bl	8000348 <__aeabi_dsub>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4689      	mov	r9, r1
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	f7f5 fcbb 	bl	8000348 <__aeabi_dsub>
 800a9d2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e8>)
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	f7f5 fcb6 	bl	8000348 <__aeabi_dsub>
 800a9dc:	e9c4 8900 	strd	r8, r9, [r4]
 800a9e0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9e4:	2501      	movs	r5, #1
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	b00d      	add	sp, #52	@ 0x34
 800a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ee:	a39c      	add	r3, pc, #624	@ (adr r3, 800ac60 <__ieee754_rem_pio2+0x2f0>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fca8 	bl	8000348 <__aeabi_dsub>
 800a9f8:	a39b      	add	r3, pc, #620	@ (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	f7f5 fca1 	bl	8000348 <__aeabi_dsub>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4689      	mov	r9, r1
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7f5 fc99 	bl	8000348 <__aeabi_dsub>
 800aa16:	a394      	add	r3, pc, #592	@ (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f8>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	e7dc      	b.n	800a9d8 <__ieee754_rem_pio2+0x68>
 800aa1e:	f7f5 fc95 	bl	800034c <__adddf3>
 800aa22:	45a8      	cmp	r8, r5
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	d018      	beq.n	800aa5c <__ieee754_rem_pio2+0xec>
 800aa2a:	a38b      	add	r3, pc, #556	@ (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e8>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fc8c 	bl	800034c <__adddf3>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4680      	mov	r8, r0
 800aa3a:	4689      	mov	r9, r1
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4639      	mov	r1, r7
 800aa40:	f7f5 fc82 	bl	8000348 <__aeabi_dsub>
 800aa44:	a384      	add	r3, pc, #528	@ (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e8>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fc7f 	bl	800034c <__adddf3>
 800aa4e:	f04f 35ff 	mov.w	r5, #4294967295
 800aa52:	e9c4 8900 	strd	r8, r9, [r4]
 800aa56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa5a:	e7c4      	b.n	800a9e6 <__ieee754_rem_pio2+0x76>
 800aa5c:	a380      	add	r3, pc, #512	@ (adr r3, 800ac60 <__ieee754_rem_pio2+0x2f0>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	f7f5 fc73 	bl	800034c <__adddf3>
 800aa66:	a380      	add	r3, pc, #512	@ (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f8>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	460f      	mov	r7, r1
 800aa70:	f7f5 fc6c 	bl	800034c <__adddf3>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4689      	mov	r9, r1
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f5 fc62 	bl	8000348 <__aeabi_dsub>
 800aa84:	a378      	add	r3, pc, #480	@ (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f8>)
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	e7de      	b.n	800aa4a <__ieee754_rem_pio2+0xda>
 800aa8c:	4b81      	ldr	r3, [pc, #516]	@ (800ac94 <__ieee754_rem_pio2+0x324>)
 800aa8e:	4598      	cmp	r8, r3
 800aa90:	f200 80cf 	bhi.w	800ac32 <__ieee754_rem_pio2+0x2c2>
 800aa94:	f7ff fcfc 	bl	800a490 <fabs>
 800aa98:	a375      	add	r3, pc, #468	@ (adr r3, 800ac70 <__ieee754_rem_pio2+0x300>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	f7f5 fe09 	bl	80006b8 <__aeabi_dmul>
 800aaa6:	4b7c      	ldr	r3, [pc, #496]	@ (800ac98 <__ieee754_rem_pio2+0x328>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f7f5 fc4f 	bl	800034c <__adddf3>
 800aaae:	f7f6 f89d 	bl	8000bec <__aeabi_d2iz>
 800aab2:	4605      	mov	r5, r0
 800aab4:	f7f5 fd96 	bl	80005e4 <__aeabi_i2d>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aac0:	a363      	add	r3, pc, #396	@ (adr r3, 800ac50 <__ieee754_rem_pio2+0x2e0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	f7f5 fdf7 	bl	80006b8 <__aeabi_dmul>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	f7f5 fc39 	bl	8000348 <__aeabi_dsub>
 800aad6:	a360      	add	r3, pc, #384	@ (adr r3, 800ac58 <__ieee754_rem_pio2+0x2e8>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	4682      	mov	sl, r0
 800aade:	468b      	mov	fp, r1
 800aae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae4:	f7f5 fde8 	bl	80006b8 <__aeabi_dmul>
 800aae8:	2d1f      	cmp	r5, #31
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	dc0c      	bgt.n	800ab0a <__ieee754_rem_pio2+0x19a>
 800aaf0:	4b6a      	ldr	r3, [pc, #424]	@ (800ac9c <__ieee754_rem_pio2+0x32c>)
 800aaf2:	1e6a      	subs	r2, r5, #1
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	4543      	cmp	r3, r8
 800aafa:	d006      	beq.n	800ab0a <__ieee754_rem_pio2+0x19a>
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	4650      	mov	r0, sl
 800ab02:	4659      	mov	r1, fp
 800ab04:	f7f5 fc20 	bl	8000348 <__aeabi_dsub>
 800ab08:	e00e      	b.n	800ab28 <__ieee754_rem_pio2+0x1b8>
 800ab0a:	463b      	mov	r3, r7
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	f7f5 fc19 	bl	8000348 <__aeabi_dsub>
 800ab16:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab20:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ab24:	2b10      	cmp	r3, #16
 800ab26:	dc02      	bgt.n	800ab2e <__ieee754_rem_pio2+0x1be>
 800ab28:	e9c4 0100 	strd	r0, r1, [r4]
 800ab2c:	e039      	b.n	800aba2 <__ieee754_rem_pio2+0x232>
 800ab2e:	a34c      	add	r3, pc, #304	@ (adr r3, 800ac60 <__ieee754_rem_pio2+0x2f0>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab38:	f7f5 fdbe 	bl	80006b8 <__aeabi_dmul>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	4602      	mov	r2, r0
 800ab42:	460b      	mov	r3, r1
 800ab44:	4650      	mov	r0, sl
 800ab46:	4659      	mov	r1, fp
 800ab48:	f7f5 fbfe 	bl	8000348 <__aeabi_dsub>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4680      	mov	r8, r0
 800ab52:	4689      	mov	r9, r1
 800ab54:	4650      	mov	r0, sl
 800ab56:	4659      	mov	r1, fp
 800ab58:	f7f5 fbf6 	bl	8000348 <__aeabi_dsub>
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	463b      	mov	r3, r7
 800ab60:	f7f5 fbf2 	bl	8000348 <__aeabi_dsub>
 800ab64:	a340      	add	r3, pc, #256	@ (adr r3, 800ac68 <__ieee754_rem_pio2+0x2f8>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460f      	mov	r7, r1
 800ab6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab72:	f7f5 fda1 	bl	80006b8 <__aeabi_dmul>
 800ab76:	4632      	mov	r2, r6
 800ab78:	463b      	mov	r3, r7
 800ab7a:	f7f5 fbe5 	bl	8000348 <__aeabi_dsub>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4606      	mov	r6, r0
 800ab84:	460f      	mov	r7, r1
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 fbdd 	bl	8000348 <__aeabi_dsub>
 800ab8e:	9a05      	ldr	r2, [sp, #20]
 800ab90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	2b31      	cmp	r3, #49	@ 0x31
 800ab98:	dc20      	bgt.n	800abdc <__ieee754_rem_pio2+0x26c>
 800ab9a:	e9c4 0100 	strd	r0, r1, [r4]
 800ab9e:	46c2      	mov	sl, r8
 800aba0:	46cb      	mov	fp, r9
 800aba2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aba6:	4650      	mov	r0, sl
 800aba8:	4642      	mov	r2, r8
 800abaa:	464b      	mov	r3, r9
 800abac:	4659      	mov	r1, fp
 800abae:	f7f5 fbcb 	bl	8000348 <__aeabi_dsub>
 800abb2:	463b      	mov	r3, r7
 800abb4:	4632      	mov	r2, r6
 800abb6:	f7f5 fbc7 	bl	8000348 <__aeabi_dsub>
 800abba:	9b04      	ldr	r3, [sp, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abc2:	f6bf af10 	bge.w	800a9e6 <__ieee754_rem_pio2+0x76>
 800abc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800abca:	6063      	str	r3, [r4, #4]
 800abcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abd0:	f8c4 8000 	str.w	r8, [r4]
 800abd4:	60a0      	str	r0, [r4, #8]
 800abd6:	60e3      	str	r3, [r4, #12]
 800abd8:	426d      	negs	r5, r5
 800abda:	e704      	b.n	800a9e6 <__ieee754_rem_pio2+0x76>
 800abdc:	a326      	add	r3, pc, #152	@ (adr r3, 800ac78 <__ieee754_rem_pio2+0x308>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abe6:	f7f5 fd67 	bl	80006b8 <__aeabi_dmul>
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fba7 	bl	8000348 <__aeabi_dsub>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	4682      	mov	sl, r0
 800ac00:	468b      	mov	fp, r1
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	f7f5 fb9f 	bl	8000348 <__aeabi_dsub>
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	f7f5 fb9b 	bl	8000348 <__aeabi_dsub>
 800ac12:	a31b      	add	r3, pc, #108	@ (adr r3, 800ac80 <__ieee754_rem_pio2+0x310>)
 800ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac18:	4606      	mov	r6, r0
 800ac1a:	460f      	mov	r7, r1
 800ac1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac20:	f7f5 fd4a 	bl	80006b8 <__aeabi_dmul>
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	f7f5 fb8e 	bl	8000348 <__aeabi_dsub>
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	e764      	b.n	800aafc <__ieee754_rem_pio2+0x18c>
 800ac32:	4b1b      	ldr	r3, [pc, #108]	@ (800aca0 <__ieee754_rem_pio2+0x330>)
 800ac34:	4598      	cmp	r8, r3
 800ac36:	d935      	bls.n	800aca4 <__ieee754_rem_pio2+0x334>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	f7f5 fb84 	bl	8000348 <__aeabi_dsub>
 800ac40:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac44:	e9c4 0100 	strd	r0, r1, [r4]
 800ac48:	e6a4      	b.n	800a994 <__ieee754_rem_pio2+0x24>
 800ac4a:	bf00      	nop
 800ac4c:	f3af 8000 	nop.w
 800ac50:	54400000 	.word	0x54400000
 800ac54:	3ff921fb 	.word	0x3ff921fb
 800ac58:	1a626331 	.word	0x1a626331
 800ac5c:	3dd0b461 	.word	0x3dd0b461
 800ac60:	1a600000 	.word	0x1a600000
 800ac64:	3dd0b461 	.word	0x3dd0b461
 800ac68:	2e037073 	.word	0x2e037073
 800ac6c:	3ba3198a 	.word	0x3ba3198a
 800ac70:	6dc9c883 	.word	0x6dc9c883
 800ac74:	3fe45f30 	.word	0x3fe45f30
 800ac78:	2e000000 	.word	0x2e000000
 800ac7c:	3ba3198a 	.word	0x3ba3198a
 800ac80:	252049c1 	.word	0x252049c1
 800ac84:	397b839a 	.word	0x397b839a
 800ac88:	3fe921fb 	.word	0x3fe921fb
 800ac8c:	4002d97b 	.word	0x4002d97b
 800ac90:	3ff921fb 	.word	0x3ff921fb
 800ac94:	413921fb 	.word	0x413921fb
 800ac98:	3fe00000 	.word	0x3fe00000
 800ac9c:	0801ed5c 	.word	0x0801ed5c
 800aca0:	7fefffff 	.word	0x7fefffff
 800aca4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aca8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800acac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800acb0:	460f      	mov	r7, r1
 800acb2:	f7f5 ff9b 	bl	8000bec <__aeabi_d2iz>
 800acb6:	f7f5 fc95 	bl	80005e4 <__aeabi_i2d>
 800acba:	4602      	mov	r2, r0
 800acbc:	460b      	mov	r3, r1
 800acbe:	4630      	mov	r0, r6
 800acc0:	4639      	mov	r1, r7
 800acc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800acc6:	f7f5 fb3f 	bl	8000348 <__aeabi_dsub>
 800acca:	4b22      	ldr	r3, [pc, #136]	@ (800ad54 <__ieee754_rem_pio2+0x3e4>)
 800accc:	2200      	movs	r2, #0
 800acce:	f7f5 fcf3 	bl	80006b8 <__aeabi_dmul>
 800acd2:	460f      	mov	r7, r1
 800acd4:	4606      	mov	r6, r0
 800acd6:	f7f5 ff89 	bl	8000bec <__aeabi_d2iz>
 800acda:	f7f5 fc83 	bl	80005e4 <__aeabi_i2d>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4630      	mov	r0, r6
 800ace4:	4639      	mov	r1, r7
 800ace6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acea:	f7f5 fb2d 	bl	8000348 <__aeabi_dsub>
 800acee:	4b19      	ldr	r3, [pc, #100]	@ (800ad54 <__ieee754_rem_pio2+0x3e4>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	f7f5 fce1 	bl	80006b8 <__aeabi_dmul>
 800acf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800acfa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800acfe:	f04f 0803 	mov.w	r8, #3
 800ad02:	2600      	movs	r6, #0
 800ad04:	2700      	movs	r7, #0
 800ad06:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad0a:	4632      	mov	r2, r6
 800ad0c:	463b      	mov	r3, r7
 800ad0e:	46c2      	mov	sl, r8
 800ad10:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad14:	f7f5 ff38 	bl	8000b88 <__aeabi_dcmpeq>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1f4      	bne.n	800ad06 <__ieee754_rem_pio2+0x396>
 800ad1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ad58 <__ieee754_rem_pio2+0x3e8>)
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	2302      	movs	r3, #2
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	462a      	mov	r2, r5
 800ad26:	4653      	mov	r3, sl
 800ad28:	4621      	mov	r1, r4
 800ad2a:	a806      	add	r0, sp, #24
 800ad2c:	f000 fa10 	bl	800b150 <__kernel_rem_pio2>
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	4605      	mov	r5, r0
 800ad36:	f6bf ae56 	bge.w	800a9e6 <__ieee754_rem_pio2+0x76>
 800ad3a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ad3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad42:	e9c4 2300 	strd	r2, r3, [r4]
 800ad46:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ad4a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad4e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ad52:	e741      	b.n	800abd8 <__ieee754_rem_pio2+0x268>
 800ad54:	41700000 	.word	0x41700000
 800ad58:	0801eddc 	.word	0x0801eddc

0800ad5c <__ieee754_atan2f>:
 800ad5c:	ee07 1a10 	vmov	s14, r1
 800ad60:	460a      	mov	r2, r1
 800ad62:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800ad66:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ad6a:	b538      	push	{r3, r4, r5, lr}
 800ad6c:	ee07 0a90 	vmov	s15, r0
 800ad70:	d805      	bhi.n	800ad7e <__ieee754_atan2f+0x22>
 800ad72:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ad76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	d904      	bls.n	800ad88 <__ieee754_atan2f+0x2c>
 800ad7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad82:	ee17 0a90 	vmov	r0, s15
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ad8c:	d103      	bne.n	800ad96 <__ieee754_atan2f+0x3a>
 800ad8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad92:	f000 b885 	b.w	800aea0 <atanf>
 800ad96:	1794      	asrs	r4, r2, #30
 800ad98:	f004 0402 	and.w	r4, r4, #2
 800ad9c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ada0:	b943      	cbnz	r3, 800adb4 <__ieee754_atan2f+0x58>
 800ada2:	2c02      	cmp	r4, #2
 800ada4:	d060      	beq.n	800ae68 <__ieee754_atan2f+0x10c>
 800ada6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800ae7c <__ieee754_atan2f+0x120>
 800adaa:	2c03      	cmp	r4, #3
 800adac:	bf08      	it	eq
 800adae:	eef0 7a47 	vmoveq.f32	s15, s14
 800adb2:	e7e6      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800adb4:	b941      	cbnz	r1, 800adc8 <__ieee754_atan2f+0x6c>
 800adb6:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800ae80 <__ieee754_atan2f+0x124>
 800adba:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ae84 <__ieee754_atan2f+0x128>
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	bfb8      	it	lt
 800adc2:	eef0 7a47 	vmovlt.f32	s15, s14
 800adc6:	e7dc      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800adc8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800adcc:	d110      	bne.n	800adf0 <__ieee754_atan2f+0x94>
 800adce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800add2:	f104 34ff 	add.w	r4, r4, #4294967295
 800add6:	d107      	bne.n	800ade8 <__ieee754_atan2f+0x8c>
 800add8:	2c02      	cmp	r4, #2
 800adda:	d848      	bhi.n	800ae6e <__ieee754_atan2f+0x112>
 800addc:	4b2a      	ldr	r3, [pc, #168]	@ (800ae88 <__ieee754_atan2f+0x12c>)
 800adde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ade2:	edd3 7a00 	vldr	s15, [r3]
 800ade6:	e7cc      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ade8:	2c02      	cmp	r4, #2
 800adea:	d843      	bhi.n	800ae74 <__ieee754_atan2f+0x118>
 800adec:	4b27      	ldr	r3, [pc, #156]	@ (800ae8c <__ieee754_atan2f+0x130>)
 800adee:	e7f6      	b.n	800adde <__ieee754_atan2f+0x82>
 800adf0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800adf4:	d0df      	beq.n	800adb6 <__ieee754_atan2f+0x5a>
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800adfc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ae00:	da1c      	bge.n	800ae3c <__ieee754_atan2f+0xe0>
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	da01      	bge.n	800ae0a <__ieee754_atan2f+0xae>
 800ae06:	313c      	adds	r1, #60	@ 0x3c
 800ae08:	db1b      	blt.n	800ae42 <__ieee754_atan2f+0xe6>
 800ae0a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800ae0e:	ee17 0a90 	vmov	r0, s15
 800ae12:	f000 f91b 	bl	800b04c <fabsf>
 800ae16:	f000 f843 	bl	800aea0 <atanf>
 800ae1a:	ee07 0a90 	vmov	s15, r0
 800ae1e:	2c01      	cmp	r4, #1
 800ae20:	d012      	beq.n	800ae48 <__ieee754_atan2f+0xec>
 800ae22:	2c02      	cmp	r4, #2
 800ae24:	d017      	beq.n	800ae56 <__ieee754_atan2f+0xfa>
 800ae26:	2c00      	cmp	r4, #0
 800ae28:	d0ab      	beq.n	800ad82 <__ieee754_atan2f+0x26>
 800ae2a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ae90 <__ieee754_atan2f+0x134>
 800ae2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae32:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ae94 <__ieee754_atan2f+0x138>
 800ae36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ae3a:	e7a2      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae3c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ae80 <__ieee754_atan2f+0x124>
 800ae40:	e7ed      	b.n	800ae1e <__ieee754_atan2f+0xc2>
 800ae42:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ae98 <__ieee754_atan2f+0x13c>
 800ae46:	e7ea      	b.n	800ae1e <__ieee754_atan2f+0xc2>
 800ae48:	ee17 3a90 	vmov	r3, s15
 800ae4c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	e795      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae56:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ae90 <__ieee754_atan2f+0x134>
 800ae5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae5e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ae94 <__ieee754_atan2f+0x138>
 800ae62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae66:	e78c      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae68:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ae94 <__ieee754_atan2f+0x138>
 800ae6c:	e789      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae6e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ae9c <__ieee754_atan2f+0x140>
 800ae72:	e786      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae74:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ae98 <__ieee754_atan2f+0x13c>
 800ae78:	e783      	b.n	800ad82 <__ieee754_atan2f+0x26>
 800ae7a:	bf00      	nop
 800ae7c:	c0490fdb 	.word	0xc0490fdb
 800ae80:	3fc90fdb 	.word	0x3fc90fdb
 800ae84:	bfc90fdb 	.word	0xbfc90fdb
 800ae88:	0801eef0 	.word	0x0801eef0
 800ae8c:	0801eee4 	.word	0x0801eee4
 800ae90:	33bbbd2e 	.word	0x33bbbd2e
 800ae94:	40490fdb 	.word	0x40490fdb
 800ae98:	00000000 	.word	0x00000000
 800ae9c:	3f490fdb 	.word	0x3f490fdb

0800aea0 <atanf>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
 800aea6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800aeaa:	ee07 0a90 	vmov	s15, r0
 800aeae:	4605      	mov	r5, r0
 800aeb0:	d310      	bcc.n	800aed4 <atanf+0x34>
 800aeb2:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800aeb6:	d904      	bls.n	800aec2 <atanf+0x22>
 800aeb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aebc:	ee17 0a90 	vmov	r0, s15
 800aec0:	bd38      	pop	{r3, r4, r5, pc}
 800aec2:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800b000 <atanf+0x160>
 800aec6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800b004 <atanf+0x164>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	bfc8      	it	gt
 800aece:	eef0 7a47 	vmovgt.f32	s15, s14
 800aed2:	e7f3      	b.n	800aebc <atanf+0x1c>
 800aed4:	4b4c      	ldr	r3, [pc, #304]	@ (800b008 <atanf+0x168>)
 800aed6:	429c      	cmp	r4, r3
 800aed8:	d810      	bhi.n	800aefc <atanf+0x5c>
 800aeda:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800aede:	d20a      	bcs.n	800aef6 <atanf+0x56>
 800aee0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800b00c <atanf+0x16c>
 800aee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeec:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef4:	dce2      	bgt.n	800aebc <atanf+0x1c>
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	e015      	b.n	800af28 <atanf+0x88>
 800aefc:	f000 f8a6 	bl	800b04c <fabsf>
 800af00:	4b43      	ldr	r3, [pc, #268]	@ (800b010 <atanf+0x170>)
 800af02:	429c      	cmp	r4, r3
 800af04:	ee07 0a10 	vmov	s14, r0
 800af08:	d84f      	bhi.n	800afaa <atanf+0x10a>
 800af0a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800af0e:	429c      	cmp	r4, r3
 800af10:	d841      	bhi.n	800af96 <atanf+0xf6>
 800af12:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800af16:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800af1a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800af1e:	2300      	movs	r3, #0
 800af20:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af28:	1c5a      	adds	r2, r3, #1
 800af2a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800af2e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800b014 <atanf+0x174>
 800af32:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800b018 <atanf+0x178>
 800af36:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800b01c <atanf+0x17c>
 800af3a:	ee66 6a06 	vmul.f32	s13, s12, s12
 800af3e:	eee6 5a87 	vfma.f32	s11, s13, s14
 800af42:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800b020 <atanf+0x180>
 800af46:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800af4a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800b024 <atanf+0x184>
 800af4e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800af52:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800b028 <atanf+0x188>
 800af56:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800af5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b02c <atanf+0x18c>
 800af5e:	eee7 5a26 	vfma.f32	s11, s14, s13
 800af62:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800b030 <atanf+0x190>
 800af66:	eea6 5a87 	vfma.f32	s10, s13, s14
 800af6a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b034 <atanf+0x194>
 800af6e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800af72:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800b038 <atanf+0x198>
 800af76:	eea7 5a26 	vfma.f32	s10, s14, s13
 800af7a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b03c <atanf+0x19c>
 800af7e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800af82:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af86:	eea5 7a86 	vfma.f32	s14, s11, s12
 800af8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800af8e:	d121      	bne.n	800afd4 <atanf+0x134>
 800af90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af94:	e792      	b.n	800aebc <atanf+0x1c>
 800af96:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800af9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800af9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afa2:	2301      	movs	r3, #1
 800afa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa8:	e7be      	b.n	800af28 <atanf+0x88>
 800afaa:	4b25      	ldr	r3, [pc, #148]	@ (800b040 <atanf+0x1a0>)
 800afac:	429c      	cmp	r4, r3
 800afae:	d80b      	bhi.n	800afc8 <atanf+0x128>
 800afb0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800afb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afbc:	2302      	movs	r3, #2
 800afbe:	ee37 6a67 	vsub.f32	s12, s14, s15
 800afc2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800afc6:	e7af      	b.n	800af28 <atanf+0x88>
 800afc8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800afcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afd0:	2303      	movs	r3, #3
 800afd2:	e7a9      	b.n	800af28 <atanf+0x88>
 800afd4:	4a1b      	ldr	r2, [pc, #108]	@ (800b044 <atanf+0x1a4>)
 800afd6:	491c      	ldr	r1, [pc, #112]	@ (800b048 <atanf+0x1a8>)
 800afd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800afdc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800afe0:	edd3 6a00 	vldr	s13, [r3]
 800afe4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800afe8:	2d00      	cmp	r5, #0
 800afea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afee:	edd2 7a00 	vldr	s15, [r2]
 800aff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aff6:	bfb8      	it	lt
 800aff8:	eef1 7a67 	vneglt.f32	s15, s15
 800affc:	e75e      	b.n	800aebc <atanf+0x1c>
 800affe:	bf00      	nop
 800b000:	bfc90fdb 	.word	0xbfc90fdb
 800b004:	3fc90fdb 	.word	0x3fc90fdb
 800b008:	3edfffff 	.word	0x3edfffff
 800b00c:	7149f2ca 	.word	0x7149f2ca
 800b010:	3f97ffff 	.word	0x3f97ffff
 800b014:	3c8569d7 	.word	0x3c8569d7
 800b018:	3d4bda59 	.word	0x3d4bda59
 800b01c:	bd6ef16b 	.word	0xbd6ef16b
 800b020:	3d886b35 	.word	0x3d886b35
 800b024:	3dba2e6e 	.word	0x3dba2e6e
 800b028:	3e124925 	.word	0x3e124925
 800b02c:	3eaaaaab 	.word	0x3eaaaaab
 800b030:	bd15a221 	.word	0xbd15a221
 800b034:	bd9d8795 	.word	0xbd9d8795
 800b038:	bde38e38 	.word	0xbde38e38
 800b03c:	be4ccccd 	.word	0xbe4ccccd
 800b040:	401bffff 	.word	0x401bffff
 800b044:	0801ef0c 	.word	0x0801ef0c
 800b048:	0801eefc 	.word	0x0801eefc

0800b04c <fabsf>:
 800b04c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b050:	4770      	bx	lr
 800b052:	0000      	movs	r0, r0
 800b054:	0000      	movs	r0, r0
	...

0800b058 <scalbn>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	4616      	mov	r6, r2
 800b05c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	460b      	mov	r3, r1
 800b066:	b982      	cbnz	r2, 800b08a <scalbn+0x32>
 800b068:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b06c:	4303      	orrs	r3, r0
 800b06e:	d039      	beq.n	800b0e4 <scalbn+0x8c>
 800b070:	4b33      	ldr	r3, [pc, #204]	@ (800b140 <scalbn+0xe8>)
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 fb20 	bl	80006b8 <__aeabi_dmul>
 800b078:	4b32      	ldr	r3, [pc, #200]	@ (800b144 <scalbn+0xec>)
 800b07a:	429e      	cmp	r6, r3
 800b07c:	4604      	mov	r4, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	da0d      	bge.n	800b09e <scalbn+0x46>
 800b082:	a327      	add	r3, pc, #156	@ (adr r3, 800b120 <scalbn+0xc8>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	e01c      	b.n	800b0c4 <scalbn+0x6c>
 800b08a:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b08e:	42ba      	cmp	r2, r7
 800b090:	d109      	bne.n	800b0a6 <scalbn+0x4e>
 800b092:	4602      	mov	r2, r0
 800b094:	f7f5 f95a 	bl	800034c <__adddf3>
 800b098:	4604      	mov	r4, r0
 800b09a:	460d      	mov	r5, r1
 800b09c:	e022      	b.n	800b0e4 <scalbn+0x8c>
 800b09e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	3a36      	subs	r2, #54	@ 0x36
 800b0a6:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b0aa:	428e      	cmp	r6, r1
 800b0ac:	dd0d      	ble.n	800b0ca <scalbn+0x72>
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b128 <scalbn+0xd0>)
 800b0b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b6:	da02      	bge.n	800b0be <scalbn+0x66>
 800b0b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800b130 <scalbn+0xd8>)
 800b0ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0be:	a31a      	add	r3, pc, #104	@ (adr r3, 800b128 <scalbn+0xd0>)
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f7f5 faf8 	bl	80006b8 <__aeabi_dmul>
 800b0c8:	e7e6      	b.n	800b098 <scalbn+0x40>
 800b0ca:	4432      	add	r2, r6
 800b0cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b0d0:	428a      	cmp	r2, r1
 800b0d2:	dcec      	bgt.n	800b0ae <scalbn+0x56>
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	dd08      	ble.n	800b0ea <scalbn+0x92>
 800b0d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b0dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b0e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b0ee:	da08      	bge.n	800b102 <scalbn+0xaa>
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	a10b      	add	r1, pc, #44	@ (adr r1, 800b120 <scalbn+0xc8>)
 800b0f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f8:	dac3      	bge.n	800b082 <scalbn+0x2a>
 800b0fa:	a10f      	add	r1, pc, #60	@ (adr r1, 800b138 <scalbn+0xe0>)
 800b0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b100:	e7bf      	b.n	800b082 <scalbn+0x2a>
 800b102:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b106:	3236      	adds	r2, #54	@ 0x36
 800b108:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b10c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b110:	4620      	mov	r0, r4
 800b112:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <scalbn+0xf0>)
 800b114:	4629      	mov	r1, r5
 800b116:	2200      	movs	r2, #0
 800b118:	e7d4      	b.n	800b0c4 <scalbn+0x6c>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	c2f8f359 	.word	0xc2f8f359
 800b124:	01a56e1f 	.word	0x01a56e1f
 800b128:	8800759c 	.word	0x8800759c
 800b12c:	7e37e43c 	.word	0x7e37e43c
 800b130:	8800759c 	.word	0x8800759c
 800b134:	fe37e43c 	.word	0xfe37e43c
 800b138:	c2f8f359 	.word	0xc2f8f359
 800b13c:	81a56e1f 	.word	0x81a56e1f
 800b140:	43500000 	.word	0x43500000
 800b144:	ffff3cb0 	.word	0xffff3cb0
 800b148:	3c900000 	.word	0x3c900000
 800b14c:	00000000 	.word	0x00000000

0800b150 <__kernel_rem_pio2>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	ed2d 8b02 	vpush	{d8}
 800b158:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800b15c:	f112 0f14 	cmn.w	r2, #20
 800b160:	9309      	str	r3, [sp, #36]	@ 0x24
 800b162:	9101      	str	r1, [sp, #4]
 800b164:	4bbe      	ldr	r3, [pc, #760]	@ (800b460 <__kernel_rem_pio2+0x310>)
 800b166:	99a6      	ldr	r1, [sp, #664]	@ 0x298
 800b168:	900a      	str	r0, [sp, #40]	@ 0x28
 800b16a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b16e:	9304      	str	r3, [sp, #16]
 800b170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b172:	f103 33ff 	add.w	r3, r3, #4294967295
 800b176:	bfa8      	it	ge
 800b178:	1ed4      	subge	r4, r2, #3
 800b17a:	9306      	str	r3, [sp, #24]
 800b17c:	bfb2      	itee	lt
 800b17e:	2400      	movlt	r4, #0
 800b180:	2318      	movge	r3, #24
 800b182:	fb94 f4f3 	sdivge	r4, r4, r3
 800b186:	f06f 0317 	mvn.w	r3, #23
 800b18a:	fb04 3303 	mla	r3, r4, r3, r3
 800b18e:	eb03 0b02 	add.w	fp, r3, r2
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	9a06      	ldr	r2, [sp, #24]
 800b196:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 800b458 <__kernel_rem_pio2+0x308>
 800b19a:	eb03 0802 	add.w	r8, r3, r2
 800b19e:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800b1a0:	1aa7      	subs	r7, r4, r2
 800b1a2:	ae22      	add	r6, sp, #136	@ 0x88
 800b1a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b1a8:	2500      	movs	r5, #0
 800b1aa:	4545      	cmp	r5, r8
 800b1ac:	dd13      	ble.n	800b1d6 <__kernel_rem_pio2+0x86>
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	aa22      	add	r2, sp, #136	@ 0x88
 800b1b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b1b6:	f50d 7ae4 	add.w	sl, sp, #456	@ 0x1c8
 800b1ba:	f04f 0800 	mov.w	r8, #0
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	4598      	cmp	r8, r3
 800b1c2:	dc31      	bgt.n	800b228 <__kernel_rem_pio2+0xd8>
 800b1c4:	ed9f 7ba4 	vldr	d7, [pc, #656]	@ 800b458 <__kernel_rem_pio2+0x308>
 800b1c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b1cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1d0:	462f      	mov	r7, r5
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	e01b      	b.n	800b20e <__kernel_rem_pio2+0xbe>
 800b1d6:	42ef      	cmn	r7, r5
 800b1d8:	d407      	bmi.n	800b1ea <__kernel_rem_pio2+0x9a>
 800b1da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b1de:	f7f5 fa01 	bl	80005e4 <__aeabi_i2d>
 800b1e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1e6:	3501      	adds	r5, #1
 800b1e8:	e7df      	b.n	800b1aa <__kernel_rem_pio2+0x5a>
 800b1ea:	ec51 0b18 	vmov	r0, r1, d8
 800b1ee:	e7f8      	b.n	800b1e2 <__kernel_rem_pio2+0x92>
 800b1f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b1f8:	f7f5 fa5e 	bl	80006b8 <__aeabi_dmul>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b204:	f7f5 f8a2 	bl	800034c <__adddf3>
 800b208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b20c:	3601      	adds	r6, #1
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	429e      	cmp	r6, r3
 800b212:	f1a7 0708 	sub.w	r7, r7, #8
 800b216:	ddeb      	ble.n	800b1f0 <__kernel_rem_pio2+0xa0>
 800b218:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b21c:	f108 0801 	add.w	r8, r8, #1
 800b220:	ecaa 7b02 	vstmia	sl!, {d7}
 800b224:	3508      	adds	r5, #8
 800b226:	e7ca      	b.n	800b1be <__kernel_rem_pio2+0x6e>
 800b228:	9b04      	ldr	r3, [sp, #16]
 800b22a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b22e:	aa0e      	add	r2, sp, #56	@ 0x38
 800b230:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b234:	930c      	str	r3, [sp, #48]	@ 0x30
 800b236:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800b238:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b23c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b23e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b242:	930d      	str	r3, [sp, #52]	@ 0x34
 800b244:	ab9a      	add	r3, sp, #616	@ 0x268
 800b246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b24a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800b24e:	ae0e      	add	r6, sp, #56	@ 0x38
 800b250:	ab72      	add	r3, sp, #456	@ 0x1c8
 800b252:	eb03 07ca 	add.w	r7, r3, sl, lsl #3
 800b256:	46b1      	mov	r9, r6
 800b258:	46d0      	mov	r8, sl
 800b25a:	f1b8 0f00 	cmp.w	r8, #0
 800b25e:	f1a7 0708 	sub.w	r7, r7, #8
 800b262:	dc71      	bgt.n	800b348 <__kernel_rem_pio2+0x1f8>
 800b264:	465a      	mov	r2, fp
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7ff fef5 	bl	800b058 <scalbn>
 800b26e:	2200      	movs	r2, #0
 800b270:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800b274:	4604      	mov	r4, r0
 800b276:	460d      	mov	r5, r1
 800b278:	f7f5 fa1e 	bl	80006b8 <__aeabi_dmul>
 800b27c:	f7ff f980 	bl	800a580 <floor>
 800b280:	4b78      	ldr	r3, [pc, #480]	@ (800b464 <__kernel_rem_pio2+0x314>)
 800b282:	2200      	movs	r2, #0
 800b284:	f7f5 fa18 	bl	80006b8 <__aeabi_dmul>
 800b288:	4602      	mov	r2, r0
 800b28a:	460b      	mov	r3, r1
 800b28c:	4620      	mov	r0, r4
 800b28e:	4629      	mov	r1, r5
 800b290:	f7f5 f85a 	bl	8000348 <__aeabi_dsub>
 800b294:	460d      	mov	r5, r1
 800b296:	4604      	mov	r4, r0
 800b298:	f7f5 fca8 	bl	8000bec <__aeabi_d2iz>
 800b29c:	9008      	str	r0, [sp, #32]
 800b29e:	f7f5 f9a1 	bl	80005e4 <__aeabi_i2d>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 f84d 	bl	8000348 <__aeabi_dsub>
 800b2ae:	f1bb 0f00 	cmp.w	fp, #0
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	4689      	mov	r9, r1
 800b2b6:	dd6e      	ble.n	800b396 <__kernel_rem_pio2+0x246>
 800b2b8:	f10a 31ff 	add.w	r1, sl, #4294967295
 800b2bc:	ab0e      	add	r3, sp, #56	@ 0x38
 800b2be:	9c08      	ldr	r4, [sp, #32]
 800b2c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2c4:	f1cb 0018 	rsb	r0, fp, #24
 800b2c8:	fa43 f200 	asr.w	r2, r3, r0
 800b2cc:	4414      	add	r4, r2
 800b2ce:	4082      	lsls	r2, r0
 800b2d0:	1a9b      	subs	r3, r3, r2
 800b2d2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b2d4:	9408      	str	r4, [sp, #32]
 800b2d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b2da:	f1cb 0217 	rsb	r2, fp, #23
 800b2de:	4113      	asrs	r3, r2
 800b2e0:	9302      	str	r3, [sp, #8]
 800b2e2:	9b02      	ldr	r3, [sp, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dd65      	ble.n	800b3b4 <__kernel_rem_pio2+0x264>
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	9308      	str	r3, [sp, #32]
 800b2f0:	4614      	mov	r4, r2
 800b2f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b2f6:	4592      	cmp	sl, r2
 800b2f8:	f300 80a2 	bgt.w	800b440 <__kernel_rem_pio2+0x2f0>
 800b2fc:	f1bb 0f00 	cmp.w	fp, #0
 800b300:	dd07      	ble.n	800b312 <__kernel_rem_pio2+0x1c2>
 800b302:	f1bb 0f01 	cmp.w	fp, #1
 800b306:	f000 80bb 	beq.w	800b480 <__kernel_rem_pio2+0x330>
 800b30a:	f1bb 0f02 	cmp.w	fp, #2
 800b30e:	f000 80c2 	beq.w	800b496 <__kernel_rem_pio2+0x346>
 800b312:	9b02      	ldr	r3, [sp, #8]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d14d      	bne.n	800b3b4 <__kernel_rem_pio2+0x264>
 800b318:	4642      	mov	r2, r8
 800b31a:	464b      	mov	r3, r9
 800b31c:	4952      	ldr	r1, [pc, #328]	@ (800b468 <__kernel_rem_pio2+0x318>)
 800b31e:	2000      	movs	r0, #0
 800b320:	f7f5 f812 	bl	8000348 <__aeabi_dsub>
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	2c00      	cmp	r4, #0
 800b32a:	d043      	beq.n	800b3b4 <__kernel_rem_pio2+0x264>
 800b32c:	465a      	mov	r2, fp
 800b32e:	494e      	ldr	r1, [pc, #312]	@ (800b468 <__kernel_rem_pio2+0x318>)
 800b330:	2000      	movs	r0, #0
 800b332:	f7ff fe91 	bl	800b058 <scalbn>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 f803 	bl	8000348 <__aeabi_dsub>
 800b342:	4680      	mov	r8, r0
 800b344:	4689      	mov	r9, r1
 800b346:	e035      	b.n	800b3b4 <__kernel_rem_pio2+0x264>
 800b348:	4b48      	ldr	r3, [pc, #288]	@ (800b46c <__kernel_rem_pio2+0x31c>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 f9b2 	bl	80006b8 <__aeabi_dmul>
 800b354:	f7f5 fc4a 	bl	8000bec <__aeabi_d2iz>
 800b358:	f7f5 f944 	bl	80005e4 <__aeabi_i2d>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b364:	4b42      	ldr	r3, [pc, #264]	@ (800b470 <__kernel_rem_pio2+0x320>)
 800b366:	2200      	movs	r2, #0
 800b368:	f7f5 f9a6 	bl	80006b8 <__aeabi_dmul>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4620      	mov	r0, r4
 800b372:	4629      	mov	r1, r5
 800b374:	f7f4 ffe8 	bl	8000348 <__aeabi_dsub>
 800b378:	f7f5 fc38 	bl	8000bec <__aeabi_d2iz>
 800b37c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b380:	f849 0b04 	str.w	r0, [r9], #4
 800b384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b388:	f7f4 ffe0 	bl	800034c <__adddf3>
 800b38c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b390:	4604      	mov	r4, r0
 800b392:	460d      	mov	r5, r1
 800b394:	e761      	b.n	800b25a <__kernel_rem_pio2+0x10a>
 800b396:	d106      	bne.n	800b3a6 <__kernel_rem_pio2+0x256>
 800b398:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b39c:	aa0e      	add	r2, sp, #56	@ 0x38
 800b39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a2:	15db      	asrs	r3, r3, #23
 800b3a4:	e79c      	b.n	800b2e0 <__kernel_rem_pio2+0x190>
 800b3a6:	4b33      	ldr	r3, [pc, #204]	@ (800b474 <__kernel_rem_pio2+0x324>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f7f5 fc0b 	bl	8000bc4 <__aeabi_dcmpge>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d143      	bne.n	800b43a <__kernel_rem_pio2+0x2ea>
 800b3b2:	9002      	str	r0, [sp, #8]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	f7f5 fbe4 	bl	8000b88 <__aeabi_dcmpeq>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f000 80ba 	beq.w	800b53a <__kernel_rem_pio2+0x3ea>
 800b3c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	9904      	ldr	r1, [sp, #16]
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	da69      	bge.n	800b4a6 <__kernel_rem_pio2+0x356>
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	f000 8084 	beq.w	800b4e0 <__kernel_rem_pio2+0x390>
 800b3d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3dc:	ab0e      	add	r3, sp, #56	@ 0x38
 800b3de:	f1ab 0b18 	sub.w	fp, fp, #24
 800b3e2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d0f6      	beq.n	800b3d8 <__kernel_rem_pio2+0x288>
 800b3ea:	465a      	mov	r2, fp
 800b3ec:	491e      	ldr	r1, [pc, #120]	@ (800b468 <__kernel_rem_pio2+0x318>)
 800b3ee:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800b46c <__kernel_rem_pio2+0x31c>
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f7ff fe30 	bl	800b058 <scalbn>
 800b3f8:	f10a 0301 	add.w	r3, sl, #1
 800b3fc:	aa72      	add	r2, sp, #456	@ 0x1c8
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800b406:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b40a:	4656      	mov	r6, sl
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	2e00      	cmp	r6, #0
 800b412:	f280 80c8 	bge.w	800b5a6 <__kernel_rem_pio2+0x456>
 800b416:	4654      	mov	r4, sl
 800b418:	2c00      	cmp	r4, #0
 800b41a:	f2c0 80f6 	blt.w	800b60a <__kernel_rem_pio2+0x4ba>
 800b41e:	4b16      	ldr	r3, [pc, #88]	@ (800b478 <__kernel_rem_pio2+0x328>)
 800b420:	461f      	mov	r7, r3
 800b422:	ab72      	add	r3, sp, #456	@ 0x1c8
 800b424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b428:	9306      	str	r3, [sp, #24]
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	f04f 0900 	mov.w	r9, #0
 800b432:	2600      	movs	r6, #0
 800b434:	ebaa 0504 	sub.w	r5, sl, r4
 800b438:	e0db      	b.n	800b5f2 <__kernel_rem_pio2+0x4a2>
 800b43a:	2302      	movs	r3, #2
 800b43c:	9302      	str	r3, [sp, #8]
 800b43e:	e753      	b.n	800b2e8 <__kernel_rem_pio2+0x198>
 800b440:	f856 3b04 	ldr.w	r3, [r6], #4
 800b444:	b9d4      	cbnz	r4, 800b47c <__kernel_rem_pio2+0x32c>
 800b446:	b123      	cbz	r3, 800b452 <__kernel_rem_pio2+0x302>
 800b448:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b44c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b450:	2301      	movs	r3, #1
 800b452:	3201      	adds	r2, #1
 800b454:	461c      	mov	r4, r3
 800b456:	e74e      	b.n	800b2f6 <__kernel_rem_pio2+0x1a6>
	...
 800b460:	0801ef60 	.word	0x0801ef60
 800b464:	40200000 	.word	0x40200000
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	3e700000 	.word	0x3e700000
 800b470:	41700000 	.word	0x41700000
 800b474:	3fe00000 	.word	0x3fe00000
 800b478:	0801ef20 	.word	0x0801ef20
 800b47c:	1acb      	subs	r3, r1, r3
 800b47e:	e7e5      	b.n	800b44c <__kernel_rem_pio2+0x2fc>
 800b480:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b484:	ab0e      	add	r3, sp, #56	@ 0x38
 800b486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b48e:	a90e      	add	r1, sp, #56	@ 0x38
 800b490:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b494:	e73d      	b.n	800b312 <__kernel_rem_pio2+0x1c2>
 800b496:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b49a:	ab0e      	add	r3, sp, #56	@ 0x38
 800b49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b4a4:	e7f3      	b.n	800b48e <__kernel_rem_pio2+0x33e>
 800b4a6:	a90e      	add	r1, sp, #56	@ 0x38
 800b4a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	e78c      	b.n	800b3cc <__kernel_rem_pio2+0x27c>
 800b4b2:	3401      	adds	r4, #1
 800b4b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b4b8:	2a00      	cmp	r2, #0
 800b4ba:	d0fa      	beq.n	800b4b2 <__kernel_rem_pio2+0x362>
 800b4bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4be:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800b4c2:	eb0d 0503 	add.w	r5, sp, r3
 800b4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4c8:	aa22      	add	r2, sp, #136	@ 0x88
 800b4ca:	4453      	add	r3, sl
 800b4cc:	f10a 0701 	add.w	r7, sl, #1
 800b4d0:	3d98      	subs	r5, #152	@ 0x98
 800b4d2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b4d6:	4454      	add	r4, sl
 800b4d8:	42bc      	cmp	r4, r7
 800b4da:	da04      	bge.n	800b4e6 <__kernel_rem_pio2+0x396>
 800b4dc:	46a2      	mov	sl, r4
 800b4de:	e6ae      	b.n	800b23e <__kernel_rem_pio2+0xee>
 800b4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4e2:	2401      	movs	r4, #1
 800b4e4:	e7e6      	b.n	800b4b4 <__kernel_rem_pio2+0x364>
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b4ec:	f7f5 f87a 	bl	80005e4 <__aeabi_i2d>
 800b4f0:	ed9f 7bad 	vldr	d7, [pc, #692]	@ 800b7a8 <__kernel_rem_pio2+0x658>
 800b4f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b4f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b500:	46b2      	mov	sl, r6
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	9b06      	ldr	r3, [sp, #24]
 800b508:	4598      	cmp	r8, r3
 800b50a:	dd05      	ble.n	800b518 <__kernel_rem_pio2+0x3c8>
 800b50c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b510:	3701      	adds	r7, #1
 800b512:	eca5 7b02 	vstmia	r5!, {d7}
 800b516:	e7df      	b.n	800b4d8 <__kernel_rem_pio2+0x388>
 800b518:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b51c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b520:	f7f5 f8ca 	bl	80006b8 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b52c:	f7f4 ff0e 	bl	800034c <__adddf3>
 800b530:	f108 0801 	add.w	r8, r8, #1
 800b534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b538:	e7e5      	b.n	800b506 <__kernel_rem_pio2+0x3b6>
 800b53a:	f1cb 0200 	rsb	r2, fp, #0
 800b53e:	4640      	mov	r0, r8
 800b540:	4649      	mov	r1, r9
 800b542:	f7ff fd89 	bl	800b058 <scalbn>
 800b546:	4b9a      	ldr	r3, [pc, #616]	@ (800b7b0 <__kernel_rem_pio2+0x660>)
 800b548:	2200      	movs	r2, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	460d      	mov	r5, r1
 800b54e:	f7f5 fb39 	bl	8000bc4 <__aeabi_dcmpge>
 800b552:	b300      	cbz	r0, 800b596 <__kernel_rem_pio2+0x446>
 800b554:	4b97      	ldr	r3, [pc, #604]	@ (800b7b4 <__kernel_rem_pio2+0x664>)
 800b556:	2200      	movs	r2, #0
 800b558:	4620      	mov	r0, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7f5 f8ac 	bl	80006b8 <__aeabi_dmul>
 800b560:	f7f5 fb44 	bl	8000bec <__aeabi_d2iz>
 800b564:	4606      	mov	r6, r0
 800b566:	f7f5 f83d 	bl	80005e4 <__aeabi_i2d>
 800b56a:	4b91      	ldr	r3, [pc, #580]	@ (800b7b0 <__kernel_rem_pio2+0x660>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	f7f5 f8a3 	bl	80006b8 <__aeabi_dmul>
 800b572:	460b      	mov	r3, r1
 800b574:	4602      	mov	r2, r0
 800b576:	4629      	mov	r1, r5
 800b578:	4620      	mov	r0, r4
 800b57a:	f7f4 fee5 	bl	8000348 <__aeabi_dsub>
 800b57e:	f7f5 fb35 	bl	8000bec <__aeabi_d2iz>
 800b582:	ab0e      	add	r3, sp, #56	@ 0x38
 800b584:	f10b 0b18 	add.w	fp, fp, #24
 800b588:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b58c:	f10a 0a01 	add.w	sl, sl, #1
 800b590:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800b594:	e729      	b.n	800b3ea <__kernel_rem_pio2+0x29a>
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f5 fb27 	bl	8000bec <__aeabi_d2iz>
 800b59e:	ab0e      	add	r3, sp, #56	@ 0x38
 800b5a0:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800b5a4:	e721      	b.n	800b3ea <__kernel_rem_pio2+0x29a>
 800b5a6:	ab0e      	add	r3, sp, #56	@ 0x38
 800b5a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b5ac:	f7f5 f81a 	bl	80005e4 <__aeabi_i2d>
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	462b      	mov	r3, r5
 800b5b4:	f7f5 f880 	bl	80006b8 <__aeabi_dmul>
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b5be:	464b      	mov	r3, r9
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	f7f5 f878 	bl	80006b8 <__aeabi_dmul>
 800b5c8:	3e01      	subs	r6, #1
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	e71f      	b.n	800b410 <__kernel_rem_pio2+0x2c0>
 800b5d0:	9906      	ldr	r1, [sp, #24]
 800b5d2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b5d6:	9106      	str	r1, [sp, #24]
 800b5d8:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b5dc:	f7f5 f86c 	bl	80006b8 <__aeabi_dmul>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	f7f4 feb0 	bl	800034c <__adddf3>
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	429e      	cmp	r6, r3
 800b5f6:	dc01      	bgt.n	800b5fc <__kernel_rem_pio2+0x4ac>
 800b5f8:	42b5      	cmp	r5, r6
 800b5fa:	dae9      	bge.n	800b5d0 <__kernel_rem_pio2+0x480>
 800b5fc:	ab4a      	add	r3, sp, #296	@ 0x128
 800b5fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b602:	e9c5 8900 	strd	r8, r9, [r5]
 800b606:	3c01      	subs	r4, #1
 800b608:	e706      	b.n	800b418 <__kernel_rem_pio2+0x2c8>
 800b60a:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	dc0b      	bgt.n	800b628 <__kernel_rem_pio2+0x4d8>
 800b610:	2b00      	cmp	r3, #0
 800b612:	dc38      	bgt.n	800b686 <__kernel_rem_pio2+0x536>
 800b614:	d05a      	beq.n	800b6cc <__kernel_rem_pio2+0x57c>
 800b616:	9b08      	ldr	r3, [sp, #32]
 800b618:	f003 0007 	and.w	r0, r3, #7
 800b61c:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
 800b620:	ecbd 8b02 	vpop	{d8}
 800b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b628:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d1f3      	bne.n	800b616 <__kernel_rem_pio2+0x4c6>
 800b62e:	f50b 731a 	add.w	r3, fp, #616	@ 0x268
 800b632:	eb0d 0403 	add.w	r4, sp, r3
 800b636:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b63a:	4625      	mov	r5, r4
 800b63c:	46d0      	mov	r8, sl
 800b63e:	f1b8 0f00 	cmp.w	r8, #0
 800b642:	f1a5 0508 	sub.w	r5, r5, #8
 800b646:	dc67      	bgt.n	800b718 <__kernel_rem_pio2+0x5c8>
 800b648:	4655      	mov	r5, sl
 800b64a:	2d01      	cmp	r5, #1
 800b64c:	f1a4 0408 	sub.w	r4, r4, #8
 800b650:	f300 8083 	bgt.w	800b75a <__kernel_rem_pio2+0x60a>
 800b654:	ab4a      	add	r3, sp, #296	@ 0x128
 800b656:	eb03 040b 	add.w	r4, r3, fp
 800b65a:	2000      	movs	r0, #0
 800b65c:	2100      	movs	r1, #0
 800b65e:	f1ba 0f01 	cmp.w	sl, #1
 800b662:	f300 8098 	bgt.w	800b796 <__kernel_rem_pio2+0x646>
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b66c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	@ 0x130
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 80a1 	bne.w	800b7b8 <__kernel_rem_pio2+0x668>
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	e9c3 7800 	strd	r7, r8, [r3]
 800b67c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b680:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b684:	e7c7      	b.n	800b616 <__kernel_rem_pio2+0x4c6>
 800b686:	ab4a      	add	r3, sp, #296	@ 0x128
 800b688:	449b      	add	fp, r3
 800b68a:	4654      	mov	r4, sl
 800b68c:	2000      	movs	r0, #0
 800b68e:	2100      	movs	r1, #0
 800b690:	2c00      	cmp	r4, #0
 800b692:	da32      	bge.n	800b6fa <__kernel_rem_pio2+0x5aa>
 800b694:	9b02      	ldr	r3, [sp, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d035      	beq.n	800b706 <__kernel_rem_pio2+0x5b6>
 800b69a:	4602      	mov	r2, r0
 800b69c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6a0:	9c01      	ldr	r4, [sp, #4]
 800b6a2:	e9c4 2300 	strd	r2, r3, [r4]
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	@ 0x128
 800b6ae:	f7f4 fe4b 	bl	8000348 <__aeabi_dsub>
 800b6b2:	ad4c      	add	r5, sp, #304	@ 0x130
 800b6b4:	2401      	movs	r4, #1
 800b6b6:	45a2      	cmp	sl, r4
 800b6b8:	da28      	bge.n	800b70c <__kernel_rem_pio2+0x5bc>
 800b6ba:	9b02      	ldr	r3, [sp, #8]
 800b6bc:	b113      	cbz	r3, 800b6c4 <__kernel_rem_pio2+0x574>
 800b6be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	9b01      	ldr	r3, [sp, #4]
 800b6c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b6ca:	e7a4      	b.n	800b616 <__kernel_rem_pio2+0x4c6>
 800b6cc:	ab4a      	add	r3, sp, #296	@ 0x128
 800b6ce:	449b      	add	fp, r3
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	f1ba 0f00 	cmp.w	sl, #0
 800b6d8:	da08      	bge.n	800b6ec <__kernel_rem_pio2+0x59c>
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	b113      	cbz	r3, 800b6e4 <__kernel_rem_pio2+0x594>
 800b6de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	e9c3 0100 	strd	r0, r1, [r3]
 800b6ea:	e794      	b.n	800b616 <__kernel_rem_pio2+0x4c6>
 800b6ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b6f0:	f7f4 fe2c 	bl	800034c <__adddf3>
 800b6f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6f8:	e7ec      	b.n	800b6d4 <__kernel_rem_pio2+0x584>
 800b6fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b6fe:	f7f4 fe25 	bl	800034c <__adddf3>
 800b702:	3c01      	subs	r4, #1
 800b704:	e7c4      	b.n	800b690 <__kernel_rem_pio2+0x540>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	e7c9      	b.n	800b6a0 <__kernel_rem_pio2+0x550>
 800b70c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b710:	f7f4 fe1c 	bl	800034c <__adddf3>
 800b714:	3401      	adds	r4, #1
 800b716:	e7ce      	b.n	800b6b6 <__kernel_rem_pio2+0x566>
 800b718:	ed95 7b00 	vldr	d7, [r5]
 800b71c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b720:	ed95 7b02 	vldr	d7, [r5, #8]
 800b724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b728:	ec53 2b17 	vmov	r2, r3, d7
 800b72c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b730:	f7f4 fe0c 	bl	800034c <__adddf3>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4606      	mov	r6, r0
 800b73a:	460f      	mov	r7, r1
 800b73c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b740:	f7f4 fe02 	bl	8000348 <__aeabi_dsub>
 800b744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b748:	f7f4 fe00 	bl	800034c <__adddf3>
 800b74c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b750:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b754:	e9c5 6700 	strd	r6, r7, [r5]
 800b758:	e771      	b.n	800b63e <__kernel_rem_pio2+0x4ee>
 800b75a:	ed94 7b02 	vldr	d7, [r4, #8]
 800b75e:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b762:	ec53 2b17 	vmov	r2, r3, d7
 800b766:	4640      	mov	r0, r8
 800b768:	4649      	mov	r1, r9
 800b76a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b76e:	f7f4 fded 	bl	800034c <__adddf3>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f4 fde3 	bl	8000348 <__aeabi_dsub>
 800b782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b786:	f7f4 fde1 	bl	800034c <__adddf3>
 800b78a:	3d01      	subs	r5, #1
 800b78c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b790:	e9c4 6700 	strd	r6, r7, [r4]
 800b794:	e759      	b.n	800b64a <__kernel_rem_pio2+0x4fa>
 800b796:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b79a:	f7f4 fdd7 	bl	800034c <__adddf3>
 800b79e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7a2:	e75c      	b.n	800b65e <__kernel_rem_pio2+0x50e>
 800b7a4:	f3af 8000 	nop.w
	...
 800b7b0:	41700000 	.word	0x41700000
 800b7b4:	3e700000 	.word	0x3e700000
 800b7b8:	9b01      	ldr	r3, [sp, #4]
 800b7ba:	9a01      	ldr	r2, [sp, #4]
 800b7bc:	601f      	str	r7, [r3, #0]
 800b7be:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b7c2:	605c      	str	r4, [r3, #4]
 800b7c4:	609d      	str	r5, [r3, #8]
 800b7c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7ca:	60d3      	str	r3, [r2, #12]
 800b7cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b7d0:	6110      	str	r0, [r2, #16]
 800b7d2:	6153      	str	r3, [r2, #20]
 800b7d4:	e71f      	b.n	800b616 <__kernel_rem_pio2+0x4c6>
 800b7d6:	bf00      	nop

0800b7d8 <_init>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_fini>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr
