
tia-testl476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137b0  0800c770  0800c770  0000d770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ff20  0801ff20  00021060  2**0
                  CONTENTS
  4 .ARM          00000008  0801ff20  0801ff20  00020f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ff28  0801ff28  00021060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ff28  0801ff28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ff2c  0801ff2c  00020f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0801ff30  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000761c  20000060  0801ff90  00021060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000767c  0801ff90  0002167c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f09  00000000  00000000  0002108e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003203  00000000  00000000  00039f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001028  00000000  00000000  0003e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293c3  00000000  00000000  0003f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019378  00000000  00000000  00068b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b07  00000000  00000000  00081e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0018a98a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006588  00000000  00000000  0018aa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00190fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000037c6  00000000  00000000  0019103c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  00194802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c758 	.word	0x0800c758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800c758 	.word	0x0800c758

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	@ 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2iz>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d215      	bcs.n	8000c22 <__aeabi_d2iz+0x36>
 8000bf6:	d511      	bpl.n	8000c1c <__aeabi_d2iz+0x30>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d912      	bls.n	8000c28 <__aeabi_d2iz+0x3c>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d105      	bne.n	8000c34 <__aeabi_d2iz+0x48>
 8000c28:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2f>:
 8000c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c84:	bf24      	itt	cs
 8000c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c8e:	d90d      	bls.n	8000cac <__aeabi_d2f+0x30>
 8000c90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cb0:	d121      	bne.n	8000cf6 <__aeabi_d2f+0x7a>
 8000cb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000cb6:	bfbc      	itt	lt
 8000cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	4770      	bxlt	lr
 8000cbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc6:	f1c2 0218 	rsb	r2, r2, #24
 8000cca:	f1c2 0c20 	rsb	ip, r2, #32
 8000cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	f040 0001 	orrne.w	r0, r0, #1
 8000cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce8:	ea40 000c 	orr.w	r0, r0, ip
 8000cec:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf4:	e7cc      	b.n	8000c90 <__aeabi_d2f+0x14>
 8000cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfa:	d107      	bne.n	8000d0c <__aeabi_d2f+0x90>
 8000cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d00:	bf1e      	ittt	ne
 8000d02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d0a:	4770      	bxne	lr
 8000d0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_frsub>:
 8000d1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	e002      	b.n	8000d28 <__addsf3>
 8000d22:	bf00      	nop

08000d24 <__aeabi_fsub>:
 8000d24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000d28 <__addsf3>:
 8000d28:	0042      	lsls	r2, r0, #1
 8000d2a:	bf1f      	itttt	ne
 8000d2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000d30:	ea92 0f03 	teqne	r2, r3
 8000d34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3c:	d06a      	beq.n	8000e14 <__addsf3+0xec>
 8000d3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d46:	bfc1      	itttt	gt
 8000d48:	18d2      	addgt	r2, r2, r3
 8000d4a:	4041      	eorgt	r1, r0
 8000d4c:	4048      	eorgt	r0, r1
 8000d4e:	4041      	eorgt	r1, r0
 8000d50:	bfb8      	it	lt
 8000d52:	425b      	neglt	r3, r3
 8000d54:	2b19      	cmp	r3, #25
 8000d56:	bf88      	it	hi
 8000d58:	4770      	bxhi	lr
 8000d5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d66:	bf18      	it	ne
 8000d68:	4240      	negne	r0, r0
 8000d6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d76:	bf18      	it	ne
 8000d78:	4249      	negne	r1, r1
 8000d7a:	ea92 0f03 	teq	r2, r3
 8000d7e:	d03f      	beq.n	8000e00 <__addsf3+0xd8>
 8000d80:	f1a2 0201 	sub.w	r2, r2, #1
 8000d84:	fa41 fc03 	asr.w	ip, r1, r3
 8000d88:	eb10 000c 	adds.w	r0, r0, ip
 8000d8c:	f1c3 0320 	rsb	r3, r3, #32
 8000d90:	fa01 f103 	lsl.w	r1, r1, r3
 8000d94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d98:	d502      	bpl.n	8000da0 <__addsf3+0x78>
 8000d9a:	4249      	negs	r1, r1
 8000d9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000da0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000da4:	d313      	bcc.n	8000dce <__addsf3+0xa6>
 8000da6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000daa:	d306      	bcc.n	8000dba <__addsf3+0x92>
 8000dac:	0840      	lsrs	r0, r0, #1
 8000dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000db2:	f102 0201 	add.w	r2, r2, #1
 8000db6:	2afe      	cmp	r2, #254	@ 0xfe
 8000db8:	d251      	bcs.n	8000e5e <__addsf3+0x136>
 8000dba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	ea40 0003 	orr.w	r0, r0, r3
 8000dcc:	4770      	bx	lr
 8000dce:	0049      	lsls	r1, r1, #1
 8000dd0:	eb40 0000 	adc.w	r0, r0, r0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	bf28      	it	cs
 8000dd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ddc:	d2ed      	bcs.n	8000dba <__addsf3+0x92>
 8000dde:	fab0 fc80 	clz	ip, r0
 8000de2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000de6:	ebb2 020c 	subs.w	r2, r2, ip
 8000dea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000dee:	bfaa      	itet	ge
 8000df0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000df4:	4252      	neglt	r2, r2
 8000df6:	4318      	orrge	r0, r3
 8000df8:	bfbc      	itt	lt
 8000dfa:	40d0      	lsrlt	r0, r2
 8000dfc:	4318      	orrlt	r0, r3
 8000dfe:	4770      	bx	lr
 8000e00:	f092 0f00 	teq	r2, #0
 8000e04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e08:	bf06      	itte	eq
 8000e0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e0e:	3201      	addeq	r2, #1
 8000e10:	3b01      	subne	r3, #1
 8000e12:	e7b5      	b.n	8000d80 <__addsf3+0x58>
 8000e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	bf18      	it	ne
 8000e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e22:	d021      	beq.n	8000e68 <__addsf3+0x140>
 8000e24:	ea92 0f03 	teq	r2, r3
 8000e28:	d004      	beq.n	8000e34 <__addsf3+0x10c>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	bf08      	it	eq
 8000e30:	4608      	moveq	r0, r1
 8000e32:	4770      	bx	lr
 8000e34:	ea90 0f01 	teq	r0, r1
 8000e38:	bf1c      	itt	ne
 8000e3a:	2000      	movne	r0, #0
 8000e3c:	4770      	bxne	lr
 8000e3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e42:	d104      	bne.n	8000e4e <__addsf3+0x126>
 8000e44:	0040      	lsls	r0, r0, #1
 8000e46:	bf28      	it	cs
 8000e48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e52:	bf3c      	itt	cc
 8000e54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e58:	4770      	bxcc	lr
 8000e5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e66:	4770      	bx	lr
 8000e68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e6c:	bf16      	itet	ne
 8000e6e:	4608      	movne	r0, r1
 8000e70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e74:	4601      	movne	r1, r0
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	bf06      	itte	eq
 8000e7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e7e:	ea90 0f01 	teqeq	r0, r1
 8000e82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e86:	4770      	bx	lr

08000e88 <__aeabi_ui2f>:
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e004      	b.n	8000e98 <__aeabi_i2f+0x8>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_i2f>:
 8000e90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e94:	bf48      	it	mi
 8000e96:	4240      	negmi	r0, r0
 8000e98:	ea5f 0c00 	movs.w	ip, r0
 8000e9c:	bf08      	it	eq
 8000e9e:	4770      	bxeq	lr
 8000ea0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	f04f 0000 	mov.w	r0, #0
 8000eaa:	e01c      	b.n	8000ee6 <__aeabi_l2f+0x2a>

08000eac <__aeabi_ul2f>:
 8000eac:	ea50 0201 	orrs.w	r2, r0, r1
 8000eb0:	bf08      	it	eq
 8000eb2:	4770      	bxeq	lr
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e00a      	b.n	8000ed0 <__aeabi_l2f+0x14>
 8000eba:	bf00      	nop

08000ebc <__aeabi_l2f>:
 8000ebc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ec0:	bf08      	it	eq
 8000ec2:	4770      	bxeq	lr
 8000ec4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_l2f+0x14>
 8000eca:	4240      	negs	r0, r0
 8000ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed0:	ea5f 0c01 	movs.w	ip, r1
 8000ed4:	bf02      	ittt	eq
 8000ed6:	4684      	moveq	ip, r0
 8000ed8:	4601      	moveq	r1, r0
 8000eda:	2000      	moveq	r0, #0
 8000edc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ee0:	bf08      	it	eq
 8000ee2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eea:	fabc f28c 	clz	r2, ip
 8000eee:	3a08      	subs	r2, #8
 8000ef0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ef4:	db10      	blt.n	8000f18 <__aeabi_l2f+0x5c>
 8000ef6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000efa:	4463      	add	r3, ip
 8000efc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f00:	f1c2 0220 	rsb	r2, r2, #32
 8000f04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f08:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0c:	eb43 0002 	adc.w	r0, r3, r2
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f102 0220 	add.w	r2, r2, #32
 8000f1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f20:	f1c2 0220 	rsb	r2, r2, #32
 8000f24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000f28:	fa21 f202 	lsr.w	r2, r1, r2
 8000f2c:	eb43 0002 	adc.w	r0, r3, r2
 8000f30:	bf08      	it	eq
 8000f32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_fmul>:
 8000f38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f40:	bf1e      	ittt	ne
 8000f42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f46:	ea92 0f0c 	teqne	r2, ip
 8000f4a:	ea93 0f0c 	teqne	r3, ip
 8000f4e:	d06f      	beq.n	8001030 <__aeabi_fmul+0xf8>
 8000f50:	441a      	add	r2, r3
 8000f52:	ea80 0c01 	eor.w	ip, r0, r1
 8000f56:	0240      	lsls	r0, r0, #9
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000f5e:	d01e      	beq.n	8000f9e <__aeabi_fmul+0x66>
 8000f60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000f68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000f6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000f70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f74:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000f78:	bf3e      	ittt	cc
 8000f7a:	0049      	lslcc	r1, r1, #1
 8000f7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000f80:	005b      	lslcc	r3, r3, #1
 8000f82:	ea40 0001 	orr.w	r0, r0, r1
 8000f86:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000f8a:	2afd      	cmp	r2, #253	@ 0xfd
 8000f8c:	d81d      	bhi.n	8000fca <__aeabi_fmul+0x92>
 8000f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f96:	bf08      	it	eq
 8000f98:	f020 0001 	biceq.w	r0, r0, #1
 8000f9c:	4770      	bx	lr
 8000f9e:	f090 0f00 	teq	r0, #0
 8000fa2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fa6:	bf08      	it	eq
 8000fa8:	0249      	lsleq	r1, r1, #9
 8000faa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000fb2:	3a7f      	subs	r2, #127	@ 0x7f
 8000fb4:	bfc2      	ittt	gt
 8000fb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fbe:	4770      	bxgt	lr
 8000fc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	3a01      	subs	r2, #1
 8000fca:	dc5d      	bgt.n	8001088 <__aeabi_fmul+0x150>
 8000fcc:	f112 0f19 	cmn.w	r2, #25
 8000fd0:	bfdc      	itt	le
 8000fd2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000fd6:	4770      	bxle	lr
 8000fd8:	f1c2 0200 	rsb	r2, r2, #0
 8000fdc:	0041      	lsls	r1, r0, #1
 8000fde:	fa21 f102 	lsr.w	r1, r1, r2
 8000fe2:	f1c2 0220 	rsb	r2, r2, #32
 8000fe6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000fea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000fee:	f140 0000 	adc.w	r0, r0, #0
 8000ff2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ff6:	bf08      	it	eq
 8000ff8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ffc:	4770      	bx	lr
 8000ffe:	f092 0f00 	teq	r2, #0
 8001002:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001006:	bf02      	ittt	eq
 8001008:	0040      	lsleq	r0, r0, #1
 800100a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800100e:	3a01      	subeq	r2, #1
 8001010:	d0f9      	beq.n	8001006 <__aeabi_fmul+0xce>
 8001012:	ea40 000c 	orr.w	r0, r0, ip
 8001016:	f093 0f00 	teq	r3, #0
 800101a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800101e:	bf02      	ittt	eq
 8001020:	0049      	lsleq	r1, r1, #1
 8001022:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001026:	3b01      	subeq	r3, #1
 8001028:	d0f9      	beq.n	800101e <__aeabi_fmul+0xe6>
 800102a:	ea41 010c 	orr.w	r1, r1, ip
 800102e:	e78f      	b.n	8000f50 <__aeabi_fmul+0x18>
 8001030:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001034:	ea92 0f0c 	teq	r2, ip
 8001038:	bf18      	it	ne
 800103a:	ea93 0f0c 	teqne	r3, ip
 800103e:	d00a      	beq.n	8001056 <__aeabi_fmul+0x11e>
 8001040:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001044:	bf18      	it	ne
 8001046:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800104a:	d1d8      	bne.n	8000ffe <__aeabi_fmul+0xc6>
 800104c:	ea80 0001 	eor.w	r0, r0, r1
 8001050:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8001054:	4770      	bx	lr
 8001056:	f090 0f00 	teq	r0, #0
 800105a:	bf17      	itett	ne
 800105c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8001060:	4608      	moveq	r0, r1
 8001062:	f091 0f00 	teqne	r1, #0
 8001066:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800106a:	d014      	beq.n	8001096 <__aeabi_fmul+0x15e>
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d101      	bne.n	8001076 <__aeabi_fmul+0x13e>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	d10f      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001076:	ea93 0f0c 	teq	r3, ip
 800107a:	d103      	bne.n	8001084 <__aeabi_fmul+0x14c>
 800107c:	024b      	lsls	r3, r1, #9
 800107e:	bf18      	it	ne
 8001080:	4608      	movne	r0, r1
 8001082:	d108      	bne.n	8001096 <__aeabi_fmul+0x15e>
 8001084:	ea80 0001 	eor.w	r0, r0, r1
 8001088:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800108c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8001090:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001094:	4770      	bx	lr
 8001096:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800109a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800109e:	4770      	bx	lr

080010a0 <__aeabi_fdiv>:
 80010a0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80010a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80010a8:	bf1e      	ittt	ne
 80010aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80010ae:	ea92 0f0c 	teqne	r2, ip
 80010b2:	ea93 0f0c 	teqne	r3, ip
 80010b6:	d069      	beq.n	800118c <__aeabi_fdiv+0xec>
 80010b8:	eba2 0203 	sub.w	r2, r2, r3
 80010bc:	ea80 0c01 	eor.w	ip, r0, r1
 80010c0:	0249      	lsls	r1, r1, #9
 80010c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80010c6:	d037      	beq.n	8001138 <__aeabi_fdiv+0x98>
 80010c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80010d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80010d4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80010d8:	428b      	cmp	r3, r1
 80010da:	bf38      	it	cc
 80010dc:	005b      	lslcc	r3, r3, #1
 80010de:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80010e2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80010e6:	428b      	cmp	r3, r1
 80010e8:	bf24      	itt	cs
 80010ea:	1a5b      	subcs	r3, r3, r1
 80010ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80010f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80010f4:	bf24      	itt	cs
 80010f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80010fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80010fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001102:	bf24      	itt	cs
 8001104:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001108:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800110c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001110:	bf24      	itt	cs
 8001112:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001116:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	bf18      	it	ne
 800111e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001122:	d1e0      	bne.n	80010e6 <__aeabi_fdiv+0x46>
 8001124:	2afd      	cmp	r2, #253	@ 0xfd
 8001126:	f63f af50 	bhi.w	8000fca <__aeabi_fmul+0x92>
 800112a:	428b      	cmp	r3, r1
 800112c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001130:	bf08      	it	eq
 8001132:	f020 0001 	biceq.w	r0, r0, #1
 8001136:	4770      	bx	lr
 8001138:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800113c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001140:	327f      	adds	r2, #127	@ 0x7f
 8001142:	bfc2      	ittt	gt
 8001144:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001148:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800114c:	4770      	bxgt	lr
 800114e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	3a01      	subs	r2, #1
 8001158:	e737      	b.n	8000fca <__aeabi_fmul+0x92>
 800115a:	f092 0f00 	teq	r2, #0
 800115e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001162:	bf02      	ittt	eq
 8001164:	0040      	lsleq	r0, r0, #1
 8001166:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800116a:	3a01      	subeq	r2, #1
 800116c:	d0f9      	beq.n	8001162 <__aeabi_fdiv+0xc2>
 800116e:	ea40 000c 	orr.w	r0, r0, ip
 8001172:	f093 0f00 	teq	r3, #0
 8001176:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800117a:	bf02      	ittt	eq
 800117c:	0049      	lsleq	r1, r1, #1
 800117e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001182:	3b01      	subeq	r3, #1
 8001184:	d0f9      	beq.n	800117a <__aeabi_fdiv+0xda>
 8001186:	ea41 010c 	orr.w	r1, r1, ip
 800118a:	e795      	b.n	80010b8 <__aeabi_fdiv+0x18>
 800118c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001190:	ea92 0f0c 	teq	r2, ip
 8001194:	d108      	bne.n	80011a8 <__aeabi_fdiv+0x108>
 8001196:	0242      	lsls	r2, r0, #9
 8001198:	f47f af7d 	bne.w	8001096 <__aeabi_fmul+0x15e>
 800119c:	ea93 0f0c 	teq	r3, ip
 80011a0:	f47f af70 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011a4:	4608      	mov	r0, r1
 80011a6:	e776      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011a8:	ea93 0f0c 	teq	r3, ip
 80011ac:	d104      	bne.n	80011b8 <__aeabi_fdiv+0x118>
 80011ae:	024b      	lsls	r3, r1, #9
 80011b0:	f43f af4c 	beq.w	800104c <__aeabi_fmul+0x114>
 80011b4:	4608      	mov	r0, r1
 80011b6:	e76e      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011b8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80011bc:	bf18      	it	ne
 80011be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80011c2:	d1ca      	bne.n	800115a <__aeabi_fdiv+0xba>
 80011c4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80011c8:	f47f af5c 	bne.w	8001084 <__aeabi_fmul+0x14c>
 80011cc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80011d0:	f47f af3c 	bne.w	800104c <__aeabi_fmul+0x114>
 80011d4:	e75f      	b.n	8001096 <__aeabi_fmul+0x15e>
 80011d6:	bf00      	nop

080011d8 <__aeabi_uldivmod>:
 80011d8:	b953      	cbnz	r3, 80011f0 <__aeabi_uldivmod+0x18>
 80011da:	b94a      	cbnz	r2, 80011f0 <__aeabi_uldivmod+0x18>
 80011dc:	2900      	cmp	r1, #0
 80011de:	bf08      	it	eq
 80011e0:	2800      	cmpeq	r0, #0
 80011e2:	bf1c      	itt	ne
 80011e4:	f04f 31ff 	movne.w	r1, #4294967295
 80011e8:	f04f 30ff 	movne.w	r0, #4294967295
 80011ec:	f000 b96a 	b.w	80014c4 <__aeabi_idiv0>
 80011f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011f8:	f000 f806 	bl	8001208 <__udivmoddi4>
 80011fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001204:	b004      	add	sp, #16
 8001206:	4770      	bx	lr

08001208 <__udivmoddi4>:
 8001208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800120c:	9d08      	ldr	r5, [sp, #32]
 800120e:	460c      	mov	r4, r1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d14e      	bne.n	80012b2 <__udivmoddi4+0xaa>
 8001214:	4694      	mov	ip, r2
 8001216:	458c      	cmp	ip, r1
 8001218:	4686      	mov	lr, r0
 800121a:	fab2 f282 	clz	r2, r2
 800121e:	d962      	bls.n	80012e6 <__udivmoddi4+0xde>
 8001220:	b14a      	cbz	r2, 8001236 <__udivmoddi4+0x2e>
 8001222:	f1c2 0320 	rsb	r3, r2, #32
 8001226:	4091      	lsls	r1, r2
 8001228:	fa20 f303 	lsr.w	r3, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	4319      	orrs	r1, r3
 8001232:	fa00 fe02 	lsl.w	lr, r0, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f f68c 	uxth.w	r6, ip
 800123e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001246:	fb07 1114 	mls	r1, r7, r4, r1
 800124a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800124e:	fb04 f106 	mul.w	r1, r4, r6
 8001252:	4299      	cmp	r1, r3
 8001254:	d90a      	bls.n	800126c <__udivmoddi4+0x64>
 8001256:	eb1c 0303 	adds.w	r3, ip, r3
 800125a:	f104 30ff 	add.w	r0, r4, #4294967295
 800125e:	f080 8112 	bcs.w	8001486 <__udivmoddi4+0x27e>
 8001262:	4299      	cmp	r1, r3
 8001264:	f240 810f 	bls.w	8001486 <__udivmoddi4+0x27e>
 8001268:	3c02      	subs	r4, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a59      	subs	r1, r3, r1
 800126e:	fa1f f38e 	uxth.w	r3, lr
 8001272:	fbb1 f0f7 	udiv	r0, r1, r7
 8001276:	fb07 1110 	mls	r1, r7, r0, r1
 800127a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800127e:	fb00 f606 	mul.w	r6, r0, r6
 8001282:	429e      	cmp	r6, r3
 8001284:	d90a      	bls.n	800129c <__udivmoddi4+0x94>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f100 31ff 	add.w	r1, r0, #4294967295
 800128e:	f080 80fc 	bcs.w	800148a <__udivmoddi4+0x282>
 8001292:	429e      	cmp	r6, r3
 8001294:	f240 80f9 	bls.w	800148a <__udivmoddi4+0x282>
 8001298:	4463      	add	r3, ip
 800129a:	3802      	subs	r0, #2
 800129c:	1b9b      	subs	r3, r3, r6
 800129e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012a2:	2100      	movs	r1, #0
 80012a4:	b11d      	cbz	r5, 80012ae <__udivmoddi4+0xa6>
 80012a6:	40d3      	lsrs	r3, r2
 80012a8:	2200      	movs	r2, #0
 80012aa:	e9c5 3200 	strd	r3, r2, [r5]
 80012ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d905      	bls.n	80012c2 <__udivmoddi4+0xba>
 80012b6:	b10d      	cbz	r5, 80012bc <__udivmoddi4+0xb4>
 80012b8:	e9c5 0100 	strd	r0, r1, [r5]
 80012bc:	2100      	movs	r1, #0
 80012be:	4608      	mov	r0, r1
 80012c0:	e7f5      	b.n	80012ae <__udivmoddi4+0xa6>
 80012c2:	fab3 f183 	clz	r1, r3
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d146      	bne.n	8001358 <__udivmoddi4+0x150>
 80012ca:	42a3      	cmp	r3, r4
 80012cc:	d302      	bcc.n	80012d4 <__udivmoddi4+0xcc>
 80012ce:	4290      	cmp	r0, r2
 80012d0:	f0c0 80f0 	bcc.w	80014b4 <__udivmoddi4+0x2ac>
 80012d4:	1a86      	subs	r6, r0, r2
 80012d6:	eb64 0303 	sbc.w	r3, r4, r3
 80012da:	2001      	movs	r0, #1
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d0e6      	beq.n	80012ae <__udivmoddi4+0xa6>
 80012e0:	e9c5 6300 	strd	r6, r3, [r5]
 80012e4:	e7e3      	b.n	80012ae <__udivmoddi4+0xa6>
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	f040 8090 	bne.w	800140c <__udivmoddi4+0x204>
 80012ec:	eba1 040c 	sub.w	r4, r1, ip
 80012f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012f4:	fa1f f78c 	uxth.w	r7, ip
 80012f8:	2101      	movs	r1, #1
 80012fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80012fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001302:	fb08 4416 	mls	r4, r8, r6, r4
 8001306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800130a:	fb07 f006 	mul.w	r0, r7, r6
 800130e:	4298      	cmp	r0, r3
 8001310:	d908      	bls.n	8001324 <__udivmoddi4+0x11c>
 8001312:	eb1c 0303 	adds.w	r3, ip, r3
 8001316:	f106 34ff 	add.w	r4, r6, #4294967295
 800131a:	d202      	bcs.n	8001322 <__udivmoddi4+0x11a>
 800131c:	4298      	cmp	r0, r3
 800131e:	f200 80cd 	bhi.w	80014bc <__udivmoddi4+0x2b4>
 8001322:	4626      	mov	r6, r4
 8001324:	1a1c      	subs	r4, r3, r0
 8001326:	fa1f f38e 	uxth.w	r3, lr
 800132a:	fbb4 f0f8 	udiv	r0, r4, r8
 800132e:	fb08 4410 	mls	r4, r8, r0, r4
 8001332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001336:	fb00 f707 	mul.w	r7, r0, r7
 800133a:	429f      	cmp	r7, r3
 800133c:	d908      	bls.n	8001350 <__udivmoddi4+0x148>
 800133e:	eb1c 0303 	adds.w	r3, ip, r3
 8001342:	f100 34ff 	add.w	r4, r0, #4294967295
 8001346:	d202      	bcs.n	800134e <__udivmoddi4+0x146>
 8001348:	429f      	cmp	r7, r3
 800134a:	f200 80b0 	bhi.w	80014ae <__udivmoddi4+0x2a6>
 800134e:	4620      	mov	r0, r4
 8001350:	1bdb      	subs	r3, r3, r7
 8001352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001356:	e7a5      	b.n	80012a4 <__udivmoddi4+0x9c>
 8001358:	f1c1 0620 	rsb	r6, r1, #32
 800135c:	408b      	lsls	r3, r1
 800135e:	fa22 f706 	lsr.w	r7, r2, r6
 8001362:	431f      	orrs	r7, r3
 8001364:	fa20 fc06 	lsr.w	ip, r0, r6
 8001368:	fa04 f301 	lsl.w	r3, r4, r1
 800136c:	ea43 030c 	orr.w	r3, r3, ip
 8001370:	40f4      	lsrs	r4, r6
 8001372:	fa00 f801 	lsl.w	r8, r0, r1
 8001376:	0c38      	lsrs	r0, r7, #16
 8001378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800137c:	fbb4 fef0 	udiv	lr, r4, r0
 8001380:	fa1f fc87 	uxth.w	ip, r7
 8001384:	fb00 441e 	mls	r4, r0, lr, r4
 8001388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800138c:	fb0e f90c 	mul.w	r9, lr, ip
 8001390:	45a1      	cmp	r9, r4
 8001392:	fa02 f201 	lsl.w	r2, r2, r1
 8001396:	d90a      	bls.n	80013ae <__udivmoddi4+0x1a6>
 8001398:	193c      	adds	r4, r7, r4
 800139a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800139e:	f080 8084 	bcs.w	80014aa <__udivmoddi4+0x2a2>
 80013a2:	45a1      	cmp	r9, r4
 80013a4:	f240 8081 	bls.w	80014aa <__udivmoddi4+0x2a2>
 80013a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80013ac:	443c      	add	r4, r7
 80013ae:	eba4 0409 	sub.w	r4, r4, r9
 80013b2:	fa1f f983 	uxth.w	r9, r3
 80013b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80013ba:	fb00 4413 	mls	r4, r0, r3, r4
 80013be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80013c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80013c6:	45a4      	cmp	ip, r4
 80013c8:	d907      	bls.n	80013da <__udivmoddi4+0x1d2>
 80013ca:	193c      	adds	r4, r7, r4
 80013cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80013d0:	d267      	bcs.n	80014a2 <__udivmoddi4+0x29a>
 80013d2:	45a4      	cmp	ip, r4
 80013d4:	d965      	bls.n	80014a2 <__udivmoddi4+0x29a>
 80013d6:	3b02      	subs	r3, #2
 80013d8:	443c      	add	r4, r7
 80013da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80013de:	fba0 9302 	umull	r9, r3, r0, r2
 80013e2:	eba4 040c 	sub.w	r4, r4, ip
 80013e6:	429c      	cmp	r4, r3
 80013e8:	46ce      	mov	lr, r9
 80013ea:	469c      	mov	ip, r3
 80013ec:	d351      	bcc.n	8001492 <__udivmoddi4+0x28a>
 80013ee:	d04e      	beq.n	800148e <__udivmoddi4+0x286>
 80013f0:	b155      	cbz	r5, 8001408 <__udivmoddi4+0x200>
 80013f2:	ebb8 030e 	subs.w	r3, r8, lr
 80013f6:	eb64 040c 	sbc.w	r4, r4, ip
 80013fa:	fa04 f606 	lsl.w	r6, r4, r6
 80013fe:	40cb      	lsrs	r3, r1
 8001400:	431e      	orrs	r6, r3
 8001402:	40cc      	lsrs	r4, r1
 8001404:	e9c5 6400 	strd	r6, r4, [r5]
 8001408:	2100      	movs	r1, #0
 800140a:	e750      	b.n	80012ae <__udivmoddi4+0xa6>
 800140c:	f1c2 0320 	rsb	r3, r2, #32
 8001410:	fa20 f103 	lsr.w	r1, r0, r3
 8001414:	fa0c fc02 	lsl.w	ip, ip, r2
 8001418:	fa24 f303 	lsr.w	r3, r4, r3
 800141c:	4094      	lsls	r4, r2
 800141e:	430c      	orrs	r4, r1
 8001420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001424:	fa00 fe02 	lsl.w	lr, r0, r2
 8001428:	fa1f f78c 	uxth.w	r7, ip
 800142c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001430:	fb08 3110 	mls	r1, r8, r0, r3
 8001434:	0c23      	lsrs	r3, r4, #16
 8001436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800143a:	fb00 f107 	mul.w	r1, r0, r7
 800143e:	4299      	cmp	r1, r3
 8001440:	d908      	bls.n	8001454 <__udivmoddi4+0x24c>
 8001442:	eb1c 0303 	adds.w	r3, ip, r3
 8001446:	f100 36ff 	add.w	r6, r0, #4294967295
 800144a:	d22c      	bcs.n	80014a6 <__udivmoddi4+0x29e>
 800144c:	4299      	cmp	r1, r3
 800144e:	d92a      	bls.n	80014a6 <__udivmoddi4+0x29e>
 8001450:	3802      	subs	r0, #2
 8001452:	4463      	add	r3, ip
 8001454:	1a5b      	subs	r3, r3, r1
 8001456:	b2a4      	uxth	r4, r4
 8001458:	fbb3 f1f8 	udiv	r1, r3, r8
 800145c:	fb08 3311 	mls	r3, r8, r1, r3
 8001460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001464:	fb01 f307 	mul.w	r3, r1, r7
 8001468:	42a3      	cmp	r3, r4
 800146a:	d908      	bls.n	800147e <__udivmoddi4+0x276>
 800146c:	eb1c 0404 	adds.w	r4, ip, r4
 8001470:	f101 36ff 	add.w	r6, r1, #4294967295
 8001474:	d213      	bcs.n	800149e <__udivmoddi4+0x296>
 8001476:	42a3      	cmp	r3, r4
 8001478:	d911      	bls.n	800149e <__udivmoddi4+0x296>
 800147a:	3902      	subs	r1, #2
 800147c:	4464      	add	r4, ip
 800147e:	1ae4      	subs	r4, r4, r3
 8001480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001484:	e739      	b.n	80012fa <__udivmoddi4+0xf2>
 8001486:	4604      	mov	r4, r0
 8001488:	e6f0      	b.n	800126c <__udivmoddi4+0x64>
 800148a:	4608      	mov	r0, r1
 800148c:	e706      	b.n	800129c <__udivmoddi4+0x94>
 800148e:	45c8      	cmp	r8, r9
 8001490:	d2ae      	bcs.n	80013f0 <__udivmoddi4+0x1e8>
 8001492:	ebb9 0e02 	subs.w	lr, r9, r2
 8001496:	eb63 0c07 	sbc.w	ip, r3, r7
 800149a:	3801      	subs	r0, #1
 800149c:	e7a8      	b.n	80013f0 <__udivmoddi4+0x1e8>
 800149e:	4631      	mov	r1, r6
 80014a0:	e7ed      	b.n	800147e <__udivmoddi4+0x276>
 80014a2:	4603      	mov	r3, r0
 80014a4:	e799      	b.n	80013da <__udivmoddi4+0x1d2>
 80014a6:	4630      	mov	r0, r6
 80014a8:	e7d4      	b.n	8001454 <__udivmoddi4+0x24c>
 80014aa:	46d6      	mov	lr, sl
 80014ac:	e77f      	b.n	80013ae <__udivmoddi4+0x1a6>
 80014ae:	4463      	add	r3, ip
 80014b0:	3802      	subs	r0, #2
 80014b2:	e74d      	b.n	8001350 <__udivmoddi4+0x148>
 80014b4:	4606      	mov	r6, r0
 80014b6:	4623      	mov	r3, r4
 80014b8:	4608      	mov	r0, r1
 80014ba:	e70f      	b.n	80012dc <__udivmoddi4+0xd4>
 80014bc:	3e02      	subs	r6, #2
 80014be:	4463      	add	r3, ip
 80014c0:	e730      	b.n	8001324 <__udivmoddi4+0x11c>
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <calcsin>:

uint32_t sine_val[100];
uint16_t hanning_array[FFT_BUFFER_SIZE];

void calcsin ()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	e046      	b.n	8001562 <calcsin+0x9a>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2))/5+200;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f883 	bl	80005e4 <__aeabi_i2d>
 80014de:	a32c      	add	r3, pc, #176	@ (adr r3, 8001590 <calcsin+0xc8>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8e8 	bl	80006b8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <calcsin+0xb0>)
 80014f6:	f7ff fa09 	bl	800090c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f009 ff89 	bl	800b418 <sin>
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <calcsin+0xb4>)
 800150c:	f7fe ff1e 	bl	800034c <__adddf3>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <calcsin+0xb8>)
 800151e:	f7ff f8cb 	bl	80006b8 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <calcsin+0xbc>)
 8001530:	f7ff f9ec 	bl	800090c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <calcsin+0xc0>)
 8001542:	f7fe ff03 	bl	800034c <__adddf3>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb75 	bl	8000c3c <__aeabi_d2uiz>
 8001552:	4602      	mov	r2, r0
 8001554:	490d      	ldr	r1, [pc, #52]	@ (800158c <calcsin+0xc4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b63      	cmp	r3, #99	@ 0x63
 8001566:	ddb5      	ble.n	80014d4 <calcsin+0xc>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	f3af 8000 	nop.w
 8001578:	40590000 	.word	0x40590000
 800157c:	3ff00000 	.word	0x3ff00000
 8001580:	40a00000 	.word	0x40a00000
 8001584:	40140000 	.word	0x40140000
 8001588:	40690000 	.word	0x40690000
 800158c:	2000033c 	.word	0x2000033c
 8001590:	4d12d84a 	.word	0x4d12d84a
 8001594:	400921fb 	.word	0x400921fb

08001598 <calchanning>:

void calchanning(){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	e03e      	b.n	8001622 <calchanning+0x8a>
	        hanning_array[i] = (int)(0.5 * (1 - cos(2 * M_PI * i / (FFT_BUFFER_SIZE - 1))) * 4096);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff f81d 	bl	80005e4 <__aeabi_i2d>
 80015aa:	a327      	add	r3, pc, #156	@ (adr r3, 8001648 <calchanning+0xb0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f882 	bl	80006b8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a324      	add	r3, pc, #144	@ (adr r3, 8001650 <calchanning+0xb8>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f9a3 	bl	800090c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f009 fed9 	bl	800b384 <cos>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	4917      	ldr	r1, [pc, #92]	@ (8001638 <calchanning+0xa0>)
 80015dc:	f7fe feb4 	bl	8000348 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <calchanning+0xa4>)
 80015ee:	f7ff f863 	bl	80006b8 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <calchanning+0xa8>)
 8001600:	f7ff f85a 	bl	80006b8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faee 	bl	8000bec <__aeabi_d2iz>
 8001610:	4603      	mov	r3, r0
 8001612:	b299      	uxth	r1, r3
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <calchanning+0xac>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < FFT_BUFFER_SIZE; i++) {
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001628:	dbbc      	blt.n	80015a4 <calchanning+0xc>
	    }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	3ff00000 	.word	0x3ff00000
 800163c:	3fe00000 	.word	0x3fe00000
 8001640:	40b00000 	.word	0x40b00000
 8001644:	200004cc 	.word	0x200004cc
 8001648:	54442d18 	.word	0x54442d18
 800164c:	401921fb 	.word	0x401921fb
 8001650:	00000000 	.word	0x00000000
 8001654:	409ffc00 	.word	0x409ffc00

08001658 <sgn>:
    } while (fabs(term) > TOLERANCE);

    return sum;
}

int sgn(float x) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    if(x>=0){
 8001660:	edd7 7a01 	vldr	s15, [r7, #4]
 8001664:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db01      	blt.n	8001672 <sgn+0x1a>
    	return 1;
 800166e:	2301      	movs	r3, #1
 8001670:	e001      	b.n	8001676 <sgn+0x1e>
    }
    else{
    	return -1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <Read_ADC>:
uint32_t pwm_channels[3] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Read_ADC(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001688:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <Read_ADC+0x20>)
 800168a:	f001 ff59 	bl	8003540 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800168e:	f04f 31ff 	mov.w	r1, #4294967295
 8001692:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <Read_ADC+0x20>)
 8001694:	f002 f842 	bl	800371c <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <Read_ADC+0x20>)
 800169a:	f002 f9d3 	bl	8003a44 <HAL_ADC_GetValue>
 800169e:	4603      	mov	r3, r0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	2000007c 	.word	0x2000007c

080016a8 <HAL_ADC_ConvHalfCpltCallback>:
    HAL_UART_Transmit(&huart2, data, strlen(data), 100);
    __HAL_TIM_SET_COMPARE(htim, channel, best_pwm_value);
    HAL_Delay(1000);
}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e017      	b.n	80016e6 <HAL_ADC_ConvHalfCpltCallback+0x3e>
	 	fftBufIn[i] = (float)(ADC_val[i]*hanning_array[i]) ;
 80016b6:	4a11      	ldr	r2, [pc, #68]	@ (80016fc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	4619      	mov	r1, r3
 80016c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < FFT_BUFFER_SIZE ; i++) {
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016ec:	dbe3      	blt.n	80016b6 <HAL_ADC_ConvHalfCpltCallback+0xe>
        }
        //sprintf(data, "half buffer\r\n\n ");
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 80016ee:	f000 f837 	bl	8001760 <Calc_FFT>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200014e4 	.word	0x200014e4
 8001700:	200004cc 	.word	0x200004cc
 8001704:	200034e4 	.word	0x200034e4

08001708 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	e012      	b.n	800173e <HAL_ADC_ConvCpltCallback+0x36>
	  	fftBufIn[i-FFT_BUFFER_SIZE] = (float)(ADC_val[i]) ;
 8001718:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x4c>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001726:	ee07 2a90 	vmov	s15, r2
 800172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800172e:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_ADC_ConvCpltCallback+0x50>)
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = FFT_BUFFER_SIZE; i < FFT_BUFFER_SIZE*2; i++) {
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001744:	dbe8      	blt.n	8001718 <HAL_ADC_ConvCpltCallback+0x10>
        }
        //sprintf(data, "full buffer\r\n\n " );
        //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
        Calc_FFT();
 8001746:	f000 f80b 	bl	8001760 <Calc_FFT>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200014e4 	.word	0x200014e4
 8001758:	200034e4 	.word	0x200034e4
 800175c:	00000000 	.word	0x00000000

08001760 <Calc_FFT>:





void Calc_FFT(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0

	arm_rfft_fast_f32(&fftHandler, &fftBufIn, &fftBufOut,0);
 8001766:	2300      	movs	r3, #0
 8001768:	4a91      	ldr	r2, [pc, #580]	@ (80019b0 <Calc_FFT+0x250>)
 800176a:	4992      	ldr	r1, [pc, #584]	@ (80019b4 <Calc_FFT+0x254>)
 800176c:	4892      	ldr	r0, [pc, #584]	@ (80019b8 <Calc_FFT+0x258>)
 800176e:	f007 fdf5 	bl	800935c <arm_rfft_fast_f32>
		  float phase_1khz = 0.0f, phase_2khz = 0.0f;
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
		  //calc freqmagnitude for 1,2,3khz
		  float phase_shift_diff = 0.0;
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001784:	4b8d      	ldr	r3, [pc, #564]	@ (80019bc <Calc_FFT+0x25c>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	e057      	b.n	800183c <Calc_FFT+0xdc>
		        float real = fftBufOut[i * 2];
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4a87      	ldr	r2, [pc, #540]	@ (80019b0 <Calc_FFT+0x250>)
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
		        float imag = fftBufOut[(i * 2) + 1];
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3301      	adds	r3, #1
 80017a0:	4a83      	ldr	r2, [pc, #524]	@ (80019b0 <Calc_FFT+0x250>)
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
		        float curVal = sqrtf((real * real) + (imag * imag));
 80017aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ee17 0a90 	vmov	r0, s15
 80017c2:	f009 fe71 	bl	800b4a8 <sqrtf>
 80017c6:	60b8      	str	r0, [r7, #8]
		        float phase = atan2f(imag, real);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f009 fe6a 	bl	800b4a4 <atan2f>
 80017d0:	6078      	str	r0, [r7, #4]
		        if (i == sample_count_1khz) {
 80017d2:	4b7a      	ldr	r3, [pc, #488]	@ (80019bc <Calc_FFT+0x25c>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <Calc_FFT+0x84>
		            phase_1khz = phase;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e2:	e00f      	b.n	8001804 <Calc_FFT+0xa4>
		        } else if (i == sample_count_1khz * 2) {
 80017e4:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <Calc_FFT+0x25c>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d109      	bne.n	8001804 <Calc_FFT+0xa4>
		            phase_2khz = phase;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
		            phase_shift_diff = phase_2khz - phase_1khz;
 80017f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80017f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		        }

			  freq_mag[i/sample_count_1khz-1]+=(uint16_t)curVal;
 8001804:	4b6d      	ldr	r3, [pc, #436]	@ (80019bc <Calc_FFT+0x25c>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	496b      	ldr	r1, [pc, #428]	@ (80019c0 <Calc_FFT+0x260>)
 8001814:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001818:	edd7 7a02 	vldr	s15, [r7, #8]
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 1a90 	vmov	r1, s15
 8001824:	b289      	uxth	r1, r1
 8001826:	3b01      	subs	r3, #1
 8001828:	440a      	add	r2, r1
 800182a:	4965      	ldr	r1, [pc, #404]	@ (80019c0 <Calc_FFT+0x260>)
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (int i = sample_count_1khz; i <= sample_count_1khz*3; i +=sample_count_1khz){
 8001830:	4b62      	ldr	r3, [pc, #392]	@ (80019bc <Calc_FFT+0x25c>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	4413      	add	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
 800183c:	4b5f      	ldr	r3, [pc, #380]	@ (80019bc <Calc_FFT+0x25c>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184a:	429a      	cmp	r2, r3
 800184c:	dd9e      	ble.n	800178c <Calc_FFT+0x2c>

		  }
		  sprintf(data, "%d ", (int16_t)(phase_shift_diff*1000));
 800184e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001852:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80019c4 <Calc_FFT+0x264>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	ee17 3a90 	vmov	r3, s15
 8001862:	b21b      	sxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4958      	ldr	r1, [pc, #352]	@ (80019c8 <Calc_FFT+0x268>)
 8001868:	4858      	ldr	r0, [pc, #352]	@ (80019cc <Calc_FFT+0x26c>)
 800186a:	f009 f8eb 	bl	800aa44 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 800186e:	4857      	ldr	r0, [pc, #348]	@ (80019cc <Calc_FFT+0x26c>)
 8001870:	f7fe fd0e 	bl	8000290 <strlen>
 8001874:	4603      	mov	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2364      	movs	r3, #100	@ 0x64
 800187a:	4954      	ldr	r1, [pc, #336]	@ (80019cc <Calc_FFT+0x26c>)
 800187c:	4854      	ldr	r0, [pc, #336]	@ (80019d0 <Calc_FFT+0x270>)
 800187e:	f006 ff8b 	bl	8008798 <HAL_UART_Transmit>
		  if (phase_shift_diff < 0) {
 8001882:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d510      	bpl.n	80018b2 <Calc_FFT+0x152>
		      phase_shift_diff += 2 * PI;
 8001890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001892:	f7fe feb9 	bl	8000608 <__aeabi_f2d>
 8001896:	a344      	add	r3, pc, #272	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe fd56 	bl	800034c <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f9e8 	bl	8000c7c <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b0:	e01a      	b.n	80018e8 <Calc_FFT+0x188>
		  } else if (phase_shift_diff >= 2 * PI) {
 80018b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018b4:	f7fe fea8 	bl	8000608 <__aeabi_f2d>
 80018b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7ff f981 	bl	8000bc4 <__aeabi_dcmpge>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00f      	beq.n	80018e8 <Calc_FFT+0x188>
		      phase_shift_diff -= 2 * PI;
 80018c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018ca:	f7fe fe9d 	bl	8000608 <__aeabi_f2d>
 80018ce:	a336      	add	r3, pc, #216	@ (adr r3, 80019a8 <Calc_FFT+0x248>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fd38 	bl	8000348 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f9cc 	bl	8000c7c <__aeabi_d2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		  }


			  avgPhaseShift += phase_shift_diff;
 80018e8:	4b3a      	ldr	r3, [pc, #232]	@ (80019d4 <Calc_FFT+0x274>)
 80018ea:	ed93 7a00 	vldr	s14, [r3]
 80018ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f6:	4b37      	ldr	r3, [pc, #220]	@ (80019d4 <Calc_FFT+0x274>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
			  fft_count++;
 80018fc:	4b36      	ldr	r3, [pc, #216]	@ (80019d8 <Calc_FFT+0x278>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b34      	ldr	r3, [pc, #208]	@ (80019d8 <Calc_FFT+0x278>)
 8001906:	801a      	strh	r2, [r3, #0]


			  float avgTemp = 0.0f;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	623b      	str	r3, [r7, #32]

			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 800190e:	2304      	movs	r3, #4
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e02f      	b.n	8001974 <Calc_FFT+0x214>
			  	float curVal = sqrtf((fftBufOut[i]*fftBufOut[i])+ (fftBufOut[i+1]*fftBufOut[i+1]));
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <Calc_FFT+0x250>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <Calc_FFT+0x250>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	4a1e      	ldr	r2, [pc, #120]	@ (80019b0 <Calc_FFT+0x250>)
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	edd3 6a00 	vldr	s13, [r3]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	4a1b      	ldr	r2, [pc, #108]	@ (80019b0 <Calc_FFT+0x250>)
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	ee17 0a90 	vmov	r0, s15
 8001958:	f009 fda6 	bl	800b4a8 <sqrtf>
 800195c:	6178      	str	r0, [r7, #20]
			  	avgTemp += curVal;  // Convert float to
 800195e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001962:	edd7 7a05 	vldr	s15, [r7, #20]
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	edc7 7a08 	vstr	s15, [r7, #32]
			  for (int i = 4; i < FFT_BUFFER_SIZE; i +=2){
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3302      	adds	r3, #2
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800197a:	dbcb      	blt.n	8001914 <Calc_FFT+0x1b4>
				  //sprintf(data, "%d ", (uint16_t)(curVal));
				  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);
			  }
			  avg += ((uint32_t)avgTemp/((FFT_BUFFER_SIZE / 2)-2));
 800197c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001984:	ee17 3a90 	vmov	r3, s15
 8001988:	085b      	lsrs	r3, r3, #1
 800198a:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <Calc_FFT+0x27c>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0a1a      	lsrs	r2, r3, #8
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <Calc_FFT+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <Calc_FFT+0x280>)
 800199a:	6013      	str	r3, [r2, #0]





}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	@ 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	4d12d84a 	.word	0x4d12d84a
 80019ac:	401921fb 	.word	0x401921fb
 80019b0:	200054e4 	.word	0x200054e4
 80019b4:	200034e4 	.word	0x200034e4
 80019b8:	200014cc 	.word	0x200014cc
 80019bc:	20000000 	.word	0x20000000
 80019c0:	2000751c 	.word	0x2000751c
 80019c4:	447a0000 	.word	0x447a0000
 80019c8:	0800c79c 	.word	0x0800c79c
 80019cc:	200074e4 	.word	0x200074e4
 80019d0:	200002b4 	.word	0x200002b4
 80019d4:	20007528 	.word	0x20007528
 80019d8:	20007516 	.word	0x20007516
 80019dc:	80402011 	.word	0x80402011
 80019e0:	20007518 	.word	0x20007518
 80019e4:	00000000 	.word	0x00000000

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b590      	push	{r4, r7, lr}
 80019ea:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 80019ee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f0:	f001 f972 	bl	8002cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f4:	f000 fa9e 	bl	8001f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f8:	f000 fd7e 	bl	80024f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80019fc:	f000 fd56 	bl	80024ac <MX_DMA_Init>
  MX_ADC1_Init();
 8001a00:	f000 faea 	bl	8001fd8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a04:	f000 fb60 	bl	80020c8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8001a08:	f000 fcea 	bl	80023e0 <MX_TIM6_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fb9a 	bl	8002144 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a10:	f000 fd1c 	bl	800244c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001a14:	f000 fbea 	bl	80021ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a18:	f000 fc6a 	bl	80022f0 <MX_TIM3_Init>
	  	}
  }

  //start sweep for mzm bias and calculate bias on midpoint between min and max output current

  uint32_t adc_val[128]={0};
 8001a1c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001a20:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001a24:	4618      	mov	r0, r3
 8001a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	f009 f829 	bl	800aa84 <memset>
  uint16_t dac_val[128]={0};
 8001a32:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001a36:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a40:	461a      	mov	r2, r3
 8001a42:	2100      	movs	r1, #0
 8001a44:	f009 f81e 	bl	800aa84 <memset>
  uint16_t index_adc_val_smallest=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8a7 3332 	strh.w	r3, [r7, #818]	@ 0x332
  uint16_t index_adc_val_highest=0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8a7 3330 	strh.w	r3, [r7, #816]	@ 0x330
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	48c6      	ldr	r0, [pc, #792]	@ (8001d70 <main+0x388>)
 8001a58:	f003 fb1f 	bl	800509a <HAL_DAC_Start>
  Read_ADC();
 8001a5c:	f7ff fe12 	bl	8001684 <Read_ADC>
  for(int i = 0; i< 2048; i+=STEP_SIZE_BIAS_SWEEP){
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001a66:	e0a0      	b.n	8001baa <main+0x1c2>
	  //take avrage of 10values

	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1,DAC_ALIGN_12B_R, i);
 8001a68:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	48bf      	ldr	r0, [pc, #764]	@ (8001d70 <main+0x388>)
 8001a72:	f003 fc85 	bl	8005380 <HAL_DAC_SetValue>
	  for(int j = 0; j<20;j++){
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001a7c:	e01d      	b.n	8001aba <main+0xd2>
		  HAL_Delay(2);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f001 f9a6 	bl	8002dd0 <HAL_Delay>
		  adc_val[i/STEP_SIZE_BIAS_SWEEP] += Read_ADC();
 8001a84:	f7ff fdfe 	bl	8001684 <Read_ADC>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da00      	bge.n	8001a94 <main+0xac>
 8001a92:	330f      	adds	r3, #15
 8001a94:	111b      	asrs	r3, r3, #4
 8001a96:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001a9a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8001a9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aa2:	4411      	add	r1, r2
 8001aa4:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001aa8:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8001aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int j = 0; j<20;j++){
 8001ab0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001aba:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001abe:	2b13      	cmp	r3, #19
 8001ac0:	dddd      	ble.n	8001a7e <main+0x96>
	  }
	  sprintf(data,"set to:%d, adc: %d\r\n\n ",i, adc_val[i/STEP_SIZE_BIAS_SWEEP]);
 8001ac2:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	da00      	bge.n	8001acc <main+0xe4>
 8001aca:	330f      	adds	r3, #15
 8001acc:	111b      	asrs	r3, r3, #4
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001ad4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001ae0:	49a4      	ldr	r1, [pc, #656]	@ (8001d74 <main+0x38c>)
 8001ae2:	48a5      	ldr	r0, [pc, #660]	@ (8001d78 <main+0x390>)
 8001ae4:	f008 ffae 	bl	800aa44 <siprintf>
	  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001ae8:	48a3      	ldr	r0, [pc, #652]	@ (8001d78 <main+0x390>)
 8001aea:	f7fe fbd1 	bl	8000290 <strlen>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	2364      	movs	r3, #100	@ 0x64
 8001af4:	49a0      	ldr	r1, [pc, #640]	@ (8001d78 <main+0x390>)
 8001af6:	48a1      	ldr	r0, [pc, #644]	@ (8001d7c <main+0x394>)
 8001af8:	f006 fe4e 	bl	8008798 <HAL_UART_Transmit>
	  //keep highest and lowest adc values
	  if(adc_val[i/STEP_SIZE_BIAS_SWEEP]>=adc_val[index_adc_val_highest]){
 8001afc:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	da00      	bge.n	8001b06 <main+0x11e>
 8001b04:	330f      	adds	r3, #15
 8001b06:	111b      	asrs	r3, r3, #4
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b0e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b16:	f8b7 1330 	ldrh.w	r1, [r7, #816]	@ 0x330
 8001b1a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b1e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d308      	bcc.n	8001b3c <main+0x154>
		  index_adc_val_highest = i/STEP_SIZE_BIAS_SWEEP;
 8001b2a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da00      	bge.n	8001b34 <main+0x14c>
 8001b32:	330f      	adds	r3, #15
 8001b34:	111b      	asrs	r3, r3, #4
 8001b36:	f8a7 3330 	strh.w	r3, [r7, #816]	@ 0x330
 8001b3a:	e01e      	b.n	8001b7a <main+0x192>
	  }else if(adc_val[i/STEP_SIZE_BIAS_SWEEP]<=adc_val[index_adc_val_smallest]){
 8001b3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da00      	bge.n	8001b46 <main+0x15e>
 8001b44:	330f      	adds	r3, #15
 8001b46:	111b      	asrs	r3, r3, #4
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b4e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b56:	f8b7 1332 	ldrh.w	r1, [r7, #818]	@ 0x332
 8001b5a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b5e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001b62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d807      	bhi.n	8001b7a <main+0x192>
		  index_adc_val_smallest = i/STEP_SIZE_BIAS_SWEEP;
 8001b6a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	da00      	bge.n	8001b74 <main+0x18c>
 8001b72:	330f      	adds	r3, #15
 8001b74:	111b      	asrs	r3, r3, #4
 8001b76:	f8a7 3332 	strh.w	r3, [r7, #818]	@ 0x332
	  }
	  dac_val[i/STEP_SIZE_BIAS_SWEEP] = i;
 8001b7a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	da00      	bge.n	8001b84 <main+0x19c>
 8001b82:	330f      	adds	r3, #15
 8001b84:	111b      	asrs	r3, r3, #4
 8001b86:	461a      	mov	r2, r3
 8001b88:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b8c:	b299      	uxth	r1, r3
 8001b8e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001b92:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001b96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  HAL_Delay(10);
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f001 f918 	bl	8002dd0 <HAL_Delay>
  for(int i = 0; i< 2048; i+=STEP_SIZE_BIAS_SWEEP){
 8001ba0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001baa:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bb2:	f6ff af59 	blt.w	8001a68 <main+0x80>
  }
  //set dac to midpoint
  uint16_t midpoint_dac_val = dac_val[(index_adc_val_highest + index_adc_val_smallest) / 2];
 8001bb6:	f8b7 2330 	ldrh.w	r2, [r7, #816]	@ 0x330
 8001bba:	f8b7 3332 	ldrh.w	r3, [r7, #818]	@ 0x332
 8001bbe:	4413      	add	r3, r2
 8001bc0:	0fda      	lsrs	r2, r3, #31
 8001bc2:	4413      	add	r3, r2
 8001bc4:	105b      	asrs	r3, r3, #1
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001bcc:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8001bd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bd4:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
  // set to 1500 to see convergence to center
  midpoint_dac_val = 1500;
 8001bd8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001bdc:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val  );
 8001be0:	f8b7 3322 	ldrh.w	r3, [r7, #802]	@ 0x322
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	4861      	ldr	r0, [pc, #388]	@ (8001d70 <main+0x388>)
 8001bea:	f003 fbc9 	bl	8005380 <HAL_DAC_SetValue>
  sprintf(data, "bias set as:%d\r\n\n ",midpoint_dac_val);
 8001bee:	f8b7 3322 	ldrh.w	r3, [r7, #802]	@ 0x322
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4962      	ldr	r1, [pc, #392]	@ (8001d80 <main+0x398>)
 8001bf6:	4860      	ldr	r0, [pc, #384]	@ (8001d78 <main+0x390>)
 8001bf8:	f008 ff24 	bl	800aa44 <siprintf>
  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001bfc:	485e      	ldr	r0, [pc, #376]	@ (8001d78 <main+0x390>)
 8001bfe:	f7fe fb47 	bl	8000290 <strlen>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	2364      	movs	r3, #100	@ 0x64
 8001c08:	495b      	ldr	r1, [pc, #364]	@ (8001d78 <main+0x390>)
 8001c0a:	485c      	ldr	r0, [pc, #368]	@ (8001d7c <main+0x394>)
 8001c0c:	f006 fdc4 	bl	8008798 <HAL_UART_Transmit>


  //reset the adc
  HAL_ADC_Stop(&hadc1);
 8001c10:	485c      	ldr	r0, [pc, #368]	@ (8001d84 <main+0x39c>)
 8001c12:	f001 fd4f 	bl	80036b4 <HAL_ADC_Stop>
  //ADC_Disable(&hadc1);
  MX_ADC1_Init2();
 8001c16:	f000 fcc1 	bl	800259c <MX_ADC1_Init2>

  HAL_TIM_Base_Start(&htim6);
 8001c1a:	485b      	ldr	r0, [pc, #364]	@ (8001d88 <main+0x3a0>)
 8001c1c:	f005 fcd2 	bl	80075c4 <HAL_TIM_Base_Start>
  calcsin();
 8001c20:	f7ff fc52 	bl	80014c8 <calcsin>
  calchanning();
 8001c24:	f7ff fcb8 	bl	8001598 <calchanning>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001c28:	217f      	movs	r1, #127	@ 0x7f
 8001c2a:	4856      	ldr	r0, [pc, #344]	@ (8001d84 <main+0x39c>)
 8001c2c:	f002 ffc0 	bl	8004bb0 <HAL_ADCEx_Calibration_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_2, sine_val, 100, DAC_ALIGN_12B_R);
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2364      	movs	r3, #100	@ 0x64
 8001c36:	4a55      	ldr	r2, [pc, #340]	@ (8001d8c <main+0x3a4>)
 8001c38:	2110      	movs	r1, #16
 8001c3a:	484d      	ldr	r0, [pc, #308]	@ (8001d70 <main+0x388>)
 8001c3c:	f003 fa7a 	bl	8005134 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC_val,FFT_BUFFER_SIZE*2);
 8001c40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c44:	4952      	ldr	r1, [pc, #328]	@ (8001d90 <main+0x3a8>)
 8001c46:	484f      	ldr	r0, [pc, #316]	@ (8001d84 <main+0x39c>)
 8001c48:	f001 fe40 	bl	80038cc <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fftHandler,FFT_BUFFER_SIZE);
 8001c4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c50:	4850      	ldr	r0, [pc, #320]	@ (8001d94 <main+0x3ac>)
 8001c52:	f007 faff 	bl	8009254 <arm_rfft_fast_init_f32>
  HAL_TIM_Base_Start(&htim1);
 8001c56:	4850      	ldr	r0, [pc, #320]	@ (8001d98 <main+0x3b0>)
 8001c58:	f005 fcb4 	bl	80075c4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t dac_val_tone_bias[3]={0};
 8001c5c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c60:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	809a      	strh	r2, [r3, #4]
  uint32_t adc_val_tone_bias[3]={0};
 8001c6a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001c6e:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	6053      	str	r3, [r2, #4]
 8001c7a:	6093      	str	r3, [r2, #8]
  int16_t sweep_count = -1;
 8001c7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c80:	f8a7 331a 	strh.w	r3, [r7, #794]	@ 0x31a
  uint16_t prev_bias = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8a7 3318 	strh.w	r3, [r7, #792]	@ 0x318
  while (1)
  {


	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001c8a:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <main+0x3b4>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b63      	cmp	r3, #99	@ 0x63
 8001c90:	d9fb      	bls.n	8001c8a <main+0x2a2>
		  float phaseShift = avgPhaseShift/ fft_count;
 8001c92:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <main+0x3b8>)
 8001c94:	edd3 6a00 	vldr	s13, [r3]
 8001c98:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <main+0x3b4>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca8:	edc7 7ac7 	vstr	s15, [r7, #796]	@ 0x31c
		  sprintf(data, "phase shift: %d\r\n\n ",(int16_t)(phaseShift*1000));
 8001cac:	edd7 7ac7 	vldr	s15, [r7, #796]	@ 0x31c
 8001cb0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001db0 <main+0x3c8>
 8001cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cbc:	ee17 3a90 	vmov	r3, s15
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4937      	ldr	r1, [pc, #220]	@ (8001da4 <main+0x3bc>)
 8001cc6:	482c      	ldr	r0, [pc, #176]	@ (8001d78 <main+0x390>)
 8001cc8:	f008 febc 	bl	800aa44 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001ccc:	482a      	ldr	r0, [pc, #168]	@ (8001d78 <main+0x390>)
 8001cce:	f7fe fadf 	bl	8000290 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	2364      	movs	r3, #100	@ 0x64
 8001cd8:	4927      	ldr	r1, [pc, #156]	@ (8001d78 <main+0x390>)
 8001cda:	4828      	ldr	r0, [pc, #160]	@ (8001d7c <main+0x394>)
 8001cdc:	f006 fd5c 	bl	8008798 <HAL_UART_Transmit>

		  fft_count=0;
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <main+0x3b4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	801a      	strh	r2, [r3, #0]
		  sprintf(data, "%dfor  %d 1khz:%d 2khz:%d 3khz:%d\r\n\n ",sweep_count,prev_bias,freq_mag[0], freq_mag[1] ,freq_mag[2]);
 8001ce6:	f9b7 031a 	ldrsh.w	r0, [r7, #794]	@ 0x31a
 8001cea:	f8b7 4318 	ldrh.w	r4, [r7, #792]	@ 0x318
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <main+0x3c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8001da8 <main+0x3c0>)
 8001cf4:	6852      	ldr	r2, [r2, #4]
 8001cf6:	492c      	ldr	r1, [pc, #176]	@ (8001da8 <main+0x3c0>)
 8001cf8:	6889      	ldr	r1, [r1, #8]
 8001cfa:	9102      	str	r1, [sp, #8]
 8001cfc:	9201      	str	r2, [sp, #4]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4623      	mov	r3, r4
 8001d02:	4602      	mov	r2, r0
 8001d04:	4929      	ldr	r1, [pc, #164]	@ (8001dac <main+0x3c4>)
 8001d06:	481c      	ldr	r0, [pc, #112]	@ (8001d78 <main+0x390>)
 8001d08:	f008 fe9c 	bl	800aa44 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001d0c:	481a      	ldr	r0, [pc, #104]	@ (8001d78 <main+0x390>)
 8001d0e:	f7fe fabf 	bl	8000290 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	2364      	movs	r3, #100	@ 0x64
 8001d18:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <main+0x390>)
 8001d1a:	4818      	ldr	r0, [pc, #96]	@ (8001d7c <main+0x394>)
 8001d1c:	f006 fd3c 	bl	8008798 <HAL_UART_Transmit>
		    if (phaseShift> PI) {
 8001d20:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001d24:	f7fe fc70 	bl	8000608 <__aeabi_f2d>
 8001d28:	a30d      	add	r3, pc, #52	@ (adr r3, 8001d60 <main+0x378>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe ff53 	bl	8000bd8 <__aeabi_dcmpgt>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03d      	beq.n	8001db4 <main+0x3cc>
		    	phaseShift -= 2 * PI;
 8001d38:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001d3c:	f7fe fc64 	bl	8000608 <__aeabi_f2d>
 8001d40:	a309      	add	r3, pc, #36	@ (adr r3, 8001d68 <main+0x380>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe faff 	bl	8000348 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe ff93 	bl	8000c7c <__aeabi_d2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001d5c:	e02e      	b.n	8001dbc <main+0x3d4>
 8001d5e:	bf00      	nop
 8001d60:	4d12d84a 	.word	0x4d12d84a
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	4d12d84a 	.word	0x4d12d84a
 8001d6c:	401921fb 	.word	0x401921fb
 8001d70:	20000128 	.word	0x20000128
 8001d74:	0800c7a0 	.word	0x0800c7a0
 8001d78:	200074e4 	.word	0x200074e4
 8001d7c:	200002b4 	.word	0x200002b4
 8001d80:	0800c7b8 	.word	0x0800c7b8
 8001d84:	2000007c 	.word	0x2000007c
 8001d88:	20000268 	.word	0x20000268
 8001d8c:	2000033c 	.word	0x2000033c
 8001d90:	200014e4 	.word	0x200014e4
 8001d94:	200014cc 	.word	0x200014cc
 8001d98:	20000184 	.word	0x20000184
 8001d9c:	20007516 	.word	0x20007516
 8001da0:	20007528 	.word	0x20007528
 8001da4:	0800c7cc 	.word	0x0800c7cc
 8001da8:	2000751c 	.word	0x2000751c
 8001dac:	0800c7e0 	.word	0x0800c7e0
 8001db0:	447a0000 	.word	0x447a0000
		    } else if (phaseShift < PI) {
 8001db4:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001db8:	f7fe fc26 	bl	8000608 <__aeabi_f2d>
		    	//phaseShift+= 2 * PI;
		    }

			  sprintf(data, "phase shift: %d\r\n\n ",(int16_t)(phaseShift*1000));
 8001dbc:	edd7 7ac7 	vldr	s15, [r7, #796]	@ 0x31c
 8001dc0:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001db0 <main+0x3c8>
 8001dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dcc:	ee17 3a90 	vmov	r3, s15
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	494a      	ldr	r1, [pc, #296]	@ (8001f00 <main+0x518>)
 8001dd6:	484b      	ldr	r0, [pc, #300]	@ (8001f04 <main+0x51c>)
 8001dd8:	f008 fe34 	bl	800aa44 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001ddc:	4849      	ldr	r0, [pc, #292]	@ (8001f04 <main+0x51c>)
 8001dde:	f7fe fa57 	bl	8000290 <strlen>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	2364      	movs	r3, #100	@ 0x64
 8001de8:	4946      	ldr	r1, [pc, #280]	@ (8001f04 <main+0x51c>)
 8001dea:	4847      	ldr	r0, [pc, #284]	@ (8001f08 <main+0x520>)
 8001dec:	f006 fcd4 	bl	8008798 <HAL_UART_Transmit>
		  //float Vpi = ((midpoint_dac_val*13.724)/4096.0)*2;
		  //float Vac = 0.66;
		  //float correction =(Vpi/PI*arccot(((float)freq_mag[1]*bessel_jn(1,((Vac*PI)/Vpi)))/((float)freq_mag[0]*bessel_jn(2,((Vac*PI)/Vpi))))*sgn(phaseShift));//-(Vpi/2);
		  //midpoint_dac_val = midpoint_dac_val - (int16_t)((correction/13.724)*4096);
		  //fixed offset
			  avg = avg/100;
 8001df0:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <main+0x524>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <main+0x528>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	4a43      	ldr	r2, [pc, #268]	@ (8001f0c <main+0x524>)
 8001dfe:	6013      	str	r3, [r2, #0]
			  sprintf(data, "avg: %d\r\n\n ",avg);
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <main+0x524>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4943      	ldr	r1, [pc, #268]	@ (8001f14 <main+0x52c>)
 8001e08:	483e      	ldr	r0, [pc, #248]	@ (8001f04 <main+0x51c>)
 8001e0a:	f008 fe1b 	bl	800aa44 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001e0e:	483d      	ldr	r0, [pc, #244]	@ (8001f04 <main+0x51c>)
 8001e10:	f7fe fa3e 	bl	8000290 <strlen>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	2364      	movs	r3, #100	@ 0x64
 8001e1a:	493a      	ldr	r1, [pc, #232]	@ (8001f04 <main+0x51c>)
 8001e1c:	483a      	ldr	r0, [pc, #232]	@ (8001f08 <main+0x520>)
 8001e1e:	f006 fcbb 	bl	8008798 <HAL_UART_Transmit>
		  if(freq_mag[1]> 150000){
 8001e22:	4b3d      	ldr	r3, [pc, #244]	@ (8001f18 <main+0x530>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a3d      	ldr	r2, [pc, #244]	@ (8001f1c <main+0x534>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d930      	bls.n	8001e8e <main+0x4a6>
			  float correction2 =50*sgn(phaseShift);
 8001e2c:	f8d7 031c 	ldr.w	r0, [r7, #796]	@ 0x31c
 8001e30:	f7ff fc12 	bl	8001658 <sgn>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2232      	movs	r2, #50	@ 0x32
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	edc7 7ac9 	vstr	s15, [r7, #804]	@ 0x324
			  midpoint_dac_val = midpoint_dac_val - (int16_t)(correction2);
 8001e48:	edd7 7ac9 	vldr	s15, [r7, #804]	@ 0x324
 8001e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e50:	ee17 3a90 	vmov	r3, s15
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f8b7 2322 	ldrh.w	r2, [r7, #802]	@ 0x322
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f8a7 3322 	strh.w	r3, [r7, #802]	@ 0x322
			  sprintf(data, "correction: %d\r\n\n ",(int16_t)(correction2));
 8001e62:	edd7 7ac9 	vldr	s15, [r7, #804]	@ 0x324
 8001e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6a:	ee17 3a90 	vmov	r3, s15
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	492b      	ldr	r1, [pc, #172]	@ (8001f20 <main+0x538>)
 8001e74:	4823      	ldr	r0, [pc, #140]	@ (8001f04 <main+0x51c>)
 8001e76:	f008 fde5 	bl	800aa44 <siprintf>
			  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001e7a:	4822      	ldr	r0, [pc, #136]	@ (8001f04 <main+0x51c>)
 8001e7c:	f7fe fa08 	bl	8000290 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2364      	movs	r3, #100	@ 0x64
 8001e86:	491f      	ldr	r1, [pc, #124]	@ (8001f04 <main+0x51c>)
 8001e88:	481f      	ldr	r0, [pc, #124]	@ (8001f08 <main+0x520>)
 8001e8a:	f006 fc85 	bl	8008798 <HAL_UART_Transmit>
		  }
		  avg = 0;
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <main+0x524>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
		  sprintf(data, "new dac val: %d\r\n\n ",midpoint_dac_val);
 8001e94:	f8b7 3322 	ldrh.w	r3, [r7, #802]	@ 0x322
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4922      	ldr	r1, [pc, #136]	@ (8001f24 <main+0x53c>)
 8001e9c:	4819      	ldr	r0, [pc, #100]	@ (8001f04 <main+0x51c>)
 8001e9e:	f008 fdd1 	bl	800aa44 <siprintf>
		  HAL_UART_Transmit(&huart2, data, strlen(data), 100);
 8001ea2:	4818      	ldr	r0, [pc, #96]	@ (8001f04 <main+0x51c>)
 8001ea4:	f7fe f9f4 	bl	8000290 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	2364      	movs	r3, #100	@ 0x64
 8001eae:	4915      	ldr	r1, [pc, #84]	@ (8001f04 <main+0x51c>)
 8001eb0:	4815      	ldr	r0, [pc, #84]	@ (8001f08 <main+0x520>)
 8001eb2:	f006 fc71 	bl	8008798 <HAL_UART_Transmit>
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, midpoint_dac_val);
 8001eb6:	f8b7 3322 	ldrh.w	r3, [r7, #802]	@ 0x322
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <main+0x540>)
 8001ec0:	f003 fa5e 	bl	8005380 <HAL_DAC_SetValue>

	  		fft_count=0;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <main+0x544>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	801a      	strh	r2, [r3, #0]
	  		avgPhaseShift = 0;
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <main+0x548>)
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
			  for(int i =0;i<=2;i++){
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001ed8:	e00a      	b.n	8001ef0 <main+0x508>
				  freq_mag[i]=0;
 8001eda:	4a0f      	ldr	r2, [pc, #60]	@ (8001f18 <main+0x530>)
 8001edc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  for(int i =0;i<=2;i++){
 8001ee6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001eea:	3301      	adds	r3, #1
 8001eec:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001ef0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	ddf0      	ble.n	8001eda <main+0x4f2>
			  }
			  fft_count=0;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <main+0x544>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	801a      	strh	r2, [r3, #0]
	  if(fft_count>=FFT_AVRAGE_COUNT){
 8001efe:	e6c4      	b.n	8001c8a <main+0x2a2>
 8001f00:	0800c7cc 	.word	0x0800c7cc
 8001f04:	200074e4 	.word	0x200074e4
 8001f08:	200002b4 	.word	0x200002b4
 8001f0c:	20007518 	.word	0x20007518
 8001f10:	51eb851f 	.word	0x51eb851f
 8001f14:	0800c808 	.word	0x0800c808
 8001f18:	2000751c 	.word	0x2000751c
 8001f1c:	000249f0 	.word	0x000249f0
 8001f20:	0800c814 	.word	0x0800c814
 8001f24:	0800c828 	.word	0x0800c828
 8001f28:	20000128 	.word	0x20000128
 8001f2c:	20007516 	.word	0x20007516
 8001f30:	20007528 	.word	0x20007528

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b096      	sub	sp, #88	@ 0x58
 8001f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	2244      	movs	r2, #68	@ 0x44
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f008 fd9e 	bl	800aa84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f48:	463b      	mov	r3, r7
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f5a:	f003 ffc9 	bl	8005ef0 <HAL_PWREx_ControlVoltageScaling>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f64:	f000 fb94 	bl	8002690 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f74:	2360      	movs	r3, #96	@ 0x60
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f80:	2301      	movs	r3, #1
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001f84:	2320      	movs	r3, #32
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f90:	2302      	movs	r3, #2
 8001f92:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 ffff 	bl	8005f9c <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001fa4:	f000 fb74 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2303      	movs	r3, #3
 8001fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fbc7 	bl	8006754 <HAL_RCC_ClockConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001fcc:	f000 fb60 	bl	8002690 <Error_Handler>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3758      	adds	r7, #88	@ 0x58
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	@ 0x28
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ffa:	4b30      	ldr	r3, [pc, #192]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8001ffc:	4a30      	ldr	r2, [pc, #192]	@ (80020c0 <MX_ADC1_Init+0xe8>)
 8001ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002000:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002002:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <MX_ADC1_Init+0xe4>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002010:	2200      	movs	r2, #0
 8002012:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002014:	4b29      	ldr	r3, [pc, #164]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <MX_ADC1_Init+0xe4>)
 800201c:	2204      	movs	r2, #4
 800201e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002020:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002022:	2200      	movs	r2, #0
 8002024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002026:	4b25      	ldr	r3, [pc, #148]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002028:	2200      	movs	r2, #0
 800202a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800202c:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <MX_ADC1_Init+0xe4>)
 800202e:	2201      	movs	r2, #1
 8002030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002032:	4b22      	ldr	r3, [pc, #136]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <MX_ADC1_Init+0xe4>)
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002040:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800204e:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002050:	2200      	movs	r2, #0
 8002052:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800205c:	4817      	ldr	r0, [pc, #92]	@ (80020bc <MX_ADC1_Init+0xe4>)
 800205e:	f001 f91f 	bl	80032a0 <HAL_ADC_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002068:	f000 fb12 	bl	8002690 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4811      	ldr	r0, [pc, #68]	@ (80020bc <MX_ADC1_Init+0xe4>)
 8002078:	f002 fe2c 	bl	8004cd4 <HAL_ADCEx_MultiModeConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002082:	f000 fb05 	bl	8002690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002086:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_ADC1_Init+0xec>)
 8002088:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800208a:	2306      	movs	r3, #6
 800208c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002092:	237f      	movs	r3, #127	@ 0x7f
 8002094:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002096:	2304      	movs	r3, #4
 8002098:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	@ (80020bc <MX_ADC1_Init+0xe4>)
 80020a4:	f001 ff0a 	bl	8003ebc <HAL_ADC_ConfigChannel>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80020ae:	f000 faef 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	@ 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000007c 	.word	0x2000007c
 80020c0:	50040000 	.word	0x50040000
 80020c4:	14f00020 	.word	0x14f00020

080020c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2224      	movs	r2, #36	@ 0x24
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f008 fcd5 	bl	800aa84 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <MX_DAC1_Init+0x74>)
 80020dc:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <MX_DAC1_Init+0x78>)
 80020de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020e0:	4816      	ldr	r0, [pc, #88]	@ (800213c <MX_DAC1_Init+0x74>)
 80020e2:	f002 ffb8 	bl	8005056 <HAL_DAC_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80020ec:	f000 fad0 	bl	8002690 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	4619      	mov	r1, r3
 800210a:	480c      	ldr	r0, [pc, #48]	@ (800213c <MX_DAC1_Init+0x74>)
 800210c:	f003 f985 	bl	800541a <HAL_DAC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002116:	f000 fabb 	bl	8002690 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800211a:	2304      	movs	r3, #4
 800211c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2210      	movs	r2, #16
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	@ (800213c <MX_DAC1_Init+0x74>)
 8002126:	f003 f978 	bl	800541a <HAL_DAC_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8002130:	f000 faae 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	@ 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000128 	.word	0x20000128
 8002140:	40007400 	.word	0x40007400

08002144 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <MX_TIM1_Init+0xa4>)
 8002166:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 624;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 800216a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800216e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 8002178:	2209      	movs	r2, #9
 800217a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800218e:	4815      	ldr	r0, [pc, #84]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 8002190:	f005 f9c0 	bl	8007514 <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800219a:	f000 fa79 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	480e      	ldr	r0, [pc, #56]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 80021ac:	f005 fcee 	bl	8007b8c <HAL_TIM_ConfigClockSource>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021b6:	f000 fa6b 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ba:	2320      	movs	r3, #32
 80021bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80021be:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80021c2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <MX_TIM1_Init+0xa0>)
 80021ce:	f006 f9ef 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80021d8:	f000 fa5a 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000184 	.word	0x20000184
 80021e8:	40012c00 	.word	0x40012c00

080021ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	@ 0x38
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220c:	463b      	mov	r3, r7
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	615a      	str	r2, [r3, #20]
 800221c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002224:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002228:	223f      	movs	r2, #63	@ 0x3f
 800222a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <MX_TIM2_Init+0x100>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8002232:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002234:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <MX_TIM2_Init+0x100>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b2a      	ldr	r3, [pc, #168]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002246:	4829      	ldr	r0, [pc, #164]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002248:	f005 f964 	bl	8007514 <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002252:	f000 fa1d 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002256:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800225c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002260:	4619      	mov	r1, r3
 8002262:	4822      	ldr	r0, [pc, #136]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002264:	f005 fc92 	bl	8007b8c <HAL_TIM_ConfigClockSource>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800226e:	f000 fa0f 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002272:	481e      	ldr	r0, [pc, #120]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002274:	f005 fa0e 	bl	8007694 <HAL_TIM_PWM_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800227e:	f000 fa07 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	4816      	ldr	r0, [pc, #88]	@ (80022ec <MX_TIM2_Init+0x100>)
 8002292:	f006 f98d 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800229c:	f000 f9f8 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a0:	2360      	movs	r3, #96	@ 0x60
 80022a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b0:	463b      	mov	r3, r7
 80022b2:	2204      	movs	r2, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	@ (80022ec <MX_TIM2_Init+0x100>)
 80022b8:	f005 fb54 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80022c2:	f000 f9e5 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2208      	movs	r2, #8
 80022ca:	4619      	mov	r1, r3
 80022cc:	4807      	ldr	r0, [pc, #28]	@ (80022ec <MX_TIM2_Init+0x100>)
 80022ce:	f005 fb49 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80022d8:	f000 f9da 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <MX_TIM2_Init+0x100>)
 80022de:	f000 fb77 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 80022e2:	bf00      	nop
 80022e4:	3738      	adds	r7, #56	@ 0x38
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200001d0 	.word	0x200001d0

080022f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	@ 0x38
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002310:	463b      	mov	r3, r7
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	615a      	str	r2, [r3, #20]
 8002320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002322:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002324:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002326:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8002328:	4b2b      	ldr	r3, [pc, #172]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 800232a:	223f      	movs	r2, #63	@ 0x3f
 800232c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232e:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002334:	4b28      	ldr	r3, [pc, #160]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002336:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800233a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233c:	4b26      	ldr	r3, [pc, #152]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002342:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002348:	4823      	ldr	r0, [pc, #140]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 800234a:	f005 f8e3 	bl	8007514 <HAL_TIM_Base_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002354:	f000 f99c 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800235e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002362:	4619      	mov	r1, r3
 8002364:	481c      	ldr	r0, [pc, #112]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002366:	f005 fc11 	bl	8007b8c <HAL_TIM_ConfigClockSource>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002370:	f000 f98e 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002374:	4818      	ldr	r0, [pc, #96]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002376:	f005 f98d 	bl	8007694 <HAL_TIM_PWM_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002380:	f000 f986 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	4811      	ldr	r0, [pc, #68]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 8002394:	f006 f90c 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800239e:	f000 f977 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a2:	2360      	movs	r3, #96	@ 0x60
 80023a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 80023ba:	f005 fad3 	bl	8007964 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80023c4:	f000 f964 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023c8:	4803      	ldr	r0, [pc, #12]	@ (80023d8 <MX_TIM3_Init+0xe8>)
 80023ca:	f000 fb01 	bl	80029d0 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3738      	adds	r7, #56	@ 0x38
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	2000021c 	.word	0x2000021c
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <MX_TIM6_Init+0x64>)
 80023f2:	4a15      	ldr	r2, [pc, #84]	@ (8002448 <MX_TIM6_Init+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <MX_TIM6_Init+0x64>)
 80023f8:	223f      	movs	r2, #63	@ 0x3f
 80023fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <MX_TIM6_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <MX_TIM6_Init+0x64>)
 8002404:	2209      	movs	r2, #9
 8002406:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <MX_TIM6_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800240e:	480d      	ldr	r0, [pc, #52]	@ (8002444 <MX_TIM6_Init+0x64>)
 8002410:	f005 f880 	bl	8007514 <HAL_TIM_Base_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800241a:	f000 f939 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800241e:	2320      	movs	r3, #32
 8002420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	@ (8002444 <MX_TIM6_Init+0x64>)
 800242c:	f006 f8c0 	bl	80085b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002436:	f000 f92b 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000268 	.word	0x20000268
 8002448:	40001000 	.word	0x40001000

0800244c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002452:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <MX_USART2_UART_Init+0x5c>)
 8002454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002456:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002458:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800245c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002472:	220c      	movs	r2, #12
 8002474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002482:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <MX_USART2_UART_Init+0x58>)
 8002490:	f006 f934 	bl	80086fc <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800249a:	f000 f8f9 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200002b4 	.word	0x200002b4
 80024a8:	40004400 	.word	0x40004400

080024ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_DMA_Init+0x48>)
 80024b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024b6:	4a0f      	ldr	r2, [pc, #60]	@ (80024f4 <MX_DMA_Init+0x48>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <MX_DMA_Init+0x48>)
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	200b      	movs	r0, #11
 80024d0:	f002 fd8b 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024d4:	200b      	movs	r0, #11
 80024d6:	f002 fda4 	bl	8005022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	200e      	movs	r0, #14
 80024e0:	f002 fd83 	bl	8004fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80024e4:	200e      	movs	r0, #14
 80024e6:	f002 fd9c 	bl	8005022 <HAL_NVIC_EnableIRQ>

}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002512:	4a20      	ldr	r2, [pc, #128]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_GPIO_Init+0x9c>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <MX_GPIO_Init+0x9c>)
 800252c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002532:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <MX_GPIO_Init+0x9c>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255a:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <MX_GPIO_Init+0x9c>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_GPIO_Init+0x9c>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800256e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002574:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4804      	ldr	r0, [pc, #16]	@ (8002598 <MX_GPIO_Init+0xa0>)
 8002586:	f003 fafb 	bl	8005b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	48000800 	.word	0x48000800

0800259c <MX_ADC1_Init2>:

/* USER CODE BEGIN 4 */
void MX_ADC1_Init2(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	@ 0x28
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80025a2:	f107 031c 	add.w	r3, r7, #28
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80025be:	4b31      	ldr	r3, [pc, #196]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025c0:	4a31      	ldr	r2, [pc, #196]	@ (8002688 <MX_ADC1_Init2+0xec>)
 80025c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80025c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80025ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025e0:	2204      	movs	r2, #4
 80025e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025ea:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80025f0:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80025fe:	4b21      	ldr	r3, [pc, #132]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002600:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002606:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002608:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800260e:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002616:	4b1b      	ldr	r3, [pc, #108]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800261c:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002624:	4817      	ldr	r0, [pc, #92]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002626:	f000 fe3b 	bl	80032a0 <HAL_ADC_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_ADC1_Init2+0x98>
  {
    Error_Handler();
 8002630:	f000 f82e 	bl	8002690 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002638:	f107 031c 	add.w	r3, r7, #28
 800263c:	4619      	mov	r1, r3
 800263e:	4811      	ldr	r0, [pc, #68]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 8002640:	f002 fb48 	bl	8004cd4 <HAL_ADCEx_MultiModeConfigChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_ADC1_Init2+0xb2>
  {
    Error_Handler();
 800264a:	f000 f821 	bl	8002690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <MX_ADC1_Init2+0xf0>)
 8002650:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002652:	2306      	movs	r3, #6
 8002654:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800265a:	237f      	movs	r3, #127	@ 0x7f
 800265c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800265e:	2304      	movs	r3, #4
 8002660:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4806      	ldr	r0, [pc, #24]	@ (8002684 <MX_ADC1_Init2+0xe8>)
 800266c:	f001 fc26 	bl	8003ebc <HAL_ADC_ConfigChannel>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_ADC1_Init2+0xde>
  {
    Error_Handler();
 8002676:	f000 f80b 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000007c 	.word	0x2000007c
 8002688:	50040000 	.word	0x50040000
 800268c:	14f00020 	.word	0x14f00020

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <Error_Handler+0x8>

0800269c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <HAL_MspInit+0x44>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4a0e      	ldr	r2, [pc, #56]	@ (80026e0 <HAL_MspInit+0x44>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ae:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <HAL_MspInit+0x44>)
 80026b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_MspInit+0x44>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <HAL_MspInit+0x44>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_MspInit+0x44>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0ac      	sub	sp, #176	@ 0xb0
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2288      	movs	r2, #136	@ 0x88
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f008 f9bd 	bl	800aa84 <memset>
  if(hadc->Instance==ADC1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a41      	ldr	r2, [pc, #260]	@ (8002814 <HAL_ADC_MspInit+0x130>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d17a      	bne.n	800280a <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002714:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002718:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800271a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800271e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002722:	2301      	movs	r3, #1
 8002724:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800272a:	2310      	movs	r3, #16
 800272c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800272e:	2307      	movs	r3, #7
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002732:	2302      	movs	r3, #2
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002736:	2308      	movs	r3, #8
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800273a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800273e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4618      	mov	r0, r3
 8002746:	f004 fa29 	bl	8006b9c <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002750:	f7ff ff9e 	bl	8002690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002758:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 800275a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800275e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b2a      	ldr	r3, [pc, #168]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <HAL_ADC_MspInit+0x134>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002784:	2301      	movs	r3, #1
 8002786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800278a:	230b      	movs	r3, #11
 800278c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800279a:	4619      	mov	r1, r3
 800279c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a0:	f003 f9ee 	bl	8005b80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_ADC_MspInit+0x13c>)
 80027a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027c2:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027d4:	2220      	movs	r2, #32
 80027d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027d8:	4b10      	ldr	r3, [pc, #64]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027da:	2200      	movs	r2, #0
 80027dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027de:	480f      	ldr	r0, [pc, #60]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027e0:	f002 ffd6 	bl	8005790 <HAL_DMA_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 80027ea:	f7ff ff51 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027f4:	4a09      	ldr	r2, [pc, #36]	@ (800281c <HAL_ADC_MspInit+0x138>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2012      	movs	r0, #18
 8002800:	f002 fbf3 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002804:	2012      	movs	r0, #18
 8002806:	f002 fc0c 	bl	8005022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800280a:	bf00      	nop
 800280c:	37b0      	adds	r7, #176	@ 0xb0
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	50040000 	.word	0x50040000
 8002818:	40021000 	.word	0x40021000
 800281c:	200000e0 	.word	0x200000e0
 8002820:	40020008 	.word	0x40020008

08002824 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2f      	ldr	r2, [pc, #188]	@ (8002900 <HAL_DAC_MspInit+0xdc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d157      	bne.n	80028f6 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002846:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	4a2e      	ldr	r2, [pc, #184]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 800284c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002850:	6593      	str	r3, [r2, #88]	@ 0x58
 8002852:	4b2c      	ldr	r3, [pc, #176]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286a:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <HAL_DAC_MspInit+0xe0>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002876:	2330      	movs	r3, #48	@ 0x30
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800287a:	2303      	movs	r3, #3
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288c:	f003 f978 	bl	8005b80 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002890:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 8002892:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <HAL_DAC_MspInit+0xe8>)
 8002894:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002896:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 8002898:	2205      	movs	r2, #5
 800289a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 800289e:	2210      	movs	r2, #16
 80028a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ae:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028b6:	4b14      	ldr	r3, [pc, #80]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028c0:	2220      	movs	r2, #32
 80028c2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80028c4:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80028ca:	480f      	ldr	r0, [pc, #60]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028cc:	f002 ff60 	bl	8005790 <HAL_DMA_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80028d6:	f7ff fedb 	bl	8002690 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <HAL_DAC_MspInit+0xe4>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2036      	movs	r0, #54	@ 0x36
 80028ec:	f002 fb7d 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028f0:	2036      	movs	r0, #54	@ 0x36
 80028f2:	f002 fb96 	bl	8005022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80028f6:	bf00      	nop
 80028f8:	3728      	adds	r7, #40	@ 0x28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40007400 	.word	0x40007400
 8002904:	40021000 	.word	0x40021000
 8002908:	2000013c 	.word	0x2000013c
 800290c:	40020044 	.word	0x40020044

08002910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a28      	ldr	r2, [pc, #160]	@ (80029c0 <HAL_TIM_Base_MspInit+0xb0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002922:	4b28      	ldr	r3, [pc, #160]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	4a27      	ldr	r2, [pc, #156]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002928:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800292c:	6613      	str	r3, [r2, #96]	@ 0x60
 800292e:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800293a:	e03c      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002944:	d10c      	bne.n	8002960 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002946:	4b1f      	ldr	r3, [pc, #124]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a1e      	ldr	r2, [pc, #120]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b1c      	ldr	r3, [pc, #112]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
}
 800295e:	e02a      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_TIM_Base_MspInit+0xb8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10c      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800296a:	4b16      	ldr	r3, [pc, #88]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	4a15      	ldr	r2, [pc, #84]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6593      	str	r3, [r2, #88]	@ 0x58
 8002976:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	e018      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <HAL_TIM_Base_MspInit+0xbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	4a0c      	ldr	r2, [pc, #48]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	6593      	str	r3, [r2, #88]	@ 0x58
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_TIM_Base_MspInit+0xb4>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2036      	movs	r0, #54	@ 0x36
 80029ac:	f002 fb1d 	bl	8004fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029b0:	2036      	movs	r0, #54	@ 0x36
 80029b2:	f002 fb36 	bl	8005022 <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40001000 	.word	0x40001000

080029d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	@ 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f0:	d11d      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	4a20      	ldr	r2, [pc, #128]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002a0a:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4815      	ldr	r0, [pc, #84]	@ (8002a7c <HAL_TIM_MspPostInit+0xac>)
 8002a28:	f003 f8aa 	bl	8005b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a2c:	e020      	b.n	8002a70 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a13      	ldr	r2, [pc, #76]	@ (8002a80 <HAL_TIM_MspPostInit+0xb0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_TIM_MspPostInit+0xa8>)
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a50:	2310      	movs	r3, #16
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a60:	2302      	movs	r3, #2
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4804      	ldr	r0, [pc, #16]	@ (8002a7c <HAL_TIM_MspPostInit+0xac>)
 8002a6c:	f003 f888 	bl	8005b80 <HAL_GPIO_Init>
}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	@ 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	48000400 	.word	0x48000400
 8002a80:	40000400 	.word	0x40000400

08002a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0ac      	sub	sp, #176	@ 0xb0
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2288      	movs	r2, #136	@ 0x88
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f007 ffed 	bl	800aa84 <memset>
  if(huart->Instance==USART2)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a21      	ldr	r2, [pc, #132]	@ (8002b34 <HAL_UART_MspInit+0xb0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d13b      	bne.n	8002b2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 f86b 	bl	8006b9c <HAL_RCCEx_PeriphCLKConfig>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002acc:	f7ff fde0 	bl	8002690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad0:	4b19      	ldr	r3, [pc, #100]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad4:	4a18      	ldr	r2, [pc, #96]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8002adc:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae8:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aec:	4a12      	ldr	r2, [pc, #72]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <HAL_UART_MspInit+0xb4>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b00:	230c      	movs	r3, #12
 8002b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b12:	2303      	movs	r3, #3
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b22:	4619      	mov	r1, r3
 8002b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b28:	f003 f82a 	bl	8005b80 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b2c:	bf00      	nop
 8002b2e:	37b0      	adds	r7, #176	@ 0xb0
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40021000 	.word	0x40021000

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <NMI_Handler+0x4>

08002b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <MemManage_Handler+0x4>

08002b54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <BusFault_Handler+0x4>

08002b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <UsageFault_Handler+0x4>

08002b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b92:	f000 f8fd 	bl	8002d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <DMA1_Channel1_IRQHandler+0x10>)
 8002ba2:	f002 ff0d 	bl	80059c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200000e0 	.word	0x200000e0

08002bb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <DMA1_Channel4_IRQHandler+0x10>)
 8002bb6:	f002 ff03 	bl	80059c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000013c 	.word	0x2000013c

08002bc4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <ADC1_2_IRQHandler+0x10>)
 8002bca:	f000 ff49 	bl	8003a60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000007c 	.word	0x2000007c

08002bd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <TIM6_DAC_IRQHandler+0x14>)
 8002bde:	f004 fdba 	bl	8007756 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002be2:	4803      	ldr	r0, [pc, #12]	@ (8002bf0 <TIM6_DAC_IRQHandler+0x18>)
 8002be4:	f002 fb72 	bl	80052cc <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000268 	.word	0x20000268
 8002bf0:	20000128 	.word	0x20000128

08002bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <_sbrk+0x5c>)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <_sbrk+0x60>)
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <_sbrk+0x64>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <_sbrk+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c24:	f007 ff36 	bl	800aa94 <__errno>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e009      	b.n	8002c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <_sbrk+0x64>)
 8002c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20018000 	.word	0x20018000
 8002c54:	00000400 	.word	0x00000400
 8002c58:	2000752c 	.word	0x2000752c
 8002c5c:	20007680 	.word	0x20007680

08002c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c88:	f7ff ffea 	bl	8002c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c8c:	480c      	ldr	r0, [pc, #48]	@ (8002cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8e:	490d      	ldr	r1, [pc, #52]	@ (8002cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <LoopForever+0xe>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c94:	e002      	b.n	8002c9c <LoopCopyDataInit>

08002c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9a:	3304      	adds	r3, #4

08002c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca0:	d3f9      	bcc.n	8002c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cd0 <LoopForever+0x16>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca8:	e001      	b.n	8002cae <LoopFillZerobss>

08002caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cac:	3204      	adds	r2, #4

08002cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb0:	d3fb      	bcc.n	8002caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f007 fef5 	bl	800aaa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cb6:	f7fe fe97 	bl	80019e8 <main>

08002cba <LoopForever>:

LoopForever:
    b LoopForever
 8002cba:	e7fe      	b.n	8002cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002cc8:	0801ff30 	.word	0x0801ff30
  ldr r2, =_sbss
 8002ccc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002cd0:	2000767c 	.word	0x2000767c

08002cd4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC3_IRQHandler>
	...

08002cd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_Init+0x3c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_Init+0x3c>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cee:	2003      	movs	r0, #3
 8002cf0:	f002 f970 	bl	8004fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f000 f80f 	bl	8002d18 <HAL_InitTick>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	71fb      	strb	r3, [r7, #7]
 8002d04:	e001      	b.n	8002d0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d06:	f7ff fcc9 	bl	800269c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40022000 	.word	0x40022000

08002d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d24:	4b17      	ldr	r3, [pc, #92]	@ (8002d84 <HAL_InitTick+0x6c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d023      	beq.n	8002d74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d2c:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_InitTick+0x70>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <HAL_InitTick+0x6c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	f002 f97b 	bl	800503e <HAL_SYSTICK_Config>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d809      	bhi.n	8002d68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d54:	2200      	movs	r2, #0
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	f002 f945 	bl	8004fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d60:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <HAL_InitTick+0x74>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e007      	b.n	8002d78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e004      	b.n	8002d78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e001      	b.n	8002d78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	20000004 	.word	0x20000004
 8002d8c:	20000008 	.word	0x20000008

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	@ (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	20007530 	.word	0x20007530

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20007530 	.word	0x20007530

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3360      	adds	r3, #96	@ 0x60
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <LL_ADC_SetOffset+0x44>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	03fff000 	.word	0x03fff000

08002ec8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3360      	adds	r3, #96	@ 0x60
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3360      	adds	r3, #96	@ 0x60
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3330      	adds	r3, #48	@ 0x30
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	4413      	add	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	211f      	movs	r1, #31
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	f003 011f 	and.w	r1, r3, #31
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	431a      	orrs	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	0e5b      	lsrs	r3, r3, #25
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	4413      	add	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0d1b      	lsrs	r3, r3, #20
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2107      	movs	r1, #7
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	401a      	ands	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0d1b      	lsrs	r3, r3, #20
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	fa01 f303 	lsl.w	r3, r1, r3
 8003012:	431a      	orrs	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0318 	and.w	r3, r3, #24
 8003046:	4908      	ldr	r1, [pc, #32]	@ (8003068 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003048:	40d9      	lsrs	r1, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	400b      	ands	r3, r1
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	431a      	orrs	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	0007ffff 	.word	0x0007ffff

0800306c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 031f 	and.w	r3, r3, #31
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6093      	str	r3, [r2, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030dc:	d101      	bne.n	80030e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003104:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800312c:	d101      	bne.n	8003132 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800317c:	f043 0202 	orr.w	r2, r3, #2
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <LL_ADC_IsEnabled+0x18>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <LL_ADC_IsEnabled+0x1a>
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d101      	bne.n	80031ce <LL_ADC_IsDisableOngoing+0x18>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <LL_ADC_IsDisableOngoing+0x1a>
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003214:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d101      	bne.n	8003244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003262:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b08      	cmp	r3, #8
 800328c:	d101      	bne.n	8003292 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e130      	b.n	800351c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fa0b 	bl	80026e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fef1 	bl	80030c8 <LL_ADC_IsDeepPowerDownEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fed7 	bl	80030a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff0c 	bl	8003118 <LL_ADC_IsInternalRegulatorEnabled>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d115      	bne.n	8003332 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fef0 	bl	80030f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003310:	4b84      	ldr	r3, [pc, #528]	@ (8003524 <HAL_ADC_Init+0x284>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	4a84      	ldr	r2, [pc, #528]	@ (8003528 <HAL_ADC_Init+0x288>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	3301      	adds	r3, #1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003324:	e002      	b.n	800332c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b01      	subs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff feee 	bl	8003118 <LL_ADC_IsInternalRegulatorEnabled>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff62 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003368:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80c9 	bne.w	800350a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 80c5 	bne.w	800350a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003388:	f043 0202 	orr.w	r2, r3, #2
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fefb 	bl	8003190 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d115      	bne.n	80033cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033a0:	4862      	ldr	r0, [pc, #392]	@ (800352c <HAL_ADC_Init+0x28c>)
 80033a2:	f7ff fef5 	bl	8003190 <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	4861      	ldr	r0, [pc, #388]	@ (8003530 <HAL_ADC_Init+0x290>)
 80033aa:	f7ff fef1 	bl	8003190 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	4860      	ldr	r0, [pc, #384]	@ (8003534 <HAL_ADC_Init+0x294>)
 80033b4:	f7ff feec 	bl	8003190 <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	485c      	ldr	r0, [pc, #368]	@ (8003538 <HAL_ADC_Init+0x298>)
 80033c8:	f7ff fd26 	bl	8002e18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	7e5b      	ldrb	r3, [r3, #25]
 80033d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d106      	bne.n	8003408 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	3b01      	subs	r3, #1
 8003400:	045b      	lsls	r3, r3, #17
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d009      	beq.n	8003424 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b44      	ldr	r3, [pc, #272]	@ (800353c <HAL_ADC_Init+0x29c>)
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff1c 	bl	800327a <LL_ADC_INJ_IsConversionOngoing>
 8003442:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d13d      	bne.n	80034c6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d13a      	bne.n	80034c6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003454:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800345c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800346c:	f023 0302 	bic.w	r3, r3, #2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003480:	2b01      	cmp	r3, #1
 8003482:	d118      	bne.n	80034b6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800348e:	f023 0304 	bic.w	r3, r3, #4
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034a0:	4311      	orrs	r1, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034a6:	430a      	orrs	r2, r1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	611a      	str	r2, [r3, #16]
 80034b4:	e007      	b.n	80034c6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10c      	bne.n	80034e8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	f023 010f 	bic.w	r1, r3, #15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e6:	e007      	b.n	80034f8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 020f 	bic.w	r2, r2, #15
 80034f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fc:	f023 0303 	bic.w	r3, r3, #3
 8003500:	f043 0201 	orr.w	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
 8003508:	e007      	b.n	800351a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800351a:	7ffb      	ldrb	r3, [r7, #31]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3724      	adds	r7, #36	@ 0x24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	20000004 	.word	0x20000004
 8003528:	053e2d63 	.word	0x053e2d63
 800352c:	50040000 	.word	0x50040000
 8003530:	50040100 	.word	0x50040100
 8003534:	50040200 	.word	0x50040200
 8003538:	50040300 	.word	0x50040300
 800353c:	fff0c007 	.word	0xfff0c007

08003540 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003548:	4857      	ldr	r0, [pc, #348]	@ (80036a8 <HAL_ADC_Start+0x168>)
 800354a:	f7ff fd8f 	bl	800306c <LL_ADC_GetMultimode>
 800354e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe69 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	f040 809c 	bne.w	800369a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_ADC_Start+0x30>
 800356c:	2302      	movs	r3, #2
 800356e:	e097      	b.n	80036a0 <HAL_ADC_Start+0x160>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f001 f94d 	bl	8004818 <ADC_Enable>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 8083 	bne.w	8003690 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a42      	ldr	r2, [pc, #264]	@ (80036ac <HAL_ADC_Start+0x16c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d002      	beq.n	80035ae <HAL_ADC_Start+0x6e>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	e000      	b.n	80035b0 <HAL_ADC_Start+0x70>
 80035ae:	4b40      	ldr	r3, [pc, #256]	@ (80036b0 <HAL_ADC_Start+0x170>)
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d002      	beq.n	80035be <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d6:	d106      	bne.n	80035e6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	f023 0206 	bic.w	r2, r3, #6
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e4:	e002      	b.n	80035ec <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	221c      	movs	r2, #28
 80035f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2a      	ldr	r2, [pc, #168]	@ (80036ac <HAL_ADC_Start+0x16c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d002      	beq.n	800360c <HAL_ADC_Start+0xcc>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e000      	b.n	800360e <HAL_ADC_Start+0xce>
 800360c:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <HAL_ADC_Start+0x170>)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4293      	cmp	r3, r2
 8003614:	d008      	beq.n	8003628 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d002      	beq.n	8003628 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b09      	cmp	r3, #9
 8003626:	d114      	bne.n	8003652 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800363e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fdc6 	bl	80031dc <LL_ADC_REG_StartConversion>
 8003650:	e025      	b.n	800369e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <HAL_ADC_Start+0x16c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d002      	beq.n	800366e <HAL_ADC_Start+0x12e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	e000      	b.n	8003670 <HAL_ADC_Start+0x130>
 800366e:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <HAL_ADC_Start+0x170>)
 8003670:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00f      	beq.n	800369e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003686:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	655a      	str	r2, [r3, #84]	@ 0x54
 800368e:	e006      	b.n	800369e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003698:	e001      	b.n	800369e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	50040300 	.word	0x50040300
 80036ac:	50040100 	.word	0x50040100
 80036b0:	50040000 	.word	0x50040000

080036b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Stop+0x16>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e023      	b.n	8003712 <HAL_ADC_Stop+0x5e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80036d2:	2103      	movs	r1, #3
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 ffe3 	bl	80046a0 <ADC_ConversionStop>
 80036da:	4603      	mov	r3, r0
 80036dc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f001 f91d 	bl	8004924 <ADC_Disable>
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003726:	4866      	ldr	r0, [pc, #408]	@ (80038c0 <HAL_ADC_PollForConversion+0x1a4>)
 8003728:	f7ff fca0 	bl	800306c <LL_ADC_GetMultimode>
 800372c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d102      	bne.n	800373c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003736:	2308      	movs	r3, #8
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e02a      	b.n	8003792 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b05      	cmp	r3, #5
 8003746:	d002      	beq.n	800374e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b09      	cmp	r3, #9
 800374c:	d111      	bne.n	8003772 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0a4      	b.n	80038b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800376c:	2304      	movs	r3, #4
 800376e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003770:	e00f      	b.n	8003792 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003772:	4853      	ldr	r0, [pc, #332]	@ (80038c0 <HAL_ADC_PollForConversion+0x1a4>)
 8003774:	f7ff fc88 	bl	8003088 <LL_ADC_GetMultiDMATransfer>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e093      	b.n	80038b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800378e:	2304      	movs	r3, #4
 8003790:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003792:	f7ff fb11 	bl	8002db8 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003798:	e021      	b.n	80037de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d01d      	beq.n	80037de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80037a2:	f7ff fb09 	bl	8002db8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <HAL_ADC_PollForConversion+0x9c>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d112      	bne.n	80037de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e06b      	b.n	80038b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0d6      	beq.n	800379a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fb94 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01c      	beq.n	8003842 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7e5b      	ldrb	r3, [r3, #25]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d118      	bne.n	8003842 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d111      	bne.n	8003842 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003822:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_ADC_PollForConversion+0x1a8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d002      	beq.n	8003852 <HAL_ADC_PollForConversion+0x136>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e000      	b.n	8003854 <HAL_ADC_PollForConversion+0x138>
 8003852:	4b1d      	ldr	r3, [pc, #116]	@ (80038c8 <HAL_ADC_PollForConversion+0x1ac>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	4293      	cmp	r3, r2
 800385a:	d008      	beq.n	800386e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b05      	cmp	r3, #5
 8003866:	d002      	beq.n	800386e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b09      	cmp	r3, #9
 800386c:	d104      	bne.n	8003878 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e00c      	b.n	8003892 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a11      	ldr	r2, [pc, #68]	@ (80038c4 <HAL_ADC_PollForConversion+0x1a8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d002      	beq.n	8003888 <HAL_ADC_PollForConversion+0x16c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	e000      	b.n	800388a <HAL_ADC_PollForConversion+0x16e>
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_ADC_PollForConversion+0x1ac>)
 800388a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d104      	bne.n	80038a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e008      	b.n	80038b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	220c      	movs	r2, #12
 80038b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	50040300 	.word	0x50040300
 80038c4:	50040100 	.word	0x50040100
 80038c8:	50040000 	.word	0x50040000

080038cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038d8:	4853      	ldr	r0, [pc, #332]	@ (8003a28 <HAL_ADC_Start_DMA+0x15c>)
 80038da:	f7ff fbc7 	bl	800306c <LL_ADC_GetMultimode>
 80038de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff fca1 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8093 	bne.w	8003a18 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_Start_DMA+0x34>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e08e      	b.n	8003a1e <HAL_ADC_Start_DMA+0x152>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a47      	ldr	r2, [pc, #284]	@ (8003a2c <HAL_ADC_Start_DMA+0x160>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d008      	beq.n	8003924 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d002      	beq.n	8003924 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d172      	bne.n	8003a0a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 ff77 	bl	8004818 <ADC_Enable>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800392e:	7dfb      	ldrb	r3, [r7, #23]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d165      	bne.n	8003a00 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a38      	ldr	r2, [pc, #224]	@ (8003a30 <HAL_ADC_Start_DMA+0x164>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d002      	beq.n	8003958 <HAL_ADC_Start_DMA+0x8c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	e000      	b.n	800395a <HAL_ADC_Start_DMA+0x8e>
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_ADC_Start_DMA+0x168>)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	4293      	cmp	r3, r2
 8003960:	d002      	beq.n	8003968 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d006      	beq.n	800398e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	f023 0206 	bic.w	r2, r3, #6
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58
 800398c:	e002      	b.n	8003994 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <HAL_ADC_Start_DMA+0x16c>)
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a0:	4a26      	ldr	r2, [pc, #152]	@ (8003a3c <HAL_ADC_Start_DMA+0x170>)
 80039a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a8:	4a25      	ldr	r2, [pc, #148]	@ (8003a40 <HAL_ADC_Start_DMA+0x174>)
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	221c      	movs	r2, #28
 80039b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0210 	orr.w	r2, r2, #16
 80039ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3340      	adds	r3, #64	@ 0x40
 80039e6:	4619      	mov	r1, r3
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f001 ff88 	bl	8005900 <HAL_DMA_Start_IT>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fbef 	bl	80031dc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039fe:	e00d      	b.n	8003a1c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003a08:	e008      	b.n	8003a1c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003a16:	e001      	b.n	8003a1c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	50040300 	.word	0x50040300
 8003a2c:	50040200 	.word	0x50040200
 8003a30:	50040100 	.word	0x50040100
 8003a34:	50040000 	.word	0x50040000
 8003a38:	080049e3 	.word	0x080049e3
 8003a3c:	08004abb 	.word	0x08004abb
 8003a40:	08004ad7 	.word	0x08004ad7

08003a44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	@ 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a68:	2300      	movs	r3, #0
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a7c:	4882      	ldr	r0, [pc, #520]	@ (8003c88 <HAL_ADC_IRQHandler+0x228>)
 8003a7e:	f7ff faf5 	bl	800306c <LL_ADC_GetMultimode>
 8003a82:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d017      	beq.n	8003abe <HAL_ADC_IRQHandler+0x5e>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d105      	bne.n	8003ab0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f001 f905 	bl	8004cc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2202      	movs	r2, #2
 8003abc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x72>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8083 	beq.w	8003be4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d07d      	beq.n	8003be4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fa10 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d062      	beq.n	8003bd6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a5d      	ldr	r2, [pc, #372]	@ (8003c8c <HAL_ADC_IRQHandler+0x22c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d002      	beq.n	8003b20 <HAL_ADC_IRQHandler+0xc0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	e000      	b.n	8003b22 <HAL_ADC_IRQHandler+0xc2>
 8003b20:	4b5b      	ldr	r3, [pc, #364]	@ (8003c90 <HAL_ADC_IRQHandler+0x230>)
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d008      	beq.n	8003b3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d002      	beq.n	8003b3c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	d104      	bne.n	8003b46 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	e00c      	b.n	8003b60 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a50      	ldr	r2, [pc, #320]	@ (8003c8c <HAL_ADC_IRQHandler+0x22c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d002      	beq.n	8003b56 <HAL_ADC_IRQHandler+0xf6>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	e000      	b.n	8003b58 <HAL_ADC_IRQHandler+0xf8>
 8003b56:	4b4e      	ldr	r3, [pc, #312]	@ (8003c90 <HAL_ADC_IRQHandler+0x230>)
 8003b58:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d135      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d12e      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fb55 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11a      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 020c 	bic.w	r2, r2, #12
 8003b96:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d112      	bne.n	8003bd6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb4:	f043 0201 	orr.w	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bbc:	e00b      	b.n	8003bd6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0210 	orr.w	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fd96 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	220c      	movs	r2, #12
 8003be2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x198>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 809f 	beq.w	8003d42 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8099 	beq.w	8003d42 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f9bb 	bl	8002fa8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003c32:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff f976 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c3e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a11      	ldr	r2, [pc, #68]	@ (8003c8c <HAL_ADC_IRQHandler+0x22c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d002      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x1f0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e000      	b.n	8003c52 <HAL_ADC_IRQHandler+0x1f2>
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <HAL_ADC_IRQHandler+0x230>)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d008      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d002      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d104      	bne.n	8003c76 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	e013      	b.n	8003c9e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <HAL_ADC_IRQHandler+0x22c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_ADC_IRQHandler+0x234>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	e007      	b.n	8003c96 <HAL_ADC_IRQHandler+0x236>
 8003c86:	bf00      	nop
 8003c88:	50040300 	.word	0x50040300
 8003c8c:	50040100 	.word	0x50040100
 8003c90:	50040000 	.word	0x50040000
 8003c94:	4b7d      	ldr	r3, [pc, #500]	@ (8003e8c <HAL_ADC_IRQHandler+0x42c>)
 8003c96:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d047      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_ADC_IRQHandler+0x25e>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d03f      	beq.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d13a      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d133      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d12e      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff facd 	bl	800327a <LL_ADC_INJ_IsConversionOngoing>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11a      	bne.n	8003d1c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cf4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d112      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d1a:	e00b      	b.n	8003d34 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d20:	f043 0210 	orr.w	r2, r3, #16
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	f043 0201 	orr.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 ff9b 	bl	8004c70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2260      	movs	r2, #96	@ 0x60
 8003d40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d011      	beq.n	8003d70 <HAL_ADC_IRQHandler+0x310>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f896 	bl	8003e94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	@ 0x80
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x340>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00d      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 ff81 	bl	8004c98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <HAL_ADC_IRQHandler+0x370>
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 ff73 	bl	8004cac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d036      	beq.n	8003e48 <HAL_ADC_IRQHandler+0x3e8>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d031      	beq.n	8003e48 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003dec:	2301      	movs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df0:	e014      	b.n	8003e1c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003df8:	4825      	ldr	r0, [pc, #148]	@ (8003e90 <HAL_ADC_IRQHandler+0x430>)
 8003dfa:	f7ff f945 	bl	8003088 <LL_ADC_GetMultiDMATransfer>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003e04:	2301      	movs	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	e008      	b.n	8003e1c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10e      	bne.n	8003e40 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e32:	f043 0202 	orr.w	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f834 	bl	8003ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2210      	movs	r2, #16
 8003e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x424>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e60:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6c:	f043 0208 	orr.w	r2, r3, #8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 ff00 	bl	8004c84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e84:	bf00      	nop
 8003e86:	3728      	adds	r7, #40	@ 0x28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	50040000 	.word	0x50040000
 8003e90:	50040300 	.word	0x50040300

08003e94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b0b6      	sub	sp, #216	@ 0xd8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x22>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e3c9      	b.n	8004672 <HAL_ADC_ConfigChannel+0x7b6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f99e 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 83aa 	bne.w	800464c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d824      	bhi.n	8003f52 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	3b02      	subs	r3, #2
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d81b      	bhi.n	8003f4a <HAL_ADC_ConfigChannel+0x8e>
 8003f12:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <HAL_ADC_ConfigChannel+0x5c>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f31 	.word	0x08003f31
 8003f20:	08003f39 	.word	0x08003f39
 8003f24:	08003f41 	.word	0x08003f41
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003f28:	230c      	movs	r3, #12
 8003f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f2e:	e010      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003f30:	2312      	movs	r3, #18
 8003f32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f36:	e00c      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003f38:	2318      	movs	r3, #24
 8003f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f3e:	e008      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003f40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f48:	e003      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003f50:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003f60:	f7fe fff6 	bl	8002f50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f95f 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003f6e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f97f 	bl	800327a <LL_ADC_INJ_IsConversionOngoing>
 8003f7c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 81a4 	bne.w	80042d2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 819f 	bne.w	80042d2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f7ff f814 	bl	8002fce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d00a      	beq.n	8003fde <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	6919      	ldr	r1, [r3, #16]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fd8:	f7fe ff52 	bl	8002e80 <LL_ADC_SetOffset>
 8003fdc:	e179      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe ff6f 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_ADC_ConfigChannel+0x14e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff64 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	e01e      	b.n	8004048 <HAL_ADC_ConfigChannel+0x18c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe ff59 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800402c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004030:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004038:	2320      	movs	r3, #32
 800403a:	e004      	b.n	8004046 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800403c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1a4>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	e018      	b.n	8004092 <HAL_ADC_ConfigChannel+0x1d6>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004074:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800407c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e004      	b.n	8004092 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800408c:	fab3 f383 	clz	r3, r3
 8004090:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004092:	429a      	cmp	r2, r3
 8004094:	d106      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe ff28 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe ff0c 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x214>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2101      	movs	r1, #1
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe ff01 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	f003 021f 	and.w	r2, r3, #31
 80040ce:	e01e      	b.n	800410e <HAL_ADC_ConfigChannel+0x252>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fef6 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80040ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80040f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e004      	b.n	800410c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004102:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x26a>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0e9b      	lsrs	r3, r3, #26
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	e018      	b.n	8004158 <HAL_ADC_ConfigChannel+0x29c>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800413a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800413e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004142:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800414a:	2320      	movs	r3, #32
 800414c:	e004      	b.n	8004158 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800414e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004158:	429a      	cmp	r2, r3
 800415a:	d106      	bne.n	800416a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fec5 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2102      	movs	r1, #2
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe fea9 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8004176:	4603      	mov	r3, r0
 8004178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x2da>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2102      	movs	r1, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe fe9e 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	0e9b      	lsrs	r3, r3, #26
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	e01e      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x318>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f7fe fe93 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80041b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80041bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e004      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80041c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x330>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	e014      	b.n	8004216 <HAL_ADC_ConfigChannel+0x35a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80041fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004200:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004208:	2320      	movs	r3, #32
 800420a:	e004      	b.n	8004216 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800420c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004216:	429a      	cmp	r2, r3
 8004218:	d106      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	2102      	movs	r1, #2
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fe66 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2103      	movs	r1, #3
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fe4a 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8004234:	4603      	mov	r3, r0
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x398>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2103      	movs	r1, #3
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fe3f 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	0e9b      	lsrs	r3, r3, #26
 800424e:	f003 021f 	and.w	r2, r3, #31
 8004252:	e017      	b.n	8004284 <HAL_ADC_ConfigChannel+0x3c8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2103      	movs	r1, #3
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fe34 	bl	8002ec8 <LL_ADC_GetOffsetChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800426c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004270:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004276:	2320      	movs	r3, #32
 8004278:	e003      	b.n	8004282 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800427a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_ADC_ConfigChannel+0x3e0>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	e011      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x404>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a4:	fa93 f3a3 	rbit	r3, r3
 80042a8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80042aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80042ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80042b4:	2320      	movs	r3, #32
 80042b6:	e003      	b.n	80042c0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80042b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d106      	bne.n	80042d2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2103      	movs	r1, #3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fe fe11 	bl	8002ef4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe ff5a 	bl	8003190 <LL_ADC_IsEnabled>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 8140 	bne.w	8004564 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	461a      	mov	r2, r3
 80042f2:	f7fe fe97 	bl	8003024 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	4a8f      	ldr	r2, [pc, #572]	@ (8004538 <HAL_ADC_ConfigChannel+0x67c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f040 8131 	bne.w	8004564 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_ADC_ConfigChannel+0x46e>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	0e9b      	lsrs	r3, r3, #26
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2b09      	cmp	r3, #9
 8004320:	bf94      	ite	ls
 8004322:	2301      	movls	r3, #1
 8004324:	2300      	movhi	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	e019      	b.n	800435e <HAL_ADC_ConfigChannel+0x4a2>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800433c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004342:	2320      	movs	r3, #32
 8004344:	e003      	b.n	800434e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004348:	fab3 f383 	clz	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2b09      	cmp	r3, #9
 8004356:	bf94      	ite	ls
 8004358:	2301      	movls	r3, #1
 800435a:	2300      	movhi	r3, #0
 800435c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800435e:	2b00      	cmp	r3, #0
 8004360:	d079      	beq.n	8004456 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_ADC_ConfigChannel+0x4c2>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	0e9b      	lsrs	r3, r3, #26
 8004374:	3301      	adds	r3, #1
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800437c:	e015      	b.n	80043aa <HAL_ADC_ConfigChannel+0x4ee>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800438c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800438e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e003      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800439a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	069b      	lsls	r3, r3, #26
 80043a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x50e>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	3301      	adds	r3, #1
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2101      	movs	r1, #1
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	e017      	b.n	80043fa <HAL_ADC_ConfigChannel+0x53e>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80043d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80043dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e003      	b.n	80043ee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80043e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	ea42 0103 	orr.w	r1, r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x564>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0e9b      	lsrs	r3, r3, #26
 8004410:	3301      	adds	r3, #1
 8004412:	f003 021f 	and.w	r2, r3, #31
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	051b      	lsls	r3, r3, #20
 800441e:	e018      	b.n	8004452 <HAL_ADC_ConfigChannel+0x596>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004428:	fa93 f3a3 	rbit	r3, r3
 800442c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800442e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004430:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004438:	2320      	movs	r3, #32
 800443a:	e003      	b.n	8004444 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f003 021f 	and.w	r2, r3, #31
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004452:	430b      	orrs	r3, r1
 8004454:	e081      	b.n	800455a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x5b6>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	0e9b      	lsrs	r3, r3, #26
 8004468:	3301      	adds	r3, #1
 800446a:	069b      	lsls	r3, r3, #26
 800446c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004470:	e015      	b.n	800449e <HAL_ADC_ConfigChannel+0x5e2>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e003      	b.n	8004496 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3301      	adds	r3, #1
 8004498:	069b      	lsls	r3, r3, #26
 800449a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_ADC_ConfigChannel+0x602>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0e9b      	lsrs	r3, r3, #26
 80044b0:	3301      	adds	r3, #1
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	e017      	b.n	80044ee <HAL_ADC_ConfigChannel+0x632>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	61bb      	str	r3, [r7, #24]
  return result;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80044d6:	2320      	movs	r3, #32
 80044d8:	e003      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_ADC_ConfigChannel+0x65e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	0e9b      	lsrs	r3, r3, #26
 8004504:	3301      	adds	r3, #1
 8004506:	f003 021f 	and.w	r2, r3, #31
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	3b1e      	subs	r3, #30
 8004512:	051b      	lsls	r3, r3, #20
 8004514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004518:	e01e      	b.n	8004558 <HAL_ADC_ConfigChannel+0x69c>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	60fb      	str	r3, [r7, #12]
  return result;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004532:	2320      	movs	r3, #32
 8004534:	e006      	b.n	8004544 <HAL_ADC_ConfigChannel+0x688>
 8004536:	bf00      	nop
 8004538:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3301      	adds	r3, #1
 8004546:	f003 021f 	and.w	r2, r3, #31
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	3b1e      	subs	r3, #30
 8004552:	051b      	lsls	r3, r3, #20
 8004554:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004558:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800455e:	4619      	mov	r1, r3
 8004560:	f7fe fd35 	bl	8002fce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b44      	ldr	r3, [pc, #272]	@ (800467c <HAL_ADC_ConfigChannel+0x7c0>)
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d07a      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004570:	4843      	ldr	r0, [pc, #268]	@ (8004680 <HAL_ADC_ConfigChannel+0x7c4>)
 8004572:	f7fe fc77 	bl	8002e64 <LL_ADC_GetCommonPathInternalCh>
 8004576:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a41      	ldr	r2, [pc, #260]	@ (8004684 <HAL_ADC_ConfigChannel+0x7c8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d12c      	bne.n	80045de <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d126      	bne.n	80045de <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3c      	ldr	r2, [pc, #240]	@ (8004688 <HAL_ADC_ConfigChannel+0x7cc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_ADC_ConfigChannel+0x6e8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3b      	ldr	r2, [pc, #236]	@ (800468c <HAL_ADC_ConfigChannel+0x7d0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d15d      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045ac:	4619      	mov	r1, r3
 80045ae:	4834      	ldr	r0, [pc, #208]	@ (8004680 <HAL_ADC_ConfigChannel+0x7c4>)
 80045b0:	f7fe fc45 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045b4:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <HAL_ADC_ConfigChannel+0x7d4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	4a36      	ldr	r2, [pc, #216]	@ (8004694 <HAL_ADC_ConfigChannel+0x7d8>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80045ce:	e002      	b.n	80045d6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1f9      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045dc:	e040      	b.n	8004660 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004698 <HAL_ADC_ConfigChannel+0x7dc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d118      	bne.n	800461a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d112      	bne.n	800461a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <HAL_ADC_ConfigChannel+0x7cc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_ADC_ConfigChannel+0x74c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a22      	ldr	r2, [pc, #136]	@ (800468c <HAL_ADC_ConfigChannel+0x7d0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d12d      	bne.n	8004664 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800460c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004610:	4619      	mov	r1, r3
 8004612:	481b      	ldr	r0, [pc, #108]	@ (8004680 <HAL_ADC_ConfigChannel+0x7c4>)
 8004614:	f7fe fc13 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004618:	e024      	b.n	8004664 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1f      	ldr	r2, [pc, #124]	@ (800469c <HAL_ADC_ConfigChannel+0x7e0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d120      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004624:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11a      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a14      	ldr	r2, [pc, #80]	@ (8004688 <HAL_ADC_ConfigChannel+0x7cc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d115      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800463a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800463e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004642:	4619      	mov	r1, r3
 8004644:	480e      	ldr	r0, [pc, #56]	@ (8004680 <HAL_ADC_ConfigChannel+0x7c4>)
 8004646:	f7fe fbfa 	bl	8002e3e <LL_ADC_SetCommonPathInternalCh>
 800464a:	e00c      	b.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	f043 0220 	orr.w	r2, r3, #32
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800465e:	e002      	b.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004660:	bf00      	nop
 8004662:	e000      	b.n	8004666 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004664:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800466e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004672:	4618      	mov	r0, r3
 8004674:	37d8      	adds	r7, #216	@ 0xd8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	80080000 	.word	0x80080000
 8004680:	50040300 	.word	0x50040300
 8004684:	c7520000 	.word	0xc7520000
 8004688:	50040000 	.word	0x50040000
 800468c:	50040200 	.word	0x50040200
 8004690:	20000004 	.word	0x20000004
 8004694:	053e2d63 	.word	0x053e2d63
 8004698:	cb840000 	.word	0xcb840000
 800469c:	80000001 	.word	0x80000001

080046a0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fdb8 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 80046bc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe fdd9 	bl	800327a <LL_ADC_INJ_IsConversionOngoing>
 80046c8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d103      	bne.n	80046d8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8098 	beq.w	8004808 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02a      	beq.n	800473c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7e5b      	ldrb	r3, [r3, #25]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d126      	bne.n	800473c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7e1b      	ldrb	r3, [r3, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d122      	bne.n	800473c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046fa:	e014      	b.n	8004726 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	4a45      	ldr	r2, [pc, #276]	@ (8004814 <ADC_ConversionStop+0x174>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d90d      	bls.n	8004720 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	f043 0210 	orr.w	r2, r3, #16
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e074      	b.n	800480a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3301      	adds	r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004730:	2b40      	cmp	r3, #64	@ 0x40
 8004732:	d1e3      	bne.n	80046fc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2240      	movs	r2, #64	@ 0x40
 800473a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d014      	beq.n	800476c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe fd70 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fe fd2d 	bl	80031b6 <LL_ADC_IsDisableOngoing>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fd4c 	bl	8003204 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d014      	beq.n	800479c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fd7f 	bl	800327a <LL_ADC_INJ_IsConversionOngoing>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fd15 	bl	80031b6 <LL_ADC_IsDisableOngoing>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fd5b 	bl	8003252 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d005      	beq.n	80047ae <ADC_ConversionStop+0x10e>
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d105      	bne.n	80047b4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80047a8:	230c      	movs	r3, #12
 80047aa:	617b      	str	r3, [r7, #20]
        break;
 80047ac:	e005      	b.n	80047ba <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80047ae:	2308      	movs	r3, #8
 80047b0:	617b      	str	r3, [r7, #20]
        break;
 80047b2:	e002      	b.n	80047ba <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80047b4:	2304      	movs	r3, #4
 80047b6:	617b      	str	r3, [r7, #20]
        break;
 80047b8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80047ba:	f7fe fafd 	bl	8002db8 <HAL_GetTick>
 80047be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047c0:	e01b      	b.n	80047fa <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047c2:	f7fe faf9 	bl	8002db8 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d914      	bls.n	80047fa <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e007      	b.n	800480a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1dc      	bne.n	80047c2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	a33fffff 	.word	0xa33fffff

08004818 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fcb1 	bl	8003190 <LL_ADC_IsEnabled>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d169      	bne.n	8004908 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	4b36      	ldr	r3, [pc, #216]	@ (8004914 <ADC_Enable+0xfc>)
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004846:	f043 0210 	orr.w	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e055      	b.n	800490a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fc6c 	bl	8003140 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004868:	482b      	ldr	r0, [pc, #172]	@ (8004918 <ADC_Enable+0x100>)
 800486a:	f7fe fafb 	bl	8002e64 <LL_ADC_GetCommonPathInternalCh>
 800486e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004870:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004878:	4b28      	ldr	r3, [pc, #160]	@ (800491c <ADC_Enable+0x104>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	099b      	lsrs	r3, r3, #6
 800487e:	4a28      	ldr	r2, [pc, #160]	@ (8004920 <ADC_Enable+0x108>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004892:	e002      	b.n	800489a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f9      	bne.n	8004894 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048a0:	f7fe fa8a 	bl	8002db8 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a6:	e028      	b.n	80048fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe fc6f 	bl	8003190 <LL_ADC_IsEnabled>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fc3f 	bl	8003140 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c2:	f7fe fa79 	bl	8002db8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d914      	bls.n	80048fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d00d      	beq.n	80048fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	f043 0210 	orr.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e007      	b.n	800490a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	d1cf      	bne.n	80048a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	8000003f 	.word	0x8000003f
 8004918:	50040300 	.word	0x50040300
 800491c:	20000004 	.word	0x20000004
 8004920:	053e2d63 	.word	0x053e2d63

08004924 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fc40 	bl	80031b6 <LL_ADC_IsDisableOngoing>
 8004936:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fc27 	bl	8003190 <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d047      	beq.n	80049d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d144      	bne.n	80049d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030d 	and.w	r3, r3, #13
 8004958:	2b01      	cmp	r3, #1
 800495a:	d10c      	bne.n	8004976 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fe fc01 	bl	8003168 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2203      	movs	r2, #3
 800496c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800496e:	f7fe fa23 	bl	8002db8 <HAL_GetTick>
 8004972:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004974:	e029      	b.n	80049ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e023      	b.n	80049da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004992:	f7fe fa11 	bl	8002db8 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d914      	bls.n	80049ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	f043 0210 	orr.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e007      	b.n	80049da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1dc      	bne.n	8004992 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b084      	sub	sp, #16
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d14b      	bne.n	8004a94 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d021      	beq.n	8004a5a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe fa85 	bl	8002f2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d032      	beq.n	8004a8c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d12b      	bne.n	8004a8c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11f      	bne.n	8004a8c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a50:	f043 0201 	orr.w	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a58:	e018      	b.n	8004a8c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d111      	bne.n	8004a8c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7fc fe3b 	bl	8001708 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a92:	e00e      	b.n	8004ab2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fa01 	bl	8003ea8 <HAL_ADC_ErrorCallback>
}
 8004aa6:	e004      	b.n	8004ab2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fc fded 	bl	80016a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af4:	f043 0204 	orr.w	r2, r3, #4
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff f9d3 	bl	8003ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <LL_ADC_IsEnabled>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <LL_ADC_IsEnabled+0x18>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_ADC_IsEnabled+0x1a>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_ADC_StartCalibration>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b42:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	609a      	str	r2, [r3, #8]
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_ADC_IsCalibrationOnGoing>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b76:	d101      	bne.n	8004b7c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d101      	bne.n	8004ba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADCEx_Calibration_Start+0x1c>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e04d      	b.n	8004c68 <HAL_ADCEx_Calibration_Start+0xb8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fea5 	bl	8004924 <ADC_Disable>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d136      	bne.n	8004c52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bec:	f023 0302 	bic.w	r3, r3, #2
 8004bf0:	f043 0202 	orr.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff ff96 	bl	8004b30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c04:	e014      	b.n	8004c30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004c12:	d30d      	bcc.n	8004c30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	f023 0312 	bic.w	r3, r3, #18
 8004c1c:	f043 0210 	orr.w	r2, r3, #16
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01b      	b.n	8004c68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff94 	bl	8004b62 <LL_ADC_IsCalibrationOnGoing>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e2      	bne.n	8004c06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c44:	f023 0303 	bic.w	r3, r3, #3
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c50:	e005      	b.n	8004c5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	f043 0210 	orr.w	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b09f      	sub	sp, #124	@ 0x7c
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e093      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a47      	ldr	r2, [pc, #284]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d102      	bne.n	8004d12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d0c:	4b46      	ldr	r3, [pc, #280]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	e001      	b.n	8004d16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10b      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e072      	b.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff27 	bl	8004b8a <LL_ADC_REG_IsConversionOngoing>
 8004d3c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff21 	bl	8004b8a <LL_ADC_REG_IsConversionOngoing>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d154      	bne.n	8004df8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004d4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d151      	bne.n	8004df8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d54:	4b35      	ldr	r3, [pc, #212]	@ (8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004d56:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d02c      	beq.n	8004dba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	6859      	ldr	r1, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d72:	035b      	lsls	r3, r3, #13
 8004d74:	430b      	orrs	r3, r1
 8004d76:	431a      	orrs	r2, r3
 8004d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d7c:	4829      	ldr	r0, [pc, #164]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d7e:	f7ff fec4 	bl	8004b0a <LL_ADC_IsEnabled>
 8004d82:	4604      	mov	r4, r0
 8004d84:	4828      	ldr	r0, [pc, #160]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d86:	f7ff fec0 	bl	8004b0a <LL_ADC_IsEnabled>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	431c      	orrs	r4, r3
 8004d8e:	4828      	ldr	r0, [pc, #160]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004d90:	f7ff febb 	bl	8004b0a <LL_ADC_IsEnabled>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4323      	orrs	r3, r4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d137      	bne.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004da4:	f023 030f 	bic.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	6811      	ldr	r1, [r2, #0]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	6892      	ldr	r2, [r2, #8]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004db8:	e028      	b.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dc4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dc6:	4817      	ldr	r0, [pc, #92]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004dc8:	f7ff fe9f 	bl	8004b0a <LL_ADC_IsEnabled>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4816      	ldr	r0, [pc, #88]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004dd0:	f7ff fe9b 	bl	8004b0a <LL_ADC_IsEnabled>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	431c      	orrs	r4, r3
 8004dd8:	4815      	ldr	r0, [pc, #84]	@ (8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004dda:	f7ff fe96 	bl	8004b0a <LL_ADC_IsEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4323      	orrs	r3, r4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d112      	bne.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004dee:	f023 030f 	bic.w	r3, r3, #15
 8004df2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004df4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004df6:	e009      	b.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfc:	f043 0220 	orr.w	r2, r3, #32
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004e0a:	e000      	b.n	8004e0e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004e0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	377c      	adds	r7, #124	@ 0x7c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	50040000 	.word	0x50040000
 8004e28:	50040100 	.word	0x50040100
 8004e2c:	50040300 	.word	0x50040300
 8004e30:	50040200 	.word	0x50040200

08004e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e44:	4b0c      	ldr	r3, [pc, #48]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e50:	4013      	ands	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e66:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <__NVIC_SetPriorityGrouping+0x44>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	60d3      	str	r3, [r2, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__NVIC_GetPriorityGrouping+0x18>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0307 	and.w	r3, r3, #7
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	db0b      	blt.n	8004ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	f003 021f 	and.w	r2, r3, #31
 8004eb0:	4907      	ldr	r1, [pc, #28]	@ (8004ed0 <__NVIC_EnableIRQ+0x38>)
 8004eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2001      	movs	r0, #1
 8004eba:	fa00 f202 	lsl.w	r2, r0, r2
 8004ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000e100 	.word	0xe000e100

08004ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	db0a      	blt.n	8004efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	490c      	ldr	r1, [pc, #48]	@ (8004f20 <__NVIC_SetPriority+0x4c>)
 8004eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004efc:	e00a      	b.n	8004f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	4908      	ldr	r1, [pc, #32]	@ (8004f24 <__NVIC_SetPriority+0x50>)
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	3b04      	subs	r3, #4
 8004f0c:	0112      	lsls	r2, r2, #4
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	440b      	add	r3, r1
 8004f12:	761a      	strb	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000e100 	.word	0xe000e100
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b089      	sub	sp, #36	@ 0x24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f1c3 0307 	rsb	r3, r3, #7
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf28      	it	cs
 8004f46:	2304      	movcs	r3, #4
 8004f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2b06      	cmp	r3, #6
 8004f50:	d902      	bls.n	8004f58 <NVIC_EncodePriority+0x30>
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3b03      	subs	r3, #3
 8004f56:	e000      	b.n	8004f5a <NVIC_EncodePriority+0x32>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f70:	f04f 31ff 	mov.w	r1, #4294967295
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	4313      	orrs	r3, r2
         );
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3724      	adds	r7, #36	@ 0x24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa0:	d301      	bcc.n	8004fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e00f      	b.n	8004fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fae:	210f      	movs	r1, #15
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f7ff ff8e 	bl	8004ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb8:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fbe:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <SysTick_Config+0x40>)
 8004fc0:	2207      	movs	r2, #7
 8004fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000e010 	.word	0xe000e010

08004fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff ff29 	bl	8004e34 <__NVIC_SetPriorityGrouping>
}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ffc:	f7ff ff3e 	bl	8004e7c <__NVIC_GetPriorityGrouping>
 8005000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f7ff ff8e 	bl	8004f28 <NVIC_EncodePriority>
 800500c:	4602      	mov	r2, r0
 800500e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff ff5d 	bl	8004ed4 <__NVIC_SetPriority>
}
 800501a:	bf00      	nop
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800502c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff ff31 	bl	8004e98 <__NVIC_EnableIRQ>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ffa2 	bl	8004f90 <SysTick_Config>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e014      	b.n	8005092 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	791b      	ldrb	r3, [r3, #4]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fd fbd3 	bl	8002824 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	795b      	ldrb	r3, [r3, #5]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_DAC_Start+0x16>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e03b      	b.n	8005128 <HAL_DAC_Start+0x8e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f003 0310 	and.w	r3, r3, #16
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d118      	bne.n	800511a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	605a      	str	r2, [r3, #4]
 80050f8:	e00f      	b.n	800511a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005104:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005108:	d107      	bne.n	800511a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0202 	orr.w	r2, r2, #2
 8005118:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	795b      	ldrb	r3, [r3, #5]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_DAC_Start_DMA+0x1e>
 800514e:	2302      	movs	r3, #2
 8005150:	e0ab      	b.n	80052aa <HAL_DAC_Start_DMA+0x176>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2202      	movs	r2, #2
 800515c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12f      	bne.n	80051c4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a52      	ldr	r2, [pc, #328]	@ (80052b4 <HAL_DAC_Start_DMA+0x180>)
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a51      	ldr	r2, [pc, #324]	@ (80052b8 <HAL_DAC_Start_DMA+0x184>)
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a50      	ldr	r2, [pc, #320]	@ (80052bc <HAL_DAC_Start_DMA+0x188>)
 800517a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800518a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	2b08      	cmp	r3, #8
 8005190:	d013      	beq.n	80051ba <HAL_DAC_Start_DMA+0x86>
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d845      	bhi.n	8005224 <HAL_DAC_Start_DMA+0xf0>
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_DAC_Start_DMA+0x72>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d005      	beq.n	80051b0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80051a4:	e03e      	b.n	8005224 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3308      	adds	r3, #8
 80051ac:	613b      	str	r3, [r7, #16]
        break;
 80051ae:	e03c      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	613b      	str	r3, [r7, #16]
        break;
 80051b8:	e037      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3310      	adds	r3, #16
 80051c0:	613b      	str	r3, [r7, #16]
        break;
 80051c2:	e032      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	4a3d      	ldr	r2, [pc, #244]	@ (80052c0 <HAL_DAC_Start_DMA+0x18c>)
 80051ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	4a3c      	ldr	r2, [pc, #240]	@ (80052c4 <HAL_DAC_Start_DMA+0x190>)
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4a3b      	ldr	r2, [pc, #236]	@ (80052c8 <HAL_DAC_Start_DMA+0x194>)
 80051da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d013      	beq.n	800521a <HAL_DAC_Start_DMA+0xe6>
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d817      	bhi.n	8005228 <HAL_DAC_Start_DMA+0xf4>
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_DAC_Start_DMA+0xd2>
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d005      	beq.n	8005210 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005204:	e010      	b.n	8005228 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	613b      	str	r3, [r7, #16]
        break;
 800520e:	e00c      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3318      	adds	r3, #24
 8005216:	613b      	str	r3, [r7, #16]
        break;
 8005218:	e007      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	331c      	adds	r3, #28
 8005220:	613b      	str	r3, [r7, #16]
        break;
 8005222:	e002      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        break;
 8005224:	bf00      	nop
 8005226:	e000      	b.n	800522a <HAL_DAC_Start_DMA+0xf6>
        break;
 8005228:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d111      	bne.n	8005254 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800523e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6898      	ldr	r0, [r3, #8]
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	f000 fb59 	bl	8005900 <HAL_DMA_Start_IT>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
 8005252:	e010      	b.n	8005276 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005262:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68d8      	ldr	r0, [r3, #12]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	f000 fb47 	bl	8005900 <HAL_DMA_Start_IT>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2201      	movs	r2, #1
 8005290:	409a      	lsls	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e005      	b.n	80052a8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f043 0204 	orr.w	r2, r3, #4
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	08005669 	.word	0x08005669
 80052b8:	0800568b 	.word	0x0800568b
 80052bc:	080056a7 	.word	0x080056a7
 80052c0:	08005725 	.word	0x08005725
 80052c4:	08005747 	.word	0x08005747
 80052c8:	08005763 	.word	0x08005763

080052cc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d120      	bne.n	8005326 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f2:	d118      	bne.n	8005326 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2204      	movs	r2, #4
 80052f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800530e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800531e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f870 	bl	8005406 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005334:	d120      	bne.n	8005378 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005344:	d118      	bne.n	8005378 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005360:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005370:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9cc 	bl	8005710 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d105      	bne.n	80053aa <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	3308      	adds	r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e004      	b.n	80053b4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	3314      	adds	r3, #20
 80053b2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	461a      	mov	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b088      	sub	sp, #32
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	795b      	ldrb	r3, [r3, #5]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_DAC_ConfigChannel+0x1c>
 8005432:	2302      	movs	r3, #2
 8005434:	e114      	b.n	8005660 <HAL_DAC_ConfigChannel+0x246>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2202      	movs	r2, #2
 8005440:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b04      	cmp	r3, #4
 8005448:	f040 8081 	bne.w	800554e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800544c:	f7fd fcb4 	bl	8002db8 <HAL_GetTick>
 8005450:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d140      	bne.n	80054da <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005458:	e018      	b.n	800548c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800545a:	f7fd fcad 	bl	8002db8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d911      	bls.n	800548c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f043 0208 	orr.w	r2, r3, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2203      	movs	r2, #3
 8005486:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e0e9      	b.n	8005660 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1df      	bne.n	800545a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800549a:	2001      	movs	r0, #1
 800549c:	f7fd fc98 	bl	8002dd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	6992      	ldr	r2, [r2, #24]
 80054a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80054aa:	e023      	b.n	80054f4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80054ac:	f7fd fc84 	bl	8002db8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d90f      	bls.n	80054da <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	da0a      	bge.n	80054da <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f043 0208 	orr.w	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2203      	movs	r2, #3
 80054d4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0c2      	b.n	8005660 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dbe3      	blt.n	80054ac <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80054e4:	2001      	movs	r0, #1
 80054e6:	f7fd fc73 	bl	8002dd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	6992      	ldr	r2, [r2, #24]
 80054f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	ea02 0103 	and.w	r1, r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	21ff      	movs	r1, #255	@ 0xff
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	ea02 0103 	and.w	r1, r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	409a      	lsls	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d11d      	bne.n	8005592 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	221f      	movs	r2, #31
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005598:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2207      	movs	r2, #7
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43da      	mvns	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	400a      	ands	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	22c0      	movs	r2, #192	@ 0xc0
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	43da      	mvns	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	400a      	ands	r2, r1
 8005650:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005674:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fea7 	bl	80053ca <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	711a      	strb	r2, [r3, #4]
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff fea0 	bl	80053de <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800569e:	bf00      	nop
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff fe96 	bl	80053f2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	711a      	strb	r2, [r3, #4]
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005730:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff ffce 	bl	80056d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	711a      	strb	r2, [r3, #4]
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005752:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ffc7 	bl	80056e8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f043 0204 	orr.w	r2, r3, #4
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff ffbd 	bl	80056fc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	711a      	strb	r2, [r3, #4]
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e098      	b.n	80058d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	4b4d      	ldr	r3, [pc, #308]	@ (80058e0 <HAL_DMA_Init+0x150>)
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d80f      	bhi.n	80057ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	4b4b      	ldr	r3, [pc, #300]	@ (80058e4 <HAL_DMA_Init+0x154>)
 80057b6:	4413      	add	r3, r2
 80057b8:	4a4b      	ldr	r2, [pc, #300]	@ (80058e8 <HAL_DMA_Init+0x158>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	009a      	lsls	r2, r3, #2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a48      	ldr	r2, [pc, #288]	@ (80058ec <HAL_DMA_Init+0x15c>)
 80057ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80057cc:	e00e      	b.n	80057ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b46      	ldr	r3, [pc, #280]	@ (80058f0 <HAL_DMA_Init+0x160>)
 80057d6:	4413      	add	r3, r2
 80057d8:	4a43      	ldr	r2, [pc, #268]	@ (80058e8 <HAL_DMA_Init+0x158>)
 80057da:	fba2 2303 	umull	r2, r3, r2, r3
 80057de:	091b      	lsrs	r3, r3, #4
 80057e0:	009a      	lsls	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a42      	ldr	r2, [pc, #264]	@ (80058f4 <HAL_DMA_Init+0x164>)
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005846:	d039      	beq.n	80058bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	4a27      	ldr	r2, [pc, #156]	@ (80058ec <HAL_DMA_Init+0x15c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d11a      	bne.n	8005888 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005852:	4b29      	ldr	r3, [pc, #164]	@ (80058f8 <HAL_DMA_Init+0x168>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f003 031c 	and.w	r3, r3, #28
 800585e:	210f      	movs	r1, #15
 8005860:	fa01 f303 	lsl.w	r3, r1, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	4924      	ldr	r1, [pc, #144]	@ (80058f8 <HAL_DMA_Init+0x168>)
 8005868:	4013      	ands	r3, r2
 800586a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800586c:	4b22      	ldr	r3, [pc, #136]	@ (80058f8 <HAL_DMA_Init+0x168>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005878:	f003 031c 	and.w	r3, r3, #28
 800587c:	fa01 f303 	lsl.w	r3, r1, r3
 8005880:	491d      	ldr	r1, [pc, #116]	@ (80058f8 <HAL_DMA_Init+0x168>)
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]
 8005886:	e019      	b.n	80058bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005888:	4b1c      	ldr	r3, [pc, #112]	@ (80058fc <HAL_DMA_Init+0x16c>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005890:	f003 031c 	and.w	r3, r3, #28
 8005894:	210f      	movs	r1, #15
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	4917      	ldr	r1, [pc, #92]	@ (80058fc <HAL_DMA_Init+0x16c>)
 800589e:	4013      	ands	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058a2:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <HAL_DMA_Init+0x16c>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ae:	f003 031c 	and.w	r3, r3, #28
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	4911      	ldr	r1, [pc, #68]	@ (80058fc <HAL_DMA_Init+0x16c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40020407 	.word	0x40020407
 80058e4:	bffdfff8 	.word	0xbffdfff8
 80058e8:	cccccccd 	.word	0xcccccccd
 80058ec:	40020000 	.word	0x40020000
 80058f0:	bffdfbf8 	.word	0xbffdfbf8
 80058f4:	40020400 	.word	0x40020400
 80058f8:	400200a8 	.word	0x400200a8
 80058fc:	400204a8 	.word	0x400204a8

08005900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_DMA_Start_IT+0x20>
 800591c:	2302      	movs	r3, #2
 800591e:	e04b      	b.n	80059b8 <HAL_DMA_Start_IT+0xb8>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d13a      	bne.n	80059aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0201 	bic.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f8e0 	bl	8005b1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 020e 	orr.w	r2, r2, #14
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e00f      	b.n	8005998 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 020a 	orr.w	r2, r2, #10
 8005996:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e005      	b.n	80059b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059b2:	2302      	movs	r3, #2
 80059b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059dc:	f003 031c 	and.w	r3, r3, #28
 80059e0:	2204      	movs	r2, #4
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4013      	ands	r3, r2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d026      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x7a>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d021      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d107      	bne.n	8005a14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a18:	f003 021c 	and.w	r2, r3, #28
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	2104      	movs	r1, #4
 8005a22:	fa01 f202 	lsl.w	r2, r1, r2
 8005a26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d071      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a38:	e06c      	b.n	8005b14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f003 031c 	and.w	r3, r3, #28
 8005a42:	2202      	movs	r2, #2
 8005a44:	409a      	lsls	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d02e      	beq.n	8005aac <HAL_DMA_IRQHandler+0xec>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d029      	beq.n	8005aac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10b      	bne.n	8005a7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 020a 	bic.w	r2, r2, #10
 8005a74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a82:	f003 021c 	and.w	r2, r3, #28
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d038      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005aaa:	e033      	b.n	8005b14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab0:	f003 031c 	and.w	r3, r3, #28
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02a      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x156>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d025      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 020e 	bic.w	r2, r2, #14
 8005ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	f003 021c 	and.w	r2, r3, #28
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8005aec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
}
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b30:	f003 021c 	and.w	r2, r3, #28
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d108      	bne.n	8005b62 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b60:	e007      	b.n	8005b72 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
	...

08005b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b8e:	e17f      	b.n	8005e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2101      	movs	r1, #1
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 8171 	beq.w	8005e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d005      	beq.n	8005bc0 <HAL_GPIO_Init+0x40>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d130      	bne.n	8005c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	2203      	movs	r2, #3
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43db      	mvns	r3, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4013      	ands	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 0201 	and.w	r2, r3, #1
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d118      	bne.n	8005c60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005c34:	2201      	movs	r2, #1
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	08db      	lsrs	r3, r3, #3
 8005c4a:	f003 0201 	and.w	r2, r3, #1
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d017      	beq.n	8005c9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2203      	movs	r2, #3
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d123      	bne.n	8005cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	08da      	lsrs	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3208      	adds	r2, #8
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	220f      	movs	r2, #15
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	08da      	lsrs	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3208      	adds	r2, #8
 8005cea:	6939      	ldr	r1, [r7, #16]
 8005cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0203 	and.w	r2, r3, #3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80ac 	beq.w	8005e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d32:	4b5f      	ldr	r3, [pc, #380]	@ (8005eb0 <HAL_GPIO_Init+0x330>)
 8005d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d36:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb0 <HAL_GPIO_Init+0x330>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <HAL_GPIO_Init+0x330>)
 8005d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	3302      	adds	r3, #2
 8005d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	220f      	movs	r2, #15
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005d74:	d025      	beq.n	8005dc2 <HAL_GPIO_Init+0x242>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a4f      	ldr	r2, [pc, #316]	@ (8005eb8 <HAL_GPIO_Init+0x338>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01f      	beq.n	8005dbe <HAL_GPIO_Init+0x23e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a4e      	ldr	r2, [pc, #312]	@ (8005ebc <HAL_GPIO_Init+0x33c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d019      	beq.n	8005dba <HAL_GPIO_Init+0x23a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a4d      	ldr	r2, [pc, #308]	@ (8005ec0 <HAL_GPIO_Init+0x340>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_GPIO_Init+0x236>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a4c      	ldr	r2, [pc, #304]	@ (8005ec4 <HAL_GPIO_Init+0x344>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d00d      	beq.n	8005db2 <HAL_GPIO_Init+0x232>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a4b      	ldr	r2, [pc, #300]	@ (8005ec8 <HAL_GPIO_Init+0x348>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d007      	beq.n	8005dae <HAL_GPIO_Init+0x22e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a4a      	ldr	r2, [pc, #296]	@ (8005ecc <HAL_GPIO_Init+0x34c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d101      	bne.n	8005daa <HAL_GPIO_Init+0x22a>
 8005da6:	2306      	movs	r3, #6
 8005da8:	e00c      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005daa:	2307      	movs	r3, #7
 8005dac:	e00a      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005dae:	2305      	movs	r3, #5
 8005db0:	e008      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e006      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005db6:	2303      	movs	r3, #3
 8005db8:	e004      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_GPIO_Init+0x244>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	f002 0203 	and.w	r2, r2, #3
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	4093      	lsls	r3, r2
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dd4:	4937      	ldr	r1, [pc, #220]	@ (8005eb4 <HAL_GPIO_Init+0x334>)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	3302      	adds	r3, #2
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005de2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4013      	ands	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005e06:	4a32      	ldr	r2, [pc, #200]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005e30:	4a27      	ldr	r2, [pc, #156]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005e36:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e84:	4a12      	ldr	r2, [pc, #72]	@ (8005ed0 <HAL_GPIO_Init+0x350>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f47f ae78 	bne.w	8005b90 <HAL_GPIO_Init+0x10>
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40010000 	.word	0x40010000
 8005eb8:	48000400 	.word	0x48000400
 8005ebc:	48000800 	.word	0x48000800
 8005ec0:	48000c00 	.word	0x48000c00
 8005ec4:	48001000 	.word	0x48001000
 8005ec8:	48001400 	.word	0x48001400
 8005ecc:	48001800 	.word	0x48001800
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ed8:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <HAL_PWREx_GetVoltageRange+0x18>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40007000 	.word	0x40007000

08005ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005efe:	d130      	bne.n	8005f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f00:	4b23      	ldr	r3, [pc, #140]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d038      	beq.n	8005f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f0e:	4b20      	ldr	r3, [pc, #128]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f16:	4a1e      	ldr	r2, [pc, #120]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2232      	movs	r2, #50	@ 0x32
 8005f24:	fb02 f303 	mul.w	r3, r2, r3
 8005f28:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	0c9b      	lsrs	r3, r3, #18
 8005f30:	3301      	adds	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f34:	e002      	b.n	8005f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f3c:	4b14      	ldr	r3, [pc, #80]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f48:	d102      	bne.n	8005f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f2      	bne.n	8005f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f50:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f5c:	d110      	bne.n	8005f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e00f      	b.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6e:	d007      	beq.n	8005f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f78:	4a05      	ldr	r2, [pc, #20]	@ (8005f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40007000 	.word	0x40007000
 8005f94:	20000004 	.word	0x20000004
 8005f98:	431bde83 	.word	0x431bde83

08005f9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e3ca      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fae:	4b97      	ldr	r3, [pc, #604]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb8:	4b94      	ldr	r3, [pc, #592]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80e4 	beq.w	8006198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x4a>
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	f040 808b 	bne.w	80060f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	f040 8087 	bne.w	80060f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fe6:	4b89      	ldr	r3, [pc, #548]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_RCC_OscConfig+0x62>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e3a2      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	4b82      	ldr	r3, [pc, #520]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_RCC_OscConfig+0x7c>
 800600e:	4b7f      	ldr	r3, [pc, #508]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006016:	e005      	b.n	8006024 <HAL_RCC_OscConfig+0x88>
 8006018:	4b7c      	ldr	r3, [pc, #496]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800601a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800601e:	091b      	lsrs	r3, r3, #4
 8006020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006024:	4293      	cmp	r3, r2
 8006026:	d223      	bcs.n	8006070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fd55 	bl	8006adc <RCC_SetFlashLatencyFromMSIRange>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e383      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800603c:	4b73      	ldr	r3, [pc, #460]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a72      	ldr	r2, [pc, #456]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006042:	f043 0308 	orr.w	r3, r3, #8
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4b70      	ldr	r3, [pc, #448]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	496d      	ldr	r1, [pc, #436]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006056:	4313      	orrs	r3, r2
 8006058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800605a:	4b6c      	ldr	r3, [pc, #432]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	4968      	ldr	r1, [pc, #416]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800606a:	4313      	orrs	r3, r2
 800606c:	604b      	str	r3, [r1, #4]
 800606e:	e025      	b.n	80060bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006070:	4b66      	ldr	r3, [pc, #408]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a65      	ldr	r2, [pc, #404]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006076:	f043 0308 	orr.w	r3, r3, #8
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b63      	ldr	r3, [pc, #396]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	4960      	ldr	r1, [pc, #384]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800608e:	4b5f      	ldr	r3, [pc, #380]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	495b      	ldr	r1, [pc, #364]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 fd15 	bl	8006adc <RCC_SetFlashLatencyFromMSIRange>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e343      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060bc:	f000 fc4a 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 80060c0:	4602      	mov	r2, r0
 80060c2:	4b52      	ldr	r3, [pc, #328]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	4950      	ldr	r1, [pc, #320]	@ (8006210 <HAL_RCC_OscConfig+0x274>)
 80060ce:	5ccb      	ldrb	r3, [r1, r3]
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
 80060d8:	4a4e      	ldr	r2, [pc, #312]	@ (8006214 <HAL_RCC_OscConfig+0x278>)
 80060da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80060dc:	4b4e      	ldr	r3, [pc, #312]	@ (8006218 <HAL_RCC_OscConfig+0x27c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fc fe19 	bl	8002d18 <HAL_InitTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d052      	beq.n	8006196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	e327      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d032      	beq.n	8006162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060fc:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a42      	ldr	r2, [pc, #264]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006108:	f7fc fe56 	bl	8002db8 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006110:	f7fc fe52 	bl	8002db8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e310      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006122:	4b3a      	ldr	r3, [pc, #232]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800612e:	4b37      	ldr	r3, [pc, #220]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a36      	ldr	r2, [pc, #216]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006134:	f043 0308 	orr.w	r3, r3, #8
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	4b34      	ldr	r3, [pc, #208]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4931      	ldr	r1, [pc, #196]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800614c:	4b2f      	ldr	r3, [pc, #188]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	492c      	ldr	r1, [pc, #176]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]
 8006160:	e01a      	b.n	8006198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006162:	4b2a      	ldr	r3, [pc, #168]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a29      	ldr	r2, [pc, #164]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800616e:	f7fc fe23 	bl	8002db8 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006176:	f7fc fe1f 	bl	8002db8 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e2dd      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006188:	4b20      	ldr	r3, [pc, #128]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f0      	bne.n	8006176 <HAL_RCC_OscConfig+0x1da>
 8006194:	e000      	b.n	8006198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d074      	beq.n	800628e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d005      	beq.n	80061b6 <HAL_RCC_OscConfig+0x21a>
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d10e      	bne.n	80061ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d10b      	bne.n	80061ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b6:	4b15      	ldr	r3, [pc, #84]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d064      	beq.n	800628c <HAL_RCC_OscConfig+0x2f0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d160      	bne.n	800628c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e2ba      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d6:	d106      	bne.n	80061e6 <HAL_RCC_OscConfig+0x24a>
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a0b      	ldr	r2, [pc, #44]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e026      	b.n	8006234 <HAL_RCC_OscConfig+0x298>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061ee:	d115      	bne.n	800621c <HAL_RCC_OscConfig+0x280>
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a05      	ldr	r2, [pc, #20]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	4b03      	ldr	r3, [pc, #12]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a02      	ldr	r2, [pc, #8]	@ (800620c <HAL_RCC_OscConfig+0x270>)
 8006202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e014      	b.n	8006234 <HAL_RCC_OscConfig+0x298>
 800620a:	bf00      	nop
 800620c:	40021000 	.word	0x40021000
 8006210:	0800c83c 	.word	0x0800c83c
 8006214:	20000004 	.word	0x20000004
 8006218:	20000008 	.word	0x20000008
 800621c:	4ba0      	ldr	r3, [pc, #640]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a9f      	ldr	r2, [pc, #636]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b9d      	ldr	r3, [pc, #628]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a9c      	ldr	r2, [pc, #624]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800622e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d013      	beq.n	8006264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fc fdbc 	bl	8002db8 <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006244:	f7fc fdb8 	bl	8002db8 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b64      	cmp	r3, #100	@ 0x64
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e276      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006256:	4b92      	ldr	r3, [pc, #584]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x2a8>
 8006262:	e014      	b.n	800628e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fc fda8 	bl	8002db8 <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800626c:	f7fc fda4 	bl	8002db8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	@ 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e262      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800627e:	4b88      	ldr	r3, [pc, #544]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x2d0>
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d060      	beq.n	800635c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b04      	cmp	r3, #4
 800629e:	d005      	beq.n	80062ac <HAL_RCC_OscConfig+0x310>
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b0c      	cmp	r3, #12
 80062a4:	d119      	bne.n	80062da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d116      	bne.n	80062da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ac:	4b7c      	ldr	r3, [pc, #496]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <HAL_RCC_OscConfig+0x328>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e23f      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c4:	4b76      	ldr	r3, [pc, #472]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	4973      	ldr	r1, [pc, #460]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d8:	e040      	b.n	800635c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d023      	beq.n	800632a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e2:	4b6f      	ldr	r3, [pc, #444]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6e      	ldr	r2, [pc, #440]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fc fd63 	bl	8002db8 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f6:	f7fc fd5f 	bl	8002db8 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e21d      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006308:	4b65      	ldr	r3, [pc, #404]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006314:	4b62      	ldr	r3, [pc, #392]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	061b      	lsls	r3, r3, #24
 8006322:	495f      	ldr	r1, [pc, #380]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]
 8006328:	e018      	b.n	800635c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800632a:	4b5d      	ldr	r3, [pc, #372]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a5c      	ldr	r2, [pc, #368]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006336:	f7fc fd3f 	bl	8002db8 <HAL_GetTick>
 800633a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800633c:	e008      	b.n	8006350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633e:	f7fc fd3b 	bl	8002db8 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e1f9      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006350:	4b53      	ldr	r3, [pc, #332]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1f0      	bne.n	800633e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d03c      	beq.n	80063e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01c      	beq.n	80063aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006370:	4b4b      	ldr	r3, [pc, #300]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006376:	4a4a      	ldr	r2, [pc, #296]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006380:	f7fc fd1a 	bl	8002db8 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006388:	f7fc fd16 	bl	8002db8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e1d4      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800639a:	4b41      	ldr	r3, [pc, #260]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800639c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0ef      	beq.n	8006388 <HAL_RCC_OscConfig+0x3ec>
 80063a8:	e01b      	b.n	80063e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063aa:	4b3d      	ldr	r3, [pc, #244]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80063ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b0:	4a3b      	ldr	r2, [pc, #236]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ba:	f7fc fcfd 	bl	8002db8 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c2:	f7fc fcf9 	bl	8002db8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e1b7      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063d4:	4b32      	ldr	r3, [pc, #200]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80063d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1ef      	bne.n	80063c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80a6 	beq.w	800653c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f0:	2300      	movs	r3, #0
 80063f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80063f4:	4b2a      	ldr	r3, [pc, #168]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006400:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800640a:	6593      	str	r3, [r2, #88]	@ 0x58
 800640c:	4b24      	ldr	r3, [pc, #144]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800640e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006418:	2301      	movs	r3, #1
 800641a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800641c:	4b21      	ldr	r3, [pc, #132]	@ (80064a4 <HAL_RCC_OscConfig+0x508>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d118      	bne.n	800645a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006428:	4b1e      	ldr	r3, [pc, #120]	@ (80064a4 <HAL_RCC_OscConfig+0x508>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1d      	ldr	r2, [pc, #116]	@ (80064a4 <HAL_RCC_OscConfig+0x508>)
 800642e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006434:	f7fc fcc0 	bl	8002db8 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643c:	f7fc fcbc 	bl	8002db8 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e17a      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <HAL_RCC_OscConfig+0x508>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d108      	bne.n	8006474 <HAL_RCC_OscConfig+0x4d8>
 8006462:	4b0f      	ldr	r3, [pc, #60]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006468:	4a0d      	ldr	r2, [pc, #52]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006472:	e029      	b.n	80064c8 <HAL_RCC_OscConfig+0x52c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b05      	cmp	r3, #5
 800647a:	d115      	bne.n	80064a8 <HAL_RCC_OscConfig+0x50c>
 800647c:	4b08      	ldr	r3, [pc, #32]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006482:	4a07      	ldr	r2, [pc, #28]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006484:	f043 0304 	orr.w	r3, r3, #4
 8006488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800648c:	4b04      	ldr	r3, [pc, #16]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006492:	4a03      	ldr	r2, [pc, #12]	@ (80064a0 <HAL_RCC_OscConfig+0x504>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800649c:	e014      	b.n	80064c8 <HAL_RCC_OscConfig+0x52c>
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
 80064a4:	40007000 	.word	0x40007000
 80064a8:	4b9c      	ldr	r3, [pc, #624]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80064aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ae:	4a9b      	ldr	r2, [pc, #620]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064b8:	4b98      	ldr	r3, [pc, #608]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80064ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064be:	4a97      	ldr	r2, [pc, #604]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80064c0:	f023 0304 	bic.w	r3, r3, #4
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d016      	beq.n	80064fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d0:	f7fc fc72 	bl	8002db8 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d6:	e00a      	b.n	80064ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d8:	f7fc fc6e 	bl	8002db8 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e12a      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ee:	4b8b      	ldr	r3, [pc, #556]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80064f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0ed      	beq.n	80064d8 <HAL_RCC_OscConfig+0x53c>
 80064fc:	e015      	b.n	800652a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064fe:	f7fc fc5b 	bl	8002db8 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fc fc57 	bl	8002db8 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e113      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800651c:	4b7f      	ldr	r3, [pc, #508]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ed      	bne.n	8006506 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006530:	4b7a      	ldr	r3, [pc, #488]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006534:	4a79      	ldr	r2, [pc, #484]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800653a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80fe 	beq.w	8006742 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	2b02      	cmp	r3, #2
 800654c:	f040 80d0 	bne.w	80066f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006550:	4b72      	ldr	r3, [pc, #456]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f003 0203 	and.w	r2, r3, #3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	429a      	cmp	r2, r3
 8006562:	d130      	bne.n	80065c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	3b01      	subs	r3, #1
 8006570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d127      	bne.n	80065c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006582:	429a      	cmp	r2, r3
 8006584:	d11f      	bne.n	80065c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006590:	2a07      	cmp	r2, #7
 8006592:	bf14      	ite	ne
 8006594:	2201      	movne	r2, #1
 8006596:	2200      	moveq	r2, #0
 8006598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800659a:	4293      	cmp	r3, r2
 800659c:	d113      	bne.n	80065c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	3b01      	subs	r3, #1
 80065ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d109      	bne.n	80065c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	3b01      	subs	r3, #1
 80065c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d06e      	beq.n	80066a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d069      	beq.n	80066a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80065cc:	4b53      	ldr	r3, [pc, #332]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80065d8:	4b50      	ldr	r3, [pc, #320]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0ad      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80065e8:	4b4c      	ldr	r3, [pc, #304]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a4b      	ldr	r2, [pc, #300]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80065ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065f4:	f7fc fbe0 	bl	8002db8 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fc:	f7fc fbdc 	bl	8002db8 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e09a      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800660e:	4b43      	ldr	r3, [pc, #268]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f0      	bne.n	80065fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800661a:	4b40      	ldr	r3, [pc, #256]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	4b40      	ldr	r3, [pc, #256]	@ (8006720 <HAL_RCC_OscConfig+0x784>)
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800662a:	3a01      	subs	r2, #1
 800662c:	0112      	lsls	r2, r2, #4
 800662e:	4311      	orrs	r1, r2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006634:	0212      	lsls	r2, r2, #8
 8006636:	4311      	orrs	r1, r2
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800663c:	0852      	lsrs	r2, r2, #1
 800663e:	3a01      	subs	r2, #1
 8006640:	0552      	lsls	r2, r2, #21
 8006642:	4311      	orrs	r1, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006648:	0852      	lsrs	r2, r2, #1
 800664a:	3a01      	subs	r2, #1
 800664c:	0652      	lsls	r2, r2, #25
 800664e:	4311      	orrs	r1, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006654:	0912      	lsrs	r2, r2, #4
 8006656:	0452      	lsls	r2, r2, #17
 8006658:	430a      	orrs	r2, r1
 800665a:	4930      	ldr	r1, [pc, #192]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 800665c:	4313      	orrs	r3, r2
 800665e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006660:	4b2e      	ldr	r3, [pc, #184]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2d      	ldr	r2, [pc, #180]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800666a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800666c:	4b2b      	ldr	r3, [pc, #172]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a2a      	ldr	r2, [pc, #168]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006678:	f7fc fb9e 	bl	8002db8 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006680:	f7fc fb9a 	bl	8002db8 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e058      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006692:	4b22      	ldr	r3, [pc, #136]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800669e:	e050      	b.n	8006742 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e04f      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066a4:	4b1d      	ldr	r3, [pc, #116]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d148      	bne.n	8006742 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80066b0:	4b1a      	ldr	r3, [pc, #104]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066bc:	4b17      	ldr	r3, [pc, #92]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a16      	ldr	r2, [pc, #88]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066c8:	f7fc fb76 	bl	8002db8 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fc fb72 	bl	8002db8 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e030      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066e2:	4b0e      	ldr	r3, [pc, #56]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x734>
 80066ee:	e028      	b.n	8006742 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d023      	beq.n	800673e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f6:	4b09      	ldr	r3, [pc, #36]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a08      	ldr	r2, [pc, #32]	@ (800671c <HAL_RCC_OscConfig+0x780>)
 80066fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006702:	f7fc fb59 	bl	8002db8 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006708:	e00c      	b.n	8006724 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7fc fb55 	bl	8002db8 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d905      	bls.n	8006724 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e013      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
 800671c:	40021000 	.word	0x40021000
 8006720:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006724:	4b09      	ldr	r3, [pc, #36]	@ (800674c <HAL_RCC_OscConfig+0x7b0>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1ec      	bne.n	800670a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006730:	4b06      	ldr	r3, [pc, #24]	@ (800674c <HAL_RCC_OscConfig+0x7b0>)
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	4905      	ldr	r1, [pc, #20]	@ (800674c <HAL_RCC_OscConfig+0x7b0>)
 8006736:	4b06      	ldr	r3, [pc, #24]	@ (8006750 <HAL_RCC_OscConfig+0x7b4>)
 8006738:	4013      	ands	r3, r2
 800673a:	60cb      	str	r3, [r1, #12]
 800673c:	e001      	b.n	8006742 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40021000 	.word	0x40021000
 8006750:	feeefffc 	.word	0xfeeefffc

08006754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0e7      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006768:	4b75      	ldr	r3, [pc, #468]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	429a      	cmp	r2, r3
 8006774:	d910      	bls.n	8006798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006776:	4b72      	ldr	r3, [pc, #456]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 0207 	bic.w	r2, r3, #7
 800677e:	4970      	ldr	r1, [pc, #448]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4313      	orrs	r3, r2
 8006784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b6e      	ldr	r3, [pc, #440]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0cf      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d010      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	4b66      	ldr	r3, [pc, #408]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d908      	bls.n	80067c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b4:	4b63      	ldr	r3, [pc, #396]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4960      	ldr	r1, [pc, #384]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04c      	beq.n	800686c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	d107      	bne.n	80067ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067da:	4b5a      	ldr	r3, [pc, #360]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d121      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0a6      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d107      	bne.n	8006802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067f2:	4b54      	ldr	r3, [pc, #336]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d115      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e09a      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d107      	bne.n	800681a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800680a:	4b4e      	ldr	r3, [pc, #312]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e08e      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800681a:	4b4a      	ldr	r3, [pc, #296]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e086      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800682a:	4b46      	ldr	r3, [pc, #280]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4943      	ldr	r1, [pc, #268]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683c:	f7fc fabc 	bl	8002db8 <HAL_GetTick>
 8006840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	e00a      	b.n	800685a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006844:	f7fc fab8 	bl	8002db8 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e06e      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	4b3a      	ldr	r3, [pc, #232]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 020c 	and.w	r2, r3, #12
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	429a      	cmp	r2, r3
 800686a:	d1eb      	bne.n	8006844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d010      	beq.n	800689a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006884:	429a      	cmp	r2, r3
 8006886:	d208      	bcs.n	800689a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006888:	4b2e      	ldr	r3, [pc, #184]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	492b      	ldr	r1, [pc, #172]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800689a:	4b29      	ldr	r3, [pc, #164]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d210      	bcs.n	80068ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a8:	4b25      	ldr	r3, [pc, #148]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f023 0207 	bic.w	r2, r3, #7
 80068b0:	4923      	ldr	r1, [pc, #140]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b8:	4b21      	ldr	r3, [pc, #132]	@ (8006940 <HAL_RCC_ClockConfig+0x1ec>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e036      	b.n	8006938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	4918      	ldr	r1, [pc, #96]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068f4:	4b13      	ldr	r3, [pc, #76]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4910      	ldr	r1, [pc, #64]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006904:	4313      	orrs	r3, r2
 8006906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006908:	f000 f824 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 800690c:	4602      	mov	r2, r0
 800690e:	4b0d      	ldr	r3, [pc, #52]	@ (8006944 <HAL_RCC_ClockConfig+0x1f0>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	490b      	ldr	r1, [pc, #44]	@ (8006948 <HAL_RCC_ClockConfig+0x1f4>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	4a09      	ldr	r2, [pc, #36]	@ (800694c <HAL_RCC_ClockConfig+0x1f8>)
 8006926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <HAL_RCC_ClockConfig+0x1fc>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fc f9f3 	bl	8002d18 <HAL_InitTick>
 8006932:	4603      	mov	r3, r0
 8006934:	72fb      	strb	r3, [r7, #11]

  return status;
 8006936:	7afb      	ldrb	r3, [r7, #11]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40022000 	.word	0x40022000
 8006944:	40021000 	.word	0x40021000
 8006948:	0800c83c 	.word	0x0800c83c
 800694c:	20000004 	.word	0x20000004
 8006950:	20000008 	.word	0x20000008

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	@ 0x24
 8006958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006962:	4b3e      	ldr	r3, [pc, #248]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800696c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x34>
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d121      	bne.n	80069c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d11e      	bne.n	80069c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006988:	4b34      	ldr	r3, [pc, #208]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006994:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e005      	b.n	80069b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069a4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80069b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10d      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80069c4:	e00a      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d102      	bne.n	80069d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80069cc:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e004      	b.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d101      	bne.n	80069dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80069d8:	4b23      	ldr	r3, [pc, #140]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80069da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b0c      	cmp	r3, #12
 80069e0:	d134      	bne.n	8006a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069e2:	4b1e      	ldr	r3, [pc, #120]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d003      	beq.n	80069fa <HAL_RCC_GetSysClockFreq+0xa6>
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d003      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0xac>
 80069f8:	e005      	b.n	8006a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80069fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80069fc:	617b      	str	r3, [r7, #20]
      break;
 80069fe:	e005      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a00:	4b19      	ldr	r3, [pc, #100]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a02:	617b      	str	r3, [r7, #20]
      break;
 8006a04:	e002      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	617b      	str	r3, [r7, #20]
      break;
 8006a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a0c:	4b13      	ldr	r3, [pc, #76]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	3301      	adds	r3, #1
 8006a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a1a:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	0a1b      	lsrs	r3, r3, #8
 8006a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	fb03 f202 	mul.w	r2, r3, r2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	0e5b      	lsrs	r3, r3, #25
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a4c:	69bb      	ldr	r3, [r7, #24]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3724      	adds	r7, #36	@ 0x24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	0800c854 	.word	0x0800c854
 8006a64:	00f42400 	.word	0x00f42400
 8006a68:	007a1200 	.word	0x007a1200

08006a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a70:	4b03      	ldr	r3, [pc, #12]	@ (8006a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a72:	681b      	ldr	r3, [r3, #0]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000004 	.word	0x20000004

08006a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a88:	f7ff fff0 	bl	8006a6c <HAL_RCC_GetHCLKFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	0a1b      	lsrs	r3, r3, #8
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	4904      	ldr	r1, [pc, #16]	@ (8006aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	0800c84c 	.word	0x0800c84c

08006ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ab4:	f7ff ffda 	bl	8006a6c <HAL_RCC_GetHCLKFreq>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	0adb      	lsrs	r3, r3, #11
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	4904      	ldr	r1, [pc, #16]	@ (8006ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ac6:	5ccb      	ldrb	r3, [r1, r3]
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	0800c84c 	.word	0x0800c84c

08006adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006af4:	f7ff f9ee 	bl	8005ed4 <HAL_PWREx_GetVoltageRange>
 8006af8:	6178      	str	r0, [r7, #20]
 8006afa:	e014      	b.n	8006b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006afc:	4b25      	ldr	r3, [pc, #148]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b00:	4a24      	ldr	r2, [pc, #144]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b08:	4b22      	ldr	r3, [pc, #136]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b14:	f7ff f9de 	bl	8005ed4 <HAL_PWREx_GetVoltageRange>
 8006b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8006b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b2c:	d10b      	bne.n	8006b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b80      	cmp	r3, #128	@ 0x80
 8006b32:	d919      	bls.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b38:	d902      	bls.n	8006b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	e013      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b40:	2301      	movs	r3, #1
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	e010      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b80      	cmp	r3, #128	@ 0x80
 8006b4a:	d902      	bls.n	8006b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	e00a      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b80      	cmp	r3, #128	@ 0x80
 8006b56:	d102      	bne.n	8006b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b58:	2302      	movs	r3, #2
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	e004      	b.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b70      	cmp	r3, #112	@ 0x70
 8006b62:	d101      	bne.n	8006b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b64:	2301      	movs	r3, #1
 8006b66:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 0207 	bic.w	r2, r3, #7
 8006b70:	4909      	ldr	r1, [pc, #36]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b78:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d001      	beq.n	8006b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	40021000 	.word	0x40021000
 8006b98:	40022000 	.word	0x40022000

08006b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ba8:	2300      	movs	r3, #0
 8006baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d041      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bc0:	d02a      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006bc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bc6:	d824      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bcc:	d008      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bd2:	d81e      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bdc:	d010      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bde:	e018      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006be0:	4b86      	ldr	r3, [pc, #536]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4a85      	ldr	r2, [pc, #532]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bec:	e015      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fabb 	bl	8007170 <RCCEx_PLLSAI1_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bfe:	e00c      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3320      	adds	r3, #32
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fba6 	bl	8007358 <RCCEx_PLLSAI2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	74fb      	strb	r3, [r7, #19]
      break;
 8006c16:	e000      	b.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c20:	4b76      	ldr	r3, [pc, #472]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c2e:	4973      	ldr	r1, [pc, #460]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	7cfb      	ldrb	r3, [r7, #19]
 8006c3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d041      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c50:	d02a      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c56:	d824      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c5c:	d008      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c62:	d81e      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c6c:	d010      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c6e:	e018      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c70:	4b62      	ldr	r3, [pc, #392]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a61      	ldr	r2, [pc, #388]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c7c:	e015      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2100      	movs	r1, #0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fa73 	bl	8007170 <RCCEx_PLLSAI1_Config>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c8e:	e00c      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3320      	adds	r3, #32
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fb5e 	bl	8007358 <RCCEx_PLLSAI2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006caa:	7cfb      	ldrb	r3, [r7, #19]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10b      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cb0:	4b52      	ldr	r3, [pc, #328]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cbe:	494f      	ldr	r1, [pc, #316]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7cfb      	ldrb	r3, [r7, #19]
 8006cca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80a0 	beq.w	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006cde:	4b47      	ldr	r3, [pc, #284]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00d      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf4:	4b41      	ldr	r3, [pc, #260]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf8:	4a40      	ldr	r2, [pc, #256]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	4b3e      	ldr	r3, [pc, #248]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d10:	4b3b      	ldr	r3, [pc, #236]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3a      	ldr	r2, [pc, #232]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d1c:	f7fc f84c 	bl	8002db8 <HAL_GetTick>
 8006d20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d22:	e009      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d24:	f7fc f848 	bl	8002db8 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d902      	bls.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	74fb      	strb	r3, [r7, #19]
        break;
 8006d36:	e005      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d38:	4b31      	ldr	r3, [pc, #196]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0ef      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d15c      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01f      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d019      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d68:	4b24      	ldr	r3, [pc, #144]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d74:	4b21      	ldr	r3, [pc, #132]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7a:	4a20      	ldr	r2, [pc, #128]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d84:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d94:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d016      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fc f807 	bl	8002db8 <HAL_GetTick>
 8006daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dac:	e00b      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dae:	f7fc f803 	bl	8002db8 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d902      	bls.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8006dc4:	e006      	b.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ec      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dda:	4b08      	ldr	r3, [pc, #32]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dea:	4904      	ldr	r1, [pc, #16]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006df2:	e009      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006df4:	7cfb      	ldrb	r3, [r7, #19]
 8006df6:	74bb      	strb	r3, [r7, #18]
 8006df8:	e006      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006dfa:	bf00      	nop
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	7cfb      	ldrb	r3, [r7, #19]
 8006e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e08:	7c7b      	ldrb	r3, [r7, #17]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d105      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e12:	4a9d      	ldr	r2, [pc, #628]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e26:	4b98      	ldr	r3, [pc, #608]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2c:	f023 0203 	bic.w	r2, r3, #3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	4994      	ldr	r1, [pc, #592]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e48:	4b8f      	ldr	r3, [pc, #572]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f023 020c 	bic.w	r2, r3, #12
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e56:	498c      	ldr	r1, [pc, #560]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e6a:	4b87      	ldr	r3, [pc, #540]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	4983      	ldr	r1, [pc, #524]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	497b      	ldr	r1, [pc, #492]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006eae:	4b76      	ldr	r3, [pc, #472]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ebc:	4972      	ldr	r1, [pc, #456]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ede:	496a      	ldr	r1, [pc, #424]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ef2:	4b65      	ldr	r3, [pc, #404]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f00:	4961      	ldr	r1, [pc, #388]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f14:	4b5c      	ldr	r3, [pc, #368]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f22:	4959      	ldr	r1, [pc, #356]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f36:	4b54      	ldr	r3, [pc, #336]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f44:	4950      	ldr	r1, [pc, #320]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f58:	4b4b      	ldr	r3, [pc, #300]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f66:	4948      	ldr	r1, [pc, #288]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f7a:	4b43      	ldr	r3, [pc, #268]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	493f      	ldr	r1, [pc, #252]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d028      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006faa:	4937      	ldr	r1, [pc, #220]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fba:	d106      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fbc:	4b32      	ldr	r3, [pc, #200]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a31      	ldr	r2, [pc, #196]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fc6:	60d3      	str	r3, [r2, #12]
 8006fc8:	e011      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fd2:	d10c      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f8c8 	bl	8007170 <RCCEx_PLLSAI1_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006fe4:	7cfb      	ldrb	r3, [r7, #19]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006fea:	7cfb      	ldrb	r3, [r7, #19]
 8006fec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d028      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ffa:	4b23      	ldr	r3, [pc, #140]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007000:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007008:	491f      	ldr	r1, [pc, #124]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007018:	d106      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800701a:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	4a1a      	ldr	r2, [pc, #104]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007024:	60d3      	str	r3, [r2, #12]
 8007026:	e011      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007030:	d10c      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3304      	adds	r3, #4
 8007036:	2101      	movs	r1, #1
 8007038:	4618      	mov	r0, r3
 800703a:	f000 f899 	bl	8007170 <RCCEx_PLLSAI1_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007042:	7cfb      	ldrb	r3, [r7, #19]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007048:	7cfb      	ldrb	r3, [r7, #19]
 800704a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02b      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007058:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800705a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007066:	4908      	ldr	r1, [pc, #32]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007068:	4313      	orrs	r3, r2
 800706a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007076:	d109      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007078:	4b03      	ldr	r3, [pc, #12]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4a02      	ldr	r2, [pc, #8]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007082:	60d3      	str	r3, [r2, #12]
 8007084:	e014      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007086:	bf00      	nop
 8007088:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007094:	d10c      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	2101      	movs	r1, #1
 800709c:	4618      	mov	r0, r3
 800709e:	f000 f867 	bl	8007170 <RCCEx_PLLSAI1_Config>
 80070a2:	4603      	mov	r3, r0
 80070a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070a6:	7cfb      	ldrb	r3, [r7, #19]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80070ac:	7cfb      	ldrb	r3, [r7, #19]
 80070ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d02f      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070bc:	4b2b      	ldr	r3, [pc, #172]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ca:	4928      	ldr	r1, [pc, #160]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070da:	d10d      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	2102      	movs	r1, #2
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f844 	bl	8007170 <RCCEx_PLLSAI1_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070ec:	7cfb      	ldrb	r3, [r7, #19]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d014      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80070f2:	7cfb      	ldrb	r3, [r7, #19]
 80070f4:	74bb      	strb	r3, [r7, #18]
 80070f6:	e011      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007100:	d10c      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3320      	adds	r3, #32
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f925 	bl	8007358 <RCCEx_PLLSAI2_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007112:	7cfb      	ldrb	r3, [r7, #19]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007128:	4b10      	ldr	r3, [pc, #64]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800712a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007136:	490d      	ldr	r1, [pc, #52]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800714a:	4b08      	ldr	r3, [pc, #32]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800714c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007150:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715a:	4904      	ldr	r1, [pc, #16]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007162:	7cbb      	ldrb	r3, [r7, #18]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40021000 	.word	0x40021000

08007170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800717e:	4b75      	ldr	r3, [pc, #468]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800718a:	4b72      	ldr	r3, [pc, #456]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0203 	and.w	r2, r3, #3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d10d      	bne.n	80071b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
       ||
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80071a2:	4b6c      	ldr	r3, [pc, #432]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
       ||
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d047      	beq.n	8007246 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
 80071ba:	e044      	b.n	8007246 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d018      	beq.n	80071f6 <RCCEx_PLLSAI1_Config+0x86>
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d825      	bhi.n	8007214 <RCCEx_PLLSAI1_Config+0xa4>
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d002      	beq.n	80071d2 <RCCEx_PLLSAI1_Config+0x62>
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d009      	beq.n	80071e4 <RCCEx_PLLSAI1_Config+0x74>
 80071d0:	e020      	b.n	8007214 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071d2:	4b60      	ldr	r3, [pc, #384]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d11d      	bne.n	800721a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071e2:	e01a      	b.n	800721a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071e4:	4b5b      	ldr	r3, [pc, #364]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d116      	bne.n	800721e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071f4:	e013      	b.n	800721e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071f6:	4b57      	ldr	r3, [pc, #348]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10f      	bne.n	8007222 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007202:	4b54      	ldr	r3, [pc, #336]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007212:	e006      	b.n	8007222 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e004      	b.n	8007224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007222:	bf00      	nop
    }

    if(status == HAL_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10d      	bne.n	8007246 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800722a:	4b4a      	ldr	r3, [pc, #296]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6819      	ldr	r1, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	3b01      	subs	r3, #1
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	430b      	orrs	r3, r1
 8007240:	4944      	ldr	r1, [pc, #272]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007242:	4313      	orrs	r3, r2
 8007244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d17d      	bne.n	8007348 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800724c:	4b41      	ldr	r3, [pc, #260]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a40      	ldr	r2, [pc, #256]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007252:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007258:	f7fb fdae 	bl	8002db8 <HAL_GetTick>
 800725c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800725e:	e009      	b.n	8007274 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007260:	f7fb fdaa 	bl	8002db8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d902      	bls.n	8007274 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	73fb      	strb	r3, [r7, #15]
        break;
 8007272:	e005      	b.n	8007280 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007274:	4b37      	ldr	r3, [pc, #220]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ef      	bne.n	8007260 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d160      	bne.n	8007348 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d111      	bne.n	80072b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800728c:	4b31      	ldr	r3, [pc, #196]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6892      	ldr	r2, [r2, #8]
 800729c:	0211      	lsls	r1, r2, #8
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68d2      	ldr	r2, [r2, #12]
 80072a2:	0912      	lsrs	r2, r2, #4
 80072a4:	0452      	lsls	r2, r2, #17
 80072a6:	430a      	orrs	r2, r1
 80072a8:	492a      	ldr	r1, [pc, #168]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	610b      	str	r3, [r1, #16]
 80072ae:	e027      	b.n	8007300 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d112      	bne.n	80072dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80072be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6892      	ldr	r2, [r2, #8]
 80072c6:	0211      	lsls	r1, r2, #8
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6912      	ldr	r2, [r2, #16]
 80072cc:	0852      	lsrs	r2, r2, #1
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0552      	lsls	r2, r2, #21
 80072d2:	430a      	orrs	r2, r1
 80072d4:	491f      	ldr	r1, [pc, #124]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	610b      	str	r3, [r1, #16]
 80072da:	e011      	b.n	8007300 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6892      	ldr	r2, [r2, #8]
 80072ec:	0211      	lsls	r1, r2, #8
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6952      	ldr	r2, [r2, #20]
 80072f2:	0852      	lsrs	r2, r2, #1
 80072f4:	3a01      	subs	r2, #1
 80072f6:	0652      	lsls	r2, r2, #25
 80072f8:	430a      	orrs	r2, r1
 80072fa:	4916      	ldr	r1, [pc, #88]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007300:	4b14      	ldr	r3, [pc, #80]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800730a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730c:	f7fb fd54 	bl	8002db8 <HAL_GetTick>
 8007310:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007312:	e009      	b.n	8007328 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007314:	f7fb fd50 	bl	8002db8 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d902      	bls.n	8007328 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	73fb      	strb	r3, [r7, #15]
          break;
 8007326:	e005      	b.n	8007334 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0ef      	beq.n	8007314 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800733a:	4b06      	ldr	r3, [pc, #24]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	4904      	ldr	r1, [pc, #16]	@ (8007354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007344:	4313      	orrs	r3, r2
 8007346:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000

08007358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007366:	4b6a      	ldr	r3, [pc, #424]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007372:	4b67      	ldr	r3, [pc, #412]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f003 0203 	and.w	r2, r3, #3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	429a      	cmp	r2, r3
 8007380:	d10d      	bne.n	800739e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
       ||
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800738a:	4b61      	ldr	r3, [pc, #388]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
       ||
 800739a:	429a      	cmp	r2, r3
 800739c:	d047      	beq.n	800742e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	e044      	b.n	800742e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d018      	beq.n	80073de <RCCEx_PLLSAI2_Config+0x86>
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d825      	bhi.n	80073fc <RCCEx_PLLSAI2_Config+0xa4>
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d002      	beq.n	80073ba <RCCEx_PLLSAI2_Config+0x62>
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d009      	beq.n	80073cc <RCCEx_PLLSAI2_Config+0x74>
 80073b8:	e020      	b.n	80073fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073ba:	4b55      	ldr	r3, [pc, #340]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d11d      	bne.n	8007402 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073ca:	e01a      	b.n	8007402 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073cc:	4b50      	ldr	r3, [pc, #320]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d116      	bne.n	8007406 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073dc:	e013      	b.n	8007406 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073de:	4b4c      	ldr	r3, [pc, #304]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10f      	bne.n	800740a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073ea:	4b49      	ldr	r3, [pc, #292]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073fa:	e006      	b.n	800740a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007400:	e004      	b.n	800740c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800740a:	bf00      	nop
    }

    if(status == HAL_OK)
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007412:	4b3f      	ldr	r3, [pc, #252]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	3b01      	subs	r3, #1
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	430b      	orrs	r3, r1
 8007428:	4939      	ldr	r1, [pc, #228]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800742a:	4313      	orrs	r3, r2
 800742c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d167      	bne.n	8007504 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007434:	4b36      	ldr	r3, [pc, #216]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a35      	ldr	r2, [pc, #212]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800743e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007440:	f7fb fcba 	bl	8002db8 <HAL_GetTick>
 8007444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007446:	e009      	b.n	800745c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007448:	f7fb fcb6 	bl	8002db8 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d902      	bls.n	800745c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	73fb      	strb	r3, [r7, #15]
        break;
 800745a:	e005      	b.n	8007468 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800745c:	4b2c      	ldr	r3, [pc, #176]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ef      	bne.n	8007448 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d14a      	bne.n	8007504 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d111      	bne.n	8007498 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007474:	4b26      	ldr	r3, [pc, #152]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800747c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6892      	ldr	r2, [r2, #8]
 8007484:	0211      	lsls	r1, r2, #8
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68d2      	ldr	r2, [r2, #12]
 800748a:	0912      	lsrs	r2, r2, #4
 800748c:	0452      	lsls	r2, r2, #17
 800748e:	430a      	orrs	r2, r1
 8007490:	491f      	ldr	r1, [pc, #124]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	614b      	str	r3, [r1, #20]
 8007496:	e011      	b.n	80074bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007498:	4b1d      	ldr	r3, [pc, #116]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80074a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6892      	ldr	r2, [r2, #8]
 80074a8:	0211      	lsls	r1, r2, #8
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6912      	ldr	r2, [r2, #16]
 80074ae:	0852      	lsrs	r2, r2, #1
 80074b0:	3a01      	subs	r2, #1
 80074b2:	0652      	lsls	r2, r2, #25
 80074b4:	430a      	orrs	r2, r1
 80074b6:	4916      	ldr	r1, [pc, #88]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80074bc:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a13      	ldr	r2, [pc, #76]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c8:	f7fb fc76 	bl	8002db8 <HAL_GetTick>
 80074cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074ce:	e009      	b.n	80074e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074d0:	f7fb fc72 	bl	8002db8 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d902      	bls.n	80074e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	73fb      	strb	r3, [r7, #15]
          break;
 80074e2:	e005      	b.n	80074f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ef      	beq.n	80074d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074f6:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	4904      	ldr	r1, [pc, #16]	@ (8007510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007500:	4313      	orrs	r3, r2
 8007502:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40021000 	.word	0x40021000

08007514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e049      	b.n	80075ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fb f9e8 	bl	8002910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f000 fc16 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e047      	b.n	800766c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a23      	ldr	r2, [pc, #140]	@ (8007678 <HAL_TIM_Base_Start+0xb4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01d      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f6:	d018      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1f      	ldr	r2, [pc, #124]	@ (800767c <HAL_TIM_Base_Start+0xb8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1e      	ldr	r2, [pc, #120]	@ (8007680 <HAL_TIM_Base_Start+0xbc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1c      	ldr	r2, [pc, #112]	@ (8007684 <HAL_TIM_Base_Start+0xc0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1b      	ldr	r2, [pc, #108]	@ (8007688 <HAL_TIM_Base_Start+0xc4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_TIM_Base_Start+0x66>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a19      	ldr	r2, [pc, #100]	@ (800768c <HAL_TIM_Base_Start+0xc8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d115      	bne.n	8007656 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <HAL_TIM_Base_Start+0xcc>)
 8007632:	4013      	ands	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b06      	cmp	r3, #6
 800763a:	d015      	beq.n	8007668 <HAL_TIM_Base_Start+0xa4>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007642:	d011      	beq.n	8007668 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	e008      	b.n	8007668 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e000      	b.n	800766a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40014000 	.word	0x40014000
 8007690:	00010007 	.word	0x00010007

08007694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e049      	b.n	800773a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f841 	bl	8007742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f000 fb56 	bl	8007d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01b      	beq.n	80077ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f06f 0202 	mvn.w	r2, #2
 800778a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fad0 	bl	8007d46 <HAL_TIM_IC_CaptureCallback>
 80077a6:	e005      	b.n	80077b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fac2 	bl	8007d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fad3 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d020      	beq.n	8007806 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01b      	beq.n	8007806 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f06f 0204 	mvn.w	r2, #4
 80077d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 faaa 	bl	8007d46 <HAL_TIM_IC_CaptureCallback>
 80077f2:	e005      	b.n	8007800 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa9c 	bl	8007d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 faad 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d020      	beq.n	8007852 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d01b      	beq.n	8007852 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f06f 0208 	mvn.w	r2, #8
 8007822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2204      	movs	r2, #4
 8007828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa84 	bl	8007d46 <HAL_TIM_IC_CaptureCallback>
 800783e:	e005      	b.n	800784c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa76 	bl	8007d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa87 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d020      	beq.n	800789e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01b      	beq.n	800789e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0210 	mvn.w	r2, #16
 800786e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2208      	movs	r2, #8
 8007874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa5e 	bl	8007d46 <HAL_TIM_IC_CaptureCallback>
 800788a:	e005      	b.n	8007898 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa50 	bl	8007d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa61 	bl	8007d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00c      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f06f 0201 	mvn.w	r2, #1
 80078ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa2e 	bl	8007d1e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00c      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fef2 	bl	80086d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00c      	beq.n	8007914 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800790c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 feea 	bl	80086e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa1b 	bl	8007d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0220 	mvn.w	r2, #32
 8007954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 feb2 	bl	80086c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800797e:	2302      	movs	r3, #2
 8007980:	e0ff      	b.n	8007b82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b14      	cmp	r3, #20
 800798e:	f200 80f0 	bhi.w	8007b72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007992:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079ed 	.word	0x080079ed
 800799c:	08007b73 	.word	0x08007b73
 80079a0:	08007b73 	.word	0x08007b73
 80079a4:	08007b73 	.word	0x08007b73
 80079a8:	08007a2d 	.word	0x08007a2d
 80079ac:	08007b73 	.word	0x08007b73
 80079b0:	08007b73 	.word	0x08007b73
 80079b4:	08007b73 	.word	0x08007b73
 80079b8:	08007a6f 	.word	0x08007a6f
 80079bc:	08007b73 	.word	0x08007b73
 80079c0:	08007b73 	.word	0x08007b73
 80079c4:	08007b73 	.word	0x08007b73
 80079c8:	08007aaf 	.word	0x08007aaf
 80079cc:	08007b73 	.word	0x08007b73
 80079d0:	08007b73 	.word	0x08007b73
 80079d4:	08007b73 	.word	0x08007b73
 80079d8:	08007af1 	.word	0x08007af1
 80079dc:	08007b73 	.word	0x08007b73
 80079e0:	08007b73 	.word	0x08007b73
 80079e4:	08007b73 	.word	0x08007b73
 80079e8:	08007b31 	.word	0x08007b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fa6c 	bl	8007ed0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6999      	ldr	r1, [r3, #24]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	619a      	str	r2, [r3, #24]
      break;
 8007a2a:	e0a5      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fadc 	bl	8007ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6999      	ldr	r1, [r3, #24]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	619a      	str	r2, [r3, #24]
      break;
 8007a6c:	e084      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fb45 	bl	8008104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0208 	orr.w	r2, r2, #8
 8007a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0204 	bic.w	r2, r2, #4
 8007a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69d9      	ldr	r1, [r3, #28]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	61da      	str	r2, [r3, #28]
      break;
 8007aac:	e064      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fbad 	bl	8008214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69d9      	ldr	r1, [r3, #28]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	021a      	lsls	r2, r3, #8
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	61da      	str	r2, [r3, #28]
      break;
 8007aee:	e043      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fbf6 	bl	80082e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0204 	bic.w	r2, r2, #4
 8007b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b2e:	e023      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fc3a 	bl	80083b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007b70:	e002      	b.n	8007b78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
      break;
 8007b76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop

08007b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e0b6      	b.n	8007d16 <HAL_TIM_ConfigClockSource+0x18a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be4:	d03e      	beq.n	8007c64 <HAL_TIM_ConfigClockSource+0xd8>
 8007be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bea:	f200 8087 	bhi.w	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf2:	f000 8086 	beq.w	8007d02 <HAL_TIM_ConfigClockSource+0x176>
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfa:	d87f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007bfc:	2b70      	cmp	r3, #112	@ 0x70
 8007bfe:	d01a      	beq.n	8007c36 <HAL_TIM_ConfigClockSource+0xaa>
 8007c00:	2b70      	cmp	r3, #112	@ 0x70
 8007c02:	d87b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c04:	2b60      	cmp	r3, #96	@ 0x60
 8007c06:	d050      	beq.n	8007caa <HAL_TIM_ConfigClockSource+0x11e>
 8007c08:	2b60      	cmp	r3, #96	@ 0x60
 8007c0a:	d877      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c0c:	2b50      	cmp	r3, #80	@ 0x50
 8007c0e:	d03c      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0xfe>
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d873      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c14:	2b40      	cmp	r3, #64	@ 0x40
 8007c16:	d058      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0x13e>
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d86f      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c1c:	2b30      	cmp	r3, #48	@ 0x30
 8007c1e:	d064      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x15e>
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d86b      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c24:	2b20      	cmp	r3, #32
 8007c26:	d060      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x15e>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d867      	bhi.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d05c      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x15e>
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d05a      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x15e>
 8007c34:	e062      	b.n	8007cfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c46:	f000 fc93 	bl	8008570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	609a      	str	r2, [r3, #8]
      break;
 8007c62:	e04f      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c74:	f000 fc7c 	bl	8008570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c86:	609a      	str	r2, [r3, #8]
      break;
 8007c88:	e03c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c96:	461a      	mov	r2, r3
 8007c98:	f000 fbf0 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2150      	movs	r1, #80	@ 0x50
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fc49 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007ca8:	e02c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f000 fc0f 	bl	80084da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2160      	movs	r1, #96	@ 0x60
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fc39 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007cc8:	e01c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 fbd0 	bl	800847c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2140      	movs	r1, #64	@ 0x40
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fc29 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e00c      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	f000 fc20 	bl	800853a <TIM_ITRx_SetConfig>
      break;
 8007cfa:	e003      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8007d00:	e000      	b.n	8007d04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a46      	ldr	r2, [pc, #280]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d013      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da2:	d00f      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a43      	ldr	r2, [pc, #268]	@ (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00b      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a42      	ldr	r2, [pc, #264]	@ (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a41      	ldr	r2, [pc, #260]	@ (8007ebc <TIM_Base_SetConfig+0x138>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0x40>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a40      	ldr	r2, [pc, #256]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d108      	bne.n	8007dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a35      	ldr	r2, [pc, #212]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d01f      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de4:	d01b      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a32      	ldr	r2, [pc, #200]	@ (8007eb4 <TIM_Base_SetConfig+0x130>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d017      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a31      	ldr	r2, [pc, #196]	@ (8007eb8 <TIM_Base_SetConfig+0x134>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a30      	ldr	r2, [pc, #192]	@ (8007ebc <TIM_Base_SetConfig+0x138>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00f      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a2f      	ldr	r2, [pc, #188]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00b      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d007      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec8 <TIM_Base_SetConfig+0x144>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_Base_SetConfig+0x9a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a2c      	ldr	r2, [pc, #176]	@ (8007ecc <TIM_Base_SetConfig+0x148>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d108      	bne.n	8007e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a16      	ldr	r2, [pc, #88]	@ (8007eb0 <TIM_Base_SetConfig+0x12c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <TIM_Base_SetConfig+0x13c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <TIM_Base_SetConfig+0x140>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d007      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	@ (8007ec8 <TIM_Base_SetConfig+0x144>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d003      	beq.n	8007e7c <TIM_Base_SetConfig+0xf8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_Base_SetConfig+0x148>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d103      	bne.n	8007e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d105      	bne.n	8007ea2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	611a      	str	r2, [r3, #16]
  }
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800
 8007ebc:	40000c00 	.word	0x40000c00
 8007ec0:	40013400 	.word	0x40013400
 8007ec4:	40014000 	.word	0x40014000
 8007ec8:	40014400 	.word	0x40014400
 8007ecc:	40014800 	.word	0x40014800

08007ed0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	f023 0201 	bic.w	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0303 	bic.w	r3, r3, #3
 8007f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f023 0302 	bic.w	r3, r3, #2
 8007f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8007fdc <TIM_OC1_SetConfig+0x10c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d00f      	beq.n	8007f50 <TIM_OC1_SetConfig+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe0 <TIM_OC1_SetConfig+0x110>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00b      	beq.n	8007f50 <TIM_OC1_SetConfig+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fe4 <TIM_OC1_SetConfig+0x114>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d007      	beq.n	8007f50 <TIM_OC1_SetConfig+0x80>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a29      	ldr	r2, [pc, #164]	@ (8007fe8 <TIM_OC1_SetConfig+0x118>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_OC1_SetConfig+0x80>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a28      	ldr	r2, [pc, #160]	@ (8007fec <TIM_OC1_SetConfig+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10c      	bne.n	8007f6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0308 	bic.w	r3, r3, #8
 8007f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 0304 	bic.w	r3, r3, #4
 8007f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fdc <TIM_OC1_SetConfig+0x10c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d00f      	beq.n	8007f92 <TIM_OC1_SetConfig+0xc2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe0 <TIM_OC1_SetConfig+0x110>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00b      	beq.n	8007f92 <TIM_OC1_SetConfig+0xc2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a19      	ldr	r2, [pc, #100]	@ (8007fe4 <TIM_OC1_SetConfig+0x114>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d007      	beq.n	8007f92 <TIM_OC1_SetConfig+0xc2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a18      	ldr	r2, [pc, #96]	@ (8007fe8 <TIM_OC1_SetConfig+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d003      	beq.n	8007f92 <TIM_OC1_SetConfig+0xc2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	@ (8007fec <TIM_OC1_SetConfig+0x11c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d111      	bne.n	8007fb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	621a      	str	r2, [r3, #32]
}
 8007fd0:	bf00      	nop
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	40012c00 	.word	0x40012c00
 8007fe0:	40013400 	.word	0x40013400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40014400 	.word	0x40014400
 8007fec:	40014800 	.word	0x40014800

08007ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	f023 0210 	bic.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800801e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800802a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4313      	orrs	r3, r2
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f023 0320 	bic.w	r3, r3, #32
 800803e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	4313      	orrs	r3, r2
 800804a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a28      	ldr	r2, [pc, #160]	@ (80080f0 <TIM_OC2_SetConfig+0x100>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_OC2_SetConfig+0x6c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a27      	ldr	r2, [pc, #156]	@ (80080f4 <TIM_OC2_SetConfig+0x104>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d10d      	bne.n	8008078 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1d      	ldr	r2, [pc, #116]	@ (80080f0 <TIM_OC2_SetConfig+0x100>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00f      	beq.n	80080a0 <TIM_OC2_SetConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <TIM_OC2_SetConfig+0x104>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00b      	beq.n	80080a0 <TIM_OC2_SetConfig+0xb0>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <TIM_OC2_SetConfig+0x108>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_OC2_SetConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a1a      	ldr	r2, [pc, #104]	@ (80080fc <TIM_OC2_SetConfig+0x10c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC2_SetConfig+0xb0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a19      	ldr	r2, [pc, #100]	@ (8008100 <TIM_OC2_SetConfig+0x110>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d113      	bne.n	80080c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40013400 	.word	0x40013400
 80080f8:	40014000 	.word	0x40014000
 80080fc:	40014400 	.word	0x40014400
 8008100:	40014800 	.word	0x40014800

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a27      	ldr	r2, [pc, #156]	@ (8008200 <TIM_OC3_SetConfig+0xfc>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_OC3_SetConfig+0x6a>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a26      	ldr	r2, [pc, #152]	@ (8008204 <TIM_OC3_SetConfig+0x100>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d10d      	bne.n	800818a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <TIM_OC3_SetConfig+0xfc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00f      	beq.n	80081b2 <TIM_OC3_SetConfig+0xae>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <TIM_OC3_SetConfig+0x100>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00b      	beq.n	80081b2 <TIM_OC3_SetConfig+0xae>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a1a      	ldr	r2, [pc, #104]	@ (8008208 <TIM_OC3_SetConfig+0x104>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d007      	beq.n	80081b2 <TIM_OC3_SetConfig+0xae>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a19      	ldr	r2, [pc, #100]	@ (800820c <TIM_OC3_SetConfig+0x108>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d003      	beq.n	80081b2 <TIM_OC3_SetConfig+0xae>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <TIM_OC3_SetConfig+0x10c>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d113      	bne.n	80081da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	621a      	str	r2, [r3, #32]
}
 80081f4:	bf00      	nop
 80081f6:	371c      	adds	r7, #28
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40012c00 	.word	0x40012c00
 8008204:	40013400 	.word	0x40013400
 8008208:	40014000 	.word	0x40014000
 800820c:	40014400 	.word	0x40014400
 8008210:	40014800 	.word	0x40014800

08008214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008214:	b480      	push	{r7}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800824e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	031b      	lsls	r3, r3, #12
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a18      	ldr	r2, [pc, #96]	@ (80082d4 <TIM_OC4_SetConfig+0xc0>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_OC4_SetConfig+0x84>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a17      	ldr	r2, [pc, #92]	@ (80082d8 <TIM_OC4_SetConfig+0xc4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC4_SetConfig+0x84>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a16      	ldr	r2, [pc, #88]	@ (80082dc <TIM_OC4_SetConfig+0xc8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC4_SetConfig+0x84>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a15      	ldr	r2, [pc, #84]	@ (80082e0 <TIM_OC4_SetConfig+0xcc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC4_SetConfig+0x84>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a14      	ldr	r2, [pc, #80]	@ (80082e4 <TIM_OC4_SetConfig+0xd0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d109      	bne.n	80082ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800829e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	019b      	lsls	r3, r3, #6
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	40013400 	.word	0x40013400
 80082dc:	40014000 	.word	0x40014000
 80082e0:	40014400 	.word	0x40014400
 80082e4:	40014800 	.word	0x40014800

080082e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800832c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4313      	orrs	r3, r2
 8008338:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a17      	ldr	r2, [pc, #92]	@ (800839c <TIM_OC5_SetConfig+0xb4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00f      	beq.n	8008362 <TIM_OC5_SetConfig+0x7a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a16      	ldr	r2, [pc, #88]	@ (80083a0 <TIM_OC5_SetConfig+0xb8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00b      	beq.n	8008362 <TIM_OC5_SetConfig+0x7a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a15      	ldr	r2, [pc, #84]	@ (80083a4 <TIM_OC5_SetConfig+0xbc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d007      	beq.n	8008362 <TIM_OC5_SetConfig+0x7a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a14      	ldr	r2, [pc, #80]	@ (80083a8 <TIM_OC5_SetConfig+0xc0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC5_SetConfig+0x7a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a13      	ldr	r2, [pc, #76]	@ (80083ac <TIM_OC5_SetConfig+0xc4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d109      	bne.n	8008376 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685a      	ldr	r2, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	621a      	str	r2, [r3, #32]
}
 8008390:	bf00      	nop
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	40012c00 	.word	0x40012c00
 80083a0:	40013400 	.word	0x40013400
 80083a4:	40014000 	.word	0x40014000
 80083a8:	40014400 	.word	0x40014400
 80083ac:	40014800 	.word	0x40014800

080083b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	051b      	lsls	r3, r3, #20
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a18      	ldr	r2, [pc, #96]	@ (8008468 <TIM_OC6_SetConfig+0xb8>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d00f      	beq.n	800842c <TIM_OC6_SetConfig+0x7c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a17      	ldr	r2, [pc, #92]	@ (800846c <TIM_OC6_SetConfig+0xbc>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00b      	beq.n	800842c <TIM_OC6_SetConfig+0x7c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a16      	ldr	r2, [pc, #88]	@ (8008470 <TIM_OC6_SetConfig+0xc0>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d007      	beq.n	800842c <TIM_OC6_SetConfig+0x7c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a15      	ldr	r2, [pc, #84]	@ (8008474 <TIM_OC6_SetConfig+0xc4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d003      	beq.n	800842c <TIM_OC6_SetConfig+0x7c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a14      	ldr	r2, [pc, #80]	@ (8008478 <TIM_OC6_SetConfig+0xc8>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d109      	bne.n	8008440 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	029b      	lsls	r3, r3, #10
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	621a      	str	r2, [r3, #32]
}
 800845a:	bf00      	nop
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40012c00 	.word	0x40012c00
 800846c:	40013400 	.word	0x40013400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800

0800847c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 030a 	bic.w	r3, r3, #10
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f023 0210 	bic.w	r2, r3, #16
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	031b      	lsls	r3, r3, #12
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4313      	orrs	r3, r2
 8008558:	f043 0307 	orr.w	r3, r3, #7
 800855c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800858a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	431a      	orrs	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	4313      	orrs	r3, r2
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	609a      	str	r2, [r3, #8]
}
 80085a4:	bf00      	nop
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d101      	bne.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e068      	b.n	800869a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a2e      	ldr	r2, [pc, #184]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d004      	beq.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2d      	ldr	r2, [pc, #180]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d108      	bne.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008602:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008614:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a1e      	ldr	r2, [pc, #120]	@ (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	d018      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1b      	ldr	r2, [pc, #108]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1a      	ldr	r2, [pc, #104]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a18      	ldr	r2, [pc, #96]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a13      	ldr	r2, [pc, #76]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a14      	ldr	r2, [pc, #80]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d10c      	bne.n	8008688 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	40012c00 	.word	0x40012c00
 80086ac:	40013400 	.word	0x40013400
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40014000 	.word	0x40014000

080086c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e040      	b.n	8008790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fa f9b0 	bl	8002a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2224      	movs	r2, #36	@ 0x24
 8008728:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d002      	beq.n	8008748 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fb6a 	bl	8008e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f8af 	bl	80088ac <UART_SetConfig>
 800874e:	4603      	mov	r3, r0
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e01b      	b.n	8008790 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fbe9 	bl	8008f60 <UART_CheckIdleState>
 800878e:	4603      	mov	r3, r0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	@ 0x28
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	4613      	mov	r3, r2
 80087a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d177      	bne.n	80088a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_UART_Transmit+0x24>
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e070      	b.n	80088a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2221      	movs	r2, #33	@ 0x21
 80087cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087ce:	f7fa faf3 	bl	8002db8 <HAL_GetTick>
 80087d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	88fa      	ldrh	r2, [r7, #6]
 80087d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ec:	d108      	bne.n	8008800 <HAL_UART_Transmit+0x68>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	e003      	b.n	8008808 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008808:	e02f      	b.n	800886a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	2180      	movs	r1, #128	@ 0x80
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fc4b 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e03b      	b.n	80088a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	881a      	ldrh	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800883c:	b292      	uxth	r2, r2
 800883e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	3302      	adds	r3, #2
 8008844:	61bb      	str	r3, [r7, #24]
 8008846:	e007      	b.n	8008858 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	3301      	adds	r3, #1
 8008856:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1c9      	bne.n	800880a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	2140      	movs	r1, #64	@ 0x40
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fc15 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e005      	b.n	80088a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	e000      	b.n	80088a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80088a0:	2302      	movs	r3, #2
  }
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3720      	adds	r7, #32
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088b0:	b08a      	sub	sp, #40	@ 0x28
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4ba4      	ldr	r3, [pc, #656]	@ (8008b6c <UART_SetConfig+0x2c0>)
 80088dc:	4013      	ands	r3, r2
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80088e4:	430b      	orrs	r3, r1
 80088e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a99      	ldr	r2, [pc, #612]	@ (8008b70 <UART_SetConfig+0x2c4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d004      	beq.n	8008918 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008914:	4313      	orrs	r3, r2
 8008916:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008928:	430a      	orrs	r2, r1
 800892a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a90      	ldr	r2, [pc, #576]	@ (8008b74 <UART_SetConfig+0x2c8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d126      	bne.n	8008984 <UART_SetConfig+0xd8>
 8008936:	4b90      	ldr	r3, [pc, #576]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	2b03      	cmp	r3, #3
 8008942:	d81b      	bhi.n	800897c <UART_SetConfig+0xd0>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <UART_SetConfig+0xa0>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800896d 	.word	0x0800896d
 8008954:	08008965 	.word	0x08008965
 8008958:	08008975 	.word	0x08008975
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008962:	e116      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008964:	2302      	movs	r3, #2
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e112      	b.n	8008b92 <UART_SetConfig+0x2e6>
 800896c:	2304      	movs	r3, #4
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008972:	e10e      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008974:	2308      	movs	r3, #8
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800897a:	e10a      	b.n	8008b92 <UART_SetConfig+0x2e6>
 800897c:	2310      	movs	r3, #16
 800897e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008982:	e106      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a7c      	ldr	r2, [pc, #496]	@ (8008b7c <UART_SetConfig+0x2d0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d138      	bne.n	8008a00 <UART_SetConfig+0x154>
 800898e:	4b7a      	ldr	r3, [pc, #488]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008994:	f003 030c 	and.w	r3, r3, #12
 8008998:	2b0c      	cmp	r3, #12
 800899a:	d82d      	bhi.n	80089f8 <UART_SetConfig+0x14c>
 800899c:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <UART_SetConfig+0xf8>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	080089d9 	.word	0x080089d9
 80089a8:	080089f9 	.word	0x080089f9
 80089ac:	080089f9 	.word	0x080089f9
 80089b0:	080089f9 	.word	0x080089f9
 80089b4:	080089e9 	.word	0x080089e9
 80089b8:	080089f9 	.word	0x080089f9
 80089bc:	080089f9 	.word	0x080089f9
 80089c0:	080089f9 	.word	0x080089f9
 80089c4:	080089e1 	.word	0x080089e1
 80089c8:	080089f9 	.word	0x080089f9
 80089cc:	080089f9 	.word	0x080089f9
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	080089f1 	.word	0x080089f1
 80089d8:	2300      	movs	r3, #0
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089de:	e0d8      	b.n	8008b92 <UART_SetConfig+0x2e6>
 80089e0:	2302      	movs	r3, #2
 80089e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089e6:	e0d4      	b.n	8008b92 <UART_SetConfig+0x2e6>
 80089e8:	2304      	movs	r3, #4
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ee:	e0d0      	b.n	8008b92 <UART_SetConfig+0x2e6>
 80089f0:	2308      	movs	r3, #8
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089f6:	e0cc      	b.n	8008b92 <UART_SetConfig+0x2e6>
 80089f8:	2310      	movs	r3, #16
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089fe:	e0c8      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a5e      	ldr	r2, [pc, #376]	@ (8008b80 <UART_SetConfig+0x2d4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d125      	bne.n	8008a56 <UART_SetConfig+0x1aa>
 8008a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008a14:	2b30      	cmp	r3, #48	@ 0x30
 8008a16:	d016      	beq.n	8008a46 <UART_SetConfig+0x19a>
 8008a18:	2b30      	cmp	r3, #48	@ 0x30
 8008a1a:	d818      	bhi.n	8008a4e <UART_SetConfig+0x1a2>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d00a      	beq.n	8008a36 <UART_SetConfig+0x18a>
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d814      	bhi.n	8008a4e <UART_SetConfig+0x1a2>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <UART_SetConfig+0x182>
 8008a28:	2b10      	cmp	r3, #16
 8008a2a:	d008      	beq.n	8008a3e <UART_SetConfig+0x192>
 8008a2c:	e00f      	b.n	8008a4e <UART_SetConfig+0x1a2>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a34:	e0ad      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a36:	2302      	movs	r3, #2
 8008a38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a3c:	e0a9      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a3e:	2304      	movs	r3, #4
 8008a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a44:	e0a5      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a46:	2308      	movs	r3, #8
 8008a48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a4c:	e0a1      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a4e:	2310      	movs	r3, #16
 8008a50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a54:	e09d      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8008b84 <UART_SetConfig+0x2d8>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d125      	bne.n	8008aac <UART_SetConfig+0x200>
 8008a60:	4b45      	ldr	r3, [pc, #276]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a6c:	d016      	beq.n	8008a9c <UART_SetConfig+0x1f0>
 8008a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a70:	d818      	bhi.n	8008aa4 <UART_SetConfig+0x1f8>
 8008a72:	2b80      	cmp	r3, #128	@ 0x80
 8008a74:	d00a      	beq.n	8008a8c <UART_SetConfig+0x1e0>
 8008a76:	2b80      	cmp	r3, #128	@ 0x80
 8008a78:	d814      	bhi.n	8008aa4 <UART_SetConfig+0x1f8>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <UART_SetConfig+0x1d8>
 8008a7e:	2b40      	cmp	r3, #64	@ 0x40
 8008a80:	d008      	beq.n	8008a94 <UART_SetConfig+0x1e8>
 8008a82:	e00f      	b.n	8008aa4 <UART_SetConfig+0x1f8>
 8008a84:	2300      	movs	r3, #0
 8008a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a8a:	e082      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a92:	e07e      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a94:	2304      	movs	r3, #4
 8008a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008a9a:	e07a      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008a9c:	2308      	movs	r3, #8
 8008a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aa2:	e076      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aaa:	e072      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a35      	ldr	r2, [pc, #212]	@ (8008b88 <UART_SetConfig+0x2dc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d12a      	bne.n	8008b0c <UART_SetConfig+0x260>
 8008ab6:	4b30      	ldr	r3, [pc, #192]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008abc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ac4:	d01a      	beq.n	8008afc <UART_SetConfig+0x250>
 8008ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aca:	d81b      	bhi.n	8008b04 <UART_SetConfig+0x258>
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad0:	d00c      	beq.n	8008aec <UART_SetConfig+0x240>
 8008ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad6:	d815      	bhi.n	8008b04 <UART_SetConfig+0x258>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <UART_SetConfig+0x238>
 8008adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae0:	d008      	beq.n	8008af4 <UART_SetConfig+0x248>
 8008ae2:	e00f      	b.n	8008b04 <UART_SetConfig+0x258>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008aea:	e052      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008aec:	2302      	movs	r3, #2
 8008aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008af2:	e04e      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008af4:	2304      	movs	r3, #4
 8008af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008afa:	e04a      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008afc:	2308      	movs	r3, #8
 8008afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b02:	e046      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b04:	2310      	movs	r3, #16
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b0a:	e042      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a17      	ldr	r2, [pc, #92]	@ (8008b70 <UART_SetConfig+0x2c4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d13a      	bne.n	8008b8c <UART_SetConfig+0x2e0>
 8008b16:	4b18      	ldr	r3, [pc, #96]	@ (8008b78 <UART_SetConfig+0x2cc>)
 8008b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008b20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b24:	d01a      	beq.n	8008b5c <UART_SetConfig+0x2b0>
 8008b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b2a:	d81b      	bhi.n	8008b64 <UART_SetConfig+0x2b8>
 8008b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b30:	d00c      	beq.n	8008b4c <UART_SetConfig+0x2a0>
 8008b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b36:	d815      	bhi.n	8008b64 <UART_SetConfig+0x2b8>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <UART_SetConfig+0x298>
 8008b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b40:	d008      	beq.n	8008b54 <UART_SetConfig+0x2a8>
 8008b42:	e00f      	b.n	8008b64 <UART_SetConfig+0x2b8>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b4a:	e022      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b52:	e01e      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b54:	2304      	movs	r3, #4
 8008b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b5a:	e01a      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b62:	e016      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b64:	2310      	movs	r3, #16
 8008b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008b6a:	e012      	b.n	8008b92 <UART_SetConfig+0x2e6>
 8008b6c:	efff69f3 	.word	0xefff69f3
 8008b70:	40008000 	.word	0x40008000
 8008b74:	40013800 	.word	0x40013800
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	40004400 	.word	0x40004400
 8008b80:	40004800 	.word	0x40004800
 8008b84:	40004c00 	.word	0x40004c00
 8008b88:	40005000 	.word	0x40005000
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a9f      	ldr	r2, [pc, #636]	@ (8008e14 <UART_SetConfig+0x568>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d17a      	bne.n	8008c92 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d824      	bhi.n	8008bee <UART_SetConfig+0x342>
 8008ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bac <UART_SetConfig+0x300>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bef 	.word	0x08008bef
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008bef 	.word	0x08008bef
 8008bbc:	08008bdf 	.word	0x08008bdf
 8008bc0:	08008bef 	.word	0x08008bef
 8008bc4:	08008bef 	.word	0x08008bef
 8008bc8:	08008bef 	.word	0x08008bef
 8008bcc:	08008be7 	.word	0x08008be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd0:	f7fd ff58 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 8008bd4:	61f8      	str	r0, [r7, #28]
        break;
 8008bd6:	e010      	b.n	8008bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bd8:	4b8f      	ldr	r3, [pc, #572]	@ (8008e18 <UART_SetConfig+0x56c>)
 8008bda:	61fb      	str	r3, [r7, #28]
        break;
 8008bdc:	e00d      	b.n	8008bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bde:	f7fd feb9 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8008be2:	61f8      	str	r0, [r7, #28]
        break;
 8008be4:	e009      	b.n	8008bfa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bea:	61fb      	str	r3, [r7, #28]
        break;
 8008bec:	e005      	b.n	8008bfa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008bf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80fb 	beq.w	8008df8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4613      	mov	r3, r2
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4413      	add	r3, r2
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d305      	bcc.n	8008c1e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d903      	bls.n	8008c26 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008c24:	e0e8      	b.n	8008df8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	f04f 0200 	mov.w	r2, #0
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	022b      	lsls	r3, r5, #8
 8008c38:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008c3c:	0222      	lsls	r2, r4, #8
 8008c3e:	68f9      	ldr	r1, [r7, #12]
 8008c40:	6849      	ldr	r1, [r1, #4]
 8008c42:	0849      	lsrs	r1, r1, #1
 8008c44:	2000      	movs	r0, #0
 8008c46:	4688      	mov	r8, r1
 8008c48:	4681      	mov	r9, r0
 8008c4a:	eb12 0a08 	adds.w	sl, r2, r8
 8008c4e:	eb43 0b09 	adc.w	fp, r3, r9
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c60:	4650      	mov	r0, sl
 8008c62:	4659      	mov	r1, fp
 8008c64:	f7f8 fab8 	bl	80011d8 <__aeabi_uldivmod>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c76:	d308      	bcc.n	8008c8a <UART_SetConfig+0x3de>
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c7e:	d204      	bcs.n	8008c8a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	60da      	str	r2, [r3, #12]
 8008c88:	e0b6      	b.n	8008df8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008c90:	e0b2      	b.n	8008df8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c9a:	d15e      	bne.n	8008d5a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d828      	bhi.n	8008cf6 <UART_SetConfig+0x44a>
 8008ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cac <UART_SetConfig+0x400>)
 8008ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008caa:	bf00      	nop
 8008cac:	08008cd1 	.word	0x08008cd1
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008ce1 	.word	0x08008ce1
 8008cb8:	08008cf7 	.word	0x08008cf7
 8008cbc:	08008ce7 	.word	0x08008ce7
 8008cc0:	08008cf7 	.word	0x08008cf7
 8008cc4:	08008cf7 	.word	0x08008cf7
 8008cc8:	08008cf7 	.word	0x08008cf7
 8008ccc:	08008cef 	.word	0x08008cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cd0:	f7fd fed8 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 8008cd4:	61f8      	str	r0, [r7, #28]
        break;
 8008cd6:	e014      	b.n	8008d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008cd8:	f7fd feea 	bl	8006ab0 <HAL_RCC_GetPCLK2Freq>
 8008cdc:	61f8      	str	r0, [r7, #28]
        break;
 8008cde:	e010      	b.n	8008d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8008e18 <UART_SetConfig+0x56c>)
 8008ce2:	61fb      	str	r3, [r7, #28]
        break;
 8008ce4:	e00d      	b.n	8008d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ce6:	f7fd fe35 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8008cea:	61f8      	str	r0, [r7, #28]
        break;
 8008cec:	e009      	b.n	8008d02 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf2:	61fb      	str	r3, [r7, #28]
        break;
 8008cf4:	e005      	b.n	8008d02 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d077      	beq.n	8008df8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	005a      	lsls	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	085b      	lsrs	r3, r3, #1
 8008d12:	441a      	add	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	2b0f      	cmp	r3, #15
 8008d22:	d916      	bls.n	8008d52 <UART_SetConfig+0x4a6>
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d2a:	d212      	bcs.n	8008d52 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f023 030f 	bic.w	r3, r3, #15
 8008d34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f003 0307 	and.w	r3, r3, #7
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	8afb      	ldrh	r3, [r7, #22]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	8afa      	ldrh	r2, [r7, #22]
 8008d4e:	60da      	str	r2, [r3, #12]
 8008d50:	e052      	b.n	8008df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008d58:	e04e      	b.n	8008df8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d827      	bhi.n	8008db2 <UART_SetConfig+0x506>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0x4bc>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	08008d95 	.word	0x08008d95
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	08008db3 	.word	0x08008db3
 8008d78:	08008da3 	.word	0x08008da3
 8008d7c:	08008db3 	.word	0x08008db3
 8008d80:	08008db3 	.word	0x08008db3
 8008d84:	08008db3 	.word	0x08008db3
 8008d88:	08008dab 	.word	0x08008dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d8c:	f7fd fe7a 	bl	8006a84 <HAL_RCC_GetPCLK1Freq>
 8008d90:	61f8      	str	r0, [r7, #28]
        break;
 8008d92:	e014      	b.n	8008dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d94:	f7fd fe8c 	bl	8006ab0 <HAL_RCC_GetPCLK2Freq>
 8008d98:	61f8      	str	r0, [r7, #28]
        break;
 8008d9a:	e010      	b.n	8008dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8008e18 <UART_SetConfig+0x56c>)
 8008d9e:	61fb      	str	r3, [r7, #28]
        break;
 8008da0:	e00d      	b.n	8008dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008da2:	f7fd fdd7 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8008da6:	61f8      	str	r0, [r7, #28]
        break;
 8008da8:	e009      	b.n	8008dbe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dae:	61fb      	str	r3, [r7, #28]
        break;
 8008db0:	e005      	b.n	8008dbe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008dbc:	bf00      	nop
    }

    if (pclk != 0U)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d019      	beq.n	8008df8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	085a      	lsrs	r2, r3, #1
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b0f      	cmp	r3, #15
 8008ddc:	d909      	bls.n	8008df2 <UART_SetConfig+0x546>
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008de4:	d205      	bcs.n	8008df2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60da      	str	r2, [r3, #12]
 8008df0:	e002      	b.n	8008df8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008e04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3728      	adds	r7, #40	@ 0x28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e12:	bf00      	nop
 8008e14:	40008000 	.word	0x40008000
 8008e18:	00f42400 	.word	0x00f42400

08008e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb0:	f003 0310 	and.w	r3, r3, #16
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01a      	beq.n	8008f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1a:	d10a      	bne.n	8008f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	605a      	str	r2, [r3, #4]
  }
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b098      	sub	sp, #96	@ 0x60
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f70:	f7f9 ff22 	bl	8002db8 <HAL_GetTick>
 8008f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0308 	and.w	r3, r3, #8
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d12e      	bne.n	8008fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f88c 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d021      	beq.n	8008fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa6:	e853 3f00 	ldrex	r3, [r3]
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fc4:	e841 2300 	strex	r3, r2, [r1]
 8008fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e6      	bne.n	8008f9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e062      	b.n	80090a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d149      	bne.n	8009084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f856 	bl	80090b0 <UART_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03c      	beq.n	8009084 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	623b      	str	r3, [r7, #32]
   return(result);
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800901e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	461a      	mov	r2, r3
 8009026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009028:	633b      	str	r3, [r7, #48]	@ 0x30
 800902a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800902e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e6      	bne.n	800900a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	60fb      	str	r3, [r7, #12]
   return(result);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 0301 	bic.w	r3, r3, #1
 8009052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800905c:	61fa      	str	r2, [r7, #28]
 800905e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	69b9      	ldr	r1, [r7, #24]
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	617b      	str	r3, [r7, #20]
   return(result);
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e5      	bne.n	800903c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	e011      	b.n	80090a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3758      	adds	r7, #88	@ 0x58
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c0:	e04f      	b.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d04b      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ca:	f7f9 fe75 	bl	8002db8 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d302      	bcc.n	80090e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e04e      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0304 	and.w	r3, r3, #4
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d037      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b80      	cmp	r3, #128	@ 0x80
 80090f6:	d034      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b40      	cmp	r3, #64	@ 0x40
 80090fc:	d031      	beq.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b08      	cmp	r3, #8
 800910a:	d110      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2208      	movs	r2, #8
 8009112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f838 	bl	800918a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2208      	movs	r2, #8
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e029      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800913c:	d111      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 f81e 	bl	800918a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e00f      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4013      	ands	r3, r2
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	429a      	cmp	r2, r3
 8009170:	bf0c      	ite	eq
 8009172:	2301      	moveq	r3, #1
 8009174:	2300      	movne	r3, #0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	429a      	cmp	r2, r3
 800917e:	d0a0      	beq.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800918a:	b480      	push	{r7}
 800918c:	b095      	sub	sp, #84	@ 0x54
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	461a      	mov	r2, r3
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80091b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e6      	bne.n	8009192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f023 0301 	bic.w	r3, r3, #1
 80091da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d118      	bne.n	8009232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	60bb      	str	r3, [r7, #8]
   return(result);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f023 0310 	bic.w	r3, r3, #16
 8009214:	647b      	str	r3, [r7, #68]	@ 0x44
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800921e:	61bb      	str	r3, [r7, #24]
 8009220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6979      	ldr	r1, [r7, #20]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	613b      	str	r3, [r7, #16]
   return(result);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e6      	bne.n	8009200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009246:	bf00      	nop
 8009248:	3754      	adds	r7, #84	@ 0x54
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
	...

08009254 <arm_rfft_fast_init_f32>:
 8009254:	084b      	lsrs	r3, r1, #1
 8009256:	2b80      	cmp	r3, #128	@ 0x80
 8009258:	b410      	push	{r4}
 800925a:	8201      	strh	r1, [r0, #16]
 800925c:	8003      	strh	r3, [r0, #0]
 800925e:	d047      	beq.n	80092f0 <arm_rfft_fast_init_f32+0x9c>
 8009260:	d917      	bls.n	8009292 <arm_rfft_fast_init_f32+0x3e>
 8009262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009266:	d03d      	beq.n	80092e4 <arm_rfft_fast_init_f32+0x90>
 8009268:	d929      	bls.n	80092be <arm_rfft_fast_init_f32+0x6a>
 800926a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800926e:	d020      	beq.n	80092b2 <arm_rfft_fast_init_f32+0x5e>
 8009270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009274:	d113      	bne.n	800929e <arm_rfft_fast_init_f32+0x4a>
 8009276:	4921      	ldr	r1, [pc, #132]	@ (80092fc <arm_rfft_fast_init_f32+0xa8>)
 8009278:	4a21      	ldr	r2, [pc, #132]	@ (8009300 <arm_rfft_fast_init_f32+0xac>)
 800927a:	4b22      	ldr	r3, [pc, #136]	@ (8009304 <arm_rfft_fast_init_f32+0xb0>)
 800927c:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8009280:	8184      	strh	r4, [r0, #12]
 8009282:	6081      	str	r1, [r0, #8]
 8009284:	6042      	str	r2, [r0, #4]
 8009286:	6143      	str	r3, [r0, #20]
 8009288:	2000      	movs	r0, #0
 800928a:	b240      	sxtb	r0, r0
 800928c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	2b20      	cmp	r3, #32
 8009294:	d01c      	beq.n	80092d0 <arm_rfft_fast_init_f32+0x7c>
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	d006      	beq.n	80092a8 <arm_rfft_fast_init_f32+0x54>
 800929a:	2b10      	cmp	r3, #16
 800929c:	d01d      	beq.n	80092da <arm_rfft_fast_init_f32+0x86>
 800929e:	20ff      	movs	r0, #255	@ 0xff
 80092a0:	b240      	sxtb	r0, r0
 80092a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a6:	4770      	bx	lr
 80092a8:	2438      	movs	r4, #56	@ 0x38
 80092aa:	4917      	ldr	r1, [pc, #92]	@ (8009308 <arm_rfft_fast_init_f32+0xb4>)
 80092ac:	4a17      	ldr	r2, [pc, #92]	@ (800930c <arm_rfft_fast_init_f32+0xb8>)
 80092ae:	4b18      	ldr	r3, [pc, #96]	@ (8009310 <arm_rfft_fast_init_f32+0xbc>)
 80092b0:	e7e6      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092b2:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80092b6:	4917      	ldr	r1, [pc, #92]	@ (8009314 <arm_rfft_fast_init_f32+0xc0>)
 80092b8:	4a17      	ldr	r2, [pc, #92]	@ (8009318 <arm_rfft_fast_init_f32+0xc4>)
 80092ba:	4b18      	ldr	r3, [pc, #96]	@ (800931c <arm_rfft_fast_init_f32+0xc8>)
 80092bc:	e7e0      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c2:	d1ec      	bne.n	800929e <arm_rfft_fast_init_f32+0x4a>
 80092c4:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80092c8:	4915      	ldr	r1, [pc, #84]	@ (8009320 <arm_rfft_fast_init_f32+0xcc>)
 80092ca:	4a16      	ldr	r2, [pc, #88]	@ (8009324 <arm_rfft_fast_init_f32+0xd0>)
 80092cc:	4b16      	ldr	r3, [pc, #88]	@ (8009328 <arm_rfft_fast_init_f32+0xd4>)
 80092ce:	e7d7      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092d0:	2430      	movs	r4, #48	@ 0x30
 80092d2:	4916      	ldr	r1, [pc, #88]	@ (800932c <arm_rfft_fast_init_f32+0xd8>)
 80092d4:	4a16      	ldr	r2, [pc, #88]	@ (8009330 <arm_rfft_fast_init_f32+0xdc>)
 80092d6:	4b17      	ldr	r3, [pc, #92]	@ (8009334 <arm_rfft_fast_init_f32+0xe0>)
 80092d8:	e7d2      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092da:	2414      	movs	r4, #20
 80092dc:	4916      	ldr	r1, [pc, #88]	@ (8009338 <arm_rfft_fast_init_f32+0xe4>)
 80092de:	4a17      	ldr	r2, [pc, #92]	@ (800933c <arm_rfft_fast_init_f32+0xe8>)
 80092e0:	4b17      	ldr	r3, [pc, #92]	@ (8009340 <arm_rfft_fast_init_f32+0xec>)
 80092e2:	e7cd      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092e4:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80092e8:	4916      	ldr	r1, [pc, #88]	@ (8009344 <arm_rfft_fast_init_f32+0xf0>)
 80092ea:	4a17      	ldr	r2, [pc, #92]	@ (8009348 <arm_rfft_fast_init_f32+0xf4>)
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <arm_rfft_fast_init_f32+0xf8>)
 80092ee:	e7c7      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092f0:	24d0      	movs	r4, #208	@ 0xd0
 80092f2:	4917      	ldr	r1, [pc, #92]	@ (8009350 <arm_rfft_fast_init_f32+0xfc>)
 80092f4:	4a17      	ldr	r2, [pc, #92]	@ (8009354 <arm_rfft_fast_init_f32+0x100>)
 80092f6:	4b18      	ldr	r3, [pc, #96]	@ (8009358 <arm_rfft_fast_init_f32+0x104>)
 80092f8:	e7c2      	b.n	8009280 <arm_rfft_fast_init_f32+0x2c>
 80092fa:	bf00      	nop
 80092fc:	0801b68c 	.word	0x0801b68c
 8009300:	0800c884 	.word	0x0800c884
 8009304:	080129f4 	.word	0x080129f4
 8009308:	08010984 	.word	0x08010984
 800930c:	0801d44c 	.word	0x0801d44c
 8009310:	0801f93c 	.word	0x0801f93c
 8009314:	08019374 	.word	0x08019374
 8009318:	08017274 	.word	0x08017274
 800931c:	080109f4 	.word	0x080109f4
 8009320:	0801f5cc 	.word	0x0801f5cc
 8009324:	080169f4 	.word	0x080169f4
 8009328:	0801d64c 	.word	0x0801d64c
 800932c:	0801a22c 	.word	0x0801a22c
 8009330:	08019274 	.word	0x08019274
 8009334:	08010884 	.word	0x08010884
 8009338:	0801a184 	.word	0x0801a184
 800933c:	080171f4 	.word	0x080171f4
 8009340:	0801a1ac 	.word	0x0801a1ac
 8009344:	0801de4c 	.word	0x0801de4c
 8009348:	0801a68c 	.word	0x0801a68c
 800934c:	0801e1cc 	.word	0x0801e1cc
 8009350:	0801fb3c 	.word	0x0801fb3c
 8009354:	0801a28c 	.word	0x0801a28c
 8009358:	0801f1cc 	.word	0x0801f1cc

0800935c <arm_rfft_fast_f32>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	b089      	sub	sp, #36	@ 0x24
 8009362:	460e      	mov	r6, r1
 8009364:	9205      	str	r2, [sp, #20]
 8009366:	8a02      	ldrh	r2, [r0, #16]
 8009368:	9006      	str	r0, [sp, #24]
 800936a:	0852      	lsrs	r2, r2, #1
 800936c:	8002      	strh	r2, [r0, #0]
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f040 8097 	bne.w	80094a4 <arm_rfft_fast_f32+0x148>
 8009376:	461a      	mov	r2, r3
 8009378:	2301      	movs	r3, #1
 800937a:	f000 fe35 	bl	8009fe8 <arm_cfft_f32>
 800937e:	9a06      	ldr	r2, [sp, #24]
 8009380:	6830      	ldr	r0, [r6, #0]
 8009382:	8813      	ldrh	r3, [r2, #0]
 8009384:	6954      	ldr	r4, [r2, #20]
 8009386:	3b01      	subs	r3, #1
 8009388:	4601      	mov	r1, r0
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	f7f7 fccc 	bl	8000d28 <__addsf3>
 8009390:	4605      	mov	r5, r0
 8009392:	6870      	ldr	r0, [r6, #4]
 8009394:	4601      	mov	r1, r0
 8009396:	f7f7 fcc7 	bl	8000d28 <__addsf3>
 800939a:	4607      	mov	r7, r0
 800939c:	4639      	mov	r1, r7
 800939e:	4628      	mov	r0, r5
 80093a0:	f7f7 fcc2 	bl	8000d28 <__addsf3>
 80093a4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80093a8:	f7f7 fdc6 	bl	8000f38 <__aeabi_fmul>
 80093ac:	4639      	mov	r1, r7
 80093ae:	9f05      	ldr	r7, [sp, #20]
 80093b0:	6038      	str	r0, [r7, #0]
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7f7 fcb6 	bl	8000d24 <__aeabi_fsub>
 80093b8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80093bc:	f7f7 fdbc 	bl	8000f38 <__aeabi_fmul>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80093c8:	f106 0210 	add.w	r2, r6, #16
 80093cc:	f1a3 0c08 	sub.w	ip, r3, #8
 80093d0:	f107 0510 	add.w	r5, r7, #16
 80093d4:	3410      	adds	r4, #16
 80093d6:	4666      	mov	r6, ip
 80093d8:	4617      	mov	r7, r2
 80093da:	68f1      	ldr	r1, [r6, #12]
 80093dc:	68b2      	ldr	r2, [r6, #8]
 80093de:	f857 3c08 	ldr.w	r3, [r7, #-8]
 80093e2:	9206      	str	r2, [sp, #24]
 80093e4:	4688      	mov	r8, r1
 80093e6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80093ea:	9100      	str	r1, [sp, #0]
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f7f7 fc97 	bl	8000d24 <__aeabi_fsub>
 80093f6:	9900      	ldr	r1, [sp, #0]
 80093f8:	f8cd 8008 	str.w	r8, [sp, #8]
 80093fc:	4683      	mov	fp, r0
 80093fe:	4640      	mov	r0, r8
 8009400:	f7f7 fc92 	bl	8000d28 <__addsf3>
 8009404:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8009408:	f854 9c08 	ldr.w	r9, [r4, #-8]
 800940c:	4680      	mov	r8, r0
 800940e:	4641      	mov	r1, r8
 8009410:	4650      	mov	r0, sl
 8009412:	f7f7 fd91 	bl	8000f38 <__aeabi_fmul>
 8009416:	4659      	mov	r1, fp
 8009418:	9003      	str	r0, [sp, #12]
 800941a:	4648      	mov	r0, r9
 800941c:	f7f7 fd8c 	bl	8000f38 <__aeabi_fmul>
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	9a06      	ldr	r2, [sp, #24]
 8009424:	9004      	str	r0, [sp, #16]
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7f7 fc7d 	bl	8000d28 <__addsf3>
 800942e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009432:	4601      	mov	r1, r0
 8009434:	4660      	mov	r0, ip
 8009436:	f7f7 fc77 	bl	8000d28 <__addsf3>
 800943a:	4601      	mov	r1, r0
 800943c:	9803      	ldr	r0, [sp, #12]
 800943e:	f7f7 fc73 	bl	8000d28 <__addsf3>
 8009442:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009446:	f7f7 fd77 	bl	8000f38 <__aeabi_fmul>
 800944a:	4659      	mov	r1, fp
 800944c:	f845 0c08 	str.w	r0, [r5, #-8]
 8009450:	4650      	mov	r0, sl
 8009452:	f7f7 fd71 	bl	8000f38 <__aeabi_fmul>
 8009456:	9902      	ldr	r1, [sp, #8]
 8009458:	4682      	mov	sl, r0
 800945a:	9800      	ldr	r0, [sp, #0]
 800945c:	f7f7 fc62 	bl	8000d24 <__aeabi_fsub>
 8009460:	4601      	mov	r1, r0
 8009462:	4650      	mov	r0, sl
 8009464:	f7f7 fc60 	bl	8000d28 <__addsf3>
 8009468:	4641      	mov	r1, r8
 800946a:	4682      	mov	sl, r0
 800946c:	4648      	mov	r0, r9
 800946e:	f7f7 fd63 	bl	8000f38 <__aeabi_fmul>
 8009472:	4601      	mov	r1, r0
 8009474:	4650      	mov	r0, sl
 8009476:	f7f7 fc55 	bl	8000d24 <__aeabi_fsub>
 800947a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800947e:	f7f7 fd5b 	bl	8000f38 <__aeabi_fmul>
 8009482:	9b01      	ldr	r3, [sp, #4]
 8009484:	f845 0c04 	str.w	r0, [r5, #-4]
 8009488:	3b01      	subs	r3, #1
 800948a:	f1a6 0608 	sub.w	r6, r6, #8
 800948e:	f107 0708 	add.w	r7, r7, #8
 8009492:	f104 0408 	add.w	r4, r4, #8
 8009496:	f105 0508 	add.w	r5, r5, #8
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	d19d      	bne.n	80093da <arm_rfft_fast_f32+0x7e>
 800949e:	b009      	add	sp, #36	@ 0x24
 80094a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a4:	680d      	ldr	r5, [r1, #0]
 80094a6:	684f      	ldr	r7, [r1, #4]
 80094a8:	6944      	ldr	r4, [r0, #20]
 80094aa:	1e53      	subs	r3, r2, #1
 80094ac:	4639      	mov	r1, r7
 80094ae:	4628      	mov	r0, r5
 80094b0:	9302      	str	r3, [sp, #8]
 80094b2:	f7f7 fc39 	bl	8000d28 <__addsf3>
 80094b6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80094ba:	f7f7 fd3d 	bl	8000f38 <__aeabi_fmul>
 80094be:	4639      	mov	r1, r7
 80094c0:	9f05      	ldr	r7, [sp, #20]
 80094c2:	6038      	str	r0, [r7, #0]
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7f7 fc2d 	bl	8000d24 <__aeabi_fsub>
 80094ca:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80094ce:	f7f7 fd33 	bl	8000f38 <__aeabi_fmul>
 80094d2:	9b02      	ldr	r3, [sp, #8]
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	00dd      	lsls	r5, r3, #3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d06b      	beq.n	80095b4 <arm_rfft_fast_f32+0x258>
 80094dc:	3d08      	subs	r5, #8
 80094de:	f104 0310 	add.w	r3, r4, #16
 80094e2:	4435      	add	r5, r6
 80094e4:	f106 0410 	add.w	r4, r6, #16
 80094e8:	f107 0610 	add.w	r6, r7, #16
 80094ec:	46b0      	mov	r8, r6
 80094ee:	461f      	mov	r7, r3
 80094f0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80094f4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80094f8:	68eb      	ldr	r3, [r5, #12]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4661      	mov	r1, ip
 80094fe:	4610      	mov	r0, r2
 8009500:	f8cd c010 	str.w	ip, [sp, #16]
 8009504:	9203      	str	r2, [sp, #12]
 8009506:	f7f7 fc0d 	bl	8000d24 <__aeabi_fsub>
 800950a:	f854 ac04 	ldr.w	sl, [r4, #-4]
 800950e:	f857 9c08 	ldr.w	r9, [r7, #-8]
 8009512:	f857 bc04 	ldr.w	fp, [r7, #-4]
 8009516:	4606      	mov	r6, r0
 8009518:	4651      	mov	r1, sl
 800951a:	9800      	ldr	r0, [sp, #0]
 800951c:	f7f7 fc04 	bl	8000d28 <__addsf3>
 8009520:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009524:	9a03      	ldr	r2, [sp, #12]
 8009526:	9001      	str	r0, [sp, #4]
 8009528:	4611      	mov	r1, r2
 800952a:	4660      	mov	r0, ip
 800952c:	f7f7 fbfc 	bl	8000d28 <__addsf3>
 8009530:	4631      	mov	r1, r6
 8009532:	9003      	str	r0, [sp, #12]
 8009534:	4648      	mov	r0, r9
 8009536:	f7f7 fcff 	bl	8000f38 <__aeabi_fmul>
 800953a:	9a03      	ldr	r2, [sp, #12]
 800953c:	4601      	mov	r1, r0
 800953e:	4610      	mov	r0, r2
 8009540:	f7f7 fbf0 	bl	8000d24 <__aeabi_fsub>
 8009544:	9901      	ldr	r1, [sp, #4]
 8009546:	9003      	str	r0, [sp, #12]
 8009548:	4658      	mov	r0, fp
 800954a:	f7f7 fcf5 	bl	8000f38 <__aeabi_fmul>
 800954e:	9a03      	ldr	r2, [sp, #12]
 8009550:	4601      	mov	r1, r0
 8009552:	4610      	mov	r0, r2
 8009554:	f7f7 fbe6 	bl	8000d24 <__aeabi_fsub>
 8009558:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800955c:	f7f7 fcec 	bl	8000f38 <__aeabi_fmul>
 8009560:	4631      	mov	r1, r6
 8009562:	f848 0c08 	str.w	r0, [r8, #-8]
 8009566:	4658      	mov	r0, fp
 8009568:	f7f7 fce6 	bl	8000f38 <__aeabi_fmul>
 800956c:	9900      	ldr	r1, [sp, #0]
 800956e:	4606      	mov	r6, r0
 8009570:	4650      	mov	r0, sl
 8009572:	f7f7 fbd7 	bl	8000d24 <__aeabi_fsub>
 8009576:	4601      	mov	r1, r0
 8009578:	4630      	mov	r0, r6
 800957a:	f7f7 fbd5 	bl	8000d28 <__addsf3>
 800957e:	9901      	ldr	r1, [sp, #4]
 8009580:	4606      	mov	r6, r0
 8009582:	4648      	mov	r0, r9
 8009584:	f7f7 fcd8 	bl	8000f38 <__aeabi_fmul>
 8009588:	4601      	mov	r1, r0
 800958a:	4630      	mov	r0, r6
 800958c:	f7f7 fbca 	bl	8000d24 <__aeabi_fsub>
 8009590:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009594:	f7f7 fcd0 	bl	8000f38 <__aeabi_fmul>
 8009598:	9b02      	ldr	r3, [sp, #8]
 800959a:	f848 0c04 	str.w	r0, [r8, #-4]
 800959e:	3b01      	subs	r3, #1
 80095a0:	f1a5 0508 	sub.w	r5, r5, #8
 80095a4:	f104 0408 	add.w	r4, r4, #8
 80095a8:	f107 0708 	add.w	r7, r7, #8
 80095ac:	f108 0808 	add.w	r8, r8, #8
 80095b0:	9302      	str	r3, [sp, #8]
 80095b2:	d19d      	bne.n	80094f0 <arm_rfft_fast_f32+0x194>
 80095b4:	9806      	ldr	r0, [sp, #24]
 80095b6:	9905      	ldr	r1, [sp, #20]
 80095b8:	9a07      	ldr	r2, [sp, #28]
 80095ba:	2301      	movs	r3, #1
 80095bc:	b009      	add	sp, #36	@ 0x24
 80095be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c2:	f000 bd11 	b.w	8009fe8 <arm_cfft_f32>
 80095c6:	bf00      	nop

080095c8 <arm_cfft_radix8by2_f32>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	4602      	mov	r2, r0
 80095ce:	b093      	sub	sp, #76	@ 0x4c
 80095d0:	8813      	ldrh	r3, [r2, #0]
 80095d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80095d4:	085c      	lsrs	r4, r3, #1
 80095d6:	4608      	mov	r0, r1
 80095d8:	9111      	str	r1, [sp, #68]	@ 0x44
 80095da:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80095de:	08db      	lsrs	r3, r3, #3
 80095e0:	6852      	ldr	r2, [r2, #4]
 80095e2:	9410      	str	r4, [sp, #64]	@ 0x40
 80095e4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80095e8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80095ea:	f000 8137 	beq.w	800985c <arm_cfft_radix8by2_f32+0x294>
 80095ee:	f10c 0c10 	add.w	ip, ip, #16
 80095f2:	eb00 070c 	add.w	r7, r0, ip
 80095f6:	f101 0910 	add.w	r9, r1, #16
 80095fa:	3210      	adds	r2, #16
 80095fc:	448c      	add	ip, r1
 80095fe:	46ca      	mov	sl, r9
 8009600:	9200      	str	r2, [sp, #0]
 8009602:	f100 0610 	add.w	r6, r0, #16
 8009606:	930a      	str	r3, [sp, #40]	@ 0x28
 8009608:	46e1      	mov	r9, ip
 800960a:	46bb      	mov	fp, r7
 800960c:	f85a cc10 	ldr.w	ip, [sl, #-16]
 8009610:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 8009614:	f85b 0c0c 	ldr.w	r0, [fp, #-12]
 8009618:	f856 4c10 	ldr.w	r4, [r6, #-16]
 800961c:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 8009620:	f85b ec08 	ldr.w	lr, [fp, #-8]
 8009624:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8009628:	910b      	str	r1, [sp, #44]	@ 0x2c
 800962a:	900c      	str	r0, [sp, #48]	@ 0x30
 800962c:	f859 1c0c 	ldr.w	r1, [r9, #-12]
 8009630:	f859 0c08 	ldr.w	r0, [r9, #-8]
 8009634:	f856 8c08 	ldr.w	r8, [r6, #-8]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	9203      	str	r2, [sp, #12]
 800963c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8009640:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8009644:	f8cd e010 	str.w	lr, [sp, #16]
 8009648:	9107      	str	r1, [sp, #28]
 800964a:	f859 ec04 	ldr.w	lr, [r9, #-4]
 800964e:	9008      	str	r0, [sp, #32]
 8009650:	4661      	mov	r1, ip
 8009652:	4620      	mov	r0, r4
 8009654:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8009658:	9305      	str	r3, [sp, #20]
 800965a:	9206      	str	r2, [sp, #24]
 800965c:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8009660:	f8cd 8008 	str.w	r8, [sp, #8]
 8009664:	f7f7 fb60 	bl	8000d28 <__addsf3>
 8009668:	f85a 7c0c 	ldr.w	r7, [sl, #-12]
 800966c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8009670:	f846 0c10 	str.w	r0, [r6, #-16]
 8009674:	4639      	mov	r1, r7
 8009676:	9801      	ldr	r0, [sp, #4]
 8009678:	f856 8c04 	ldr.w	r8, [r6, #-4]
 800967c:	f7f7 fb54 	bl	8000d28 <__addsf3>
 8009680:	9903      	ldr	r1, [sp, #12]
 8009682:	f846 0c0c 	str.w	r0, [r6, #-12]
 8009686:	9802      	ldr	r0, [sp, #8]
 8009688:	f7f7 fb4e 	bl	8000d28 <__addsf3>
 800968c:	4629      	mov	r1, r5
 800968e:	f846 0c08 	str.w	r0, [r6, #-8]
 8009692:	4640      	mov	r0, r8
 8009694:	f7f7 fb48 	bl	8000d28 <__addsf3>
 8009698:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800969c:	f846 0c04 	str.w	r0, [r6, #-4]
 80096a0:	4661      	mov	r1, ip
 80096a2:	4620      	mov	r0, r4
 80096a4:	f7f7 fb3e 	bl	8000d24 <__aeabi_fsub>
 80096a8:	4639      	mov	r1, r7
 80096aa:	4604      	mov	r4, r0
 80096ac:	9801      	ldr	r0, [sp, #4]
 80096ae:	f7f7 fb39 	bl	8000d24 <__aeabi_fsub>
 80096b2:	9903      	ldr	r1, [sp, #12]
 80096b4:	4607      	mov	r7, r0
 80096b6:	9802      	ldr	r0, [sp, #8]
 80096b8:	f7f7 fb34 	bl	8000d24 <__aeabi_fsub>
 80096bc:	4629      	mov	r1, r5
 80096be:	9001      	str	r0, [sp, #4]
 80096c0:	4640      	mov	r0, r8
 80096c2:	f7f7 fb2f 	bl	8000d24 <__aeabi_fsub>
 80096c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80096c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80096ca:	9906      	ldr	r1, [sp, #24]
 80096cc:	4628      	mov	r0, r5
 80096ce:	f7f7 fb2b 	bl	8000d28 <__addsf3>
 80096d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80096d6:	9907      	ldr	r1, [sp, #28]
 80096d8:	f84b 0c10 	str.w	r0, [fp, #-16]
 80096dc:	4640      	mov	r0, r8
 80096de:	f7f7 fb23 	bl	8000d28 <__addsf3>
 80096e2:	9908      	ldr	r1, [sp, #32]
 80096e4:	f84b 0c0c 	str.w	r0, [fp, #-12]
 80096e8:	9804      	ldr	r0, [sp, #16]
 80096ea:	f7f7 fb1d 	bl	8000d28 <__addsf3>
 80096ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096f0:	f84b 0c08 	str.w	r0, [fp, #-8]
 80096f4:	9805      	ldr	r0, [sp, #20]
 80096f6:	f7f7 fb17 	bl	8000d28 <__addsf3>
 80096fa:	4629      	mov	r1, r5
 80096fc:	f84b 0c04 	str.w	r0, [fp, #-4]
 8009700:	9806      	ldr	r0, [sp, #24]
 8009702:	f7f7 fb0f 	bl	8000d24 <__aeabi_fsub>
 8009706:	4641      	mov	r1, r8
 8009708:	9002      	str	r0, [sp, #8]
 800970a:	9807      	ldr	r0, [sp, #28]
 800970c:	f7f7 fb0a 	bl	8000d24 <__aeabi_fsub>
 8009710:	9904      	ldr	r1, [sp, #16]
 8009712:	9006      	str	r0, [sp, #24]
 8009714:	9808      	ldr	r0, [sp, #32]
 8009716:	f7f7 fb05 	bl	8000d24 <__aeabi_fsub>
 800971a:	9905      	ldr	r1, [sp, #20]
 800971c:	9003      	str	r0, [sp, #12]
 800971e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009720:	f7f7 fb00 	bl	8000d24 <__aeabi_fsub>
 8009724:	9a00      	ldr	r2, [sp, #0]
 8009726:	9004      	str	r0, [sp, #16]
 8009728:	f852 5c10 	ldr.w	r5, [r2, #-16]
 800972c:	f852 8c0c 	ldr.w	r8, [r2, #-12]
 8009730:	4629      	mov	r1, r5
 8009732:	4620      	mov	r0, r4
 8009734:	f7f7 fc00 	bl	8000f38 <__aeabi_fmul>
 8009738:	4641      	mov	r1, r8
 800973a:	9005      	str	r0, [sp, #20]
 800973c:	4638      	mov	r0, r7
 800973e:	f7f7 fbfb 	bl	8000f38 <__aeabi_fmul>
 8009742:	9b05      	ldr	r3, [sp, #20]
 8009744:	4601      	mov	r1, r0
 8009746:	4618      	mov	r0, r3
 8009748:	f7f7 faee 	bl	8000d28 <__addsf3>
 800974c:	4629      	mov	r1, r5
 800974e:	f84a 0c10 	str.w	r0, [sl, #-16]
 8009752:	4638      	mov	r0, r7
 8009754:	f7f7 fbf0 	bl	8000f38 <__aeabi_fmul>
 8009758:	4641      	mov	r1, r8
 800975a:	4607      	mov	r7, r0
 800975c:	4620      	mov	r0, r4
 800975e:	f7f7 fbeb 	bl	8000f38 <__aeabi_fmul>
 8009762:	4601      	mov	r1, r0
 8009764:	4638      	mov	r0, r7
 8009766:	f7f7 fadd 	bl	8000d24 <__aeabi_fsub>
 800976a:	4641      	mov	r1, r8
 800976c:	f84a 0c0c 	str.w	r0, [sl, #-12]
 8009770:	9802      	ldr	r0, [sp, #8]
 8009772:	f7f7 fbe1 	bl	8000f38 <__aeabi_fmul>
 8009776:	9f06      	ldr	r7, [sp, #24]
 8009778:	4604      	mov	r4, r0
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7f7 fbdb 	bl	8000f38 <__aeabi_fmul>
 8009782:	4601      	mov	r1, r0
 8009784:	4620      	mov	r0, r4
 8009786:	f7f7 facd 	bl	8000d24 <__aeabi_fsub>
 800978a:	4641      	mov	r1, r8
 800978c:	f849 0c10 	str.w	r0, [r9, #-16]
 8009790:	4638      	mov	r0, r7
 8009792:	f7f7 fbd1 	bl	8000f38 <__aeabi_fmul>
 8009796:	4629      	mov	r1, r5
 8009798:	4604      	mov	r4, r0
 800979a:	9802      	ldr	r0, [sp, #8]
 800979c:	f7f7 fbcc 	bl	8000f38 <__aeabi_fmul>
 80097a0:	4601      	mov	r1, r0
 80097a2:	4620      	mov	r0, r4
 80097a4:	f7f7 fac0 	bl	8000d28 <__addsf3>
 80097a8:	9a00      	ldr	r2, [sp, #0]
 80097aa:	f849 0c0c 	str.w	r0, [r9, #-12]
 80097ae:	f852 4c08 	ldr.w	r4, [r2, #-8]
 80097b2:	9801      	ldr	r0, [sp, #4]
 80097b4:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80097b8:	4621      	mov	r1, r4
 80097ba:	f7f7 fbbd 	bl	8000f38 <__aeabi_fmul>
 80097be:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 80097c2:	4607      	mov	r7, r0
 80097c4:	4629      	mov	r1, r5
 80097c6:	4640      	mov	r0, r8
 80097c8:	f7f7 fbb6 	bl	8000f38 <__aeabi_fmul>
 80097cc:	4601      	mov	r1, r0
 80097ce:	4638      	mov	r0, r7
 80097d0:	f7f7 faaa 	bl	8000d28 <__addsf3>
 80097d4:	4621      	mov	r1, r4
 80097d6:	f84a 0c08 	str.w	r0, [sl, #-8]
 80097da:	4640      	mov	r0, r8
 80097dc:	f7f7 fbac 	bl	8000f38 <__aeabi_fmul>
 80097e0:	4629      	mov	r1, r5
 80097e2:	4607      	mov	r7, r0
 80097e4:	9801      	ldr	r0, [sp, #4]
 80097e6:	f7f7 fba7 	bl	8000f38 <__aeabi_fmul>
 80097ea:	4601      	mov	r1, r0
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7f7 fa99 	bl	8000d24 <__aeabi_fsub>
 80097f2:	4629      	mov	r1, r5
 80097f4:	f84a 0c04 	str.w	r0, [sl, #-4]
 80097f8:	9803      	ldr	r0, [sp, #12]
 80097fa:	f7f7 fb9d 	bl	8000f38 <__aeabi_fmul>
 80097fe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009802:	4607      	mov	r7, r0
 8009804:	4621      	mov	r1, r4
 8009806:	4640      	mov	r0, r8
 8009808:	f7f7 fb96 	bl	8000f38 <__aeabi_fmul>
 800980c:	4601      	mov	r1, r0
 800980e:	4638      	mov	r0, r7
 8009810:	f7f7 fa88 	bl	8000d24 <__aeabi_fsub>
 8009814:	4629      	mov	r1, r5
 8009816:	f849 0c08 	str.w	r0, [r9, #-8]
 800981a:	4640      	mov	r0, r8
 800981c:	f7f7 fb8c 	bl	8000f38 <__aeabi_fmul>
 8009820:	4621      	mov	r1, r4
 8009822:	4605      	mov	r5, r0
 8009824:	9803      	ldr	r0, [sp, #12]
 8009826:	f7f7 fb87 	bl	8000f38 <__aeabi_fmul>
 800982a:	4601      	mov	r1, r0
 800982c:	4628      	mov	r0, r5
 800982e:	f7f7 fa7b 	bl	8000d28 <__addsf3>
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	f849 0c04 	str.w	r0, [r9, #-4]
 8009838:	3310      	adds	r3, #16
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983e:	3b01      	subs	r3, #1
 8009840:	f106 0610 	add.w	r6, r6, #16
 8009844:	f10b 0b10 	add.w	fp, fp, #16
 8009848:	f10a 0a10 	add.w	sl, sl, #16
 800984c:	f109 0910 	add.w	r9, r9, #16
 8009850:	930a      	str	r3, [sp, #40]	@ 0x28
 8009852:	f47f aedb 	bne.w	800960c <arm_cfft_radix8by2_f32+0x44>
 8009856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009858:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8009860:	2302      	movs	r3, #2
 8009862:	4621      	mov	r1, r4
 8009864:	f000 fc3e 	bl	800a0e4 <arm_radix8_butterfly_f32>
 8009868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	4621      	mov	r1, r4
 8009870:	2302      	movs	r3, #2
 8009872:	b013      	add	sp, #76	@ 0x4c
 8009874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	f000 bc34 	b.w	800a0e4 <arm_radix8_butterfly_f32>

0800987c <arm_cfft_radix8by4_f32>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	8804      	ldrh	r4, [r0, #0]
 8009882:	6843      	ldr	r3, [r0, #4]
 8009884:	680e      	ldr	r6, [r1, #0]
 8009886:	b0a7      	sub	sp, #156	@ 0x9c
 8009888:	0864      	lsrs	r4, r4, #1
 800988a:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	eb01 0309 	add.w	r3, r1, r9
 8009894:	461f      	mov	r7, r3
 8009896:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800989a:	9025      	str	r0, [sp, #148]	@ 0x94
 800989c:	911a      	str	r1, [sp, #104]	@ 0x68
 800989e:	9318      	str	r3, [sp, #96]	@ 0x60
 80098a0:	4629      	mov	r1, r5
 80098a2:	444b      	add	r3, r9
 80098a4:	4630      	mov	r0, r6
 80098a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80098a8:	f7f7 fa3e 	bl	8000d28 <__addsf3>
 80098ac:	4629      	mov	r1, r5
 80098ae:	4683      	mov	fp, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7f7 fa37 	bl	8000d24 <__aeabi_fsub>
 80098b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ba:	6855      	ldr	r5, [r2, #4]
 80098bc:	684e      	ldr	r6, [r1, #4]
 80098be:	9000      	str	r0, [sp, #0]
 80098c0:	4629      	mov	r1, r5
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7f7 fa30 	bl	8000d28 <__addsf3>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4682      	mov	sl, r0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7f7 fa29 	bl	8000d24 <__aeabi_fsub>
 80098d2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80098d4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80098d6:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 80098da:	9001      	str	r0, [sp, #4]
 80098dc:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 80098e0:	9718      	str	r7, [sp, #96]	@ 0x60
 80098e2:	4631      	mov	r1, r6
 80098e4:	4658      	mov	r0, fp
 80098e6:	f7f7 fa1f 	bl	8000d28 <__addsf3>
 80098ea:	4601      	mov	r1, r0
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7f7 fa1b 	bl	8000d28 <__addsf3>
 80098f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80098f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f6:	f8d7 8004 	ldr.w	r8, [r7, #4]
 80098fa:	468e      	mov	lr, r1
 80098fc:	eb02 0709 	add.w	r7, r2, r9
 8009900:	9719      	str	r7, [sp, #100]	@ 0x64
 8009902:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009904:	687f      	ldr	r7, [r7, #4]
 8009906:	f84e 0b08 	str.w	r0, [lr], #8
 800990a:	4650      	mov	r0, sl
 800990c:	6851      	ldr	r1, [r2, #4]
 800990e:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
 8009912:	f7f7 fa09 	bl	8000d28 <__addsf3>
 8009916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009918:	6859      	ldr	r1, [r3, #4]
 800991a:	f7f7 fa05 	bl	8000d28 <__addsf3>
 800991e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009920:	9900      	ldr	r1, [sp, #0]
 8009922:	6058      	str	r0, [r3, #4]
 8009924:	4640      	mov	r0, r8
 8009926:	f7f7 f9ff 	bl	8000d28 <__addsf3>
 800992a:	4639      	mov	r1, r7
 800992c:	f7f7 f9fa 	bl	8000d24 <__aeabi_fsub>
 8009930:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009932:	4631      	mov	r1, r6
 8009934:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009938:	9801      	ldr	r0, [sp, #4]
 800993a:	f7f7 f9f3 	bl	8000d24 <__aeabi_fsub>
 800993e:	4629      	mov	r1, r5
 8009940:	f7f7 f9f2 	bl	8000d28 <__addsf3>
 8009944:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009946:	4631      	mov	r1, r6
 8009948:	6058      	str	r0, [r3, #4]
 800994a:	4658      	mov	r0, fp
 800994c:	f7f7 f9ea 	bl	8000d24 <__aeabi_fsub>
 8009950:	4629      	mov	r1, r5
 8009952:	f7f7 f9e7 	bl	8000d24 <__aeabi_fsub>
 8009956:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009958:	4641      	mov	r1, r8
 800995a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 800995e:	4650      	mov	r0, sl
 8009960:	f7f7 f9e0 	bl	8000d24 <__aeabi_fsub>
 8009964:	4639      	mov	r1, r7
 8009966:	f7f7 f9dd 	bl	8000d24 <__aeabi_fsub>
 800996a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800996c:	4641      	mov	r1, r8
 800996e:	6058      	str	r0, [r3, #4]
 8009970:	9800      	ldr	r0, [sp, #0]
 8009972:	f7f7 f9d7 	bl	8000d24 <__aeabi_fsub>
 8009976:	4601      	mov	r1, r0
 8009978:	4638      	mov	r0, r7
 800997a:	f7f7 f9d5 	bl	8000d28 <__addsf3>
 800997e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8009980:	4631      	mov	r1, r6
 8009982:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8009986:	9801      	ldr	r0, [sp, #4]
 8009988:	f7f7 f9ce 	bl	8000d28 <__addsf3>
 800998c:	4629      	mov	r1, r5
 800998e:	f7f7 f9c9 	bl	8000d24 <__aeabi_fsub>
 8009992:	0866      	lsrs	r6, r4, #1
 8009994:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	9624      	str	r6, [sp, #144]	@ 0x90
 800999a:	1eb1      	subs	r1, r6, #2
 800999c:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800999e:	f104 0208 	add.w	r2, r4, #8
 80099a2:	6070      	str	r0, [r6, #4]
 80099a4:	921e      	str	r2, [sp, #120]	@ 0x78
 80099a6:	4630      	mov	r0, r6
 80099a8:	f103 0208 	add.w	r2, r3, #8
 80099ac:	3008      	adds	r0, #8
 80099ae:	9220      	str	r2, [sp, #128]	@ 0x80
 80099b0:	f103 0210 	add.w	r2, r3, #16
 80099b4:	4635      	mov	r5, r6
 80099b6:	901c      	str	r0, [sp, #112]	@ 0x70
 80099b8:	463e      	mov	r6, r7
 80099ba:	4638      	mov	r0, r7
 80099bc:	9221      	str	r2, [sp, #132]	@ 0x84
 80099be:	4617      	mov	r7, r2
 80099c0:	f103 0218 	add.w	r2, r3, #24
 80099c4:	3008      	adds	r0, #8
 80099c6:	9222      	str	r2, [sp, #136]	@ 0x88
 80099c8:	084a      	lsrs	r2, r1, #1
 80099ca:	901f      	str	r0, [sp, #124]	@ 0x7c
 80099cc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80099ce:	f000 821d 	beq.w	8009e0c <arm_cfft_radix8by4_f32+0x590>
 80099d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099d4:	9706      	str	r7, [sp, #24]
 80099d6:	3110      	adds	r1, #16
 80099d8:	4694      	mov	ip, r2
 80099da:	4628      	mov	r0, r5
 80099dc:	f1a9 020c 	sub.w	r2, r9, #12
 80099e0:	9102      	str	r1, [sp, #8]
 80099e2:	f103 0120 	add.w	r1, r3, #32
 80099e6:	3330      	adds	r3, #48	@ 0x30
 80099e8:	4410      	add	r0, r2
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f106 0310 	add.w	r3, r6, #16
 80099f2:	f104 0910 	add.w	r9, r4, #16
 80099f6:	f1a6 0b0c 	sub.w	fp, r6, #12
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	f105 0810 	add.w	r8, r5, #16
 8009a00:	4613      	mov	r3, r2
 8009a02:	46ca      	mov	sl, r9
 8009a04:	4662      	mov	r2, ip
 8009a06:	9003      	str	r0, [sp, #12]
 8009a08:	9105      	str	r1, [sp, #20]
 8009a0a:	46d9      	mov	r9, fp
 8009a0c:	f8cd 8000 	str.w	r8, [sp]
 8009a10:	469c      	mov	ip, r3
 8009a12:	9e02      	ldr	r6, [sp, #8]
 8009a14:	9f01      	ldr	r7, [sp, #4]
 8009a16:	f856 5c08 	ldr.w	r5, [r6, #-8]
 8009a1a:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8009a1e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009a20:	4621      	mov	r1, r4
 8009a22:	4628      	mov	r0, r5
 8009a24:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8009a28:	f7f7 f97e 	bl	8000d28 <__addsf3>
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7f7 f977 	bl	8000d24 <__aeabi_fsub>
 8009a36:	f856 5c04 	ldr.w	r5, [r6, #-4]
 8009a3a:	f857 4c04 	ldr.w	r4, [r7, #-4]
 8009a3e:	9007      	str	r0, [sp, #28]
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	9602      	str	r6, [sp, #8]
 8009a46:	9701      	str	r7, [sp, #4]
 8009a48:	f7f7 f96e 	bl	8000d28 <__addsf3>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4607      	mov	r7, r0
 8009a50:	4628      	mov	r0, r5
 8009a52:	f7f7 f967 	bl	8000d24 <__aeabi_fsub>
 8009a56:	9c00      	ldr	r4, [sp, #0]
 8009a58:	f85a bc04 	ldr.w	fp, [sl, #-4]
 8009a5c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8009a60:	9907      	ldr	r1, [sp, #28]
 8009a62:	9008      	str	r0, [sp, #32]
 8009a64:	4658      	mov	r0, fp
 8009a66:	f7f7 f95f 	bl	8000d28 <__addsf3>
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	f7f7 f95a 	bl	8000d24 <__aeabi_fsub>
 8009a70:	f85a 5c08 	ldr.w	r5, [sl, #-8]
 8009a74:	9400      	str	r4, [sp, #0]
 8009a76:	f854 4c08 	ldr.w	r4, [r4, #-8]
 8009a7a:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	9808      	ldr	r0, [sp, #32]
 8009a80:	f7f7 f950 	bl	8000d24 <__aeabi_fsub>
 8009a84:	4621      	mov	r1, r4
 8009a86:	f7f7 f94f 	bl	8000d28 <__addsf3>
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	9010      	str	r0, [sp, #64]	@ 0x40
 8009a8e:	4640      	mov	r0, r8
 8009a90:	f7f7 f948 	bl	8000d24 <__aeabi_fsub>
 8009a94:	4621      	mov	r1, r4
 8009a96:	f7f7 f945 	bl	8000d24 <__aeabi_fsub>
 8009a9a:	4659      	mov	r1, fp
 8009a9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	f7f7 f940 	bl	8000d24 <__aeabi_fsub>
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	f7f7 f93d 	bl	8000d24 <__aeabi_fsub>
 8009aaa:	4659      	mov	r1, fp
 8009aac:	9011      	str	r0, [sp, #68]	@ 0x44
 8009aae:	9807      	ldr	r0, [sp, #28]
 8009ab0:	f7f7 f938 	bl	8000d24 <__aeabi_fsub>
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7f7 f936 	bl	8000d28 <__addsf3>
 8009abc:	4629      	mov	r1, r5
 8009abe:	9007      	str	r0, [sp, #28]
 8009ac0:	9808      	ldr	r0, [sp, #32]
 8009ac2:	f7f7 f931 	bl	8000d28 <__addsf3>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	f7f7 f92c 	bl	8000d24 <__aeabi_fsub>
 8009acc:	4629      	mov	r1, r5
 8009ace:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ad0:	4640      	mov	r0, r8
 8009ad2:	f7f7 f929 	bl	8000d28 <__addsf3>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7f7 f925 	bl	8000d28 <__addsf3>
 8009ade:	9d02      	ldr	r5, [sp, #8]
 8009ae0:	f845 0c08 	str.w	r0, [r5, #-8]
 8009ae4:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7f7 f91d 	bl	8000d28 <__addsf3>
 8009aee:	9900      	ldr	r1, [sp, #0]
 8009af0:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8009af4:	f7f7 f918 	bl	8000d28 <__addsf3>
 8009af8:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 8009afc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009afe:	f845 0c04 	str.w	r0, [r5, #-4]
 8009b02:	eb03 040c 	add.w	r4, r3, ip
 8009b06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b08:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8009b0c:	9502      	str	r5, [sp, #8]
 8009b0e:	4463      	add	r3, ip
 8009b10:	461f      	mov	r7, r3
 8009b12:	4630      	mov	r0, r6
 8009b14:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8009b18:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f7 f903 	bl	8000d28 <__addsf3>
 8009b22:	4629      	mov	r1, r5
 8009b24:	9008      	str	r0, [sp, #32]
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7f7 f8fc 	bl	8000d24 <__aeabi_fsub>
 8009b2c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8009b30:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8009b34:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b36:	4683      	mov	fp, r0
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	f7f7 f8f4 	bl	8000d28 <__addsf3>
 8009b40:	4629      	mov	r1, r5
 8009b42:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7f7 f8ed 	bl	8000d24 <__aeabi_fsub>
 8009b4a:	9e03      	ldr	r6, [sp, #12]
 8009b4c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8009b50:	68b5      	ldr	r5, [r6, #8]
 8009b52:	900c      	str	r0, [sp, #48]	@ 0x30
 8009b54:	4629      	mov	r1, r5
 8009b56:	4638      	mov	r0, r7
 8009b58:	f7f7 f8e4 	bl	8000d24 <__aeabi_fsub>
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	9015      	str	r0, [sp, #84]	@ 0x54
 8009b60:	f7f7 f8e2 	bl	8000d28 <__addsf3>
 8009b64:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8009b68:	9603      	str	r6, [sp, #12]
 8009b6a:	6876      	ldr	r6, [r6, #4]
 8009b6c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009b6e:	4641      	mov	r1, r8
 8009b70:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009b72:	f7f7 f8d7 	bl	8000d24 <__aeabi_fsub>
 8009b76:	4631      	mov	r1, r6
 8009b78:	f7f7 f8d6 	bl	8000d28 <__addsf3>
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8009b80:	9808      	ldr	r0, [sp, #32]
 8009b82:	f7f7 f8cf 	bl	8000d24 <__aeabi_fsub>
 8009b86:	4631      	mov	r1, r6
 8009b88:	f7f7 f8cc 	bl	8000d24 <__aeabi_fsub>
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b90:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009b92:	f7f7 f8c7 	bl	8000d24 <__aeabi_fsub>
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f7 f8c4 	bl	8000d24 <__aeabi_fsub>
 8009b9c:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009ba0:	4659      	mov	r1, fp
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7f7 f8be 	bl	8000d24 <__aeabi_fsub>
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4683      	mov	fp, r0
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7f7 f8b9 	bl	8000d24 <__aeabi_fsub>
 8009bb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009bb4:	f7f7 f8b6 	bl	8000d24 <__aeabi_fsub>
 8009bb8:	4639      	mov	r1, r7
 8009bba:	4606      	mov	r6, r0
 8009bbc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009bbe:	f7f7 f8b3 	bl	8000d28 <__addsf3>
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f7f7 f8af 	bl	8000d28 <__addsf3>
 8009bca:	f844 0c04 	str.w	r0, [r4, #-4]
 8009bce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bd2:	9808      	ldr	r0, [sp, #32]
 8009bd4:	f7f7 f8a8 	bl	8000d28 <__addsf3>
 8009bd8:	9d03      	ldr	r5, [sp, #12]
 8009bda:	6869      	ldr	r1, [r5, #4]
 8009bdc:	f7f7 f8a4 	bl	8000d28 <__addsf3>
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	f844 0c08 	str.w	r0, [r4, #-8]
 8009be6:	f852 4c08 	ldr.w	r4, [r2, #-8]
 8009bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bec:	f852 5c04 	ldr.w	r5, [r2, #-4]
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	f7f7 f9a1 	bl	8000f38 <__aeabi_fmul>
 8009bf6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009bf8:	4680      	mov	r8, r0
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7f7 f99b 	bl	8000f38 <__aeabi_fmul>
 8009c02:	4601      	mov	r1, r0
 8009c04:	4640      	mov	r0, r8
 8009c06:	f7f7 f88f 	bl	8000d28 <__addsf3>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	f84a 0c08 	str.w	r0, [sl, #-8]
 8009c10:	4638      	mov	r0, r7
 8009c12:	f7f7 f991 	bl	8000f38 <__aeabi_fmul>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4680      	mov	r8, r0
 8009c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c1c:	f7f7 f98c 	bl	8000f38 <__aeabi_fmul>
 8009c20:	4601      	mov	r1, r0
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7f7 f87e 	bl	8000d24 <__aeabi_fsub>
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f84a 0c04 	str.w	r0, [sl, #-4]
 8009c2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009c30:	f7f7 f982 	bl	8000f38 <__aeabi_fmul>
 8009c34:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009c36:	4680      	mov	r8, r0
 8009c38:	4621      	mov	r1, r4
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	f7f7 f97c 	bl	8000f38 <__aeabi_fmul>
 8009c40:	4601      	mov	r1, r0
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7f7 f86e 	bl	8000d24 <__aeabi_fsub>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f8c9 0008 	str.w	r0, [r9, #8]
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7f7 f972 	bl	8000f38 <__aeabi_fmul>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4605      	mov	r5, r0
 8009c58:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009c5a:	f7f7 f96d 	bl	8000f38 <__aeabi_fmul>
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7f7 f861 	bl	8000d28 <__addsf3>
 8009c66:	9d05      	ldr	r5, [sp, #20]
 8009c68:	f8c9 0004 	str.w	r0, [r9, #4]
 8009c6c:	f855 4c10 	ldr.w	r4, [r5, #-16]
 8009c70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c72:	f855 5c0c 	ldr.w	r5, [r5, #-12]
 8009c76:	4621      	mov	r1, r4
 8009c78:	f7f7 f95e 	bl	8000f38 <__aeabi_fmul>
 8009c7c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009c80:	4607      	mov	r7, r0
 8009c82:	4629      	mov	r1, r5
 8009c84:	4640      	mov	r0, r8
 8009c86:	f7f7 f957 	bl	8000f38 <__aeabi_fmul>
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7f7 f84b 	bl	8000d28 <__addsf3>
 8009c92:	9f01      	ldr	r7, [sp, #4]
 8009c94:	4621      	mov	r1, r4
 8009c96:	f847 0c08 	str.w	r0, [r7, #-8]
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f7f7 f94c 	bl	8000f38 <__aeabi_fmul>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009ca6:	f7f7 f947 	bl	8000f38 <__aeabi_fmul>
 8009caa:	4601      	mov	r1, r0
 8009cac:	4638      	mov	r0, r7
 8009cae:	f7f7 f839 	bl	8000d24 <__aeabi_fsub>
 8009cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cb4:	9f01      	ldr	r7, [sp, #4]
 8009cb6:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
 8009cba:	f847 0c04 	str.w	r0, [r7, #-4]
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7f7 f939 	bl	8000f38 <__aeabi_fmul>
 8009cc6:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
 8009cca:	4607      	mov	r7, r0
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7f7 f932 	bl	8000f38 <__aeabi_fmul>
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f7f7 f824 	bl	8000d24 <__aeabi_fsub>
 8009cdc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f847 0c04 	str.w	r0, [r7, #-4]
 8009ce4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009ce6:	f7f7 f927 	bl	8000f38 <__aeabi_fmul>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4605      	mov	r5, r0
 8009cee:	4640      	mov	r0, r8
 8009cf0:	f7f7 f922 	bl	8000f38 <__aeabi_fmul>
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f7 f814 	bl	8000d24 <__aeabi_fsub>
 8009cfc:	f847 0c08 	str.w	r0, [r7, #-8]
 8009d00:	9f04      	ldr	r7, [sp, #16]
 8009d02:	9807      	ldr	r0, [sp, #28]
 8009d04:	f857 4c18 	ldr.w	r4, [r7, #-24]
 8009d08:	f857 5c14 	ldr.w	r5, [r7, #-20]
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7f7 f913 	bl	8000f38 <__aeabi_fmul>
 8009d12:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8009d16:	4607      	mov	r7, r0
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	f7f7 f90c 	bl	8000f38 <__aeabi_fmul>
 8009d20:	4601      	mov	r1, r0
 8009d22:	4638      	mov	r0, r7
 8009d24:	f7f7 f800 	bl	8000d28 <__addsf3>
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	f843 0c08 	str.w	r0, [r3, #-8]
 8009d30:	4640      	mov	r0, r8
 8009d32:	f7f7 f901 	bl	8000f38 <__aeabi_fmul>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4607      	mov	r7, r0
 8009d3a:	9807      	ldr	r0, [sp, #28]
 8009d3c:	f7f7 f8fc 	bl	8000f38 <__aeabi_fmul>
 8009d40:	4601      	mov	r1, r0
 8009d42:	4638      	mov	r0, r7
 8009d44:	f7f6 ffee 	bl	8000d24 <__aeabi_fsub>
 8009d48:	9a00      	ldr	r2, [sp, #0]
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f842 0c04 	str.w	r0, [r2, #-4]
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7f7 f8f1 	bl	8000f38 <__aeabi_fmul>
 8009d56:	4621      	mov	r1, r4
 8009d58:	4607      	mov	r7, r0
 8009d5a:	4658      	mov	r0, fp
 8009d5c:	f7f7 f8ec 	bl	8000f38 <__aeabi_fmul>
 8009d60:	4601      	mov	r1, r0
 8009d62:	4638      	mov	r0, r7
 8009d64:	f7f6 ffde 	bl	8000d24 <__aeabi_fsub>
 8009d68:	9f03      	ldr	r7, [sp, #12]
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	60b8      	str	r0, [r7, #8]
 8009d6e:	4658      	mov	r0, fp
 8009d70:	f7f7 f8e2 	bl	8000f38 <__aeabi_fmul>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4605      	mov	r5, r0
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7f7 f8dd 	bl	8000f38 <__aeabi_fmul>
 8009d7e:	4601      	mov	r1, r0
 8009d80:	4628      	mov	r0, r5
 8009d82:	f7f6 ffd1 	bl	8000d28 <__addsf3>
 8009d86:	9902      	ldr	r1, [sp, #8]
 8009d88:	9c06      	ldr	r4, [sp, #24]
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	9a00      	ldr	r2, [sp, #0]
 8009d8e:	9f03      	ldr	r7, [sp, #12]
 8009d90:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	460e      	mov	r6, r1
 8009d98:	3608      	adds	r6, #8
 8009d9a:	9602      	str	r6, [sp, #8]
 8009d9c:	4626      	mov	r6, r4
 8009d9e:	3608      	adds	r6, #8
 8009da0:	9901      	ldr	r1, [sp, #4]
 8009da2:	9c04      	ldr	r4, [sp, #16]
 8009da4:	9606      	str	r6, [sp, #24]
 8009da6:	f103 0610 	add.w	r6, r3, #16
 8009daa:	f102 0308 	add.w	r3, r2, #8
 8009dae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	3108      	adds	r1, #8
 8009db4:	9101      	str	r1, [sp, #4]
 8009db6:	f1a7 0308 	sub.w	r3, r7, #8
 8009dba:	f104 0118 	add.w	r1, r4, #24
 8009dbe:	3a01      	subs	r2, #1
 8009dc0:	f1ac 0c08 	sub.w	ip, ip, #8
 8009dc4:	f10a 0a08 	add.w	sl, sl, #8
 8009dc8:	f1a9 0908 	sub.w	r9, r9, #8
 8009dcc:	9605      	str	r6, [sp, #20]
 8009dce:	9104      	str	r1, [sp, #16]
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	f47f ae1e 	bne.w	8009a12 <arm_cfft_radix8by4_f32+0x196>
 8009dd6:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8009dd8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8009dda:	00cb      	lsls	r3, r1, #3
 8009ddc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009de0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009de4:	9121      	str	r1, [sp, #132]	@ 0x84
 8009de6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8009de8:	4419      	add	r1, r3
 8009dea:	911d      	str	r1, [sp, #116]	@ 0x74
 8009dec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009dee:	4419      	add	r1, r3
 8009df0:	9120      	str	r1, [sp, #128]	@ 0x80
 8009df2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009df4:	4419      	add	r1, r3
 8009df6:	911e      	str	r1, [sp, #120]	@ 0x78
 8009df8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8009dfa:	4419      	add	r1, r3
 8009dfc:	911f      	str	r1, [sp, #124]	@ 0x7c
 8009dfe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8009e00:	4419      	add	r1, r3
 8009e02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e04:	911c      	str	r1, [sp, #112]	@ 0x70
 8009e06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e0a:	9322      	str	r3, [sp, #136]	@ 0x88
 8009e0c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8009e0e:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8009e10:	6835      	ldr	r5, [r6, #0]
 8009e12:	683c      	ldr	r4, [r7, #0]
 8009e14:	4628      	mov	r0, r5
 8009e16:	4621      	mov	r1, r4
 8009e18:	f7f6 ff86 	bl	8000d28 <__addsf3>
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4681      	mov	r9, r0
 8009e20:	4628      	mov	r0, r5
 8009e22:	f7f6 ff7f 	bl	8000d24 <__aeabi_fsub>
 8009e26:	6875      	ldr	r5, [r6, #4]
 8009e28:	687c      	ldr	r4, [r7, #4]
 8009e2a:	961d      	str	r6, [sp, #116]	@ 0x74
 8009e2c:	4683      	mov	fp, r0
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	971f      	str	r7, [sp, #124]	@ 0x7c
 8009e34:	f7f6 ff78 	bl	8000d28 <__addsf3>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f7f6 ff71 	bl	8000d24 <__aeabi_fsub>
 8009e42:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8009e44:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009e46:	6867      	ldr	r7, [r4, #4]
 8009e48:	685e      	ldr	r6, [r3, #4]
 8009e4a:	4682      	mov	sl, r0
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7f6 ff6a 	bl	8000d28 <__addsf3>
 8009e54:	4631      	mov	r1, r6
 8009e56:	f7f6 ff65 	bl	8000d24 <__aeabi_fsub>
 8009e5a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8009e5c:	6825      	ldr	r5, [r4, #0]
 8009e5e:	941e      	str	r4, [sp, #120]	@ 0x78
 8009e60:	680c      	ldr	r4, [r1, #0]
 8009e62:	9000      	str	r0, [sp, #0]
 8009e64:	4629      	mov	r1, r5
 8009e66:	4650      	mov	r0, sl
 8009e68:	f7f6 ff5c 	bl	8000d24 <__aeabi_fsub>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f7f6 ff5b 	bl	8000d28 <__addsf3>
 8009e72:	4629      	mov	r1, r5
 8009e74:	9001      	str	r0, [sp, #4]
 8009e76:	4648      	mov	r0, r9
 8009e78:	f7f6 ff54 	bl	8000d24 <__aeabi_fsub>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	f7f6 ff51 	bl	8000d24 <__aeabi_fsub>
 8009e82:	4639      	mov	r1, r7
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	4640      	mov	r0, r8
 8009e88:	f7f6 ff4c 	bl	8000d24 <__aeabi_fsub>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	f7f6 ff49 	bl	8000d24 <__aeabi_fsub>
 8009e92:	4639      	mov	r1, r7
 8009e94:	9003      	str	r0, [sp, #12]
 8009e96:	4658      	mov	r0, fp
 8009e98:	f7f6 ff44 	bl	8000d24 <__aeabi_fsub>
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7f6 ff42 	bl	8000d28 <__addsf3>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4650      	mov	r0, sl
 8009eaa:	f7f6 ff3d 	bl	8000d28 <__addsf3>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f7f6 ff38 	bl	8000d24 <__aeabi_fsub>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4682      	mov	sl, r0
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f7f6 ff35 	bl	8000d28 <__addsf3>
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7f6 ff31 	bl	8000d28 <__addsf3>
 8009ec6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8009ec8:	6028      	str	r0, [r5, #0]
 8009eca:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 8009ecc:	4640      	mov	r0, r8
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	f7f6 ff2a 	bl	8000d28 <__addsf3>
 8009ed4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ed6:	6851      	ldr	r1, [r2, #4]
 8009ed8:	f7f6 ff26 	bl	8000d28 <__addsf3>
 8009edc:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8009ede:	6068      	str	r0, [r5, #4]
 8009ee0:	6825      	ldr	r5, [r4, #0]
 8009ee2:	f8dd 9000 	ldr.w	r9, [sp]
 8009ee6:	6864      	ldr	r4, [r4, #4]
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4648      	mov	r0, r9
 8009eec:	f7f7 f824 	bl	8000f38 <__aeabi_fmul>
 8009ef0:	f8dd b004 	ldr.w	fp, [sp, #4]
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4658      	mov	r0, fp
 8009efa:	f7f7 f81d 	bl	8000f38 <__aeabi_fmul>
 8009efe:	4601      	mov	r1, r0
 8009f00:	4640      	mov	r0, r8
 8009f02:	f7f6 ff11 	bl	8000d28 <__addsf3>
 8009f06:	4629      	mov	r1, r5
 8009f08:	6038      	str	r0, [r7, #0]
 8009f0a:	4658      	mov	r0, fp
 8009f0c:	f7f7 f814 	bl	8000f38 <__aeabi_fmul>
 8009f10:	4621      	mov	r1, r4
 8009f12:	4605      	mov	r5, r0
 8009f14:	4648      	mov	r0, r9
 8009f16:	f7f7 f80f 	bl	8000f38 <__aeabi_fmul>
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	f7f6 ff01 	bl	8000d24 <__aeabi_fsub>
 8009f22:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6825      	ldr	r5, [r4, #0]
 8009f28:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009f2c:	6864      	ldr	r4, [r4, #4]
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4648      	mov	r0, r9
 8009f32:	f7f7 f801 	bl	8000f38 <__aeabi_fmul>
 8009f36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	4640      	mov	r0, r8
 8009f40:	f7f6 fffa 	bl	8000f38 <__aeabi_fmul>
 8009f44:	4601      	mov	r1, r0
 8009f46:	4638      	mov	r0, r7
 8009f48:	f7f6 feee 	bl	8000d28 <__addsf3>
 8009f4c:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 8009f4e:	4629      	mov	r1, r5
 8009f50:	6038      	str	r0, [r7, #0]
 8009f52:	4640      	mov	r0, r8
 8009f54:	f7f6 fff0 	bl	8000f38 <__aeabi_fmul>
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	f7f6 ffeb 	bl	8000f38 <__aeabi_fmul>
 8009f62:	4601      	mov	r1, r0
 8009f64:	4628      	mov	r0, r5
 8009f66:	f7f6 fedd 	bl	8000d24 <__aeabi_fsub>
 8009f6a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	680d      	ldr	r5, [r1, #0]
 8009f70:	684c      	ldr	r4, [r1, #4]
 8009f72:	4630      	mov	r0, r6
 8009f74:	4629      	mov	r1, r5
 8009f76:	f7f6 ffdf 	bl	8000f38 <__aeabi_fmul>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4607      	mov	r7, r0
 8009f7e:	4650      	mov	r0, sl
 8009f80:	f7f6 ffda 	bl	8000f38 <__aeabi_fmul>
 8009f84:	4601      	mov	r1, r0
 8009f86:	4638      	mov	r0, r7
 8009f88:	f7f6 fece 	bl	8000d28 <__addsf3>
 8009f8c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8009f8e:	4629      	mov	r1, r5
 8009f90:	6038      	str	r0, [r7, #0]
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7f6 ffd0 	bl	8000f38 <__aeabi_fmul>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7f6 ffcb 	bl	8000f38 <__aeabi_fmul>
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f7f6 febd 	bl	8000d24 <__aeabi_fsub>
 8009faa:	f8bd 4090 	ldrh.w	r4, [sp, #144]	@ 0x90
 8009fae:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6872      	ldr	r2, [r6, #4]
 8009fb4:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	2304      	movs	r3, #4
 8009fba:	f000 f893 	bl	800a0e4 <arm_radix8_butterfly_f32>
 8009fbe:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8009fc0:	6872      	ldr	r2, [r6, #4]
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	2304      	movs	r3, #4
 8009fc6:	f000 f88d 	bl	800a0e4 <arm_radix8_butterfly_f32>
 8009fca:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8009fcc:	6872      	ldr	r2, [r6, #4]
 8009fce:	4621      	mov	r1, r4
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	f000 f887 	bl	800a0e4 <arm_radix8_butterfly_f32>
 8009fd6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009fd8:	6872      	ldr	r2, [r6, #4]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	2304      	movs	r3, #4
 8009fde:	b027      	add	sp, #156	@ 0x9c
 8009fe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	f000 b87e 	b.w	800a0e4 <arm_radix8_butterfly_f32>

08009fe8 <arm_cfft_f32>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fec:	2a01      	cmp	r2, #1
 8009fee:	4606      	mov	r6, r0
 8009ff0:	4617      	mov	r7, r2
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	4698      	mov	r8, r3
 8009ff6:	8805      	ldrh	r5, [r0, #0]
 8009ff8:	d058      	beq.n	800a0ac <arm_cfft_f32+0xc4>
 8009ffa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8009ffe:	d050      	beq.n	800a0a2 <arm_cfft_f32+0xba>
 800a000:	d916      	bls.n	800a030 <arm_cfft_f32+0x48>
 800a002:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800a006:	d01a      	beq.n	800a03e <arm_cfft_f32+0x56>
 800a008:	d960      	bls.n	800a0cc <arm_cfft_f32+0xe4>
 800a00a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800a00e:	d048      	beq.n	800a0a2 <arm_cfft_f32+0xba>
 800a010:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800a014:	d105      	bne.n	800a022 <arm_cfft_f32+0x3a>
 800a016:	4620      	mov	r0, r4
 800a018:	4629      	mov	r1, r5
 800a01a:	6872      	ldr	r2, [r6, #4]
 800a01c:	2301      	movs	r3, #1
 800a01e:	f000 f861 	bl	800a0e4 <arm_radix8_butterfly_f32>
 800a022:	f1b8 0f00 	cmp.w	r8, #0
 800a026:	d111      	bne.n	800a04c <arm_cfft_f32+0x64>
 800a028:	2f01      	cmp	r7, #1
 800a02a:	d016      	beq.n	800a05a <arm_cfft_f32+0x72>
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	2d20      	cmp	r5, #32
 800a032:	d036      	beq.n	800a0a2 <arm_cfft_f32+0xba>
 800a034:	d94e      	bls.n	800a0d4 <arm_cfft_f32+0xec>
 800a036:	2d40      	cmp	r5, #64	@ 0x40
 800a038:	d0ed      	beq.n	800a016 <arm_cfft_f32+0x2e>
 800a03a:	2d80      	cmp	r5, #128	@ 0x80
 800a03c:	d1f1      	bne.n	800a022 <arm_cfft_f32+0x3a>
 800a03e:	4630      	mov	r0, r6
 800a040:	4621      	mov	r1, r4
 800a042:	f7ff fac1 	bl	80095c8 <arm_cfft_radix8by2_f32>
 800a046:	f1b8 0f00 	cmp.w	r8, #0
 800a04a:	d0ed      	beq.n	800a028 <arm_cfft_f32+0x40>
 800a04c:	4620      	mov	r0, r4
 800a04e:	89b1      	ldrh	r1, [r6, #12]
 800a050:	68b2      	ldr	r2, [r6, #8]
 800a052:	f7f6 f8bd 	bl	80001d0 <arm_bitreversal_32>
 800a056:	2f01      	cmp	r7, #1
 800a058:	d1e8      	bne.n	800a02c <arm_cfft_f32+0x44>
 800a05a:	4628      	mov	r0, r5
 800a05c:	f7f6 ff14 	bl	8000e88 <__aeabi_ui2f>
 800a060:	4601      	mov	r1, r0
 800a062:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a066:	f7f7 f81b 	bl	80010a0 <__aeabi_fdiv>
 800a06a:	4607      	mov	r7, r0
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	d0dd      	beq.n	800a02c <arm_cfft_f32+0x44>
 800a070:	3408      	adds	r4, #8
 800a072:	2600      	movs	r6, #0
 800a074:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800a078:	4639      	mov	r1, r7
 800a07a:	f7f6 ff5d 	bl	8000f38 <__aeabi_fmul>
 800a07e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a082:	f844 0c08 	str.w	r0, [r4, #-8]
 800a086:	4639      	mov	r1, r7
 800a088:	f103 4000 	add.w	r0, r3, #2147483648	@ 0x80000000
 800a08c:	f7f6 ff54 	bl	8000f38 <__aeabi_fmul>
 800a090:	3601      	adds	r6, #1
 800a092:	42b5      	cmp	r5, r6
 800a094:	f844 0c04 	str.w	r0, [r4, #-4]
 800a098:	f104 0408 	add.w	r4, r4, #8
 800a09c:	d1ea      	bne.n	800a074 <arm_cfft_f32+0x8c>
 800a09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	f7ff fbe9 	bl	800987c <arm_cfft_radix8by4_f32>
 800a0aa:	e7ba      	b.n	800a022 <arm_cfft_f32+0x3a>
 800a0ac:	b1ad      	cbz	r5, 800a0da <arm_cfft_f32+0xf2>
 800a0ae:	f101 030c 	add.w	r3, r1, #12
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800a0be:	428d      	cmp	r5, r1
 800a0c0:	f843 2c08 	str.w	r2, [r3, #-8]
 800a0c4:	f103 0308 	add.w	r3, r3, #8
 800a0c8:	d1f4      	bne.n	800a0b4 <arm_cfft_f32+0xcc>
 800a0ca:	e796      	b.n	8009ffa <arm_cfft_f32+0x12>
 800a0cc:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800a0d0:	d0a1      	beq.n	800a016 <arm_cfft_f32+0x2e>
 800a0d2:	e7a6      	b.n	800a022 <arm_cfft_f32+0x3a>
 800a0d4:	2d10      	cmp	r5, #16
 800a0d6:	d0b2      	beq.n	800a03e <arm_cfft_f32+0x56>
 800a0d8:	e7a3      	b.n	800a022 <arm_cfft_f32+0x3a>
 800a0da:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a0de:	d890      	bhi.n	800a002 <arm_cfft_f32+0x1a>
 800a0e0:	e7a6      	b.n	800a030 <arm_cfft_f32+0x48>
 800a0e2:	bf00      	nop

0800a0e4 <arm_radix8_butterfly_f32>:
 800a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	b0b1      	sub	sp, #196	@ 0xc4
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	932c      	str	r3, [sp, #176]	@ 0xb0
 800a0ee:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0f0:	9029      	str	r0, [sp, #164]	@ 0xa4
 800a0f2:	9225      	str	r2, [sp, #148]	@ 0x94
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	9118      	str	r1, [sp, #96]	@ 0x60
 800a0f8:	08db      	lsrs	r3, r3, #3
 800a0fa:	00d9      	lsls	r1, r3, #3
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a100:	4639      	mov	r1, r7
 800a102:	4421      	add	r1, r4
 800a104:	005a      	lsls	r2, r3, #1
 800a106:	9111      	str	r1, [sp, #68]	@ 0x44
 800a108:	461e      	mov	r6, r3
 800a10a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a10c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a10e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a110:	9322      	str	r3, [sp, #136]	@ 0x88
 800a112:	441a      	add	r2, r3
 800a114:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a118:	ebc6 7146 	rsb	r1, r6, r6, lsl #29
 800a11c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a120:	eb03 0446 	add.w	r4, r3, r6, lsl #1
 800a124:	1828      	adds	r0, r5, r0
 800a126:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800a12a:	00c9      	lsls	r1, r1, #3
 800a12c:	9008      	str	r0, [sp, #32]
 800a12e:	9103      	str	r1, [sp, #12]
 800a130:	1d15      	adds	r5, r2, #4
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
 800a138:	9201      	str	r2, [sp, #4]
 800a13a:	9c03      	ldr	r4, [sp, #12]
 800a13c:	9a08      	ldr	r2, [sp, #32]
 800a13e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a140:	4422      	add	r2, r4
 800a142:	eba6 0086 	sub.w	r0, r6, r6, lsl #2
 800a146:	ebc6 7106 	rsb	r1, r6, r6, lsl #28
 800a14a:	9212      	str	r2, [sp, #72]	@ 0x48
 800a14c:	00c2      	lsls	r2, r0, #3
 800a14e:	9204      	str	r2, [sp, #16]
 800a150:	010a      	lsls	r2, r1, #4
 800a152:	9205      	str	r2, [sp, #20]
 800a154:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 800a158:	0132      	lsls	r2, r6, #4
 800a15a:	2300      	movs	r3, #0
 800a15c:	46ba      	mov	sl, r7
 800a15e:	9202      	str	r2, [sp, #8]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	462f      	mov	r7, r5
 800a164:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800a166:	9e00      	ldr	r6, [sp, #0]
 800a168:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 800a16c:	461a      	mov	r2, r3
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	f852 5036 	ldr.w	r5, [r2, r6, lsl #3]
 800a174:	f85a 4003 	ldr.w	r4, [sl, r3]
 800a178:	4628      	mov	r0, r5
 800a17a:	4621      	mov	r1, r4
 800a17c:	f7f6 fdd4 	bl	8000d28 <__addsf3>
 800a180:	4621      	mov	r1, r4
 800a182:	4683      	mov	fp, r0
 800a184:	4628      	mov	r0, r5
 800a186:	f7f6 fdcd 	bl	8000d24 <__aeabi_fsub>
 800a18a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	9009      	str	r0, [sp, #36]	@ 0x24
 800a190:	4611      	mov	r1, r2
 800a192:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800a196:	f851 5036 	ldr.w	r5, [r1, r6, lsl #3]
 800a19a:	9600      	str	r6, [sp, #0]
 800a19c:	4621      	mov	r1, r4
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f7f6 fdc2 	bl	8000d28 <__addsf3>
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f7f6 fdbb 	bl	8000d24 <__aeabi_fsub>
 800a1ae:	9908      	ldr	r1, [sp, #32]
 800a1b0:	900a      	str	r0, [sp, #40]	@ 0x28
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	9900      	ldr	r1, [sp, #0]
 800a1b6:	f854 8031 	ldr.w	r8, [r4, r1, lsl #3]
 800a1ba:	9c03      	ldr	r4, [sp, #12]
 800a1bc:	f85a 5004 	ldr.w	r5, [sl, r4]
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7f6 fdb0 	bl	8000d28 <__addsf3>
 800a1c8:	4629      	mov	r1, r5
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	f7f6 fda9 	bl	8000d24 <__aeabi_fsub>
 800a1d2:	f857 9c04 	ldr.w	r9, [r7, #-4]
 800a1d6:	f8da 8000 	ldr.w	r8, [sl]
 800a1da:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a1dc:	4641      	mov	r1, r8
 800a1de:	4648      	mov	r0, r9
 800a1e0:	f7f6 fda2 	bl	8000d28 <__addsf3>
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	f7f6 fd9b 	bl	8000d24 <__aeabi_fsub>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	900c      	str	r0, [sp, #48]	@ 0x30
 800a1f2:	4658      	mov	r0, fp
 800a1f4:	f7f6 fd96 	bl	8000d24 <__aeabi_fsub>
 800a1f8:	46d8      	mov	r8, fp
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4683      	mov	fp, r0
 800a1fe:	4640      	mov	r0, r8
 800a200:	f7f6 fd92 	bl	8000d28 <__addsf3>
 800a204:	4629      	mov	r1, r5
 800a206:	4604      	mov	r4, r0
 800a208:	4630      	mov	r0, r6
 800a20a:	f7f6 fd8b 	bl	8000d24 <__aeabi_fsub>
 800a20e:	4629      	mov	r1, r5
 800a210:	900d      	str	r0, [sp, #52]	@ 0x34
 800a212:	4630      	mov	r0, r6
 800a214:	f7f6 fd88 	bl	8000d28 <__addsf3>
 800a218:	4605      	mov	r5, r0
 800a21a:	4629      	mov	r1, r5
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7f6 fd83 	bl	8000d28 <__addsf3>
 800a222:	9b00      	ldr	r3, [sp, #0]
 800a224:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 800a226:	4629      	mov	r1, r5
 800a228:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7f6 fd79 	bl	8000d24 <__aeabi_fsub>
 800a232:	9d04      	ldr	r5, [sp, #16]
 800a234:	f84a 0005 	str.w	r0, [sl, r5]
 800a238:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800a23a:	597d      	ldr	r5, [r7, r5]
 800a23c:	f857 4031 	ldr.w	r4, [r7, r1, lsl #3]
 800a240:	4628      	mov	r0, r5
 800a242:	4621      	mov	r1, r4
 800a244:	f7f6 fd70 	bl	8000d28 <__addsf3>
 800a248:	4621      	mov	r1, r4
 800a24a:	4680      	mov	r8, r0
 800a24c:	4628      	mov	r0, r5
 800a24e:	f7f6 fd69 	bl	8000d24 <__aeabi_fsub>
 800a252:	9a02      	ldr	r2, [sp, #8]
 800a254:	9e05      	ldr	r6, [sp, #20]
 800a256:	58bc      	ldr	r4, [r7, r2]
 800a258:	59bd      	ldr	r5, [r7, r6]
 800a25a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a25c:	4621      	mov	r1, r4
 800a25e:	4628      	mov	r0, r5
 800a260:	f7f6 fd62 	bl	8000d28 <__addsf3>
 800a264:	4621      	mov	r1, r4
 800a266:	9006      	str	r0, [sp, #24]
 800a268:	4628      	mov	r0, r5
 800a26a:	f7f6 fd5b 	bl	8000d24 <__aeabi_fsub>
 800a26e:	9a01      	ldr	r2, [sp, #4]
 800a270:	9e03      	ldr	r6, [sp, #12]
 800a272:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800a274:	59bd      	ldr	r5, [r7, r6]
 800a276:	f852 4034 	ldr.w	r4, [r2, r4, lsl #3]
 800a27a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a27c:	4621      	mov	r1, r4
 800a27e:	4628      	mov	r0, r5
 800a280:	f7f6 fd52 	bl	8000d28 <__addsf3>
 800a284:	4621      	mov	r1, r4
 800a286:	4606      	mov	r6, r0
 800a288:	4628      	mov	r0, r5
 800a28a:	f7f6 fd4b 	bl	8000d24 <__aeabi_fsub>
 800a28e:	9c01      	ldr	r4, [sp, #4]
 800a290:	9905      	ldr	r1, [sp, #20]
 800a292:	9007      	str	r0, [sp, #28]
 800a294:	5865      	ldr	r5, [r4, r1]
 800a296:	f8da 4004 	ldr.w	r4, [sl, #4]
 800a29a:	4628      	mov	r0, r5
 800a29c:	4621      	mov	r1, r4
 800a29e:	f7f6 fd43 	bl	8000d28 <__addsf3>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4681      	mov	r9, r0
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7f6 fd3c 	bl	8000d24 <__aeabi_fsub>
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	4640      	mov	r0, r8
 800a2b2:	f7f6 fd37 	bl	8000d24 <__aeabi_fsub>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f7f6 fd34 	bl	8000d28 <__addsf3>
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	9806      	ldr	r0, [sp, #24]
 800a2c6:	f7f6 fd2d 	bl	8000d24 <__aeabi_fsub>
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	9806      	ldr	r0, [sp, #24]
 800a2d0:	f7f6 fd2a 	bl	8000d28 <__addsf3>
 800a2d4:	4681      	mov	r9, r0
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	f7f6 fd25 	bl	8000d28 <__addsf3>
 800a2de:	9a04      	ldr	r2, [sp, #16]
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	50b8      	str	r0, [r7, r2]
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	f7f6 fd1d 	bl	8000d24 <__aeabi_fsub>
 800a2ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	f847 0032 	str.w	r0, [r7, r2, lsl #3]
 800a2f2:	4658      	mov	r0, fp
 800a2f4:	f7f6 fd18 	bl	8000d28 <__addsf3>
 800a2f8:	9b08      	ldr	r3, [sp, #32]
 800a2fa:	9a00      	ldr	r2, [sp, #0]
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4631      	mov	r1, r6
 800a300:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
 800a304:	4658      	mov	r0, fp
 800a306:	f7f6 fd0d 	bl	8000d24 <__aeabi_fsub>
 800a30a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800a30e:	9e03      	ldr	r6, [sp, #12]
 800a310:	4659      	mov	r1, fp
 800a312:	f84a 0006 	str.w	r0, [sl, r6]
 800a316:	4620      	mov	r0, r4
 800a318:	f7f6 fd04 	bl	8000d24 <__aeabi_fsub>
 800a31c:	9e03      	ldr	r6, [sp, #12]
 800a31e:	4659      	mov	r1, fp
 800a320:	51b8      	str	r0, [r7, r6]
 800a322:	4620      	mov	r0, r4
 800a324:	f7f6 fd00 	bl	8000d28 <__addsf3>
 800a328:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800a32c:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800a330:	9e01      	ldr	r6, [sp, #4]
 800a332:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800a334:	4641      	mov	r1, r8
 800a336:	f846 0034 	str.w	r0, [r6, r4, lsl #3]
 800a33a:	4658      	mov	r0, fp
 800a33c:	f7f6 fcf2 	bl	8000d24 <__aeabi_fsub>
 800a340:	497e      	ldr	r1, [pc, #504]	@ (800a53c <arm_radix8_butterfly_f32+0x458>)
 800a342:	f7f6 fdf9 	bl	8000f38 <__aeabi_fmul>
 800a346:	4641      	mov	r1, r8
 800a348:	4681      	mov	r9, r0
 800a34a:	4658      	mov	r0, fp
 800a34c:	f7f6 fcec 	bl	8000d28 <__addsf3>
 800a350:	497a      	ldr	r1, [pc, #488]	@ (800a53c <arm_radix8_butterfly_f32+0x458>)
 800a352:	f7f6 fdf1 	bl	8000f38 <__aeabi_fmul>
 800a356:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 800a35a:	4604      	mov	r4, r0
 800a35c:	4629      	mov	r1, r5
 800a35e:	4640      	mov	r0, r8
 800a360:	f7f6 fce0 	bl	8000d24 <__aeabi_fsub>
 800a364:	4975      	ldr	r1, [pc, #468]	@ (800a53c <arm_radix8_butterfly_f32+0x458>)
 800a366:	f7f6 fde7 	bl	8000f38 <__aeabi_fmul>
 800a36a:	4629      	mov	r1, r5
 800a36c:	4606      	mov	r6, r0
 800a36e:	4640      	mov	r0, r8
 800a370:	f7f6 fcda 	bl	8000d28 <__addsf3>
 800a374:	4971      	ldr	r1, [pc, #452]	@ (800a53c <arm_radix8_butterfly_f32+0x458>)
 800a376:	f7f6 fddf 	bl	8000f38 <__aeabi_fmul>
 800a37a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a37c:	4683      	mov	fp, r0
 800a37e:	4649      	mov	r1, r9
 800a380:	4628      	mov	r0, r5
 800a382:	f7f6 fccf 	bl	8000d24 <__aeabi_fsub>
 800a386:	4649      	mov	r1, r9
 800a388:	4680      	mov	r8, r0
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7f6 fccc 	bl	8000d28 <__addsf3>
 800a390:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a394:	9006      	str	r0, [sp, #24]
 800a396:	4621      	mov	r1, r4
 800a398:	4648      	mov	r0, r9
 800a39a:	f7f6 fcc3 	bl	8000d24 <__aeabi_fsub>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	f7f6 fcc0 	bl	8000d28 <__addsf3>
 800a3a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 800a3ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4648      	mov	r0, r9
 800a3b2:	f7f6 fcb7 	bl	8000d24 <__aeabi_fsub>
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4648      	mov	r0, r9
 800a3bc:	f7f6 fcb4 	bl	8000d28 <__addsf3>
 800a3c0:	4659      	mov	r1, fp
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	9807      	ldr	r0, [sp, #28]
 800a3c6:	f7f6 fcad 	bl	8000d24 <__aeabi_fsub>
 800a3ca:	4659      	mov	r1, fp
 800a3cc:	4681      	mov	r9, r0
 800a3ce:	9807      	ldr	r0, [sp, #28]
 800a3d0:	f7f6 fcaa 	bl	8000d28 <__addsf3>
 800a3d4:	4683      	mov	fp, r0
 800a3d6:	4659      	mov	r1, fp
 800a3d8:	9806      	ldr	r0, [sp, #24]
 800a3da:	f7f6 fca5 	bl	8000d28 <__addsf3>
 800a3de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e0:	469e      	mov	lr, r3
 800a3e2:	9b00      	ldr	r3, [sp, #0]
 800a3e4:	4659      	mov	r1, fp
 800a3e6:	f84e 0033 	str.w	r0, [lr, r3, lsl #3]
 800a3ea:	9806      	ldr	r0, [sp, #24]
 800a3ec:	f7f6 fc9a 	bl	8000d24 <__aeabi_fsub>
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	f8ca 0000 	str.w	r0, [sl]
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f7f6 fc96 	bl	8000d28 <__addsf3>
 800a3fc:	9a01      	ldr	r2, [sp, #4]
 800a3fe:	4649      	mov	r1, r9
 800a400:	f842 0c04 	str.w	r0, [r2, #-4]
 800a404:	4640      	mov	r0, r8
 800a406:	f7f6 fc8d 	bl	8000d24 <__aeabi_fsub>
 800a40a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 800a40e:	f847 0c04 	str.w	r0, [r7, #-4]
 800a412:	4641      	mov	r1, r8
 800a414:	4630      	mov	r0, r6
 800a416:	f7f6 fc85 	bl	8000d24 <__aeabi_fsub>
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	4641      	mov	r1, r8
 800a41e:	50f8      	str	r0, [r7, r3]
 800a420:	4630      	mov	r0, r6
 800a422:	f7f6 fc81 	bl	8000d28 <__addsf3>
 800a426:	4629      	mov	r1, r5
 800a428:	f8ca 0004 	str.w	r0, [sl, #4]
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7f6 fc79 	bl	8000d24 <__aeabi_fsub>
 800a432:	4629      	mov	r1, r5
 800a434:	9d02      	ldr	r5, [sp, #8]
 800a436:	5178      	str	r0, [r7, r5]
 800a438:	4620      	mov	r0, r4
 800a43a:	f7f6 fc75 	bl	8000d28 <__addsf3>
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	9a01      	ldr	r2, [sp, #4]
 800a442:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800a444:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 800a448:	9905      	ldr	r1, [sp, #20]
 800a44a:	191c      	adds	r4, r3, r4
 800a44c:	4613      	mov	r3, r2
 800a44e:	4463      	add	r3, ip
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a454:	9400      	str	r4, [sp, #0]
 800a456:	42a3      	cmp	r3, r4
 800a458:	44e2      	add	sl, ip
 800a45a:	5050      	str	r0, [r2, r1]
 800a45c:	4467      	add	r7, ip
 800a45e:	f63f ae81 	bhi.w	800a164 <arm_radix8_butterfly_f32+0x80>
 800a462:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 800a464:	2d07      	cmp	r5, #7
 800a466:	f240 82e8 	bls.w	800aa3a <arm_radix8_butterfly_f32+0x956>
 800a46a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a46c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a46e:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800a470:	461a      	mov	r2, r3
 800a472:	1b73      	subs	r3, r6, r5
 800a474:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	1908      	adds	r0, r1, r4
 800a47c:	442a      	add	r2, r5
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800a482:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 800a484:	00c9      	lsls	r1, r1, #3
 800a486:	00c0      	lsls	r0, r0, #3
 800a488:	0112      	lsls	r2, r2, #4
 800a48a:	460f      	mov	r7, r1
 800a48c:	912f      	str	r1, [sp, #188]	@ 0xbc
 800a48e:	9206      	str	r2, [sp, #24]
 800a490:	4621      	mov	r1, r4
 800a492:	181a      	adds	r2, r3, r0
 800a494:	00e4      	lsls	r4, r4, #3
 800a496:	9228      	str	r2, [sp, #160]	@ 0xa0
 800a498:	19da      	adds	r2, r3, r7
 800a49a:	4423      	add	r3, r4
 800a49c:	9326      	str	r3, [sp, #152]	@ 0x98
 800a49e:	016b      	lsls	r3, r5, #5
 800a4a0:	942d      	str	r4, [sp, #180]	@ 0xb4
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800a4a6:	902e      	str	r0, [sp, #184]	@ 0xb8
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	9227      	str	r2, [sp, #156]	@ 0x9c
 800a4ac:	9123      	str	r1, [sp, #140]	@ 0x8c
 800a4ae:	9324      	str	r3, [sp, #144]	@ 0x90
 800a4b0:	46b0      	mov	r8, r6
 800a4b2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800a4b4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800a4b6:	010f      	lsls	r7, r1, #4
 800a4b8:	19c6      	adds	r6, r0, r7
 800a4ba:	00cb      	lsls	r3, r1, #3
 800a4bc:	18f5      	adds	r5, r6, r3
 800a4be:	eb05 0903 	add.w	r9, r5, r3
 800a4c2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a4c6:	1a5b      	subs	r3, r3, r1
 800a4c8:	eb09 0ec2 	add.w	lr, r9, r2, lsl #3
 800a4cc:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 800a4d0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4d2:	0149      	lsls	r1, r1, #5
 800a4d4:	f8de 3004 	ldr.w	r3, [lr, #4]
 800a4d8:	686d      	ldr	r5, [r5, #4]
 800a4da:	9321      	str	r3, [sp, #132]	@ 0x84
 800a4dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a4e0:	59c7      	ldr	r7, [r0, r7]
 800a4e2:	951e      	str	r5, [sp, #120]	@ 0x78
 800a4e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	f850 3032 	ldr.w	r3, [r0, r2, lsl #3]
 800a4ec:	5840      	ldr	r0, [r0, r1]
 800a4ee:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 800a4f0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a4f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4f4:	f855 3031 	ldr.w	r3, [r5, r1, lsl #3]
 800a4f8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800a4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fc:	6813      	ldr	r3, [r2, #0]
 800a4fe:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a500:	680b      	ldr	r3, [r1, #0]
 800a502:	931c      	str	r3, [sp, #112]	@ 0x70
 800a504:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a506:	6876      	ldr	r6, [r6, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a50c:	6853      	ldr	r3, [r2, #4]
 800a50e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a510:	684b      	ldr	r3, [r1, #4]
 800a512:	970a      	str	r7, [sp, #40]	@ 0x28
 800a514:	f108 0208 	add.w	r2, r8, #8
 800a518:	961d      	str	r6, [sp, #116]	@ 0x74
 800a51a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a51c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a51e:	f104 0308 	add.w	r3, r4, #8
 800a522:	461f      	mov	r7, r3
 800a524:	932b      	str	r3, [sp, #172]	@ 0xac
 800a526:	922a      	str	r2, [sp, #168]	@ 0xa8
 800a528:	f104 010c 	add.w	r1, r4, #12
 800a52c:	f108 030c 	add.w	r3, r8, #12
 800a530:	9201      	str	r2, [sp, #4]
 800a532:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a534:	9100      	str	r1, [sp, #0]
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	46bb      	mov	fp, r7
 800a53a:	e001      	b.n	800a540 <arm_radix8_butterfly_f32+0x45c>
 800a53c:	3f3504f3 	.word	0x3f3504f3
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	9f04      	ldr	r7, [sp, #16]
 800a544:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800a548:	f85b 4007 	ldr.w	r4, [fp, r7]
 800a54c:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
 800a550:	4621      	mov	r1, r4
 800a552:	4628      	mov	r0, r5
 800a554:	9216      	str	r2, [sp, #88]	@ 0x58
 800a556:	f7f6 fbe7 	bl	8000d28 <__addsf3>
 800a55a:	4621      	mov	r1, r4
 800a55c:	4606      	mov	r6, r0
 800a55e:	4628      	mov	r0, r5
 800a560:	f7f6 fbe0 	bl	8000d24 <__aeabi_fsub>
 800a564:	9c01      	ldr	r4, [sp, #4]
 800a566:	9903      	ldr	r1, [sp, #12]
 800a568:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a56a:	46a6      	mov	lr, r4
 800a56c:	f851 5c04 	ldr.w	r5, [r1, #-4]
 800a570:	f85e 4007 	ldr.w	r4, [lr, r7]
 800a574:	9704      	str	r7, [sp, #16]
 800a576:	4621      	mov	r1, r4
 800a578:	4628      	mov	r0, r5
 800a57a:	f7f6 fbd5 	bl	8000d28 <__addsf3>
 800a57e:	4621      	mov	r1, r4
 800a580:	4607      	mov	r7, r0
 800a582:	4628      	mov	r0, r5
 800a584:	f7f6 fbce 	bl	8000d24 <__aeabi_fsub>
 800a588:	9902      	ldr	r1, [sp, #8]
 800a58a:	9d06      	ldr	r5, [sp, #24]
 800a58c:	f85b 8001 	ldr.w	r8, [fp, r1]
 800a590:	f85b 5005 	ldr.w	r5, [fp, r5]
 800a594:	9010      	str	r0, [sp, #64]	@ 0x40
 800a596:	4629      	mov	r1, r5
 800a598:	4640      	mov	r0, r8
 800a59a:	f7f6 fbc5 	bl	8000d28 <__addsf3>
 800a59e:	4629      	mov	r1, r5
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	f7f6 fbbe 	bl	8000d24 <__aeabi_fsub>
 800a5a8:	9d01      	ldr	r5, [sp, #4]
 800a5aa:	9a05      	ldr	r2, [sp, #20]
 800a5ac:	9011      	str	r0, [sp, #68]	@ 0x44
 800a5ae:	46ae      	mov	lr, r5
 800a5b0:	9d02      	ldr	r5, [sp, #8]
 800a5b2:	f85b 8002 	ldr.w	r8, [fp, r2]
 800a5b6:	f85e 9005 	ldr.w	r9, [lr, r5]
 800a5ba:	4641      	mov	r1, r8
 800a5bc:	4648      	mov	r0, r9
 800a5be:	f7f6 fbb3 	bl	8000d28 <__addsf3>
 800a5c2:	4641      	mov	r1, r8
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	4648      	mov	r0, r9
 800a5c8:	f7f6 fbac 	bl	8000d24 <__aeabi_fsub>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	9012      	str	r0, [sp, #72]	@ 0x48
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7f6 fba7 	bl	8000d24 <__aeabi_fsub>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	9007      	str	r0, [sp, #28]
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7f6 fba4 	bl	8000d28 <__addsf3>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7f6 fb9d 	bl	8000d24 <__aeabi_fsub>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7f6 fb9a 	bl	8000d28 <__addsf3>
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f7f6 fb95 	bl	8000d28 <__addsf3>
 800a5fe:	9a00      	ldr	r2, [sp, #0]
 800a600:	4629      	mov	r1, r5
 800a602:	f842 0c04 	str.w	r0, [r2, #-4]
 800a606:	4620      	mov	r0, r4
 800a608:	f7f6 fb8c 	bl	8000d24 <__aeabi_fsub>
 800a60c:	f8db 7004 	ldr.w	r7, [fp, #4]
 800a610:	9900      	ldr	r1, [sp, #0]
 800a612:	9b04      	ldr	r3, [sp, #16]
 800a614:	58cc      	ldr	r4, [r1, r3]
 800a616:	4605      	mov	r5, r0
 800a618:	4621      	mov	r1, r4
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7f6 fb84 	bl	8000d28 <__addsf3>
 800a620:	4621      	mov	r1, r4
 800a622:	4682      	mov	sl, r0
 800a624:	4638      	mov	r0, r7
 800a626:	f7f6 fb7d 	bl	8000d24 <__aeabi_fsub>
 800a62a:	9a03      	ldr	r2, [sp, #12]
 800a62c:	9f01      	ldr	r7, [sp, #4]
 800a62e:	9c04      	ldr	r4, [sp, #16]
 800a630:	687f      	ldr	r7, [r7, #4]
 800a632:	5914      	ldr	r4, [r2, r4]
 800a634:	9013      	str	r0, [sp, #76]	@ 0x4c
 800a636:	4621      	mov	r1, r4
 800a638:	4638      	mov	r0, r7
 800a63a:	f7f6 fb75 	bl	8000d28 <__addsf3>
 800a63e:	4621      	mov	r1, r4
 800a640:	4681      	mov	r9, r0
 800a642:	4638      	mov	r0, r7
 800a644:	f7f6 fb6e 	bl	8000d24 <__aeabi_fsub>
 800a648:	9a02      	ldr	r2, [sp, #8]
 800a64a:	9b06      	ldr	r3, [sp, #24]
 800a64c:	9900      	ldr	r1, [sp, #0]
 800a64e:	9014      	str	r0, [sp, #80]	@ 0x50
 800a650:	588f      	ldr	r7, [r1, r2]
 800a652:	58cc      	ldr	r4, [r1, r3]
 800a654:	4638      	mov	r0, r7
 800a656:	4621      	mov	r1, r4
 800a658:	f7f6 fb66 	bl	8000d28 <__addsf3>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4680      	mov	r8, r0
 800a660:	4638      	mov	r0, r7
 800a662:	f7f6 fb5f 	bl	8000d24 <__aeabi_fsub>
 800a666:	9f03      	ldr	r7, [sp, #12]
 800a668:	9900      	ldr	r1, [sp, #0]
 800a66a:	9c05      	ldr	r4, [sp, #20]
 800a66c:	9008      	str	r0, [sp, #32]
 800a66e:	46be      	mov	lr, r7
 800a670:	9f02      	ldr	r7, [sp, #8]
 800a672:	f85e 3007 	ldr.w	r3, [lr, r7]
 800a676:	590f      	ldr	r7, [r1, r4]
 800a678:	9315      	str	r3, [sp, #84]	@ 0x54
 800a67a:	4639      	mov	r1, r7
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f6 fb53 	bl	8000d28 <__addsf3>
 800a682:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a684:	4604      	mov	r4, r0
 800a686:	4639      	mov	r1, r7
 800a688:	4618      	mov	r0, r3
 800a68a:	f7f6 fb4b 	bl	8000d24 <__aeabi_fsub>
 800a68e:	4641      	mov	r1, r8
 800a690:	9015      	str	r0, [sp, #84]	@ 0x54
 800a692:	4650      	mov	r0, sl
 800a694:	f7f6 fb46 	bl	8000d24 <__aeabi_fsub>
 800a698:	4641      	mov	r1, r8
 800a69a:	4607      	mov	r7, r0
 800a69c:	4650      	mov	r0, sl
 800a69e:	f7f6 fb43 	bl	8000d28 <__addsf3>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4648      	mov	r0, r9
 800a6a8:	f7f6 fb3c 	bl	8000d24 <__aeabi_fsub>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	4648      	mov	r0, r9
 800a6b2:	f7f6 fb39 	bl	8000d28 <__addsf3>
 800a6b6:	4651      	mov	r1, sl
 800a6b8:	4681      	mov	r9, r0
 800a6ba:	9807      	ldr	r0, [sp, #28]
 800a6bc:	f7f6 fb34 	bl	8000d28 <__addsf3>
 800a6c0:	4651      	mov	r1, sl
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	9807      	ldr	r0, [sp, #28]
 800a6c6:	f7f6 fb2d 	bl	8000d24 <__aeabi_fsub>
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	4682      	mov	sl, r0
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7f6 fb2a 	bl	8000d28 <__addsf3>
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f8cb 0004 	str.w	r0, [fp, #4]
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7f6 fb22 	bl	8000d24 <__aeabi_fsub>
 800a6e0:	4631      	mov	r1, r6
 800a6e2:	4681      	mov	r9, r0
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7f6 fb1d 	bl	8000d24 <__aeabi_fsub>
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	f7f6 fb1a 	bl	8000d28 <__addsf3>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a6fa:	f7f6 fc1d 	bl	8000f38 <__aeabi_fmul>
 800a6fe:	4649      	mov	r1, r9
 800a700:	4607      	mov	r7, r0
 800a702:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a704:	f7f6 fc18 	bl	8000f38 <__aeabi_fmul>
 800a708:	4601      	mov	r1, r0
 800a70a:	4638      	mov	r0, r7
 800a70c:	f7f6 fb0c 	bl	8000d28 <__addsf3>
 800a710:	9a04      	ldr	r2, [sp, #16]
 800a712:	4649      	mov	r1, r9
 800a714:	f84b 0002 	str.w	r0, [fp, r2]
 800a718:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a71a:	f7f6 fc0d 	bl	8000f38 <__aeabi_fmul>
 800a71e:	4629      	mov	r1, r5
 800a720:	4607      	mov	r7, r0
 800a722:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800a724:	f7f6 fc08 	bl	8000f38 <__aeabi_fmul>
 800a728:	4601      	mov	r1, r0
 800a72a:	4638      	mov	r0, r7
 800a72c:	f7f6 fafa 	bl	8000d24 <__aeabi_fsub>
 800a730:	9f00      	ldr	r7, [sp, #0]
 800a732:	9d04      	ldr	r5, [sp, #16]
 800a734:	4621      	mov	r1, r4
 800a736:	5178      	str	r0, [r7, r5]
 800a738:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a73a:	f7f6 fbfd 	bl	8000f38 <__aeabi_fmul>
 800a73e:	f8dd 9074 	ldr.w	r9, [sp, #116]	@ 0x74
 800a742:	4605      	mov	r5, r0
 800a744:	4641      	mov	r1, r8
 800a746:	4648      	mov	r0, r9
 800a748:	f7f6 fbf6 	bl	8000f38 <__aeabi_fmul>
 800a74c:	4601      	mov	r1, r0
 800a74e:	4628      	mov	r0, r5
 800a750:	f7f6 faea 	bl	8000d28 <__addsf3>
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	4641      	mov	r1, r8
 800a758:	f84b 0003 	str.w	r0, [fp, r3]
 800a75c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a75e:	f7f6 fbeb 	bl	8000f38 <__aeabi_fmul>
 800a762:	4621      	mov	r1, r4
 800a764:	4605      	mov	r5, r0
 800a766:	4648      	mov	r0, r9
 800a768:	f7f6 fbe6 	bl	8000f38 <__aeabi_fmul>
 800a76c:	4601      	mov	r1, r0
 800a76e:	4628      	mov	r0, r5
 800a770:	f7f6 fad8 	bl	8000d24 <__aeabi_fsub>
 800a774:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 800a778:	9c02      	ldr	r4, [sp, #8]
 800a77a:	4651      	mov	r1, sl
 800a77c:	5138      	str	r0, [r7, r4]
 800a77e:	4640      	mov	r0, r8
 800a780:	f7f6 fbda 	bl	8000f38 <__aeabi_fmul>
 800a784:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
 800a788:	4604      	mov	r4, r0
 800a78a:	4631      	mov	r1, r6
 800a78c:	4648      	mov	r0, r9
 800a78e:	f7f6 fbd3 	bl	8000f38 <__aeabi_fmul>
 800a792:	4601      	mov	r1, r0
 800a794:	4620      	mov	r0, r4
 800a796:	f7f6 fac7 	bl	8000d28 <__addsf3>
 800a79a:	4631      	mov	r1, r6
 800a79c:	9e06      	ldr	r6, [sp, #24]
 800a79e:	f84b 0006 	str.w	r0, [fp, r6]
 800a7a2:	4640      	mov	r0, r8
 800a7a4:	f7f6 fbc8 	bl	8000f38 <__aeabi_fmul>
 800a7a8:	4651      	mov	r1, sl
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4648      	mov	r0, r9
 800a7ae:	f7f6 fbc3 	bl	8000f38 <__aeabi_fmul>
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f7f6 fab5 	bl	8000d24 <__aeabi_fsub>
 800a7ba:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800a7be:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800a7c2:	51b8      	str	r0, [r7, r6]
 800a7c4:	4641      	mov	r1, r8
 800a7c6:	4648      	mov	r0, r9
 800a7c8:	9700      	str	r7, [sp, #0]
 800a7ca:	f7f6 faab 	bl	8000d24 <__aeabi_fsub>
 800a7ce:	499c      	ldr	r1, [pc, #624]	@ (800aa40 <arm_radix8_butterfly_f32+0x95c>)
 800a7d0:	f7f6 fbb2 	bl	8000f38 <__aeabi_fmul>
 800a7d4:	4641      	mov	r1, r8
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4648      	mov	r0, r9
 800a7da:	f7f6 faa5 	bl	8000d28 <__addsf3>
 800a7de:	4998      	ldr	r1, [pc, #608]	@ (800aa40 <arm_radix8_butterfly_f32+0x95c>)
 800a7e0:	f7f6 fbaa 	bl	8000f38 <__aeabi_fmul>
 800a7e4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a7e8:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	4641      	mov	r1, r8
 800a7f0:	4650      	mov	r0, sl
 800a7f2:	f7f6 fa97 	bl	8000d24 <__aeabi_fsub>
 800a7f6:	4992      	ldr	r1, [pc, #584]	@ (800aa40 <arm_radix8_butterfly_f32+0x95c>)
 800a7f8:	f7f6 fb9e 	bl	8000f38 <__aeabi_fmul>
 800a7fc:	4641      	mov	r1, r8
 800a7fe:	4681      	mov	r9, r0
 800a800:	4650      	mov	r0, sl
 800a802:	f7f6 fa91 	bl	8000d28 <__addsf3>
 800a806:	498e      	ldr	r1, [pc, #568]	@ (800aa40 <arm_radix8_butterfly_f32+0x95c>)
 800a808:	f7f6 fb96 	bl	8000f38 <__aeabi_fmul>
 800a80c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a80e:	4605      	mov	r5, r0
 800a810:	4621      	mov	r1, r4
 800a812:	4630      	mov	r0, r6
 800a814:	f7f6 fa86 	bl	8000d24 <__aeabi_fsub>
 800a818:	4621      	mov	r1, r4
 800a81a:	9007      	str	r0, [sp, #28]
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7f6 fa83 	bl	8000d28 <__addsf3>
 800a822:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a826:	4604      	mov	r4, r0
 800a828:	4639      	mov	r1, r7
 800a82a:	4640      	mov	r0, r8
 800a82c:	f7f6 fa7a 	bl	8000d24 <__aeabi_fsub>
 800a830:	4639      	mov	r1, r7
 800a832:	4606      	mov	r6, r0
 800a834:	4640      	mov	r0, r8
 800a836:	f7f6 fa77 	bl	8000d28 <__addsf3>
 800a83a:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a83e:	4680      	mov	r8, r0
 800a840:	4649      	mov	r1, r9
 800a842:	4650      	mov	r0, sl
 800a844:	f7f6 fa6e 	bl	8000d24 <__aeabi_fsub>
 800a848:	4649      	mov	r1, r9
 800a84a:	4607      	mov	r7, r0
 800a84c:	4650      	mov	r0, sl
 800a84e:	f7f6 fa6b 	bl	8000d28 <__addsf3>
 800a852:	4629      	mov	r1, r5
 800a854:	4681      	mov	r9, r0
 800a856:	9808      	ldr	r0, [sp, #32]
 800a858:	f7f6 fa64 	bl	8000d24 <__aeabi_fsub>
 800a85c:	4629      	mov	r1, r5
 800a85e:	4682      	mov	sl, r0
 800a860:	9808      	ldr	r0, [sp, #32]
 800a862:	f7f6 fa61 	bl	8000d28 <__addsf3>
 800a866:	4603      	mov	r3, r0
 800a868:	4619      	mov	r1, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	9308      	str	r3, [sp, #32]
 800a86e:	f7f6 fa5b 	bl	8000d28 <__addsf3>
 800a872:	9b08      	ldr	r3, [sp, #32]
 800a874:	4605      	mov	r5, r0
 800a876:	4619      	mov	r1, r3
 800a878:	4620      	mov	r0, r4
 800a87a:	f7f6 fa53 	bl	8000d24 <__aeabi_fsub>
 800a87e:	4651      	mov	r1, sl
 800a880:	4604      	mov	r4, r0
 800a882:	9807      	ldr	r0, [sp, #28]
 800a884:	f7f6 fa50 	bl	8000d28 <__addsf3>
 800a888:	4651      	mov	r1, sl
 800a88a:	9008      	str	r0, [sp, #32]
 800a88c:	9807      	ldr	r0, [sp, #28]
 800a88e:	f7f6 fa49 	bl	8000d24 <__aeabi_fsub>
 800a892:	4641      	mov	r1, r8
 800a894:	9007      	str	r0, [sp, #28]
 800a896:	4648      	mov	r0, r9
 800a898:	f7f6 fa44 	bl	8000d24 <__aeabi_fsub>
 800a89c:	4641      	mov	r1, r8
 800a89e:	4682      	mov	sl, r0
 800a8a0:	4648      	mov	r0, r9
 800a8a2:	f7f6 fa41 	bl	8000d28 <__addsf3>
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f7f6 fa3a 	bl	8000d24 <__aeabi_fsub>
 800a8b0:	4631      	mov	r1, r6
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f7f6 fa37 	bl	8000d28 <__addsf3>
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	4606      	mov	r6, r0
 800a8be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8c0:	f7f6 fb3a 	bl	8000f38 <__aeabi_fmul>
 800a8c4:	4651      	mov	r1, sl
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a8ca:	f7f6 fb35 	bl	8000f38 <__aeabi_fmul>
 800a8ce:	4601      	mov	r1, r0
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7f6 fa29 	bl	8000d28 <__addsf3>
 800a8d6:	9b03      	ldr	r3, [sp, #12]
 800a8d8:	4651      	mov	r1, sl
 800a8da:	f843 0c04 	str.w	r0, [r3, #-4]
 800a8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8e0:	f7f6 fb2a 	bl	8000f38 <__aeabi_fmul>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a8ea:	f7f6 fb25 	bl	8000f38 <__aeabi_fmul>
 800a8ee:	4601      	mov	r1, r0
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7f6 fa17 	bl	8000d24 <__aeabi_fsub>
 800a8f6:	9f01      	ldr	r7, [sp, #4]
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a8fe:	f7f6 fb1b 	bl	8000f38 <__aeabi_fmul>
 800a902:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
 800a906:	4605      	mov	r5, r0
 800a908:	4649      	mov	r1, r9
 800a90a:	4650      	mov	r0, sl
 800a90c:	f7f6 fb14 	bl	8000f38 <__aeabi_fmul>
 800a910:	4601      	mov	r1, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f7f6 fa08 	bl	8000d28 <__addsf3>
 800a918:	9a05      	ldr	r2, [sp, #20]
 800a91a:	4649      	mov	r1, r9
 800a91c:	f84b 0002 	str.w	r0, [fp, r2]
 800a920:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a922:	f7f6 fb09 	bl	8000f38 <__aeabi_fmul>
 800a926:	4621      	mov	r1, r4
 800a928:	4605      	mov	r5, r0
 800a92a:	4650      	mov	r0, sl
 800a92c:	f7f6 fb04 	bl	8000f38 <__aeabi_fmul>
 800a930:	4601      	mov	r1, r0
 800a932:	4628      	mov	r0, r5
 800a934:	f7f6 f9f6 	bl	8000d24 <__aeabi_fsub>
 800a938:	9908      	ldr	r1, [sp, #32]
 800a93a:	9a05      	ldr	r2, [sp, #20]
 800a93c:	9d00      	ldr	r5, [sp, #0]
 800a93e:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 800a942:	50a8      	str	r0, [r5, r2]
 800a944:	4650      	mov	r0, sl
 800a946:	f7f6 faf7 	bl	8000f38 <__aeabi_fmul>
 800a94a:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 800a94e:	4604      	mov	r4, r0
 800a950:	4641      	mov	r1, r8
 800a952:	4648      	mov	r0, r9
 800a954:	f7f6 faf0 	bl	8000f38 <__aeabi_fmul>
 800a958:	4601      	mov	r1, r0
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7f6 f9e4 	bl	8000d28 <__addsf3>
 800a960:	463a      	mov	r2, r7
 800a962:	9701      	str	r7, [sp, #4]
 800a964:	9f04      	ldr	r7, [sp, #16]
 800a966:	4641      	mov	r1, r8
 800a968:	51d0      	str	r0, [r2, r7]
 800a96a:	4650      	mov	r0, sl
 800a96c:	f7f6 fae4 	bl	8000f38 <__aeabi_fmul>
 800a970:	9908      	ldr	r1, [sp, #32]
 800a972:	4604      	mov	r4, r0
 800a974:	4648      	mov	r0, r9
 800a976:	f7f6 fadf 	bl	8000f38 <__aeabi_fmul>
 800a97a:	4601      	mov	r1, r0
 800a97c:	4620      	mov	r0, r4
 800a97e:	f7f6 f9d1 	bl	8000d24 <__aeabi_fsub>
 800a982:	9a03      	ldr	r2, [sp, #12]
 800a984:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a988:	f8dd 9068 	ldr.w	r9, [sp, #104]	@ 0x68
 800a98c:	51d0      	str	r0, [r2, r7]
 800a98e:	4651      	mov	r1, sl
 800a990:	4648      	mov	r0, r9
 800a992:	f7f6 fad1 	bl	8000f38 <__aeabi_fmul>
 800a996:	f8dd 8078 	ldr.w	r8, [sp, #120]	@ 0x78
 800a99a:	4604      	mov	r4, r0
 800a99c:	4631      	mov	r1, r6
 800a99e:	4640      	mov	r0, r8
 800a9a0:	f7f6 faca 	bl	8000f38 <__aeabi_fmul>
 800a9a4:	4601      	mov	r1, r0
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f7f6 f9be 	bl	8000d28 <__addsf3>
 800a9ac:	9f01      	ldr	r7, [sp, #4]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	9e02      	ldr	r6, [sp, #8]
 800a9b2:	51b8      	str	r0, [r7, r6]
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	f7f6 fabf 	bl	8000f38 <__aeabi_fmul>
 800a9ba:	4651      	mov	r1, sl
 800a9bc:	4604      	mov	r4, r0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f7f6 faba 	bl	8000f38 <__aeabi_fmul>
 800a9c4:	4601      	mov	r1, r0
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f7f6 f9ac 	bl	8000d24 <__aeabi_fsub>
 800a9cc:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800a9d0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800a9d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a9d4:	9f01      	ldr	r7, [sp, #4]
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	eb05 010c 	add.w	r1, r5, ip
 800a9de:	9100      	str	r1, [sp, #0]
 800a9e0:	5198      	str	r0, [r3, r6]
 800a9e2:	eb07 010c 	add.w	r1, r7, ip
 800a9e6:	4463      	add	r3, ip
 800a9e8:	9101      	str	r1, [sp, #4]
 800a9ea:	9303      	str	r3, [sp, #12]
 800a9ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	44e3      	add	fp, ip
 800a9f2:	f63f ada5 	bhi.w	800a540 <arm_radix8_butterfly_f32+0x45c>
 800a9f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9f8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800a9fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a9fc:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 800a9fe:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 800aa02:	440a      	add	r2, r1
 800aa04:	9223      	str	r2, [sp, #140]	@ 0x8c
 800aa06:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800aa08:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800aa0a:	440a      	add	r2, r1
 800aa0c:	9226      	str	r2, [sp, #152]	@ 0x98
 800aa0e:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800aa10:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800aa12:	440a      	add	r2, r1
 800aa14:	9227      	str	r2, [sp, #156]	@ 0x9c
 800aa16:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800aa18:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800aa1a:	440a      	add	r2, r1
 800aa1c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800aa1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aa20:	3301      	adds	r3, #1
 800aa22:	4293      	cmp	r3, r2
 800aa24:	9324      	str	r3, [sp, #144]	@ 0x90
 800aa26:	f47f ad44 	bne.w	800a4b2 <arm_radix8_butterfly_f32+0x3ce>
 800aa2a:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	@ 0xb4
 800aa2e:	932c      	str	r3, [sp, #176]	@ 0xb0
 800aa30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aa32:	9318      	str	r3, [sp, #96]	@ 0x60
 800aa34:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800aa36:	f7ff bb5f 	b.w	800a0f8 <arm_radix8_butterfly_f32+0x14>
 800aa3a:	b031      	add	sp, #196	@ 0xc4
 800aa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa40:	3f3504f3 	.word	0x3f3504f3

0800aa44 <siprintf>:
 800aa44:	b40e      	push	{r1, r2, r3}
 800aa46:	b500      	push	{lr}
 800aa48:	b09c      	sub	sp, #112	@ 0x70
 800aa4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa4c:	9002      	str	r0, [sp, #8]
 800aa4e:	9006      	str	r0, [sp, #24]
 800aa50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa54:	4809      	ldr	r0, [pc, #36]	@ (800aa7c <siprintf+0x38>)
 800aa56:	9107      	str	r1, [sp, #28]
 800aa58:	9104      	str	r1, [sp, #16]
 800aa5a:	4909      	ldr	r1, [pc, #36]	@ (800aa80 <siprintf+0x3c>)
 800aa5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa60:	9105      	str	r1, [sp, #20]
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	a902      	add	r1, sp, #8
 800aa68:	f000 f994 	bl	800ad94 <_svfiprintf_r>
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	b01c      	add	sp, #112	@ 0x70
 800aa74:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa78:	b003      	add	sp, #12
 800aa7a:	4770      	bx	lr
 800aa7c:	20000010 	.word	0x20000010
 800aa80:	ffff0208 	.word	0xffff0208

0800aa84 <memset>:
 800aa84:	4402      	add	r2, r0
 800aa86:	4603      	mov	r3, r0
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d100      	bne.n	800aa8e <memset+0xa>
 800aa8c:	4770      	bx	lr
 800aa8e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa92:	e7f9      	b.n	800aa88 <memset+0x4>

0800aa94 <__errno>:
 800aa94:	4b01      	ldr	r3, [pc, #4]	@ (800aa9c <__errno+0x8>)
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	20000010 	.word	0x20000010

0800aaa0 <__libc_init_array>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	4d0d      	ldr	r5, [pc, #52]	@ (800aad8 <__libc_init_array+0x38>)
 800aaa4:	4c0d      	ldr	r4, [pc, #52]	@ (800aadc <__libc_init_array+0x3c>)
 800aaa6:	1b64      	subs	r4, r4, r5
 800aaa8:	10a4      	asrs	r4, r4, #2
 800aaaa:	2600      	movs	r6, #0
 800aaac:	42a6      	cmp	r6, r4
 800aaae:	d109      	bne.n	800aac4 <__libc_init_array+0x24>
 800aab0:	4d0b      	ldr	r5, [pc, #44]	@ (800aae0 <__libc_init_array+0x40>)
 800aab2:	4c0c      	ldr	r4, [pc, #48]	@ (800aae4 <__libc_init_array+0x44>)
 800aab4:	f001 fe50 	bl	800c758 <_init>
 800aab8:	1b64      	subs	r4, r4, r5
 800aaba:	10a4      	asrs	r4, r4, #2
 800aabc:	2600      	movs	r6, #0
 800aabe:	42a6      	cmp	r6, r4
 800aac0:	d105      	bne.n	800aace <__libc_init_array+0x2e>
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac8:	4798      	blx	r3
 800aaca:	3601      	adds	r6, #1
 800aacc:	e7ee      	b.n	800aaac <__libc_init_array+0xc>
 800aace:	f855 3b04 	ldr.w	r3, [r5], #4
 800aad2:	4798      	blx	r3
 800aad4:	3601      	adds	r6, #1
 800aad6:	e7f2      	b.n	800aabe <__libc_init_array+0x1e>
 800aad8:	0801ff28 	.word	0x0801ff28
 800aadc:	0801ff28 	.word	0x0801ff28
 800aae0:	0801ff28 	.word	0x0801ff28
 800aae4:	0801ff2c 	.word	0x0801ff2c

0800aae8 <__retarget_lock_acquire_recursive>:
 800aae8:	4770      	bx	lr

0800aaea <__retarget_lock_release_recursive>:
 800aaea:	4770      	bx	lr

0800aaec <_free_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	4605      	mov	r5, r0
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	d041      	beq.n	800ab78 <_free_r+0x8c>
 800aaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf8:	1f0c      	subs	r4, r1, #4
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfb8      	it	lt
 800aafe:	18e4      	addlt	r4, r4, r3
 800ab00:	f000 f8e0 	bl	800acc4 <__malloc_lock>
 800ab04:	4a1d      	ldr	r2, [pc, #116]	@ (800ab7c <_free_r+0x90>)
 800ab06:	6813      	ldr	r3, [r2, #0]
 800ab08:	b933      	cbnz	r3, 800ab18 <_free_r+0x2c>
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	6014      	str	r4, [r2, #0]
 800ab0e:	4628      	mov	r0, r5
 800ab10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab14:	f000 b8dc 	b.w	800acd0 <__malloc_unlock>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d908      	bls.n	800ab2e <_free_r+0x42>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf01      	itttt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	1809      	addeq	r1, r1, r0
 800ab2a:	6021      	streq	r1, [r4, #0]
 800ab2c:	e7ed      	b.n	800ab0a <_free_r+0x1e>
 800ab2e:	461a      	mov	r2, r3
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	b10b      	cbz	r3, 800ab38 <_free_r+0x4c>
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	d9fa      	bls.n	800ab2e <_free_r+0x42>
 800ab38:	6811      	ldr	r1, [r2, #0]
 800ab3a:	1850      	adds	r0, r2, r1
 800ab3c:	42a0      	cmp	r0, r4
 800ab3e:	d10b      	bne.n	800ab58 <_free_r+0x6c>
 800ab40:	6820      	ldr	r0, [r4, #0]
 800ab42:	4401      	add	r1, r0
 800ab44:	1850      	adds	r0, r2, r1
 800ab46:	4283      	cmp	r3, r0
 800ab48:	6011      	str	r1, [r2, #0]
 800ab4a:	d1e0      	bne.n	800ab0e <_free_r+0x22>
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	6053      	str	r3, [r2, #4]
 800ab52:	4408      	add	r0, r1
 800ab54:	6010      	str	r0, [r2, #0]
 800ab56:	e7da      	b.n	800ab0e <_free_r+0x22>
 800ab58:	d902      	bls.n	800ab60 <_free_r+0x74>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	e7d6      	b.n	800ab0e <_free_r+0x22>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	1821      	adds	r1, r4, r0
 800ab64:	428b      	cmp	r3, r1
 800ab66:	bf04      	itt	eq
 800ab68:	6819      	ldreq	r1, [r3, #0]
 800ab6a:	685b      	ldreq	r3, [r3, #4]
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	bf04      	itt	eq
 800ab70:	1809      	addeq	r1, r1, r0
 800ab72:	6021      	streq	r1, [r4, #0]
 800ab74:	6054      	str	r4, [r2, #4]
 800ab76:	e7ca      	b.n	800ab0e <_free_r+0x22>
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20007678 	.word	0x20007678

0800ab80 <sbrk_aligned>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	4e0f      	ldr	r6, [pc, #60]	@ (800abc0 <sbrk_aligned+0x40>)
 800ab84:	460c      	mov	r4, r1
 800ab86:	6831      	ldr	r1, [r6, #0]
 800ab88:	4605      	mov	r5, r0
 800ab8a:	b911      	cbnz	r1, 800ab92 <sbrk_aligned+0x12>
 800ab8c:	f000 fba6 	bl	800b2dc <_sbrk_r>
 800ab90:	6030      	str	r0, [r6, #0]
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 fba1 	bl	800b2dc <_sbrk_r>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	d103      	bne.n	800aba6 <sbrk_aligned+0x26>
 800ab9e:	f04f 34ff 	mov.w	r4, #4294967295
 800aba2:	4620      	mov	r0, r4
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
 800aba6:	1cc4      	adds	r4, r0, #3
 800aba8:	f024 0403 	bic.w	r4, r4, #3
 800abac:	42a0      	cmp	r0, r4
 800abae:	d0f8      	beq.n	800aba2 <sbrk_aligned+0x22>
 800abb0:	1a21      	subs	r1, r4, r0
 800abb2:	4628      	mov	r0, r5
 800abb4:	f000 fb92 	bl	800b2dc <_sbrk_r>
 800abb8:	3001      	adds	r0, #1
 800abba:	d1f2      	bne.n	800aba2 <sbrk_aligned+0x22>
 800abbc:	e7ef      	b.n	800ab9e <sbrk_aligned+0x1e>
 800abbe:	bf00      	nop
 800abc0:	20007674 	.word	0x20007674

0800abc4 <_malloc_r>:
 800abc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc8:	1ccd      	adds	r5, r1, #3
 800abca:	f025 0503 	bic.w	r5, r5, #3
 800abce:	3508      	adds	r5, #8
 800abd0:	2d0c      	cmp	r5, #12
 800abd2:	bf38      	it	cc
 800abd4:	250c      	movcc	r5, #12
 800abd6:	2d00      	cmp	r5, #0
 800abd8:	4606      	mov	r6, r0
 800abda:	db01      	blt.n	800abe0 <_malloc_r+0x1c>
 800abdc:	42a9      	cmp	r1, r5
 800abde:	d904      	bls.n	800abea <_malloc_r+0x26>
 800abe0:	230c      	movs	r3, #12
 800abe2:	6033      	str	r3, [r6, #0]
 800abe4:	2000      	movs	r0, #0
 800abe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acc0 <_malloc_r+0xfc>
 800abee:	f000 f869 	bl	800acc4 <__malloc_lock>
 800abf2:	f8d8 3000 	ldr.w	r3, [r8]
 800abf6:	461c      	mov	r4, r3
 800abf8:	bb44      	cbnz	r4, 800ac4c <_malloc_r+0x88>
 800abfa:	4629      	mov	r1, r5
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ffbf 	bl	800ab80 <sbrk_aligned>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	4604      	mov	r4, r0
 800ac06:	d158      	bne.n	800acba <_malloc_r+0xf6>
 800ac08:	f8d8 4000 	ldr.w	r4, [r8]
 800ac0c:	4627      	mov	r7, r4
 800ac0e:	2f00      	cmp	r7, #0
 800ac10:	d143      	bne.n	800ac9a <_malloc_r+0xd6>
 800ac12:	2c00      	cmp	r4, #0
 800ac14:	d04b      	beq.n	800acae <_malloc_r+0xea>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	4639      	mov	r1, r7
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	eb04 0903 	add.w	r9, r4, r3
 800ac20:	f000 fb5c 	bl	800b2dc <_sbrk_r>
 800ac24:	4581      	cmp	r9, r0
 800ac26:	d142      	bne.n	800acae <_malloc_r+0xea>
 800ac28:	6821      	ldr	r1, [r4, #0]
 800ac2a:	1a6d      	subs	r5, r5, r1
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f7ff ffa6 	bl	800ab80 <sbrk_aligned>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d03a      	beq.n	800acae <_malloc_r+0xea>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	442b      	add	r3, r5
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	bb62      	cbnz	r2, 800aca0 <_malloc_r+0xdc>
 800ac46:	f8c8 7000 	str.w	r7, [r8]
 800ac4a:	e00f      	b.n	800ac6c <_malloc_r+0xa8>
 800ac4c:	6822      	ldr	r2, [r4, #0]
 800ac4e:	1b52      	subs	r2, r2, r5
 800ac50:	d420      	bmi.n	800ac94 <_malloc_r+0xd0>
 800ac52:	2a0b      	cmp	r2, #11
 800ac54:	d917      	bls.n	800ac86 <_malloc_r+0xc2>
 800ac56:	1961      	adds	r1, r4, r5
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	6025      	str	r5, [r4, #0]
 800ac5c:	bf18      	it	ne
 800ac5e:	6059      	strne	r1, [r3, #4]
 800ac60:	6863      	ldr	r3, [r4, #4]
 800ac62:	bf08      	it	eq
 800ac64:	f8c8 1000 	streq.w	r1, [r8]
 800ac68:	5162      	str	r2, [r4, r5]
 800ac6a:	604b      	str	r3, [r1, #4]
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f000 f82f 	bl	800acd0 <__malloc_unlock>
 800ac72:	f104 000b 	add.w	r0, r4, #11
 800ac76:	1d23      	adds	r3, r4, #4
 800ac78:	f020 0007 	bic.w	r0, r0, #7
 800ac7c:	1ac2      	subs	r2, r0, r3
 800ac7e:	bf1c      	itt	ne
 800ac80:	1a1b      	subne	r3, r3, r0
 800ac82:	50a3      	strne	r3, [r4, r2]
 800ac84:	e7af      	b.n	800abe6 <_malloc_r+0x22>
 800ac86:	6862      	ldr	r2, [r4, #4]
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	bf0c      	ite	eq
 800ac8c:	f8c8 2000 	streq.w	r2, [r8]
 800ac90:	605a      	strne	r2, [r3, #4]
 800ac92:	e7eb      	b.n	800ac6c <_malloc_r+0xa8>
 800ac94:	4623      	mov	r3, r4
 800ac96:	6864      	ldr	r4, [r4, #4]
 800ac98:	e7ae      	b.n	800abf8 <_malloc_r+0x34>
 800ac9a:	463c      	mov	r4, r7
 800ac9c:	687f      	ldr	r7, [r7, #4]
 800ac9e:	e7b6      	b.n	800ac0e <_malloc_r+0x4a>
 800aca0:	461a      	mov	r2, r3
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	d1fb      	bne.n	800aca0 <_malloc_r+0xdc>
 800aca8:	2300      	movs	r3, #0
 800acaa:	6053      	str	r3, [r2, #4]
 800acac:	e7de      	b.n	800ac6c <_malloc_r+0xa8>
 800acae:	230c      	movs	r3, #12
 800acb0:	6033      	str	r3, [r6, #0]
 800acb2:	4630      	mov	r0, r6
 800acb4:	f000 f80c 	bl	800acd0 <__malloc_unlock>
 800acb8:	e794      	b.n	800abe4 <_malloc_r+0x20>
 800acba:	6005      	str	r5, [r0, #0]
 800acbc:	e7d6      	b.n	800ac6c <_malloc_r+0xa8>
 800acbe:	bf00      	nop
 800acc0:	20007678 	.word	0x20007678

0800acc4 <__malloc_lock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	@ (800accc <__malloc_lock+0x8>)
 800acc6:	f7ff bf0f 	b.w	800aae8 <__retarget_lock_acquire_recursive>
 800acca:	bf00      	nop
 800accc:	20007670 	.word	0x20007670

0800acd0 <__malloc_unlock>:
 800acd0:	4801      	ldr	r0, [pc, #4]	@ (800acd8 <__malloc_unlock+0x8>)
 800acd2:	f7ff bf0a 	b.w	800aaea <__retarget_lock_release_recursive>
 800acd6:	bf00      	nop
 800acd8:	20007670 	.word	0x20007670

0800acdc <__ssputs_r>:
 800acdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace0:	688e      	ldr	r6, [r1, #8]
 800ace2:	461f      	mov	r7, r3
 800ace4:	42be      	cmp	r6, r7
 800ace6:	680b      	ldr	r3, [r1, #0]
 800ace8:	4682      	mov	sl, r0
 800acea:	460c      	mov	r4, r1
 800acec:	4690      	mov	r8, r2
 800acee:	d82d      	bhi.n	800ad4c <__ssputs_r+0x70>
 800acf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acf8:	d026      	beq.n	800ad48 <__ssputs_r+0x6c>
 800acfa:	6965      	ldr	r5, [r4, #20]
 800acfc:	6909      	ldr	r1, [r1, #16]
 800acfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad02:	eba3 0901 	sub.w	r9, r3, r1
 800ad06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad0a:	1c7b      	adds	r3, r7, #1
 800ad0c:	444b      	add	r3, r9
 800ad0e:	106d      	asrs	r5, r5, #1
 800ad10:	429d      	cmp	r5, r3
 800ad12:	bf38      	it	cc
 800ad14:	461d      	movcc	r5, r3
 800ad16:	0553      	lsls	r3, r2, #21
 800ad18:	d527      	bpl.n	800ad6a <__ssputs_r+0x8e>
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	f7ff ff52 	bl	800abc4 <_malloc_r>
 800ad20:	4606      	mov	r6, r0
 800ad22:	b360      	cbz	r0, 800ad7e <__ssputs_r+0xa2>
 800ad24:	6921      	ldr	r1, [r4, #16]
 800ad26:	464a      	mov	r2, r9
 800ad28:	f000 fae8 	bl	800b2fc <memcpy>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	6126      	str	r6, [r4, #16]
 800ad3a:	6165      	str	r5, [r4, #20]
 800ad3c:	444e      	add	r6, r9
 800ad3e:	eba5 0509 	sub.w	r5, r5, r9
 800ad42:	6026      	str	r6, [r4, #0]
 800ad44:	60a5      	str	r5, [r4, #8]
 800ad46:	463e      	mov	r6, r7
 800ad48:	42be      	cmp	r6, r7
 800ad4a:	d900      	bls.n	800ad4e <__ssputs_r+0x72>
 800ad4c:	463e      	mov	r6, r7
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	4632      	mov	r2, r6
 800ad52:	4641      	mov	r1, r8
 800ad54:	f000 faa8 	bl	800b2a8 <memmove>
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	1b9b      	subs	r3, r3, r6
 800ad5c:	60a3      	str	r3, [r4, #8]
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	4433      	add	r3, r6
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	2000      	movs	r0, #0
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	f000 fad4 	bl	800b318 <_realloc_r>
 800ad70:	4606      	mov	r6, r0
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d1e0      	bne.n	800ad38 <__ssputs_r+0x5c>
 800ad76:	6921      	ldr	r1, [r4, #16]
 800ad78:	4650      	mov	r0, sl
 800ad7a:	f7ff feb7 	bl	800aaec <_free_r>
 800ad7e:	230c      	movs	r3, #12
 800ad80:	f8ca 3000 	str.w	r3, [sl]
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	e7e9      	b.n	800ad66 <__ssputs_r+0x8a>
	...

0800ad94 <_svfiprintf_r>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4698      	mov	r8, r3
 800ad9a:	898b      	ldrh	r3, [r1, #12]
 800ad9c:	061b      	lsls	r3, r3, #24
 800ad9e:	b09d      	sub	sp, #116	@ 0x74
 800ada0:	4607      	mov	r7, r0
 800ada2:	460d      	mov	r5, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	d510      	bpl.n	800adca <_svfiprintf_r+0x36>
 800ada8:	690b      	ldr	r3, [r1, #16]
 800adaa:	b973      	cbnz	r3, 800adca <_svfiprintf_r+0x36>
 800adac:	2140      	movs	r1, #64	@ 0x40
 800adae:	f7ff ff09 	bl	800abc4 <_malloc_r>
 800adb2:	6028      	str	r0, [r5, #0]
 800adb4:	6128      	str	r0, [r5, #16]
 800adb6:	b930      	cbnz	r0, 800adc6 <_svfiprintf_r+0x32>
 800adb8:	230c      	movs	r3, #12
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	b01d      	add	sp, #116	@ 0x74
 800adc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc6:	2340      	movs	r3, #64	@ 0x40
 800adc8:	616b      	str	r3, [r5, #20]
 800adca:	2300      	movs	r3, #0
 800adcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800adce:	2320      	movs	r3, #32
 800add0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800add4:	f8cd 800c 	str.w	r8, [sp, #12]
 800add8:	2330      	movs	r3, #48	@ 0x30
 800adda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af78 <_svfiprintf_r+0x1e4>
 800adde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ade2:	f04f 0901 	mov.w	r9, #1
 800ade6:	4623      	mov	r3, r4
 800ade8:	469a      	mov	sl, r3
 800adea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adee:	b10a      	cbz	r2, 800adf4 <_svfiprintf_r+0x60>
 800adf0:	2a25      	cmp	r2, #37	@ 0x25
 800adf2:	d1f9      	bne.n	800ade8 <_svfiprintf_r+0x54>
 800adf4:	ebba 0b04 	subs.w	fp, sl, r4
 800adf8:	d00b      	beq.n	800ae12 <_svfiprintf_r+0x7e>
 800adfa:	465b      	mov	r3, fp
 800adfc:	4622      	mov	r2, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff ff6b 	bl	800acdc <__ssputs_r>
 800ae06:	3001      	adds	r0, #1
 800ae08:	f000 80a7 	beq.w	800af5a <_svfiprintf_r+0x1c6>
 800ae0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae0e:	445a      	add	r2, fp
 800ae10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae12:	f89a 3000 	ldrb.w	r3, [sl]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 809f 	beq.w	800af5a <_svfiprintf_r+0x1c6>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae26:	f10a 0a01 	add.w	sl, sl, #1
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	9307      	str	r3, [sp, #28]
 800ae2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae34:	4654      	mov	r4, sl
 800ae36:	2205      	movs	r2, #5
 800ae38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3c:	484e      	ldr	r0, [pc, #312]	@ (800af78 <_svfiprintf_r+0x1e4>)
 800ae3e:	f7f5 fa2f 	bl	80002a0 <memchr>
 800ae42:	9a04      	ldr	r2, [sp, #16]
 800ae44:	b9d8      	cbnz	r0, 800ae7e <_svfiprintf_r+0xea>
 800ae46:	06d0      	lsls	r0, r2, #27
 800ae48:	bf44      	itt	mi
 800ae4a:	2320      	movmi	r3, #32
 800ae4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae50:	0711      	lsls	r1, r2, #28
 800ae52:	bf44      	itt	mi
 800ae54:	232b      	movmi	r3, #43	@ 0x2b
 800ae56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae60:	d015      	beq.n	800ae8e <_svfiprintf_r+0xfa>
 800ae62:	9a07      	ldr	r2, [sp, #28]
 800ae64:	4654      	mov	r4, sl
 800ae66:	2000      	movs	r0, #0
 800ae68:	f04f 0c0a 	mov.w	ip, #10
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae72:	3b30      	subs	r3, #48	@ 0x30
 800ae74:	2b09      	cmp	r3, #9
 800ae76:	d94b      	bls.n	800af10 <_svfiprintf_r+0x17c>
 800ae78:	b1b0      	cbz	r0, 800aea8 <_svfiprintf_r+0x114>
 800ae7a:	9207      	str	r2, [sp, #28]
 800ae7c:	e014      	b.n	800aea8 <_svfiprintf_r+0x114>
 800ae7e:	eba0 0308 	sub.w	r3, r0, r8
 800ae82:	fa09 f303 	lsl.w	r3, r9, r3
 800ae86:	4313      	orrs	r3, r2
 800ae88:	9304      	str	r3, [sp, #16]
 800ae8a:	46a2      	mov	sl, r4
 800ae8c:	e7d2      	b.n	800ae34 <_svfiprintf_r+0xa0>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	1d19      	adds	r1, r3, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9103      	str	r1, [sp, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bfbb      	ittet	lt
 800ae9a:	425b      	neglt	r3, r3
 800ae9c:	f042 0202 	orrlt.w	r2, r2, #2
 800aea0:	9307      	strge	r3, [sp, #28]
 800aea2:	9307      	strlt	r3, [sp, #28]
 800aea4:	bfb8      	it	lt
 800aea6:	9204      	strlt	r2, [sp, #16]
 800aea8:	7823      	ldrb	r3, [r4, #0]
 800aeaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeac:	d10a      	bne.n	800aec4 <_svfiprintf_r+0x130>
 800aeae:	7863      	ldrb	r3, [r4, #1]
 800aeb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb2:	d132      	bne.n	800af1a <_svfiprintf_r+0x186>
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	1d1a      	adds	r2, r3, #4
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	9203      	str	r2, [sp, #12]
 800aebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aec0:	3402      	adds	r4, #2
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af88 <_svfiprintf_r+0x1f4>
 800aec8:	7821      	ldrb	r1, [r4, #0]
 800aeca:	2203      	movs	r2, #3
 800aecc:	4650      	mov	r0, sl
 800aece:	f7f5 f9e7 	bl	80002a0 <memchr>
 800aed2:	b138      	cbz	r0, 800aee4 <_svfiprintf_r+0x150>
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	eba0 000a 	sub.w	r0, r0, sl
 800aeda:	2240      	movs	r2, #64	@ 0x40
 800aedc:	4082      	lsls	r2, r0
 800aede:	4313      	orrs	r3, r2
 800aee0:	3401      	adds	r4, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee8:	4824      	ldr	r0, [pc, #144]	@ (800af7c <_svfiprintf_r+0x1e8>)
 800aeea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeee:	2206      	movs	r2, #6
 800aef0:	f7f5 f9d6 	bl	80002a0 <memchr>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d036      	beq.n	800af66 <_svfiprintf_r+0x1d2>
 800aef8:	4b21      	ldr	r3, [pc, #132]	@ (800af80 <_svfiprintf_r+0x1ec>)
 800aefa:	bb1b      	cbnz	r3, 800af44 <_svfiprintf_r+0x1b0>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	3307      	adds	r3, #7
 800af00:	f023 0307 	bic.w	r3, r3, #7
 800af04:	3308      	adds	r3, #8
 800af06:	9303      	str	r3, [sp, #12]
 800af08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0a:	4433      	add	r3, r6
 800af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0e:	e76a      	b.n	800ade6 <_svfiprintf_r+0x52>
 800af10:	fb0c 3202 	mla	r2, ip, r2, r3
 800af14:	460c      	mov	r4, r1
 800af16:	2001      	movs	r0, #1
 800af18:	e7a8      	b.n	800ae6c <_svfiprintf_r+0xd8>
 800af1a:	2300      	movs	r3, #0
 800af1c:	3401      	adds	r4, #1
 800af1e:	9305      	str	r3, [sp, #20]
 800af20:	4619      	mov	r1, r3
 800af22:	f04f 0c0a 	mov.w	ip, #10
 800af26:	4620      	mov	r0, r4
 800af28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2c:	3a30      	subs	r2, #48	@ 0x30
 800af2e:	2a09      	cmp	r2, #9
 800af30:	d903      	bls.n	800af3a <_svfiprintf_r+0x1a6>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0c6      	beq.n	800aec4 <_svfiprintf_r+0x130>
 800af36:	9105      	str	r1, [sp, #20]
 800af38:	e7c4      	b.n	800aec4 <_svfiprintf_r+0x130>
 800af3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af3e:	4604      	mov	r4, r0
 800af40:	2301      	movs	r3, #1
 800af42:	e7f0      	b.n	800af26 <_svfiprintf_r+0x192>
 800af44:	ab03      	add	r3, sp, #12
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	462a      	mov	r2, r5
 800af4a:	4b0e      	ldr	r3, [pc, #56]	@ (800af84 <_svfiprintf_r+0x1f0>)
 800af4c:	a904      	add	r1, sp, #16
 800af4e:	4638      	mov	r0, r7
 800af50:	f3af 8000 	nop.w
 800af54:	1c42      	adds	r2, r0, #1
 800af56:	4606      	mov	r6, r0
 800af58:	d1d6      	bne.n	800af08 <_svfiprintf_r+0x174>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	065b      	lsls	r3, r3, #25
 800af5e:	f53f af2d 	bmi.w	800adbc <_svfiprintf_r+0x28>
 800af62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af64:	e72c      	b.n	800adc0 <_svfiprintf_r+0x2c>
 800af66:	ab03      	add	r3, sp, #12
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	462a      	mov	r2, r5
 800af6c:	4b05      	ldr	r3, [pc, #20]	@ (800af84 <_svfiprintf_r+0x1f0>)
 800af6e:	a904      	add	r1, sp, #16
 800af70:	4638      	mov	r0, r7
 800af72:	f000 f879 	bl	800b068 <_printf_i>
 800af76:	e7ed      	b.n	800af54 <_svfiprintf_r+0x1c0>
 800af78:	0801fcdc 	.word	0x0801fcdc
 800af7c:	0801fce6 	.word	0x0801fce6
 800af80:	00000000 	.word	0x00000000
 800af84:	0800acdd 	.word	0x0800acdd
 800af88:	0801fce2 	.word	0x0801fce2

0800af8c <_printf_common>:
 800af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af90:	4616      	mov	r6, r2
 800af92:	4698      	mov	r8, r3
 800af94:	688a      	ldr	r2, [r1, #8]
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af9c:	4293      	cmp	r3, r2
 800af9e:	bfb8      	it	lt
 800afa0:	4613      	movlt	r3, r2
 800afa2:	6033      	str	r3, [r6, #0]
 800afa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b10a      	cbz	r2, 800afb2 <_printf_common+0x26>
 800afae:	3301      	adds	r3, #1
 800afb0:	6033      	str	r3, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	0699      	lsls	r1, r3, #26
 800afb6:	bf42      	ittt	mi
 800afb8:	6833      	ldrmi	r3, [r6, #0]
 800afba:	3302      	addmi	r3, #2
 800afbc:	6033      	strmi	r3, [r6, #0]
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	f015 0506 	ands.w	r5, r5, #6
 800afc4:	d106      	bne.n	800afd4 <_printf_common+0x48>
 800afc6:	f104 0a19 	add.w	sl, r4, #25
 800afca:	68e3      	ldr	r3, [r4, #12]
 800afcc:	6832      	ldr	r2, [r6, #0]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	42ab      	cmp	r3, r5
 800afd2:	dc26      	bgt.n	800b022 <_printf_common+0x96>
 800afd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afd8:	6822      	ldr	r2, [r4, #0]
 800afda:	3b00      	subs	r3, #0
 800afdc:	bf18      	it	ne
 800afde:	2301      	movne	r3, #1
 800afe0:	0692      	lsls	r2, r2, #26
 800afe2:	d42b      	bmi.n	800b03c <_printf_common+0xb0>
 800afe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afe8:	4641      	mov	r1, r8
 800afea:	4638      	mov	r0, r7
 800afec:	47c8      	blx	r9
 800afee:	3001      	adds	r0, #1
 800aff0:	d01e      	beq.n	800b030 <_printf_common+0xa4>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	f003 0306 	and.w	r3, r3, #6
 800affa:	2b04      	cmp	r3, #4
 800affc:	bf02      	ittt	eq
 800affe:	68e5      	ldreq	r5, [r4, #12]
 800b000:	6833      	ldreq	r3, [r6, #0]
 800b002:	1aed      	subeq	r5, r5, r3
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	bf0c      	ite	eq
 800b008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b00c:	2500      	movne	r5, #0
 800b00e:	4293      	cmp	r3, r2
 800b010:	bfc4      	itt	gt
 800b012:	1a9b      	subgt	r3, r3, r2
 800b014:	18ed      	addgt	r5, r5, r3
 800b016:	2600      	movs	r6, #0
 800b018:	341a      	adds	r4, #26
 800b01a:	42b5      	cmp	r5, r6
 800b01c:	d11a      	bne.n	800b054 <_printf_common+0xc8>
 800b01e:	2000      	movs	r0, #0
 800b020:	e008      	b.n	800b034 <_printf_common+0xa8>
 800b022:	2301      	movs	r3, #1
 800b024:	4652      	mov	r2, sl
 800b026:	4641      	mov	r1, r8
 800b028:	4638      	mov	r0, r7
 800b02a:	47c8      	blx	r9
 800b02c:	3001      	adds	r0, #1
 800b02e:	d103      	bne.n	800b038 <_printf_common+0xac>
 800b030:	f04f 30ff 	mov.w	r0, #4294967295
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b038:	3501      	adds	r5, #1
 800b03a:	e7c6      	b.n	800afca <_printf_common+0x3e>
 800b03c:	18e1      	adds	r1, r4, r3
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	2030      	movs	r0, #48	@ 0x30
 800b042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b046:	4422      	add	r2, r4
 800b048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b04c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b050:	3302      	adds	r3, #2
 800b052:	e7c7      	b.n	800afe4 <_printf_common+0x58>
 800b054:	2301      	movs	r3, #1
 800b056:	4622      	mov	r2, r4
 800b058:	4641      	mov	r1, r8
 800b05a:	4638      	mov	r0, r7
 800b05c:	47c8      	blx	r9
 800b05e:	3001      	adds	r0, #1
 800b060:	d0e6      	beq.n	800b030 <_printf_common+0xa4>
 800b062:	3601      	adds	r6, #1
 800b064:	e7d9      	b.n	800b01a <_printf_common+0x8e>
	...

0800b068 <_printf_i>:
 800b068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b06c:	7e0f      	ldrb	r7, [r1, #24]
 800b06e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b070:	2f78      	cmp	r7, #120	@ 0x78
 800b072:	4691      	mov	r9, r2
 800b074:	4680      	mov	r8, r0
 800b076:	460c      	mov	r4, r1
 800b078:	469a      	mov	sl, r3
 800b07a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b07e:	d807      	bhi.n	800b090 <_printf_i+0x28>
 800b080:	2f62      	cmp	r7, #98	@ 0x62
 800b082:	d80a      	bhi.n	800b09a <_printf_i+0x32>
 800b084:	2f00      	cmp	r7, #0
 800b086:	f000 80d2 	beq.w	800b22e <_printf_i+0x1c6>
 800b08a:	2f58      	cmp	r7, #88	@ 0x58
 800b08c:	f000 80b9 	beq.w	800b202 <_printf_i+0x19a>
 800b090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b098:	e03a      	b.n	800b110 <_printf_i+0xa8>
 800b09a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d8f6      	bhi.n	800b090 <_printf_i+0x28>
 800b0a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0a8 <_printf_i+0x40>)
 800b0a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0a8:	0800b101 	.word	0x0800b101
 800b0ac:	0800b115 	.word	0x0800b115
 800b0b0:	0800b091 	.word	0x0800b091
 800b0b4:	0800b091 	.word	0x0800b091
 800b0b8:	0800b091 	.word	0x0800b091
 800b0bc:	0800b091 	.word	0x0800b091
 800b0c0:	0800b115 	.word	0x0800b115
 800b0c4:	0800b091 	.word	0x0800b091
 800b0c8:	0800b091 	.word	0x0800b091
 800b0cc:	0800b091 	.word	0x0800b091
 800b0d0:	0800b091 	.word	0x0800b091
 800b0d4:	0800b215 	.word	0x0800b215
 800b0d8:	0800b13f 	.word	0x0800b13f
 800b0dc:	0800b1cf 	.word	0x0800b1cf
 800b0e0:	0800b091 	.word	0x0800b091
 800b0e4:	0800b091 	.word	0x0800b091
 800b0e8:	0800b237 	.word	0x0800b237
 800b0ec:	0800b091 	.word	0x0800b091
 800b0f0:	0800b13f 	.word	0x0800b13f
 800b0f4:	0800b091 	.word	0x0800b091
 800b0f8:	0800b091 	.word	0x0800b091
 800b0fc:	0800b1d7 	.word	0x0800b1d7
 800b100:	6833      	ldr	r3, [r6, #0]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6032      	str	r2, [r6, #0]
 800b108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b10c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b110:	2301      	movs	r3, #1
 800b112:	e09d      	b.n	800b250 <_printf_i+0x1e8>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	6820      	ldr	r0, [r4, #0]
 800b118:	1d19      	adds	r1, r3, #4
 800b11a:	6031      	str	r1, [r6, #0]
 800b11c:	0606      	lsls	r6, r0, #24
 800b11e:	d501      	bpl.n	800b124 <_printf_i+0xbc>
 800b120:	681d      	ldr	r5, [r3, #0]
 800b122:	e003      	b.n	800b12c <_printf_i+0xc4>
 800b124:	0645      	lsls	r5, r0, #25
 800b126:	d5fb      	bpl.n	800b120 <_printf_i+0xb8>
 800b128:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b12c:	2d00      	cmp	r5, #0
 800b12e:	da03      	bge.n	800b138 <_printf_i+0xd0>
 800b130:	232d      	movs	r3, #45	@ 0x2d
 800b132:	426d      	negs	r5, r5
 800b134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b138:	4859      	ldr	r0, [pc, #356]	@ (800b2a0 <_printf_i+0x238>)
 800b13a:	230a      	movs	r3, #10
 800b13c:	e011      	b.n	800b162 <_printf_i+0xfa>
 800b13e:	6821      	ldr	r1, [r4, #0]
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	0608      	lsls	r0, r1, #24
 800b144:	f853 5b04 	ldr.w	r5, [r3], #4
 800b148:	d402      	bmi.n	800b150 <_printf_i+0xe8>
 800b14a:	0649      	lsls	r1, r1, #25
 800b14c:	bf48      	it	mi
 800b14e:	b2ad      	uxthmi	r5, r5
 800b150:	2f6f      	cmp	r7, #111	@ 0x6f
 800b152:	4853      	ldr	r0, [pc, #332]	@ (800b2a0 <_printf_i+0x238>)
 800b154:	6033      	str	r3, [r6, #0]
 800b156:	bf14      	ite	ne
 800b158:	230a      	movne	r3, #10
 800b15a:	2308      	moveq	r3, #8
 800b15c:	2100      	movs	r1, #0
 800b15e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b162:	6866      	ldr	r6, [r4, #4]
 800b164:	60a6      	str	r6, [r4, #8]
 800b166:	2e00      	cmp	r6, #0
 800b168:	bfa2      	ittt	ge
 800b16a:	6821      	ldrge	r1, [r4, #0]
 800b16c:	f021 0104 	bicge.w	r1, r1, #4
 800b170:	6021      	strge	r1, [r4, #0]
 800b172:	b90d      	cbnz	r5, 800b178 <_printf_i+0x110>
 800b174:	2e00      	cmp	r6, #0
 800b176:	d04b      	beq.n	800b210 <_printf_i+0x1a8>
 800b178:	4616      	mov	r6, r2
 800b17a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b17e:	fb03 5711 	mls	r7, r3, r1, r5
 800b182:	5dc7      	ldrb	r7, [r0, r7]
 800b184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b188:	462f      	mov	r7, r5
 800b18a:	42bb      	cmp	r3, r7
 800b18c:	460d      	mov	r5, r1
 800b18e:	d9f4      	bls.n	800b17a <_printf_i+0x112>
 800b190:	2b08      	cmp	r3, #8
 800b192:	d10b      	bne.n	800b1ac <_printf_i+0x144>
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	07df      	lsls	r7, r3, #31
 800b198:	d508      	bpl.n	800b1ac <_printf_i+0x144>
 800b19a:	6923      	ldr	r3, [r4, #16]
 800b19c:	6861      	ldr	r1, [r4, #4]
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	bfde      	ittt	le
 800b1a2:	2330      	movle	r3, #48	@ 0x30
 800b1a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1ac:	1b92      	subs	r2, r2, r6
 800b1ae:	6122      	str	r2, [r4, #16]
 800b1b0:	f8cd a000 	str.w	sl, [sp]
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	aa03      	add	r2, sp, #12
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4640      	mov	r0, r8
 800b1bc:	f7ff fee6 	bl	800af8c <_printf_common>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d14a      	bne.n	800b25a <_printf_i+0x1f2>
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	b004      	add	sp, #16
 800b1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	f043 0320 	orr.w	r3, r3, #32
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	4833      	ldr	r0, [pc, #204]	@ (800b2a4 <_printf_i+0x23c>)
 800b1d8:	2778      	movs	r7, #120	@ 0x78
 800b1da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	6831      	ldr	r1, [r6, #0]
 800b1e2:	061f      	lsls	r7, r3, #24
 800b1e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1e8:	d402      	bmi.n	800b1f0 <_printf_i+0x188>
 800b1ea:	065f      	lsls	r7, r3, #25
 800b1ec:	bf48      	it	mi
 800b1ee:	b2ad      	uxthmi	r5, r5
 800b1f0:	6031      	str	r1, [r6, #0]
 800b1f2:	07d9      	lsls	r1, r3, #31
 800b1f4:	bf44      	itt	mi
 800b1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1fa:	6023      	strmi	r3, [r4, #0]
 800b1fc:	b11d      	cbz	r5, 800b206 <_printf_i+0x19e>
 800b1fe:	2310      	movs	r3, #16
 800b200:	e7ac      	b.n	800b15c <_printf_i+0xf4>
 800b202:	4827      	ldr	r0, [pc, #156]	@ (800b2a0 <_printf_i+0x238>)
 800b204:	e7e9      	b.n	800b1da <_printf_i+0x172>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	f023 0320 	bic.w	r3, r3, #32
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	e7f6      	b.n	800b1fe <_printf_i+0x196>
 800b210:	4616      	mov	r6, r2
 800b212:	e7bd      	b.n	800b190 <_printf_i+0x128>
 800b214:	6833      	ldr	r3, [r6, #0]
 800b216:	6825      	ldr	r5, [r4, #0]
 800b218:	6961      	ldr	r1, [r4, #20]
 800b21a:	1d18      	adds	r0, r3, #4
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	062e      	lsls	r6, r5, #24
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	d501      	bpl.n	800b228 <_printf_i+0x1c0>
 800b224:	6019      	str	r1, [r3, #0]
 800b226:	e002      	b.n	800b22e <_printf_i+0x1c6>
 800b228:	0668      	lsls	r0, r5, #25
 800b22a:	d5fb      	bpl.n	800b224 <_printf_i+0x1bc>
 800b22c:	8019      	strh	r1, [r3, #0]
 800b22e:	2300      	movs	r3, #0
 800b230:	6123      	str	r3, [r4, #16]
 800b232:	4616      	mov	r6, r2
 800b234:	e7bc      	b.n	800b1b0 <_printf_i+0x148>
 800b236:	6833      	ldr	r3, [r6, #0]
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	6032      	str	r2, [r6, #0]
 800b23c:	681e      	ldr	r6, [r3, #0]
 800b23e:	6862      	ldr	r2, [r4, #4]
 800b240:	2100      	movs	r1, #0
 800b242:	4630      	mov	r0, r6
 800b244:	f7f5 f82c 	bl	80002a0 <memchr>
 800b248:	b108      	cbz	r0, 800b24e <_printf_i+0x1e6>
 800b24a:	1b80      	subs	r0, r0, r6
 800b24c:	6060      	str	r0, [r4, #4]
 800b24e:	6863      	ldr	r3, [r4, #4]
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	2300      	movs	r3, #0
 800b254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b258:	e7aa      	b.n	800b1b0 <_printf_i+0x148>
 800b25a:	6923      	ldr	r3, [r4, #16]
 800b25c:	4632      	mov	r2, r6
 800b25e:	4649      	mov	r1, r9
 800b260:	4640      	mov	r0, r8
 800b262:	47d0      	blx	sl
 800b264:	3001      	adds	r0, #1
 800b266:	d0ad      	beq.n	800b1c4 <_printf_i+0x15c>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	079b      	lsls	r3, r3, #30
 800b26c:	d413      	bmi.n	800b296 <_printf_i+0x22e>
 800b26e:	68e0      	ldr	r0, [r4, #12]
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	4298      	cmp	r0, r3
 800b274:	bfb8      	it	lt
 800b276:	4618      	movlt	r0, r3
 800b278:	e7a6      	b.n	800b1c8 <_printf_i+0x160>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4632      	mov	r2, r6
 800b27e:	4649      	mov	r1, r9
 800b280:	4640      	mov	r0, r8
 800b282:	47d0      	blx	sl
 800b284:	3001      	adds	r0, #1
 800b286:	d09d      	beq.n	800b1c4 <_printf_i+0x15c>
 800b288:	3501      	adds	r5, #1
 800b28a:	68e3      	ldr	r3, [r4, #12]
 800b28c:	9903      	ldr	r1, [sp, #12]
 800b28e:	1a5b      	subs	r3, r3, r1
 800b290:	42ab      	cmp	r3, r5
 800b292:	dcf2      	bgt.n	800b27a <_printf_i+0x212>
 800b294:	e7eb      	b.n	800b26e <_printf_i+0x206>
 800b296:	2500      	movs	r5, #0
 800b298:	f104 0619 	add.w	r6, r4, #25
 800b29c:	e7f5      	b.n	800b28a <_printf_i+0x222>
 800b29e:	bf00      	nop
 800b2a0:	0801fced 	.word	0x0801fced
 800b2a4:	0801fcfe 	.word	0x0801fcfe

0800b2a8 <memmove>:
 800b2a8:	4288      	cmp	r0, r1
 800b2aa:	b510      	push	{r4, lr}
 800b2ac:	eb01 0402 	add.w	r4, r1, r2
 800b2b0:	d902      	bls.n	800b2b8 <memmove+0x10>
 800b2b2:	4284      	cmp	r4, r0
 800b2b4:	4623      	mov	r3, r4
 800b2b6:	d807      	bhi.n	800b2c8 <memmove+0x20>
 800b2b8:	1e43      	subs	r3, r0, #1
 800b2ba:	42a1      	cmp	r1, r4
 800b2bc:	d008      	beq.n	800b2d0 <memmove+0x28>
 800b2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2c6:	e7f8      	b.n	800b2ba <memmove+0x12>
 800b2c8:	4402      	add	r2, r0
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	428a      	cmp	r2, r1
 800b2ce:	d100      	bne.n	800b2d2 <memmove+0x2a>
 800b2d0:	bd10      	pop	{r4, pc}
 800b2d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2da:	e7f7      	b.n	800b2cc <memmove+0x24>

0800b2dc <_sbrk_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4d06      	ldr	r5, [pc, #24]	@ (800b2f8 <_sbrk_r+0x1c>)
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	f7f7 fc84 	bl	8002bf4 <_sbrk>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_sbrk_r+0x1a>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_sbrk_r+0x1a>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	2000766c 	.word	0x2000766c

0800b2fc <memcpy>:
 800b2fc:	440a      	add	r2, r1
 800b2fe:	4291      	cmp	r1, r2
 800b300:	f100 33ff 	add.w	r3, r0, #4294967295
 800b304:	d100      	bne.n	800b308 <memcpy+0xc>
 800b306:	4770      	bx	lr
 800b308:	b510      	push	{r4, lr}
 800b30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b312:	4291      	cmp	r1, r2
 800b314:	d1f9      	bne.n	800b30a <memcpy+0xe>
 800b316:	bd10      	pop	{r4, pc}

0800b318 <_realloc_r>:
 800b318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4680      	mov	r8, r0
 800b31e:	4615      	mov	r5, r2
 800b320:	460c      	mov	r4, r1
 800b322:	b921      	cbnz	r1, 800b32e <_realloc_r+0x16>
 800b324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b328:	4611      	mov	r1, r2
 800b32a:	f7ff bc4b 	b.w	800abc4 <_malloc_r>
 800b32e:	b92a      	cbnz	r2, 800b33c <_realloc_r+0x24>
 800b330:	f7ff fbdc 	bl	800aaec <_free_r>
 800b334:	2400      	movs	r4, #0
 800b336:	4620      	mov	r0, r4
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	f000 f81a 	bl	800b374 <_malloc_usable_size_r>
 800b340:	4285      	cmp	r5, r0
 800b342:	4606      	mov	r6, r0
 800b344:	d802      	bhi.n	800b34c <_realloc_r+0x34>
 800b346:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b34a:	d8f4      	bhi.n	800b336 <_realloc_r+0x1e>
 800b34c:	4629      	mov	r1, r5
 800b34e:	4640      	mov	r0, r8
 800b350:	f7ff fc38 	bl	800abc4 <_malloc_r>
 800b354:	4607      	mov	r7, r0
 800b356:	2800      	cmp	r0, #0
 800b358:	d0ec      	beq.n	800b334 <_realloc_r+0x1c>
 800b35a:	42b5      	cmp	r5, r6
 800b35c:	462a      	mov	r2, r5
 800b35e:	4621      	mov	r1, r4
 800b360:	bf28      	it	cs
 800b362:	4632      	movcs	r2, r6
 800b364:	f7ff ffca 	bl	800b2fc <memcpy>
 800b368:	4621      	mov	r1, r4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7ff fbbe 	bl	800aaec <_free_r>
 800b370:	463c      	mov	r4, r7
 800b372:	e7e0      	b.n	800b336 <_realloc_r+0x1e>

0800b374 <_malloc_usable_size_r>:
 800b374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b378:	1f18      	subs	r0, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfbc      	itt	lt
 800b37e:	580b      	ldrlt	r3, [r1, r0]
 800b380:	18c0      	addlt	r0, r0, r3
 800b382:	4770      	bx	lr

0800b384 <cos>:
 800b384:	b530      	push	{r4, r5, lr}
 800b386:	4d20      	ldr	r5, [pc, #128]	@ (800b408 <cos+0x84>)
 800b388:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800b38c:	42ac      	cmp	r4, r5
 800b38e:	b087      	sub	sp, #28
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	d806      	bhi.n	800b3a4 <cos+0x20>
 800b396:	2200      	movs	r2, #0
 800b398:	2300      	movs	r3, #0
 800b39a:	b007      	add	sp, #28
 800b39c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3a0:	f000 b92e 	b.w	800b600 <__kernel_cos>
 800b3a4:	4d19      	ldr	r5, [pc, #100]	@ (800b40c <cos+0x88>)
 800b3a6:	42ac      	cmp	r4, r5
 800b3a8:	d903      	bls.n	800b3b2 <cos+0x2e>
 800b3aa:	f7f4 ffcd 	bl	8000348 <__aeabi_dsub>
 800b3ae:	b007      	add	sp, #28
 800b3b0:	bd30      	pop	{r4, r5, pc}
 800b3b2:	aa02      	add	r2, sp, #8
 800b3b4:	f000 fa9c 	bl	800b8f0 <__ieee754_rem_pio2>
 800b3b8:	f000 0003 	and.w	r0, r0, #3
 800b3bc:	2801      	cmp	r0, #1
 800b3be:	d009      	beq.n	800b3d4 <cos+0x50>
 800b3c0:	2802      	cmp	r0, #2
 800b3c2:	d011      	beq.n	800b3e8 <cos+0x64>
 800b3c4:	b9b8      	cbnz	r0, 800b3f6 <cos+0x72>
 800b3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ce:	f000 f917 	bl	800b600 <__kernel_cos>
 800b3d2:	e7ec      	b.n	800b3ae <cos+0x2a>
 800b3d4:	9000      	str	r0, [sp, #0]
 800b3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3de:	f000 f9cf 	bl	800b780 <__kernel_sin>
 800b3e2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800b3e6:	e7e2      	b.n	800b3ae <cos+0x2a>
 800b3e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f0:	f000 f906 	bl	800b600 <__kernel_cos>
 800b3f4:	e7f5      	b.n	800b3e2 <cos+0x5e>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b402:	f000 f9bd 	bl	800b780 <__kernel_sin>
 800b406:	e7d2      	b.n	800b3ae <cos+0x2a>
 800b408:	3fe921fb 	.word	0x3fe921fb
 800b40c:	7fefffff 	.word	0x7fefffff

0800b410 <fabs>:
 800b410:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b414:	4619      	mov	r1, r3
 800b416:	4770      	bx	lr

0800b418 <sin>:
 800b418:	b530      	push	{r4, r5, lr}
 800b41a:	4d20      	ldr	r5, [pc, #128]	@ (800b49c <sin+0x84>)
 800b41c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800b420:	42ac      	cmp	r4, r5
 800b422:	b087      	sub	sp, #28
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	d806      	bhi.n	800b438 <sin+0x20>
 800b42a:	2300      	movs	r3, #0
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	2200      	movs	r2, #0
 800b430:	2300      	movs	r3, #0
 800b432:	f000 f9a5 	bl	800b780 <__kernel_sin>
 800b436:	e004      	b.n	800b442 <sin+0x2a>
 800b438:	4d19      	ldr	r5, [pc, #100]	@ (800b4a0 <sin+0x88>)
 800b43a:	42ac      	cmp	r4, r5
 800b43c:	d903      	bls.n	800b446 <sin+0x2e>
 800b43e:	f7f4 ff83 	bl	8000348 <__aeabi_dsub>
 800b442:	b007      	add	sp, #28
 800b444:	bd30      	pop	{r4, r5, pc}
 800b446:	aa02      	add	r2, sp, #8
 800b448:	f000 fa52 	bl	800b8f0 <__ieee754_rem_pio2>
 800b44c:	f000 0003 	and.w	r0, r0, #3
 800b450:	2801      	cmp	r0, #1
 800b452:	d009      	beq.n	800b468 <sin+0x50>
 800b454:	2802      	cmp	r0, #2
 800b456:	d00e      	beq.n	800b476 <sin+0x5e>
 800b458:	b9c0      	cbnz	r0, 800b48c <sin+0x74>
 800b45a:	2301      	movs	r3, #1
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b466:	e7e4      	b.n	800b432 <sin+0x1a>
 800b468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b470:	f000 f8c6 	bl	800b600 <__kernel_cos>
 800b474:	e7e5      	b.n	800b442 <sin+0x2a>
 800b476:	2301      	movs	r3, #1
 800b478:	9300      	str	r3, [sp, #0]
 800b47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b482:	f000 f97d 	bl	800b780 <__kernel_sin>
 800b486:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800b48a:	e7da      	b.n	800b442 <sin+0x2a>
 800b48c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b490:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b494:	f000 f8b4 	bl	800b600 <__kernel_cos>
 800b498:	e7f5      	b.n	800b486 <sin+0x6e>
 800b49a:	bf00      	nop
 800b49c:	3fe921fb 	.word	0x3fe921fb
 800b4a0:	7fefffff 	.word	0x7fefffff

0800b4a4 <atan2f>:
 800b4a4:	f000 bc1a 	b.w	800bcdc <__ieee754_atan2f>

0800b4a8 <sqrtf>:
 800b4a8:	b508      	push	{r3, lr}
 800b4aa:	ed2d 8b02 	vpush	{d8}
 800b4ae:	ee08 0a10 	vmov	s16, r0
 800b4b2:	f000 f81b 	bl	800b4ec <__ieee754_sqrtf>
 800b4b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4be:	ee07 0a90 	vmov	s15, r0
 800b4c2:	d60c      	bvs.n	800b4de <sqrtf+0x36>
 800b4c4:	eddf 8a08 	vldr	s17, [pc, #32]	@ 800b4e8 <sqrtf+0x40>
 800b4c8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	d505      	bpl.n	800b4de <sqrtf+0x36>
 800b4d2:	f7ff fadf 	bl	800aa94 <__errno>
 800b4d6:	eec8 7aa8 	vdiv.f32	s15, s17, s17
 800b4da:	2321      	movs	r3, #33	@ 0x21
 800b4dc:	6003      	str	r3, [r0, #0]
 800b4de:	ecbd 8b02 	vpop	{d8}
 800b4e2:	ee17 0a90 	vmov	r0, s15
 800b4e6:	bd08      	pop	{r3, pc}
 800b4e8:	00000000 	.word	0x00000000

0800b4ec <__ieee754_sqrtf>:
 800b4ec:	ee07 0a90 	vmov	s15, r0
 800b4f0:	eef1 7ae7 	vsqrt.f32	s15, s15
 800b4f4:	ee17 0a90 	vmov	r0, s15
 800b4f8:	4770      	bx	lr
 800b4fa:	0000      	movs	r0, r0
 800b4fc:	0000      	movs	r0, r0
	...

0800b500 <floor>:
 800b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b504:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b508:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800b50c:	2e13      	cmp	r6, #19
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	460c      	mov	r4, r1
 800b514:	4605      	mov	r5, r0
 800b516:	4680      	mov	r8, r0
 800b518:	dc35      	bgt.n	800b586 <floor+0x86>
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	da17      	bge.n	800b54e <floor+0x4e>
 800b51e:	a334      	add	r3, pc, #208	@ (adr r3, 800b5f0 <floor+0xf0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 ff12 	bl	800034c <__adddf3>
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	f7f5 fb54 	bl	8000bd8 <__aeabi_dcmpgt>
 800b530:	b150      	cbz	r0, 800b548 <floor+0x48>
 800b532:	2c00      	cmp	r4, #0
 800b534:	da57      	bge.n	800b5e6 <floor+0xe6>
 800b536:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b53a:	432c      	orrs	r4, r5
 800b53c:	2500      	movs	r5, #0
 800b53e:	42ac      	cmp	r4, r5
 800b540:	4c2d      	ldr	r4, [pc, #180]	@ (800b5f8 <floor+0xf8>)
 800b542:	bf08      	it	eq
 800b544:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b548:	4623      	mov	r3, r4
 800b54a:	462a      	mov	r2, r5
 800b54c:	e024      	b.n	800b598 <floor+0x98>
 800b54e:	4f2b      	ldr	r7, [pc, #172]	@ (800b5fc <floor+0xfc>)
 800b550:	4137      	asrs	r7, r6
 800b552:	ea01 0c07 	and.w	ip, r1, r7
 800b556:	ea5c 0c00 	orrs.w	ip, ip, r0
 800b55a:	d01d      	beq.n	800b598 <floor+0x98>
 800b55c:	a324      	add	r3, pc, #144	@ (adr r3, 800b5f0 <floor+0xf0>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 fef3 	bl	800034c <__adddf3>
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	f7f5 fb35 	bl	8000bd8 <__aeabi_dcmpgt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d0ea      	beq.n	800b548 <floor+0x48>
 800b572:	2c00      	cmp	r4, #0
 800b574:	bfbe      	ittt	lt
 800b576:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b57a:	4133      	asrlt	r3, r6
 800b57c:	18e4      	addlt	r4, r4, r3
 800b57e:	ea24 0407 	bic.w	r4, r4, r7
 800b582:	2500      	movs	r5, #0
 800b584:	e7e0      	b.n	800b548 <floor+0x48>
 800b586:	2e33      	cmp	r6, #51	@ 0x33
 800b588:	dd0a      	ble.n	800b5a0 <floor+0xa0>
 800b58a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b58e:	d103      	bne.n	800b598 <floor+0x98>
 800b590:	f7f4 fedc 	bl	800034c <__adddf3>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4610      	mov	r0, r2
 800b59a:	4619      	mov	r1, r3
 800b59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800b5a4:	f04f 3cff 	mov.w	ip, #4294967295
 800b5a8:	fa2c f707 	lsr.w	r7, ip, r7
 800b5ac:	4207      	tst	r7, r0
 800b5ae:	d0f3      	beq.n	800b598 <floor+0x98>
 800b5b0:	a30f      	add	r3, pc, #60	@ (adr r3, 800b5f0 <floor+0xf0>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f4 fec9 	bl	800034c <__adddf3>
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f7f5 fb0b 	bl	8000bd8 <__aeabi_dcmpgt>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0c0      	beq.n	800b548 <floor+0x48>
 800b5c6:	2c00      	cmp	r4, #0
 800b5c8:	da0a      	bge.n	800b5e0 <floor+0xe0>
 800b5ca:	2e14      	cmp	r6, #20
 800b5cc:	d101      	bne.n	800b5d2 <floor+0xd2>
 800b5ce:	3401      	adds	r4, #1
 800b5d0:	e006      	b.n	800b5e0 <floor+0xe0>
 800b5d2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	40b3      	lsls	r3, r6
 800b5da:	441d      	add	r5, r3
 800b5dc:	4545      	cmp	r5, r8
 800b5de:	d3f6      	bcc.n	800b5ce <floor+0xce>
 800b5e0:	ea25 0507 	bic.w	r5, r5, r7
 800b5e4:	e7b0      	b.n	800b548 <floor+0x48>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	462c      	mov	r4, r5
 800b5ea:	e7ad      	b.n	800b548 <floor+0x48>
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	8800759c 	.word	0x8800759c
 800b5f4:	7e37e43c 	.word	0x7e37e43c
 800b5f8:	bff00000 	.word	0xbff00000
 800b5fc:	000fffff 	.word	0x000fffff

0800b600 <__kernel_cos>:
 800b600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b608:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800b60c:	e9cd 2300 	strd	r2, r3, [sp]
 800b610:	4680      	mov	r8, r0
 800b612:	4689      	mov	r9, r1
 800b614:	d204      	bcs.n	800b620 <__kernel_cos+0x20>
 800b616:	f7f5 fae9 	bl	8000bec <__aeabi_d2iz>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f000 8086 	beq.w	800b72c <__kernel_cos+0x12c>
 800b620:	4642      	mov	r2, r8
 800b622:	464b      	mov	r3, r9
 800b624:	4640      	mov	r0, r8
 800b626:	4649      	mov	r1, r9
 800b628:	f7f5 f846 	bl	80006b8 <__aeabi_dmul>
 800b62c:	4b4e      	ldr	r3, [pc, #312]	@ (800b768 <__kernel_cos+0x168>)
 800b62e:	2200      	movs	r2, #0
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	f7f5 f840 	bl	80006b8 <__aeabi_dmul>
 800b638:	a33f      	add	r3, pc, #252	@ (adr r3, 800b738 <__kernel_cos+0x138>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	4682      	mov	sl, r0
 800b640:	468b      	mov	fp, r1
 800b642:	4620      	mov	r0, r4
 800b644:	4629      	mov	r1, r5
 800b646:	f7f5 f837 	bl	80006b8 <__aeabi_dmul>
 800b64a:	a33d      	add	r3, pc, #244	@ (adr r3, 800b740 <__kernel_cos+0x140>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fe7c 	bl	800034c <__adddf3>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f5 f82e 	bl	80006b8 <__aeabi_dmul>
 800b65c:	a33a      	add	r3, pc, #232	@ (adr r3, 800b748 <__kernel_cos+0x148>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fe71 	bl	8000348 <__aeabi_dsub>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f5 f825 	bl	80006b8 <__aeabi_dmul>
 800b66e:	a338      	add	r3, pc, #224	@ (adr r3, 800b750 <__kernel_cos+0x150>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fe6a 	bl	800034c <__adddf3>
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	f7f5 f81c 	bl	80006b8 <__aeabi_dmul>
 800b680:	a335      	add	r3, pc, #212	@ (adr r3, 800b758 <__kernel_cos+0x158>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 fe5f 	bl	8000348 <__aeabi_dsub>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f5 f813 	bl	80006b8 <__aeabi_dmul>
 800b692:	a333      	add	r3, pc, #204	@ (adr r3, 800b760 <__kernel_cos+0x160>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fe58 	bl	800034c <__adddf3>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f5 f80a 	bl	80006b8 <__aeabi_dmul>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f5 f806 	bl	80006b8 <__aeabi_dmul>
 800b6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	f7f4 fffe 	bl	80006b8 <__aeabi_dmul>
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4602      	mov	r2, r0
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f4 fe40 	bl	8000348 <__aeabi_dsub>
 800b6c8:	4b28      	ldr	r3, [pc, #160]	@ (800b76c <__kernel_cos+0x16c>)
 800b6ca:	429e      	cmp	r6, r3
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	d80e      	bhi.n	800b6f0 <__kernel_cos+0xf0>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f4 fe35 	bl	8000348 <__aeabi_dsub>
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4923      	ldr	r1, [pc, #140]	@ (800b770 <__kernel_cos+0x170>)
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	f7f4 fe2f 	bl	8000348 <__aeabi_dsub>
 800b6ea:	b003      	add	sp, #12
 800b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f0:	4b20      	ldr	r3, [pc, #128]	@ (800b774 <__kernel_cos+0x174>)
 800b6f2:	491f      	ldr	r1, [pc, #124]	@ (800b770 <__kernel_cos+0x170>)
 800b6f4:	429e      	cmp	r6, r3
 800b6f6:	bf8c      	ite	hi
 800b6f8:	4d1f      	ldrhi	r5, [pc, #124]	@ (800b778 <__kernel_cos+0x178>)
 800b6fa:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800b6fe:	2400      	movs	r4, #0
 800b700:	4622      	mov	r2, r4
 800b702:	462b      	mov	r3, r5
 800b704:	2000      	movs	r0, #0
 800b706:	f7f4 fe1f 	bl	8000348 <__aeabi_dsub>
 800b70a:	4622      	mov	r2, r4
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	462b      	mov	r3, r5
 800b712:	4650      	mov	r0, sl
 800b714:	4659      	mov	r1, fp
 800b716:	f7f4 fe17 	bl	8000348 <__aeabi_dsub>
 800b71a:	4642      	mov	r2, r8
 800b71c:	464b      	mov	r3, r9
 800b71e:	f7f4 fe13 	bl	8000348 <__aeabi_dsub>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	e7dc      	b.n	800b6e6 <__kernel_cos+0xe6>
 800b72c:	4910      	ldr	r1, [pc, #64]	@ (800b770 <__kernel_cos+0x170>)
 800b72e:	2000      	movs	r0, #0
 800b730:	e7db      	b.n	800b6ea <__kernel_cos+0xea>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	be8838d4 	.word	0xbe8838d4
 800b73c:	bda8fae9 	.word	0xbda8fae9
 800b740:	bdb4b1c4 	.word	0xbdb4b1c4
 800b744:	3e21ee9e 	.word	0x3e21ee9e
 800b748:	809c52ad 	.word	0x809c52ad
 800b74c:	3e927e4f 	.word	0x3e927e4f
 800b750:	19cb1590 	.word	0x19cb1590
 800b754:	3efa01a0 	.word	0x3efa01a0
 800b758:	16c15177 	.word	0x16c15177
 800b75c:	3f56c16c 	.word	0x3f56c16c
 800b760:	5555554c 	.word	0x5555554c
 800b764:	3fa55555 	.word	0x3fa55555
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	3fd33332 	.word	0x3fd33332
 800b770:	3ff00000 	.word	0x3ff00000
 800b774:	3fe90000 	.word	0x3fe90000
 800b778:	3fd20000 	.word	0x3fd20000
 800b77c:	00000000 	.word	0x00000000

0800b780 <__kernel_sin>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	461f      	mov	r7, r3
 800b786:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b78a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b78e:	b085      	sub	sp, #20
 800b790:	4604      	mov	r4, r0
 800b792:	460d      	mov	r5, r1
 800b794:	4616      	mov	r6, r2
 800b796:	d203      	bcs.n	800b7a0 <__kernel_sin+0x20>
 800b798:	f7f5 fa28 	bl	8000bec <__aeabi_d2iz>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d051      	beq.n	800b844 <__kernel_sin+0xc4>
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	462b      	mov	r3, r5
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 ff86 	bl	80006b8 <__aeabi_dmul>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	468b      	mov	fp, r1
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	f7f4 ff7e 	bl	80006b8 <__aeabi_dmul>
 800b7bc:	a341      	add	r3, pc, #260	@ (adr r3, 800b8c4 <__kernel_sin+0x144>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4689      	mov	r9, r1
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	4659      	mov	r1, fp
 800b7ca:	f7f4 ff75 	bl	80006b8 <__aeabi_dmul>
 800b7ce:	a33f      	add	r3, pc, #252	@ (adr r3, 800b8cc <__kernel_sin+0x14c>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	f7f4 fdb8 	bl	8000348 <__aeabi_dsub>
 800b7d8:	4652      	mov	r2, sl
 800b7da:	465b      	mov	r3, fp
 800b7dc:	f7f4 ff6c 	bl	80006b8 <__aeabi_dmul>
 800b7e0:	a33c      	add	r3, pc, #240	@ (adr r3, 800b8d4 <__kernel_sin+0x154>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fdb1 	bl	800034c <__adddf3>
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	f7f4 ff63 	bl	80006b8 <__aeabi_dmul>
 800b7f2:	a33a      	add	r3, pc, #232	@ (adr r3, 800b8dc <__kernel_sin+0x15c>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 fda6 	bl	8000348 <__aeabi_dsub>
 800b7fc:	4652      	mov	r2, sl
 800b7fe:	465b      	mov	r3, fp
 800b800:	f7f4 ff5a 	bl	80006b8 <__aeabi_dmul>
 800b804:	a337      	add	r3, pc, #220	@ (adr r3, 800b8e4 <__kernel_sin+0x164>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fd9f 	bl	800034c <__adddf3>
 800b80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b810:	e9cd 0100 	strd	r0, r1, [sp]
 800b814:	b9db      	cbnz	r3, 800b84e <__kernel_sin+0xce>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4650      	mov	r0, sl
 800b81c:	4659      	mov	r1, fp
 800b81e:	f7f4 ff4b 	bl	80006b8 <__aeabi_dmul>
 800b822:	a325      	add	r3, pc, #148	@ (adr r3, 800b8b8 <__kernel_sin+0x138>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 fd8e 	bl	8000348 <__aeabi_dsub>
 800b82c:	4642      	mov	r2, r8
 800b82e:	464b      	mov	r3, r9
 800b830:	f7f4 ff42 	bl	80006b8 <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f4 fd86 	bl	800034c <__adddf3>
 800b840:	4604      	mov	r4, r0
 800b842:	460d      	mov	r5, r1
 800b844:	4620      	mov	r0, r4
 800b846:	4629      	mov	r1, r5
 800b848:	b005      	add	sp, #20
 800b84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8c0 <__kernel_sin+0x140>)
 800b850:	2200      	movs	r2, #0
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f4 ff2f 	bl	80006b8 <__aeabi_dmul>
 800b85a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b862:	4640      	mov	r0, r8
 800b864:	4649      	mov	r1, r9
 800b866:	f7f4 ff27 	bl	80006b8 <__aeabi_dmul>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b872:	f7f4 fd69 	bl	8000348 <__aeabi_dsub>
 800b876:	4652      	mov	r2, sl
 800b878:	465b      	mov	r3, fp
 800b87a:	f7f4 ff1d 	bl	80006b8 <__aeabi_dmul>
 800b87e:	4632      	mov	r2, r6
 800b880:	463b      	mov	r3, r7
 800b882:	f7f4 fd61 	bl	8000348 <__aeabi_dsub>
 800b886:	a30c      	add	r3, pc, #48	@ (adr r3, 800b8b8 <__kernel_sin+0x138>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	4606      	mov	r6, r0
 800b88e:	460f      	mov	r7, r1
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f4 ff10 	bl	80006b8 <__aeabi_dmul>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4630      	mov	r0, r6
 800b89e:	4639      	mov	r1, r7
 800b8a0:	f7f4 fd54 	bl	800034c <__adddf3>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f7f4 fd4c 	bl	8000348 <__aeabi_dsub>
 800b8b0:	e7c6      	b.n	800b840 <__kernel_sin+0xc0>
 800b8b2:	bf00      	nop
 800b8b4:	f3af 8000 	nop.w
 800b8b8:	55555549 	.word	0x55555549
 800b8bc:	3fc55555 	.word	0x3fc55555
 800b8c0:	3fe00000 	.word	0x3fe00000
 800b8c4:	5acfd57c 	.word	0x5acfd57c
 800b8c8:	3de5d93a 	.word	0x3de5d93a
 800b8cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b8d4:	57b1fe7d 	.word	0x57b1fe7d
 800b8d8:	3ec71de3 	.word	0x3ec71de3
 800b8dc:	19c161d5 	.word	0x19c161d5
 800b8e0:	3f2a01a0 	.word	0x3f2a01a0
 800b8e4:	1110f8a6 	.word	0x1110f8a6
 800b8e8:	3f811111 	.word	0x3f811111
 800b8ec:	00000000 	.word	0x00000000

0800b8f0 <__ieee754_rem_pio2>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	4bc4      	ldr	r3, [pc, #784]	@ (800bc08 <__ieee754_rem_pio2+0x318>)
 800b8f6:	b08d      	sub	sp, #52	@ 0x34
 800b8f8:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800b8fc:	4598      	cmp	r8, r3
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	4614      	mov	r4, r2
 800b904:	9104      	str	r1, [sp, #16]
 800b906:	d807      	bhi.n	800b918 <__ieee754_rem_pio2+0x28>
 800b908:	e9c2 6700 	strd	r6, r7, [r2]
 800b90c:	2300      	movs	r3, #0
 800b90e:	2200      	movs	r2, #0
 800b910:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b914:	2500      	movs	r5, #0
 800b916:	e026      	b.n	800b966 <__ieee754_rem_pio2+0x76>
 800b918:	4bbc      	ldr	r3, [pc, #752]	@ (800bc0c <__ieee754_rem_pio2+0x31c>)
 800b91a:	4598      	cmp	r8, r3
 800b91c:	d876      	bhi.n	800ba0c <__ieee754_rem_pio2+0x11c>
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	4dbb      	ldr	r5, [pc, #748]	@ (800bc10 <__ieee754_rem_pio2+0x320>)
 800b922:	2b00      	cmp	r3, #0
 800b924:	a3aa      	add	r3, pc, #680	@ (adr r3, 800bbd0 <__ieee754_rem_pio2+0x2e0>)
 800b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92a:	dd38      	ble.n	800b99e <__ieee754_rem_pio2+0xae>
 800b92c:	f7f4 fd0c 	bl	8000348 <__aeabi_dsub>
 800b930:	45a8      	cmp	r8, r5
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	d01a      	beq.n	800b96e <__ieee754_rem_pio2+0x7e>
 800b938:	a3a7      	add	r3, pc, #668	@ (adr r3, 800bbd8 <__ieee754_rem_pio2+0x2e8>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f7f4 fd03 	bl	8000348 <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f4 fcfb 	bl	8000348 <__aeabi_dsub>
 800b952:	a3a1      	add	r3, pc, #644	@ (adr r3, 800bbd8 <__ieee754_rem_pio2+0x2e8>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fcf6 	bl	8000348 <__aeabi_dsub>
 800b95c:	e9c4 8900 	strd	r8, r9, [r4]
 800b960:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b964:	2501      	movs	r5, #1
 800b966:	4628      	mov	r0, r5
 800b968:	b00d      	add	sp, #52	@ 0x34
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	a39c      	add	r3, pc, #624	@ (adr r3, 800bbe0 <__ieee754_rem_pio2+0x2f0>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f7f4 fce8 	bl	8000348 <__aeabi_dsub>
 800b978:	a39b      	add	r3, pc, #620	@ (adr r3, 800bbe8 <__ieee754_rem_pio2+0x2f8>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	4606      	mov	r6, r0
 800b980:	460f      	mov	r7, r1
 800b982:	f7f4 fce1 	bl	8000348 <__aeabi_dsub>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4680      	mov	r8, r0
 800b98c:	4689      	mov	r9, r1
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f4 fcd9 	bl	8000348 <__aeabi_dsub>
 800b996:	a394      	add	r3, pc, #592	@ (adr r3, 800bbe8 <__ieee754_rem_pio2+0x2f8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	e7dc      	b.n	800b958 <__ieee754_rem_pio2+0x68>
 800b99e:	f7f4 fcd5 	bl	800034c <__adddf3>
 800b9a2:	45a8      	cmp	r8, r5
 800b9a4:	4606      	mov	r6, r0
 800b9a6:	460f      	mov	r7, r1
 800b9a8:	d018      	beq.n	800b9dc <__ieee754_rem_pio2+0xec>
 800b9aa:	a38b      	add	r3, pc, #556	@ (adr r3, 800bbd8 <__ieee754_rem_pio2+0x2e8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fccc 	bl	800034c <__adddf3>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	f7f4 fcc2 	bl	8000348 <__aeabi_dsub>
 800b9c4:	a384      	add	r3, pc, #528	@ (adr r3, 800bbd8 <__ieee754_rem_pio2+0x2e8>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fcbf 	bl	800034c <__adddf3>
 800b9ce:	f04f 35ff 	mov.w	r5, #4294967295
 800b9d2:	e9c4 8900 	strd	r8, r9, [r4]
 800b9d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9da:	e7c4      	b.n	800b966 <__ieee754_rem_pio2+0x76>
 800b9dc:	a380      	add	r3, pc, #512	@ (adr r3, 800bbe0 <__ieee754_rem_pio2+0x2f0>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fcb3 	bl	800034c <__adddf3>
 800b9e6:	a380      	add	r3, pc, #512	@ (adr r3, 800bbe8 <__ieee754_rem_pio2+0x2f8>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	460f      	mov	r7, r1
 800b9f0:	f7f4 fcac 	bl	800034c <__adddf3>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	4689      	mov	r9, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f4 fca2 	bl	8000348 <__aeabi_dsub>
 800ba04:	a378      	add	r3, pc, #480	@ (adr r3, 800bbe8 <__ieee754_rem_pio2+0x2f8>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	e7de      	b.n	800b9ca <__ieee754_rem_pio2+0xda>
 800ba0c:	4b81      	ldr	r3, [pc, #516]	@ (800bc14 <__ieee754_rem_pio2+0x324>)
 800ba0e:	4598      	cmp	r8, r3
 800ba10:	f200 80cf 	bhi.w	800bbb2 <__ieee754_rem_pio2+0x2c2>
 800ba14:	f7ff fcfc 	bl	800b410 <fabs>
 800ba18:	a375      	add	r3, pc, #468	@ (adr r3, 800bbf0 <__ieee754_rem_pio2+0x300>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460f      	mov	r7, r1
 800ba22:	f7f4 fe49 	bl	80006b8 <__aeabi_dmul>
 800ba26:	4b7c      	ldr	r3, [pc, #496]	@ (800bc18 <__ieee754_rem_pio2+0x328>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f7f4 fc8f 	bl	800034c <__adddf3>
 800ba2e:	f7f5 f8dd 	bl	8000bec <__aeabi_d2iz>
 800ba32:	4605      	mov	r5, r0
 800ba34:	f7f4 fdd6 	bl	80005e4 <__aeabi_i2d>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba40:	a363      	add	r3, pc, #396	@ (adr r3, 800bbd0 <__ieee754_rem_pio2+0x2e0>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fe37 	bl	80006b8 <__aeabi_dmul>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f4 fc79 	bl	8000348 <__aeabi_dsub>
 800ba56:	a360      	add	r3, pc, #384	@ (adr r3, 800bbd8 <__ieee754_rem_pio2+0x2e8>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	468b      	mov	fp, r1
 800ba60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba64:	f7f4 fe28 	bl	80006b8 <__aeabi_dmul>
 800ba68:	2d1f      	cmp	r5, #31
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	460f      	mov	r7, r1
 800ba6e:	dc0c      	bgt.n	800ba8a <__ieee754_rem_pio2+0x19a>
 800ba70:	4b6a      	ldr	r3, [pc, #424]	@ (800bc1c <__ieee754_rem_pio2+0x32c>)
 800ba72:	1e6a      	subs	r2, r5, #1
 800ba74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba78:	4543      	cmp	r3, r8
 800ba7a:	d006      	beq.n	800ba8a <__ieee754_rem_pio2+0x19a>
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	4650      	mov	r0, sl
 800ba82:	4659      	mov	r1, fp
 800ba84:	f7f4 fc60 	bl	8000348 <__aeabi_dsub>
 800ba88:	e00e      	b.n	800baa8 <__ieee754_rem_pio2+0x1b8>
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	4650      	mov	r0, sl
 800ba90:	4659      	mov	r1, fp
 800ba92:	f7f4 fc59 	bl	8000348 <__aeabi_dsub>
 800ba96:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba9a:	9305      	str	r3, [sp, #20]
 800ba9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800baa0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800baa4:	2b10      	cmp	r3, #16
 800baa6:	dc02      	bgt.n	800baae <__ieee754_rem_pio2+0x1be>
 800baa8:	e9c4 0100 	strd	r0, r1, [r4]
 800baac:	e039      	b.n	800bb22 <__ieee754_rem_pio2+0x232>
 800baae:	a34c      	add	r3, pc, #304	@ (adr r3, 800bbe0 <__ieee754_rem_pio2+0x2f0>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab8:	f7f4 fdfe 	bl	80006b8 <__aeabi_dmul>
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4650      	mov	r0, sl
 800bac6:	4659      	mov	r1, fp
 800bac8:	f7f4 fc3e 	bl	8000348 <__aeabi_dsub>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4680      	mov	r8, r0
 800bad2:	4689      	mov	r9, r1
 800bad4:	4650      	mov	r0, sl
 800bad6:	4659      	mov	r1, fp
 800bad8:	f7f4 fc36 	bl	8000348 <__aeabi_dsub>
 800badc:	4632      	mov	r2, r6
 800bade:	463b      	mov	r3, r7
 800bae0:	f7f4 fc32 	bl	8000348 <__aeabi_dsub>
 800bae4:	a340      	add	r3, pc, #256	@ (adr r3, 800bbe8 <__ieee754_rem_pio2+0x2f8>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	4606      	mov	r6, r0
 800baec:	460f      	mov	r7, r1
 800baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf2:	f7f4 fde1 	bl	80006b8 <__aeabi_dmul>
 800baf6:	4632      	mov	r2, r6
 800baf8:	463b      	mov	r3, r7
 800bafa:	f7f4 fc25 	bl	8000348 <__aeabi_dsub>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4606      	mov	r6, r0
 800bb04:	460f      	mov	r7, r1
 800bb06:	4640      	mov	r0, r8
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7f4 fc1d 	bl	8000348 <__aeabi_dsub>
 800bb0e:	9a05      	ldr	r2, [sp, #20]
 800bb10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	2b31      	cmp	r3, #49	@ 0x31
 800bb18:	dc20      	bgt.n	800bb5c <__ieee754_rem_pio2+0x26c>
 800bb1a:	e9c4 0100 	strd	r0, r1, [r4]
 800bb1e:	46c2      	mov	sl, r8
 800bb20:	46cb      	mov	fp, r9
 800bb22:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bb26:	4650      	mov	r0, sl
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	4659      	mov	r1, fp
 800bb2e:	f7f4 fc0b 	bl	8000348 <__aeabi_dsub>
 800bb32:	463b      	mov	r3, r7
 800bb34:	4632      	mov	r2, r6
 800bb36:	f7f4 fc07 	bl	8000348 <__aeabi_dsub>
 800bb3a:	9b04      	ldr	r3, [sp, #16]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb42:	f6bf af10 	bge.w	800b966 <__ieee754_rem_pio2+0x76>
 800bb46:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bb4a:	6063      	str	r3, [r4, #4]
 800bb4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb50:	f8c4 8000 	str.w	r8, [r4]
 800bb54:	60a0      	str	r0, [r4, #8]
 800bb56:	60e3      	str	r3, [r4, #12]
 800bb58:	426d      	negs	r5, r5
 800bb5a:	e704      	b.n	800b966 <__ieee754_rem_pio2+0x76>
 800bb5c:	a326      	add	r3, pc, #152	@ (adr r3, 800bbf8 <__ieee754_rem_pio2+0x308>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb66:	f7f4 fda7 	bl	80006b8 <__aeabi_dmul>
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	f7f4 fbe7 	bl	8000348 <__aeabi_dsub>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4682      	mov	sl, r0
 800bb80:	468b      	mov	fp, r1
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 fbdf 	bl	8000348 <__aeabi_dsub>
 800bb8a:	4632      	mov	r2, r6
 800bb8c:	463b      	mov	r3, r7
 800bb8e:	f7f4 fbdb 	bl	8000348 <__aeabi_dsub>
 800bb92:	a31b      	add	r3, pc, #108	@ (adr r3, 800bc00 <__ieee754_rem_pio2+0x310>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	4606      	mov	r6, r0
 800bb9a:	460f      	mov	r7, r1
 800bb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba0:	f7f4 fd8a 	bl	80006b8 <__aeabi_dmul>
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	f7f4 fbce 	bl	8000348 <__aeabi_dsub>
 800bbac:	4606      	mov	r6, r0
 800bbae:	460f      	mov	r7, r1
 800bbb0:	e764      	b.n	800ba7c <__ieee754_rem_pio2+0x18c>
 800bbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bc20 <__ieee754_rem_pio2+0x330>)
 800bbb4:	4598      	cmp	r8, r3
 800bbb6:	d935      	bls.n	800bc24 <__ieee754_rem_pio2+0x334>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	f7f4 fbc4 	bl	8000348 <__aeabi_dsub>
 800bbc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbc4:	e9c4 0100 	strd	r0, r1, [r4]
 800bbc8:	e6a4      	b.n	800b914 <__ieee754_rem_pio2+0x24>
 800bbca:	bf00      	nop
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	54400000 	.word	0x54400000
 800bbd4:	3ff921fb 	.word	0x3ff921fb
 800bbd8:	1a626331 	.word	0x1a626331
 800bbdc:	3dd0b461 	.word	0x3dd0b461
 800bbe0:	1a600000 	.word	0x1a600000
 800bbe4:	3dd0b461 	.word	0x3dd0b461
 800bbe8:	2e037073 	.word	0x2e037073
 800bbec:	3ba3198a 	.word	0x3ba3198a
 800bbf0:	6dc9c883 	.word	0x6dc9c883
 800bbf4:	3fe45f30 	.word	0x3fe45f30
 800bbf8:	2e000000 	.word	0x2e000000
 800bbfc:	3ba3198a 	.word	0x3ba3198a
 800bc00:	252049c1 	.word	0x252049c1
 800bc04:	397b839a 	.word	0x397b839a
 800bc08:	3fe921fb 	.word	0x3fe921fb
 800bc0c:	4002d97b 	.word	0x4002d97b
 800bc10:	3ff921fb 	.word	0x3ff921fb
 800bc14:	413921fb 	.word	0x413921fb
 800bc18:	3fe00000 	.word	0x3fe00000
 800bc1c:	0801fd10 	.word	0x0801fd10
 800bc20:	7fefffff 	.word	0x7fefffff
 800bc24:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bc28:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bc2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bc30:	460f      	mov	r7, r1
 800bc32:	f7f4 ffdb 	bl	8000bec <__aeabi_d2iz>
 800bc36:	f7f4 fcd5 	bl	80005e4 <__aeabi_i2d>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4639      	mov	r1, r7
 800bc42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bc46:	f7f4 fb7f 	bl	8000348 <__aeabi_dsub>
 800bc4a:	4b22      	ldr	r3, [pc, #136]	@ (800bcd4 <__ieee754_rem_pio2+0x3e4>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	f7f4 fd33 	bl	80006b8 <__aeabi_dmul>
 800bc52:	460f      	mov	r7, r1
 800bc54:	4606      	mov	r6, r0
 800bc56:	f7f4 ffc9 	bl	8000bec <__aeabi_d2iz>
 800bc5a:	f7f4 fcc3 	bl	80005e4 <__aeabi_i2d>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4630      	mov	r0, r6
 800bc64:	4639      	mov	r1, r7
 800bc66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc6a:	f7f4 fb6d 	bl	8000348 <__aeabi_dsub>
 800bc6e:	4b19      	ldr	r3, [pc, #100]	@ (800bcd4 <__ieee754_rem_pio2+0x3e4>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	f7f4 fd21 	bl	80006b8 <__aeabi_dmul>
 800bc76:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bc7a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bc7e:	f04f 0803 	mov.w	r8, #3
 800bc82:	2600      	movs	r6, #0
 800bc84:	2700      	movs	r7, #0
 800bc86:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	463b      	mov	r3, r7
 800bc8e:	46c2      	mov	sl, r8
 800bc90:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc94:	f7f4 ff78 	bl	8000b88 <__aeabi_dcmpeq>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d1f4      	bne.n	800bc86 <__ieee754_rem_pio2+0x396>
 800bc9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd8 <__ieee754_rem_pio2+0x3e8>)
 800bc9e:	9301      	str	r3, [sp, #4]
 800bca0:	2302      	movs	r3, #2
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	462a      	mov	r2, r5
 800bca6:	4653      	mov	r3, sl
 800bca8:	4621      	mov	r1, r4
 800bcaa:	a806      	add	r0, sp, #24
 800bcac:	f000 fa10 	bl	800c0d0 <__kernel_rem_pio2>
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	f6bf ae56 	bge.w	800b966 <__ieee754_rem_pio2+0x76>
 800bcba:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bcbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcc2:	e9c4 2300 	strd	r2, r3, [r4]
 800bcc6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bcca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bcd2:	e741      	b.n	800bb58 <__ieee754_rem_pio2+0x268>
 800bcd4:	41700000 	.word	0x41700000
 800bcd8:	0801fd90 	.word	0x0801fd90

0800bcdc <__ieee754_atan2f>:
 800bcdc:	ee07 1a10 	vmov	s14, r1
 800bce0:	460a      	mov	r2, r1
 800bce2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800bce6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bcea:	b538      	push	{r3, r4, r5, lr}
 800bcec:	ee07 0a90 	vmov	s15, r0
 800bcf0:	d805      	bhi.n	800bcfe <__ieee754_atan2f+0x22>
 800bcf2:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bcf6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	d904      	bls.n	800bd08 <__ieee754_atan2f+0x2c>
 800bcfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd02:	ee17 0a90 	vmov	r0, s15
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bd0c:	d103      	bne.n	800bd16 <__ieee754_atan2f+0x3a>
 800bd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd12:	f000 b885 	b.w	800be20 <atanf>
 800bd16:	1794      	asrs	r4, r2, #30
 800bd18:	f004 0402 	and.w	r4, r4, #2
 800bd1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bd20:	b943      	cbnz	r3, 800bd34 <__ieee754_atan2f+0x58>
 800bd22:	2c02      	cmp	r4, #2
 800bd24:	d060      	beq.n	800bde8 <__ieee754_atan2f+0x10c>
 800bd26:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800bdfc <__ieee754_atan2f+0x120>
 800bd2a:	2c03      	cmp	r4, #3
 800bd2c:	bf08      	it	eq
 800bd2e:	eef0 7a47 	vmoveq.f32	s15, s14
 800bd32:	e7e6      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bd34:	b941      	cbnz	r1, 800bd48 <__ieee754_atan2f+0x6c>
 800bd36:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800be00 <__ieee754_atan2f+0x124>
 800bd3a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800be04 <__ieee754_atan2f+0x128>
 800bd3e:	2d00      	cmp	r5, #0
 800bd40:	bfb8      	it	lt
 800bd42:	eef0 7a47 	vmovlt.f32	s15, s14
 800bd46:	e7dc      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bd48:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bd4c:	d110      	bne.n	800bd70 <__ieee754_atan2f+0x94>
 800bd4e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd52:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd56:	d107      	bne.n	800bd68 <__ieee754_atan2f+0x8c>
 800bd58:	2c02      	cmp	r4, #2
 800bd5a:	d848      	bhi.n	800bdee <__ieee754_atan2f+0x112>
 800bd5c:	4b2a      	ldr	r3, [pc, #168]	@ (800be08 <__ieee754_atan2f+0x12c>)
 800bd5e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bd62:	edd3 7a00 	vldr	s15, [r3]
 800bd66:	e7cc      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bd68:	2c02      	cmp	r4, #2
 800bd6a:	d843      	bhi.n	800bdf4 <__ieee754_atan2f+0x118>
 800bd6c:	4b27      	ldr	r3, [pc, #156]	@ (800be0c <__ieee754_atan2f+0x130>)
 800bd6e:	e7f6      	b.n	800bd5e <__ieee754_atan2f+0x82>
 800bd70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bd74:	d0df      	beq.n	800bd36 <__ieee754_atan2f+0x5a>
 800bd76:	1a5b      	subs	r3, r3, r1
 800bd78:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800bd7c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bd80:	da1c      	bge.n	800bdbc <__ieee754_atan2f+0xe0>
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	da01      	bge.n	800bd8a <__ieee754_atan2f+0xae>
 800bd86:	313c      	adds	r1, #60	@ 0x3c
 800bd88:	db1b      	blt.n	800bdc2 <__ieee754_atan2f+0xe6>
 800bd8a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800bd8e:	ee17 0a90 	vmov	r0, s15
 800bd92:	f000 f91b 	bl	800bfcc <fabsf>
 800bd96:	f000 f843 	bl	800be20 <atanf>
 800bd9a:	ee07 0a90 	vmov	s15, r0
 800bd9e:	2c01      	cmp	r4, #1
 800bda0:	d012      	beq.n	800bdc8 <__ieee754_atan2f+0xec>
 800bda2:	2c02      	cmp	r4, #2
 800bda4:	d017      	beq.n	800bdd6 <__ieee754_atan2f+0xfa>
 800bda6:	2c00      	cmp	r4, #0
 800bda8:	d0ab      	beq.n	800bd02 <__ieee754_atan2f+0x26>
 800bdaa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800be10 <__ieee754_atan2f+0x134>
 800bdae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdb2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800be14 <__ieee754_atan2f+0x138>
 800bdb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdba:	e7a2      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bdbc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800be00 <__ieee754_atan2f+0x124>
 800bdc0:	e7ed      	b.n	800bd9e <__ieee754_atan2f+0xc2>
 800bdc2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800be18 <__ieee754_atan2f+0x13c>
 800bdc6:	e7ea      	b.n	800bd9e <__ieee754_atan2f+0xc2>
 800bdc8:	ee17 3a90 	vmov	r3, s15
 800bdcc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bdd0:	ee07 3a90 	vmov	s15, r3
 800bdd4:	e795      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bdd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800be10 <__ieee754_atan2f+0x134>
 800bdda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdde:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800be14 <__ieee754_atan2f+0x138>
 800bde2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bde6:	e78c      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bde8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800be14 <__ieee754_atan2f+0x138>
 800bdec:	e789      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bdee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800be1c <__ieee754_atan2f+0x140>
 800bdf2:	e786      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bdf4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800be18 <__ieee754_atan2f+0x13c>
 800bdf8:	e783      	b.n	800bd02 <__ieee754_atan2f+0x26>
 800bdfa:	bf00      	nop
 800bdfc:	c0490fdb 	.word	0xc0490fdb
 800be00:	3fc90fdb 	.word	0x3fc90fdb
 800be04:	bfc90fdb 	.word	0xbfc90fdb
 800be08:	0801fea4 	.word	0x0801fea4
 800be0c:	0801fe98 	.word	0x0801fe98
 800be10:	33bbbd2e 	.word	0x33bbbd2e
 800be14:	40490fdb 	.word	0x40490fdb
 800be18:	00000000 	.word	0x00000000
 800be1c:	3f490fdb 	.word	0x3f490fdb

0800be20 <atanf>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
 800be26:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800be2a:	ee07 0a90 	vmov	s15, r0
 800be2e:	4605      	mov	r5, r0
 800be30:	d310      	bcc.n	800be54 <atanf+0x34>
 800be32:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800be36:	d904      	bls.n	800be42 <atanf+0x22>
 800be38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800be3c:	ee17 0a90 	vmov	r0, s15
 800be40:	bd38      	pop	{r3, r4, r5, pc}
 800be42:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800bf80 <atanf+0x160>
 800be46:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800bf84 <atanf+0x164>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	bfc8      	it	gt
 800be4e:	eef0 7a47 	vmovgt.f32	s15, s14
 800be52:	e7f3      	b.n	800be3c <atanf+0x1c>
 800be54:	4b4c      	ldr	r3, [pc, #304]	@ (800bf88 <atanf+0x168>)
 800be56:	429c      	cmp	r4, r3
 800be58:	d810      	bhi.n	800be7c <atanf+0x5c>
 800be5a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800be5e:	d20a      	bcs.n	800be76 <atanf+0x56>
 800be60:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800bf8c <atanf+0x16c>
 800be64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be6c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	dce2      	bgt.n	800be3c <atanf+0x1c>
 800be76:	f04f 33ff 	mov.w	r3, #4294967295
 800be7a:	e015      	b.n	800bea8 <atanf+0x88>
 800be7c:	f000 f8a6 	bl	800bfcc <fabsf>
 800be80:	4b43      	ldr	r3, [pc, #268]	@ (800bf90 <atanf+0x170>)
 800be82:	429c      	cmp	r4, r3
 800be84:	ee07 0a10 	vmov	s14, r0
 800be88:	d84f      	bhi.n	800bf2a <atanf+0x10a>
 800be8a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800be8e:	429c      	cmp	r4, r3
 800be90:	d841      	bhi.n	800bf16 <atanf+0xf6>
 800be92:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800be96:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800be9a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800be9e:	2300      	movs	r3, #0
 800bea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800beae:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800bf94 <atanf+0x174>
 800beb2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800bf98 <atanf+0x178>
 800beb6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800bf9c <atanf+0x17c>
 800beba:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bebe:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bec2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800bfa0 <atanf+0x180>
 800bec6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800beca:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800bfa4 <atanf+0x184>
 800bece:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bed2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800bfa8 <atanf+0x188>
 800bed6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800beda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bfac <atanf+0x18c>
 800bede:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bee2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800bfb0 <atanf+0x190>
 800bee6:	eea6 5a87 	vfma.f32	s10, s13, s14
 800beea:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bfb4 <atanf+0x194>
 800beee:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bef2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800bfb8 <atanf+0x198>
 800bef6:	eea7 5a26 	vfma.f32	s10, s14, s13
 800befa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bfbc <atanf+0x19c>
 800befe:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bf02:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bf06:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bf0e:	d121      	bne.n	800bf54 <atanf+0x134>
 800bf10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf14:	e792      	b.n	800be3c <atanf+0x1c>
 800bf16:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bf1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf22:	2301      	movs	r3, #1
 800bf24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf28:	e7be      	b.n	800bea8 <atanf+0x88>
 800bf2a:	4b25      	ldr	r3, [pc, #148]	@ (800bfc0 <atanf+0x1a0>)
 800bf2c:	429c      	cmp	r4, r3
 800bf2e:	d80b      	bhi.n	800bf48 <atanf+0x128>
 800bf30:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800bf34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf38:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	ee37 6a67 	vsub.f32	s12, s14, s15
 800bf42:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bf46:	e7af      	b.n	800bea8 <atanf+0x88>
 800bf48:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800bf4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf50:	2303      	movs	r3, #3
 800bf52:	e7a9      	b.n	800bea8 <atanf+0x88>
 800bf54:	4a1b      	ldr	r2, [pc, #108]	@ (800bfc4 <atanf+0x1a4>)
 800bf56:	491c      	ldr	r1, [pc, #112]	@ (800bfc8 <atanf+0x1a8>)
 800bf58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf5c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bf60:	edd3 6a00 	vldr	s13, [r3]
 800bf64:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bf6e:	edd2 7a00 	vldr	s15, [r2]
 800bf72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf76:	bfb8      	it	lt
 800bf78:	eef1 7a67 	vneglt.f32	s15, s15
 800bf7c:	e75e      	b.n	800be3c <atanf+0x1c>
 800bf7e:	bf00      	nop
 800bf80:	bfc90fdb 	.word	0xbfc90fdb
 800bf84:	3fc90fdb 	.word	0x3fc90fdb
 800bf88:	3edfffff 	.word	0x3edfffff
 800bf8c:	7149f2ca 	.word	0x7149f2ca
 800bf90:	3f97ffff 	.word	0x3f97ffff
 800bf94:	3c8569d7 	.word	0x3c8569d7
 800bf98:	3d4bda59 	.word	0x3d4bda59
 800bf9c:	bd6ef16b 	.word	0xbd6ef16b
 800bfa0:	3d886b35 	.word	0x3d886b35
 800bfa4:	3dba2e6e 	.word	0x3dba2e6e
 800bfa8:	3e124925 	.word	0x3e124925
 800bfac:	3eaaaaab 	.word	0x3eaaaaab
 800bfb0:	bd15a221 	.word	0xbd15a221
 800bfb4:	bd9d8795 	.word	0xbd9d8795
 800bfb8:	bde38e38 	.word	0xbde38e38
 800bfbc:	be4ccccd 	.word	0xbe4ccccd
 800bfc0:	401bffff 	.word	0x401bffff
 800bfc4:	0801fec0 	.word	0x0801fec0
 800bfc8:	0801feb0 	.word	0x0801feb0

0800bfcc <fabsf>:
 800bfcc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bfd0:	4770      	bx	lr
 800bfd2:	0000      	movs	r0, r0
 800bfd4:	0000      	movs	r0, r0
	...

0800bfd8 <scalbn>:
 800bfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfda:	4616      	mov	r6, r2
 800bfdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	b982      	cbnz	r2, 800c00a <scalbn+0x32>
 800bfe8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bfec:	4303      	orrs	r3, r0
 800bfee:	d039      	beq.n	800c064 <scalbn+0x8c>
 800bff0:	4b33      	ldr	r3, [pc, #204]	@ (800c0c0 <scalbn+0xe8>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	f7f4 fb60 	bl	80006b8 <__aeabi_dmul>
 800bff8:	4b32      	ldr	r3, [pc, #200]	@ (800c0c4 <scalbn+0xec>)
 800bffa:	429e      	cmp	r6, r3
 800bffc:	4604      	mov	r4, r0
 800bffe:	460d      	mov	r5, r1
 800c000:	da0d      	bge.n	800c01e <scalbn+0x46>
 800c002:	a327      	add	r3, pc, #156	@ (adr r3, 800c0a0 <scalbn+0xc8>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	e01c      	b.n	800c044 <scalbn+0x6c>
 800c00a:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c00e:	42ba      	cmp	r2, r7
 800c010:	d109      	bne.n	800c026 <scalbn+0x4e>
 800c012:	4602      	mov	r2, r0
 800c014:	f7f4 f99a 	bl	800034c <__adddf3>
 800c018:	4604      	mov	r4, r0
 800c01a:	460d      	mov	r5, r1
 800c01c:	e022      	b.n	800c064 <scalbn+0x8c>
 800c01e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c022:	460b      	mov	r3, r1
 800c024:	3a36      	subs	r2, #54	@ 0x36
 800c026:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c02a:	428e      	cmp	r6, r1
 800c02c:	dd0d      	ble.n	800c04a <scalbn+0x72>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	a11d      	add	r1, pc, #116	@ (adr r1, 800c0a8 <scalbn+0xd0>)
 800c032:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c036:	da02      	bge.n	800c03e <scalbn+0x66>
 800c038:	a11d      	add	r1, pc, #116	@ (adr r1, 800c0b0 <scalbn+0xd8>)
 800c03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c03e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c0a8 <scalbn+0xd0>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 fb38 	bl	80006b8 <__aeabi_dmul>
 800c048:	e7e6      	b.n	800c018 <scalbn+0x40>
 800c04a:	4432      	add	r2, r6
 800c04c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c050:	428a      	cmp	r2, r1
 800c052:	dcec      	bgt.n	800c02e <scalbn+0x56>
 800c054:	2a00      	cmp	r2, #0
 800c056:	dd08      	ble.n	800c06a <scalbn+0x92>
 800c058:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c05c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c060:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c06a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c06e:	da08      	bge.n	800c082 <scalbn+0xaa>
 800c070:	2d00      	cmp	r5, #0
 800c072:	a10b      	add	r1, pc, #44	@ (adr r1, 800c0a0 <scalbn+0xc8>)
 800c074:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c078:	dac3      	bge.n	800c002 <scalbn+0x2a>
 800c07a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c0b8 <scalbn+0xe0>)
 800c07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c080:	e7bf      	b.n	800c002 <scalbn+0x2a>
 800c082:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c086:	3236      	adds	r2, #54	@ 0x36
 800c088:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c08c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c090:	4620      	mov	r0, r4
 800c092:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c8 <scalbn+0xf0>)
 800c094:	4629      	mov	r1, r5
 800c096:	2200      	movs	r2, #0
 800c098:	e7d4      	b.n	800c044 <scalbn+0x6c>
 800c09a:	bf00      	nop
 800c09c:	f3af 8000 	nop.w
 800c0a0:	c2f8f359 	.word	0xc2f8f359
 800c0a4:	01a56e1f 	.word	0x01a56e1f
 800c0a8:	8800759c 	.word	0x8800759c
 800c0ac:	7e37e43c 	.word	0x7e37e43c
 800c0b0:	8800759c 	.word	0x8800759c
 800c0b4:	fe37e43c 	.word	0xfe37e43c
 800c0b8:	c2f8f359 	.word	0xc2f8f359
 800c0bc:	81a56e1f 	.word	0x81a56e1f
 800c0c0:	43500000 	.word	0x43500000
 800c0c4:	ffff3cb0 	.word	0xffff3cb0
 800c0c8:	3c900000 	.word	0x3c900000
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <__kernel_rem_pio2>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	ed2d 8b02 	vpush	{d8}
 800c0d8:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800c0dc:	f112 0f14 	cmn.w	r2, #20
 800c0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0e2:	9101      	str	r1, [sp, #4]
 800c0e4:	4bbe      	ldr	r3, [pc, #760]	@ (800c3e0 <__kernel_rem_pio2+0x310>)
 800c0e6:	99a6      	ldr	r1, [sp, #664]	@ 0x298
 800c0e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0f6:	bfa8      	it	ge
 800c0f8:	1ed4      	subge	r4, r2, #3
 800c0fa:	9306      	str	r3, [sp, #24]
 800c0fc:	bfb2      	itee	lt
 800c0fe:	2400      	movlt	r4, #0
 800c100:	2318      	movge	r3, #24
 800c102:	fb94 f4f3 	sdivge	r4, r4, r3
 800c106:	f06f 0317 	mvn.w	r3, #23
 800c10a:	fb04 3303 	mla	r3, r4, r3, r3
 800c10e:	eb03 0b02 	add.w	fp, r3, r2
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	9a06      	ldr	r2, [sp, #24]
 800c116:	ed9f 8bb0 	vldr	d8, [pc, #704]	@ 800c3d8 <__kernel_rem_pio2+0x308>
 800c11a:	eb03 0802 	add.w	r8, r3, r2
 800c11e:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800c120:	1aa7      	subs	r7, r4, r2
 800c122:	ae22      	add	r6, sp, #136	@ 0x88
 800c124:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c128:	2500      	movs	r5, #0
 800c12a:	4545      	cmp	r5, r8
 800c12c:	dd13      	ble.n	800c156 <__kernel_rem_pio2+0x86>
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	aa22      	add	r2, sp, #136	@ 0x88
 800c132:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c136:	f50d 7ae4 	add.w	sl, sp, #456	@ 0x1c8
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	9b04      	ldr	r3, [sp, #16]
 800c140:	4598      	cmp	r8, r3
 800c142:	dc31      	bgt.n	800c1a8 <__kernel_rem_pio2+0xd8>
 800c144:	ed9f 7ba4 	vldr	d7, [pc, #656]	@ 800c3d8 <__kernel_rem_pio2+0x308>
 800c148:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c14c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c150:	462f      	mov	r7, r5
 800c152:	2600      	movs	r6, #0
 800c154:	e01b      	b.n	800c18e <__kernel_rem_pio2+0xbe>
 800c156:	42ef      	cmn	r7, r5
 800c158:	d407      	bmi.n	800c16a <__kernel_rem_pio2+0x9a>
 800c15a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c15e:	f7f4 fa41 	bl	80005e4 <__aeabi_i2d>
 800c162:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c166:	3501      	adds	r5, #1
 800c168:	e7df      	b.n	800c12a <__kernel_rem_pio2+0x5a>
 800c16a:	ec51 0b18 	vmov	r0, r1, d8
 800c16e:	e7f8      	b.n	800c162 <__kernel_rem_pio2+0x92>
 800c170:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c174:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c178:	f7f4 fa9e 	bl	80006b8 <__aeabi_dmul>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c184:	f7f4 f8e2 	bl	800034c <__adddf3>
 800c188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c18c:	3601      	adds	r6, #1
 800c18e:	9b06      	ldr	r3, [sp, #24]
 800c190:	429e      	cmp	r6, r3
 800c192:	f1a7 0708 	sub.w	r7, r7, #8
 800c196:	ddeb      	ble.n	800c170 <__kernel_rem_pio2+0xa0>
 800c198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c19c:	f108 0801 	add.w	r8, r8, #1
 800c1a0:	ecaa 7b02 	vstmia	sl!, {d7}
 800c1a4:	3508      	adds	r5, #8
 800c1a6:	e7ca      	b.n	800c13e <__kernel_rem_pio2+0x6e>
 800c1a8:	9b04      	ldr	r3, [sp, #16]
 800c1aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c1ae:	aa0e      	add	r2, sp, #56	@ 0x38
 800c1b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1b6:	9ba7      	ldr	r3, [sp, #668]	@ 0x29c
 800c1b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c1bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1be:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c1c2:	930d      	str	r3, [sp, #52]	@ 0x34
 800c1c4:	ab9a      	add	r3, sp, #616	@ 0x268
 800c1c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1ca:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800c1ce:	ae0e      	add	r6, sp, #56	@ 0x38
 800c1d0:	ab72      	add	r3, sp, #456	@ 0x1c8
 800c1d2:	eb03 07ca 	add.w	r7, r3, sl, lsl #3
 800c1d6:	46b1      	mov	r9, r6
 800c1d8:	46d0      	mov	r8, sl
 800c1da:	f1b8 0f00 	cmp.w	r8, #0
 800c1de:	f1a7 0708 	sub.w	r7, r7, #8
 800c1e2:	dc71      	bgt.n	800c2c8 <__kernel_rem_pio2+0x1f8>
 800c1e4:	465a      	mov	r2, fp
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7ff fef5 	bl	800bfd8 <scalbn>
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	f7f4 fa5e 	bl	80006b8 <__aeabi_dmul>
 800c1fc:	f7ff f980 	bl	800b500 <floor>
 800c200:	4b78      	ldr	r3, [pc, #480]	@ (800c3e4 <__kernel_rem_pio2+0x314>)
 800c202:	2200      	movs	r2, #0
 800c204:	f7f4 fa58 	bl	80006b8 <__aeabi_dmul>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f7f4 f89a 	bl	8000348 <__aeabi_dsub>
 800c214:	460d      	mov	r5, r1
 800c216:	4604      	mov	r4, r0
 800c218:	f7f4 fce8 	bl	8000bec <__aeabi_d2iz>
 800c21c:	9008      	str	r0, [sp, #32]
 800c21e:	f7f4 f9e1 	bl	80005e4 <__aeabi_i2d>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	4620      	mov	r0, r4
 800c228:	4629      	mov	r1, r5
 800c22a:	f7f4 f88d 	bl	8000348 <__aeabi_dsub>
 800c22e:	f1bb 0f00 	cmp.w	fp, #0
 800c232:	4680      	mov	r8, r0
 800c234:	4689      	mov	r9, r1
 800c236:	dd6e      	ble.n	800c316 <__kernel_rem_pio2+0x246>
 800c238:	f10a 31ff 	add.w	r1, sl, #4294967295
 800c23c:	ab0e      	add	r3, sp, #56	@ 0x38
 800c23e:	9c08      	ldr	r4, [sp, #32]
 800c240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c244:	f1cb 0018 	rsb	r0, fp, #24
 800c248:	fa43 f200 	asr.w	r2, r3, r0
 800c24c:	4414      	add	r4, r2
 800c24e:	4082      	lsls	r2, r0
 800c250:	1a9b      	subs	r3, r3, r2
 800c252:	aa0e      	add	r2, sp, #56	@ 0x38
 800c254:	9408      	str	r4, [sp, #32]
 800c256:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c25a:	f1cb 0217 	rsb	r2, fp, #23
 800c25e:	4113      	asrs	r3, r2
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	9b02      	ldr	r3, [sp, #8]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd65      	ble.n	800c334 <__kernel_rem_pio2+0x264>
 800c268:	9b08      	ldr	r3, [sp, #32]
 800c26a:	2200      	movs	r2, #0
 800c26c:	3301      	adds	r3, #1
 800c26e:	9308      	str	r3, [sp, #32]
 800c270:	4614      	mov	r4, r2
 800c272:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c276:	4592      	cmp	sl, r2
 800c278:	f300 80a2 	bgt.w	800c3c0 <__kernel_rem_pio2+0x2f0>
 800c27c:	f1bb 0f00 	cmp.w	fp, #0
 800c280:	dd07      	ble.n	800c292 <__kernel_rem_pio2+0x1c2>
 800c282:	f1bb 0f01 	cmp.w	fp, #1
 800c286:	f000 80bb 	beq.w	800c400 <__kernel_rem_pio2+0x330>
 800c28a:	f1bb 0f02 	cmp.w	fp, #2
 800c28e:	f000 80c2 	beq.w	800c416 <__kernel_rem_pio2+0x346>
 800c292:	9b02      	ldr	r3, [sp, #8]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d14d      	bne.n	800c334 <__kernel_rem_pio2+0x264>
 800c298:	4642      	mov	r2, r8
 800c29a:	464b      	mov	r3, r9
 800c29c:	4952      	ldr	r1, [pc, #328]	@ (800c3e8 <__kernel_rem_pio2+0x318>)
 800c29e:	2000      	movs	r0, #0
 800c2a0:	f7f4 f852 	bl	8000348 <__aeabi_dsub>
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	2c00      	cmp	r4, #0
 800c2aa:	d043      	beq.n	800c334 <__kernel_rem_pio2+0x264>
 800c2ac:	465a      	mov	r2, fp
 800c2ae:	494e      	ldr	r1, [pc, #312]	@ (800c3e8 <__kernel_rem_pio2+0x318>)
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	f7ff fe91 	bl	800bfd8 <scalbn>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	4649      	mov	r1, r9
 800c2be:	f7f4 f843 	bl	8000348 <__aeabi_dsub>
 800c2c2:	4680      	mov	r8, r0
 800c2c4:	4689      	mov	r9, r1
 800c2c6:	e035      	b.n	800c334 <__kernel_rem_pio2+0x264>
 800c2c8:	4b48      	ldr	r3, [pc, #288]	@ (800c3ec <__kernel_rem_pio2+0x31c>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f7f4 f9f2 	bl	80006b8 <__aeabi_dmul>
 800c2d4:	f7f4 fc8a 	bl	8000bec <__aeabi_d2iz>
 800c2d8:	f7f4 f984 	bl	80005e4 <__aeabi_i2d>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c2e4:	4b42      	ldr	r3, [pc, #264]	@ (800c3f0 <__kernel_rem_pio2+0x320>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f7f4 f9e6 	bl	80006b8 <__aeabi_dmul>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4620      	mov	r0, r4
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	f7f4 f828 	bl	8000348 <__aeabi_dsub>
 800c2f8:	f7f4 fc78 	bl	8000bec <__aeabi_d2iz>
 800c2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c300:	f849 0b04 	str.w	r0, [r9], #4
 800c304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c308:	f7f4 f820 	bl	800034c <__adddf3>
 800c30c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c310:	4604      	mov	r4, r0
 800c312:	460d      	mov	r5, r1
 800c314:	e761      	b.n	800c1da <__kernel_rem_pio2+0x10a>
 800c316:	d106      	bne.n	800c326 <__kernel_rem_pio2+0x256>
 800c318:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c31c:	aa0e      	add	r2, sp, #56	@ 0x38
 800c31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c322:	15db      	asrs	r3, r3, #23
 800c324:	e79c      	b.n	800c260 <__kernel_rem_pio2+0x190>
 800c326:	4b33      	ldr	r3, [pc, #204]	@ (800c3f4 <__kernel_rem_pio2+0x324>)
 800c328:	2200      	movs	r2, #0
 800c32a:	f7f4 fc4b 	bl	8000bc4 <__aeabi_dcmpge>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d143      	bne.n	800c3ba <__kernel_rem_pio2+0x2ea>
 800c332:	9002      	str	r0, [sp, #8]
 800c334:	2200      	movs	r2, #0
 800c336:	2300      	movs	r3, #0
 800c338:	4640      	mov	r0, r8
 800c33a:	4649      	mov	r1, r9
 800c33c:	f7f4 fc24 	bl	8000b88 <__aeabi_dcmpeq>
 800c340:	2800      	cmp	r0, #0
 800c342:	f000 80ba 	beq.w	800c4ba <__kernel_rem_pio2+0x3ea>
 800c346:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c34a:	2200      	movs	r2, #0
 800c34c:	9904      	ldr	r1, [sp, #16]
 800c34e:	428b      	cmp	r3, r1
 800c350:	da69      	bge.n	800c426 <__kernel_rem_pio2+0x356>
 800c352:	2a00      	cmp	r2, #0
 800c354:	f000 8084 	beq.w	800c460 <__kernel_rem_pio2+0x390>
 800c358:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c35c:	ab0e      	add	r3, sp, #56	@ 0x38
 800c35e:	f1ab 0b18 	sub.w	fp, fp, #24
 800c362:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0f6      	beq.n	800c358 <__kernel_rem_pio2+0x288>
 800c36a:	465a      	mov	r2, fp
 800c36c:	491e      	ldr	r1, [pc, #120]	@ (800c3e8 <__kernel_rem_pio2+0x318>)
 800c36e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c3ec <__kernel_rem_pio2+0x31c>
 800c372:	2000      	movs	r0, #0
 800c374:	f7ff fe30 	bl	800bfd8 <scalbn>
 800c378:	f10a 0301 	add.w	r3, sl, #1
 800c37c:	aa72      	add	r2, sp, #456	@ 0x1c8
 800c37e:	4604      	mov	r4, r0
 800c380:	460d      	mov	r5, r1
 800c382:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800c386:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c38a:	4656      	mov	r6, sl
 800c38c:	f04f 0800 	mov.w	r8, #0
 800c390:	2e00      	cmp	r6, #0
 800c392:	f280 80c8 	bge.w	800c526 <__kernel_rem_pio2+0x456>
 800c396:	4654      	mov	r4, sl
 800c398:	2c00      	cmp	r4, #0
 800c39a:	f2c0 80f6 	blt.w	800c58a <__kernel_rem_pio2+0x4ba>
 800c39e:	4b16      	ldr	r3, [pc, #88]	@ (800c3f8 <__kernel_rem_pio2+0x328>)
 800c3a0:	461f      	mov	r7, r3
 800c3a2:	ab72      	add	r3, sp, #456	@ 0x1c8
 800c3a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3a8:	9306      	str	r3, [sp, #24]
 800c3aa:	f04f 0800 	mov.w	r8, #0
 800c3ae:	f04f 0900 	mov.w	r9, #0
 800c3b2:	2600      	movs	r6, #0
 800c3b4:	ebaa 0504 	sub.w	r5, sl, r4
 800c3b8:	e0db      	b.n	800c572 <__kernel_rem_pio2+0x4a2>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	9302      	str	r3, [sp, #8]
 800c3be:	e753      	b.n	800c268 <__kernel_rem_pio2+0x198>
 800c3c0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c3c4:	b9d4      	cbnz	r4, 800c3fc <__kernel_rem_pio2+0x32c>
 800c3c6:	b123      	cbz	r3, 800c3d2 <__kernel_rem_pio2+0x302>
 800c3c8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c3cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	3201      	adds	r2, #1
 800c3d4:	461c      	mov	r4, r3
 800c3d6:	e74e      	b.n	800c276 <__kernel_rem_pio2+0x1a6>
	...
 800c3e0:	0801ff10 	.word	0x0801ff10
 800c3e4:	40200000 	.word	0x40200000
 800c3e8:	3ff00000 	.word	0x3ff00000
 800c3ec:	3e700000 	.word	0x3e700000
 800c3f0:	41700000 	.word	0x41700000
 800c3f4:	3fe00000 	.word	0x3fe00000
 800c3f8:	0801fed0 	.word	0x0801fed0
 800c3fc:	1acb      	subs	r3, r1, r3
 800c3fe:	e7e5      	b.n	800c3cc <__kernel_rem_pio2+0x2fc>
 800c400:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c404:	ab0e      	add	r3, sp, #56	@ 0x38
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c40e:	a90e      	add	r1, sp, #56	@ 0x38
 800c410:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c414:	e73d      	b.n	800c292 <__kernel_rem_pio2+0x1c2>
 800c416:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c41a:	ab0e      	add	r3, sp, #56	@ 0x38
 800c41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c424:	e7f3      	b.n	800c40e <__kernel_rem_pio2+0x33e>
 800c426:	a90e      	add	r1, sp, #56	@ 0x38
 800c428:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	430a      	orrs	r2, r1
 800c430:	e78c      	b.n	800c34c <__kernel_rem_pio2+0x27c>
 800c432:	3401      	adds	r4, #1
 800c434:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c438:	2a00      	cmp	r2, #0
 800c43a:	d0fa      	beq.n	800c432 <__kernel_rem_pio2+0x362>
 800c43c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c43e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c442:	eb0d 0503 	add.w	r5, sp, r3
 800c446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c448:	aa22      	add	r2, sp, #136	@ 0x88
 800c44a:	4453      	add	r3, sl
 800c44c:	f10a 0701 	add.w	r7, sl, #1
 800c450:	3d98      	subs	r5, #152	@ 0x98
 800c452:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c456:	4454      	add	r4, sl
 800c458:	42bc      	cmp	r4, r7
 800c45a:	da04      	bge.n	800c466 <__kernel_rem_pio2+0x396>
 800c45c:	46a2      	mov	sl, r4
 800c45e:	e6ae      	b.n	800c1be <__kernel_rem_pio2+0xee>
 800c460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c462:	2401      	movs	r4, #1
 800c464:	e7e6      	b.n	800c434 <__kernel_rem_pio2+0x364>
 800c466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c468:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c46c:	f7f4 f8ba 	bl	80005e4 <__aeabi_i2d>
 800c470:	ed9f 7bad 	vldr	d7, [pc, #692]	@ 800c728 <__kernel_rem_pio2+0x658>
 800c474:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c478:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c47c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c480:	46b2      	mov	sl, r6
 800c482:	f04f 0800 	mov.w	r8, #0
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	4598      	cmp	r8, r3
 800c48a:	dd05      	ble.n	800c498 <__kernel_rem_pio2+0x3c8>
 800c48c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c490:	3701      	adds	r7, #1
 800c492:	eca5 7b02 	vstmia	r5!, {d7}
 800c496:	e7df      	b.n	800c458 <__kernel_rem_pio2+0x388>
 800c498:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c49c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c4a0:	f7f4 f90a 	bl	80006b8 <__aeabi_dmul>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ac:	f7f3 ff4e 	bl	800034c <__adddf3>
 800c4b0:	f108 0801 	add.w	r8, r8, #1
 800c4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4b8:	e7e5      	b.n	800c486 <__kernel_rem_pio2+0x3b6>
 800c4ba:	f1cb 0200 	rsb	r2, fp, #0
 800c4be:	4640      	mov	r0, r8
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	f7ff fd89 	bl	800bfd8 <scalbn>
 800c4c6:	4b9a      	ldr	r3, [pc, #616]	@ (800c730 <__kernel_rem_pio2+0x660>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	f7f4 fb79 	bl	8000bc4 <__aeabi_dcmpge>
 800c4d2:	b300      	cbz	r0, 800c516 <__kernel_rem_pio2+0x446>
 800c4d4:	4b97      	ldr	r3, [pc, #604]	@ (800c734 <__kernel_rem_pio2+0x664>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f4 f8ec 	bl	80006b8 <__aeabi_dmul>
 800c4e0:	f7f4 fb84 	bl	8000bec <__aeabi_d2iz>
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	f7f4 f87d 	bl	80005e4 <__aeabi_i2d>
 800c4ea:	4b91      	ldr	r3, [pc, #580]	@ (800c730 <__kernel_rem_pio2+0x660>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f7f4 f8e3 	bl	80006b8 <__aeabi_dmul>
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f7f3 ff25 	bl	8000348 <__aeabi_dsub>
 800c4fe:	f7f4 fb75 	bl	8000bec <__aeabi_d2iz>
 800c502:	ab0e      	add	r3, sp, #56	@ 0x38
 800c504:	f10b 0b18 	add.w	fp, fp, #24
 800c508:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800c50c:	f10a 0a01 	add.w	sl, sl, #1
 800c510:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800c514:	e729      	b.n	800c36a <__kernel_rem_pio2+0x29a>
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 fb67 	bl	8000bec <__aeabi_d2iz>
 800c51e:	ab0e      	add	r3, sp, #56	@ 0x38
 800c520:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 800c524:	e721      	b.n	800c36a <__kernel_rem_pio2+0x29a>
 800c526:	ab0e      	add	r3, sp, #56	@ 0x38
 800c528:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c52c:	f7f4 f85a 	bl	80005e4 <__aeabi_i2d>
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	f7f4 f8c0 	bl	80006b8 <__aeabi_dmul>
 800c538:	4642      	mov	r2, r8
 800c53a:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c53e:	464b      	mov	r3, r9
 800c540:	4620      	mov	r0, r4
 800c542:	4629      	mov	r1, r5
 800c544:	f7f4 f8b8 	bl	80006b8 <__aeabi_dmul>
 800c548:	3e01      	subs	r6, #1
 800c54a:	4604      	mov	r4, r0
 800c54c:	460d      	mov	r5, r1
 800c54e:	e71f      	b.n	800c390 <__kernel_rem_pio2+0x2c0>
 800c550:	9906      	ldr	r1, [sp, #24]
 800c552:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c556:	9106      	str	r1, [sp, #24]
 800c558:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c55c:	f7f4 f8ac 	bl	80006b8 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f3 fef0 	bl	800034c <__adddf3>
 800c56c:	3601      	adds	r6, #1
 800c56e:	4680      	mov	r8, r0
 800c570:	4689      	mov	r9, r1
 800c572:	9b04      	ldr	r3, [sp, #16]
 800c574:	429e      	cmp	r6, r3
 800c576:	dc01      	bgt.n	800c57c <__kernel_rem_pio2+0x4ac>
 800c578:	42b5      	cmp	r5, r6
 800c57a:	dae9      	bge.n	800c550 <__kernel_rem_pio2+0x480>
 800c57c:	ab4a      	add	r3, sp, #296	@ 0x128
 800c57e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c582:	e9c5 8900 	strd	r8, r9, [r5]
 800c586:	3c01      	subs	r4, #1
 800c588:	e706      	b.n	800c398 <__kernel_rem_pio2+0x2c8>
 800c58a:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	dc0b      	bgt.n	800c5a8 <__kernel_rem_pio2+0x4d8>
 800c590:	2b00      	cmp	r3, #0
 800c592:	dc38      	bgt.n	800c606 <__kernel_rem_pio2+0x536>
 800c594:	d05a      	beq.n	800c64c <__kernel_rem_pio2+0x57c>
 800c596:	9b08      	ldr	r3, [sp, #32]
 800c598:	f003 0007 	and.w	r0, r3, #7
 800c59c:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
 800c5a0:	ecbd 8b02 	vpop	{d8}
 800c5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a8:	9ba6      	ldr	r3, [sp, #664]	@ 0x298
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d1f3      	bne.n	800c596 <__kernel_rem_pio2+0x4c6>
 800c5ae:	f50b 731a 	add.w	r3, fp, #616	@ 0x268
 800c5b2:	eb0d 0403 	add.w	r4, sp, r3
 800c5b6:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c5ba:	4625      	mov	r5, r4
 800c5bc:	46d0      	mov	r8, sl
 800c5be:	f1b8 0f00 	cmp.w	r8, #0
 800c5c2:	f1a5 0508 	sub.w	r5, r5, #8
 800c5c6:	dc67      	bgt.n	800c698 <__kernel_rem_pio2+0x5c8>
 800c5c8:	4655      	mov	r5, sl
 800c5ca:	2d01      	cmp	r5, #1
 800c5cc:	f1a4 0408 	sub.w	r4, r4, #8
 800c5d0:	f300 8083 	bgt.w	800c6da <__kernel_rem_pio2+0x60a>
 800c5d4:	ab4a      	add	r3, sp, #296	@ 0x128
 800c5d6:	eb03 040b 	add.w	r4, r3, fp
 800c5da:	2000      	movs	r0, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	f1ba 0f01 	cmp.w	sl, #1
 800c5e2:	f300 8098 	bgt.w	800c716 <__kernel_rem_pio2+0x646>
 800c5e6:	9b02      	ldr	r3, [sp, #8]
 800c5e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c5ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	@ 0x130
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 80a1 	bne.w	800c738 <__kernel_rem_pio2+0x668>
 800c5f6:	9b01      	ldr	r3, [sp, #4]
 800c5f8:	e9c3 7800 	strd	r7, r8, [r3]
 800c5fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c600:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c604:	e7c7      	b.n	800c596 <__kernel_rem_pio2+0x4c6>
 800c606:	ab4a      	add	r3, sp, #296	@ 0x128
 800c608:	449b      	add	fp, r3
 800c60a:	4654      	mov	r4, sl
 800c60c:	2000      	movs	r0, #0
 800c60e:	2100      	movs	r1, #0
 800c610:	2c00      	cmp	r4, #0
 800c612:	da32      	bge.n	800c67a <__kernel_rem_pio2+0x5aa>
 800c614:	9b02      	ldr	r3, [sp, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d035      	beq.n	800c686 <__kernel_rem_pio2+0x5b6>
 800c61a:	4602      	mov	r2, r0
 800c61c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c620:	9c01      	ldr	r4, [sp, #4]
 800c622:	e9c4 2300 	strd	r2, r3, [r4]
 800c626:	4602      	mov	r2, r0
 800c628:	460b      	mov	r3, r1
 800c62a:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	@ 0x128
 800c62e:	f7f3 fe8b 	bl	8000348 <__aeabi_dsub>
 800c632:	ad4c      	add	r5, sp, #304	@ 0x130
 800c634:	2401      	movs	r4, #1
 800c636:	45a2      	cmp	sl, r4
 800c638:	da28      	bge.n	800c68c <__kernel_rem_pio2+0x5bc>
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	b113      	cbz	r3, 800c644 <__kernel_rem_pio2+0x574>
 800c63e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c642:	4619      	mov	r1, r3
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c64a:	e7a4      	b.n	800c596 <__kernel_rem_pio2+0x4c6>
 800c64c:	ab4a      	add	r3, sp, #296	@ 0x128
 800c64e:	449b      	add	fp, r3
 800c650:	2000      	movs	r0, #0
 800c652:	2100      	movs	r1, #0
 800c654:	f1ba 0f00 	cmp.w	sl, #0
 800c658:	da08      	bge.n	800c66c <__kernel_rem_pio2+0x59c>
 800c65a:	9b02      	ldr	r3, [sp, #8]
 800c65c:	b113      	cbz	r3, 800c664 <__kernel_rem_pio2+0x594>
 800c65e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c662:	4619      	mov	r1, r3
 800c664:	9b01      	ldr	r3, [sp, #4]
 800c666:	e9c3 0100 	strd	r0, r1, [r3]
 800c66a:	e794      	b.n	800c596 <__kernel_rem_pio2+0x4c6>
 800c66c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c670:	f7f3 fe6c 	bl	800034c <__adddf3>
 800c674:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c678:	e7ec      	b.n	800c654 <__kernel_rem_pio2+0x584>
 800c67a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c67e:	f7f3 fe65 	bl	800034c <__adddf3>
 800c682:	3c01      	subs	r4, #1
 800c684:	e7c4      	b.n	800c610 <__kernel_rem_pio2+0x540>
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	e7c9      	b.n	800c620 <__kernel_rem_pio2+0x550>
 800c68c:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c690:	f7f3 fe5c 	bl	800034c <__adddf3>
 800c694:	3401      	adds	r4, #1
 800c696:	e7ce      	b.n	800c636 <__kernel_rem_pio2+0x566>
 800c698:	ed95 7b00 	vldr	d7, [r5]
 800c69c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c6a0:	ed95 7b02 	vldr	d7, [r5, #8]
 800c6a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6a8:	ec53 2b17 	vmov	r2, r3, d7
 800c6ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6b0:	f7f3 fe4c 	bl	800034c <__adddf3>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	460f      	mov	r7, r1
 800c6bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6c0:	f7f3 fe42 	bl	8000348 <__aeabi_dsub>
 800c6c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6c8:	f7f3 fe40 	bl	800034c <__adddf3>
 800c6cc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6d0:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c6d4:	e9c5 6700 	strd	r6, r7, [r5]
 800c6d8:	e771      	b.n	800c5be <__kernel_rem_pio2+0x4ee>
 800c6da:	ed94 7b02 	vldr	d7, [r4, #8]
 800c6de:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6e2:	ec53 2b17 	vmov	r2, r3, d7
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c6ee:	f7f3 fe2d 	bl	800034c <__adddf3>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	460f      	mov	r7, r1
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	4649      	mov	r1, r9
 800c6fe:	f7f3 fe23 	bl	8000348 <__aeabi_dsub>
 800c702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c706:	f7f3 fe21 	bl	800034c <__adddf3>
 800c70a:	3d01      	subs	r5, #1
 800c70c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c710:	e9c4 6700 	strd	r6, r7, [r4]
 800c714:	e759      	b.n	800c5ca <__kernel_rem_pio2+0x4fa>
 800c716:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c71a:	f7f3 fe17 	bl	800034c <__adddf3>
 800c71e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c722:	e75c      	b.n	800c5de <__kernel_rem_pio2+0x50e>
 800c724:	f3af 8000 	nop.w
	...
 800c730:	41700000 	.word	0x41700000
 800c734:	3e700000 	.word	0x3e700000
 800c738:	9b01      	ldr	r3, [sp, #4]
 800c73a:	9a01      	ldr	r2, [sp, #4]
 800c73c:	601f      	str	r7, [r3, #0]
 800c73e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c742:	605c      	str	r4, [r3, #4]
 800c744:	609d      	str	r5, [r3, #8]
 800c746:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c74a:	60d3      	str	r3, [r2, #12]
 800c74c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c750:	6110      	str	r0, [r2, #16]
 800c752:	6153      	str	r3, [r2, #20]
 800c754:	e71f      	b.n	800c596 <__kernel_rem_pio2+0x4c6>
 800c756:	bf00      	nop

0800c758 <_init>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr

0800c764 <_fini>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr
